// Copyright (c) 2023, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
//
// This file has been automatically generated. Please do not edit it manually.
// Generated by tests/ffi/generator/unwrap_typeddata_test_generator.dart.

#include <stdarg.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <sys/types.h>

#include <cmath>
#include <iostream>
#include <limits>

#if defined(_WIN32)
#define DART_EXPORT extern "C" __declspec(dllexport)
#else
#define DART_EXPORT                                                            \
  extern "C" __attribute__((visibility("default"))) __attribute((used))
#endif

namespace dart {

#define CHECK(X)                                                               \
  if (!(X)) {                                                                  \
    fprintf(stderr, "%s\n", "Check failed: " #X);                              \
    return 1;                                                                  \
  }

#define CHECK_EQ(X, Y) CHECK((X) == (Y))

// Works for positive, negative and zero.
#define CHECK_APPROX(EXPECTED, ACTUAL)                                         \
  CHECK(((EXPECTED * 0.99) <= (ACTUAL) && (EXPECTED * 1.01) >= (ACTUAL)) ||    \
        ((EXPECTED * 0.99) >= (ACTUAL) && (EXPECTED * 1.01) <= (ACTUAL)))

DART_EXPORT int8_t UnwrapInt8List(int8_t* data, size_t length) {
  int8_t result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << static_cast<int>(data[i]) << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT int8_t UnwrapInt8ListMany(int8_t* data0,
                                      int8_t* data1,
                                      int8_t* data2,
                                      int8_t* data3,
                                      int8_t* data4,
                                      int8_t* data5,
                                      int8_t* data6,
                                      int8_t* data7,
                                      int8_t* data8,
                                      int8_t* data9,
                                      int8_t* data10,
                                      int8_t* data11,
                                      int8_t* data12,
                                      int8_t* data13,
                                      int8_t* data14,
                                      int8_t* data15,
                                      int8_t* data16,
                                      int8_t* data17,
                                      int8_t* data18,
                                      int8_t* data19) {
  int8_t result = 0;
  std::cout << "data0[0] = " << static_cast<int>(data0[0]) << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << static_cast<int>(data1[0]) << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << static_cast<int>(data2[0]) << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << static_cast<int>(data3[0]) << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << static_cast<int>(data4[0]) << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << static_cast<int>(data5[0]) << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << static_cast<int>(data6[0]) << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << static_cast<int>(data7[0]) << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << static_cast<int>(data8[0]) << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << static_cast<int>(data9[0]) << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << static_cast<int>(data10[0]) << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << static_cast<int>(data11[0]) << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << static_cast<int>(data12[0]) << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << static_cast<int>(data13[0]) << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << static_cast<int>(data14[0]) << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << static_cast<int>(data15[0]) << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << static_cast<int>(data16[0]) << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << static_cast<int>(data17[0]) << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << static_cast<int>(data18[0]) << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << static_cast<int>(data19[0]) << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT int16_t UnwrapInt16List(int16_t* data, size_t length) {
  int16_t result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << data[i] << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT int16_t UnwrapInt16ListMany(int16_t* data0,
                                        int16_t* data1,
                                        int16_t* data2,
                                        int16_t* data3,
                                        int16_t* data4,
                                        int16_t* data5,
                                        int16_t* data6,
                                        int16_t* data7,
                                        int16_t* data8,
                                        int16_t* data9,
                                        int16_t* data10,
                                        int16_t* data11,
                                        int16_t* data12,
                                        int16_t* data13,
                                        int16_t* data14,
                                        int16_t* data15,
                                        int16_t* data16,
                                        int16_t* data17,
                                        int16_t* data18,
                                        int16_t* data19) {
  int16_t result = 0;
  std::cout << "data0[0] = " << data0[0] << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << data1[0] << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << data2[0] << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << data3[0] << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << data4[0] << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << data5[0] << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << data6[0] << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << data7[0] << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << data8[0] << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << data9[0] << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << data10[0] << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << data11[0] << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << data12[0] << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << data13[0] << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << data14[0] << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << data15[0] << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << data16[0] << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << data17[0] << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << data18[0] << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << data19[0] << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT int32_t UnwrapInt32List(int32_t* data, size_t length) {
  int32_t result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << data[i] << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT int32_t UnwrapInt32ListMany(int32_t* data0,
                                        int32_t* data1,
                                        int32_t* data2,
                                        int32_t* data3,
                                        int32_t* data4,
                                        int32_t* data5,
                                        int32_t* data6,
                                        int32_t* data7,
                                        int32_t* data8,
                                        int32_t* data9,
                                        int32_t* data10,
                                        int32_t* data11,
                                        int32_t* data12,
                                        int32_t* data13,
                                        int32_t* data14,
                                        int32_t* data15,
                                        int32_t* data16,
                                        int32_t* data17,
                                        int32_t* data18,
                                        int32_t* data19) {
  int32_t result = 0;
  std::cout << "data0[0] = " << data0[0] << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << data1[0] << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << data2[0] << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << data3[0] << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << data4[0] << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << data5[0] << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << data6[0] << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << data7[0] << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << data8[0] << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << data9[0] << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << data10[0] << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << data11[0] << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << data12[0] << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << data13[0] << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << data14[0] << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << data15[0] << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << data16[0] << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << data17[0] << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << data18[0] << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << data19[0] << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT int64_t UnwrapInt64List(int64_t* data, size_t length) {
  int64_t result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << data[i] << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT int64_t UnwrapInt64ListMany(int64_t* data0,
                                        int64_t* data1,
                                        int64_t* data2,
                                        int64_t* data3,
                                        int64_t* data4,
                                        int64_t* data5,
                                        int64_t* data6,
                                        int64_t* data7,
                                        int64_t* data8,
                                        int64_t* data9,
                                        int64_t* data10,
                                        int64_t* data11,
                                        int64_t* data12,
                                        int64_t* data13,
                                        int64_t* data14,
                                        int64_t* data15,
                                        int64_t* data16,
                                        int64_t* data17,
                                        int64_t* data18,
                                        int64_t* data19) {
  int64_t result = 0;
  std::cout << "data0[0] = " << data0[0] << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << data1[0] << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << data2[0] << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << data3[0] << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << data4[0] << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << data5[0] << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << data6[0] << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << data7[0] << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << data8[0] << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << data9[0] << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << data10[0] << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << data11[0] << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << data12[0] << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << data13[0] << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << data14[0] << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << data15[0] << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << data16[0] << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << data17[0] << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << data18[0] << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << data19[0] << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT uint8_t UnwrapUint8List(uint8_t* data, size_t length) {
  uint8_t result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << static_cast<int>(data[i]) << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT uint8_t UnwrapUint8ListMany(uint8_t* data0,
                                        uint8_t* data1,
                                        uint8_t* data2,
                                        uint8_t* data3,
                                        uint8_t* data4,
                                        uint8_t* data5,
                                        uint8_t* data6,
                                        uint8_t* data7,
                                        uint8_t* data8,
                                        uint8_t* data9,
                                        uint8_t* data10,
                                        uint8_t* data11,
                                        uint8_t* data12,
                                        uint8_t* data13,
                                        uint8_t* data14,
                                        uint8_t* data15,
                                        uint8_t* data16,
                                        uint8_t* data17,
                                        uint8_t* data18,
                                        uint8_t* data19) {
  uint8_t result = 0;
  std::cout << "data0[0] = " << static_cast<int>(data0[0]) << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << static_cast<int>(data1[0]) << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << static_cast<int>(data2[0]) << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << static_cast<int>(data3[0]) << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << static_cast<int>(data4[0]) << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << static_cast<int>(data5[0]) << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << static_cast<int>(data6[0]) << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << static_cast<int>(data7[0]) << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << static_cast<int>(data8[0]) << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << static_cast<int>(data9[0]) << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << static_cast<int>(data10[0]) << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << static_cast<int>(data11[0]) << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << static_cast<int>(data12[0]) << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << static_cast<int>(data13[0]) << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << static_cast<int>(data14[0]) << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << static_cast<int>(data15[0]) << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << static_cast<int>(data16[0]) << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << static_cast<int>(data17[0]) << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << static_cast<int>(data18[0]) << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << static_cast<int>(data19[0]) << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT uint16_t UnwrapUint16List(uint16_t* data, size_t length) {
  uint16_t result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << data[i] << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT uint16_t UnwrapUint16ListMany(uint16_t* data0,
                                          uint16_t* data1,
                                          uint16_t* data2,
                                          uint16_t* data3,
                                          uint16_t* data4,
                                          uint16_t* data5,
                                          uint16_t* data6,
                                          uint16_t* data7,
                                          uint16_t* data8,
                                          uint16_t* data9,
                                          uint16_t* data10,
                                          uint16_t* data11,
                                          uint16_t* data12,
                                          uint16_t* data13,
                                          uint16_t* data14,
                                          uint16_t* data15,
                                          uint16_t* data16,
                                          uint16_t* data17,
                                          uint16_t* data18,
                                          uint16_t* data19) {
  uint16_t result = 0;
  std::cout << "data0[0] = " << data0[0] << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << data1[0] << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << data2[0] << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << data3[0] << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << data4[0] << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << data5[0] << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << data6[0] << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << data7[0] << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << data8[0] << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << data9[0] << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << data10[0] << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << data11[0] << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << data12[0] << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << data13[0] << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << data14[0] << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << data15[0] << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << data16[0] << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << data17[0] << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << data18[0] << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << data19[0] << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT uint32_t UnwrapUint32List(uint32_t* data, size_t length) {
  uint32_t result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << data[i] << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT uint32_t UnwrapUint32ListMany(uint32_t* data0,
                                          uint32_t* data1,
                                          uint32_t* data2,
                                          uint32_t* data3,
                                          uint32_t* data4,
                                          uint32_t* data5,
                                          uint32_t* data6,
                                          uint32_t* data7,
                                          uint32_t* data8,
                                          uint32_t* data9,
                                          uint32_t* data10,
                                          uint32_t* data11,
                                          uint32_t* data12,
                                          uint32_t* data13,
                                          uint32_t* data14,
                                          uint32_t* data15,
                                          uint32_t* data16,
                                          uint32_t* data17,
                                          uint32_t* data18,
                                          uint32_t* data19) {
  uint32_t result = 0;
  std::cout << "data0[0] = " << data0[0] << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << data1[0] << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << data2[0] << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << data3[0] << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << data4[0] << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << data5[0] << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << data6[0] << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << data7[0] << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << data8[0] << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << data9[0] << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << data10[0] << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << data11[0] << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << data12[0] << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << data13[0] << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << data14[0] << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << data15[0] << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << data16[0] << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << data17[0] << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << data18[0] << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << data19[0] << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT uint64_t UnwrapUint64List(uint64_t* data, size_t length) {
  uint64_t result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << data[i] << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT uint64_t UnwrapUint64ListMany(uint64_t* data0,
                                          uint64_t* data1,
                                          uint64_t* data2,
                                          uint64_t* data3,
                                          uint64_t* data4,
                                          uint64_t* data5,
                                          uint64_t* data6,
                                          uint64_t* data7,
                                          uint64_t* data8,
                                          uint64_t* data9,
                                          uint64_t* data10,
                                          uint64_t* data11,
                                          uint64_t* data12,
                                          uint64_t* data13,
                                          uint64_t* data14,
                                          uint64_t* data15,
                                          uint64_t* data16,
                                          uint64_t* data17,
                                          uint64_t* data18,
                                          uint64_t* data19) {
  uint64_t result = 0;
  std::cout << "data0[0] = " << data0[0] << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << data1[0] << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << data2[0] << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << data3[0] << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << data4[0] << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << data5[0] << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << data6[0] << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << data7[0] << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << data8[0] << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << data9[0] << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << data10[0] << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << data11[0] << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << data12[0] << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << data13[0] << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << data14[0] << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << data15[0] << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << data16[0] << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << data17[0] << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << data18[0] << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << data19[0] << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT float UnwrapFloat32List(float* data, size_t length) {
  float result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << data[i] << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT float UnwrapFloat32ListMany(float* data0,
                                        float* data1,
                                        float* data2,
                                        float* data3,
                                        float* data4,
                                        float* data5,
                                        float* data6,
                                        float* data7,
                                        float* data8,
                                        float* data9,
                                        float* data10,
                                        float* data11,
                                        float* data12,
                                        float* data13,
                                        float* data14,
                                        float* data15,
                                        float* data16,
                                        float* data17,
                                        float* data18,
                                        float* data19) {
  float result = 0;
  std::cout << "data0[0] = " << data0[0] << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << data1[0] << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << data2[0] << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << data3[0] << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << data4[0] << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << data5[0] << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << data6[0] << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << data7[0] << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << data8[0] << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << data9[0] << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << data10[0] << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << data11[0] << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << data12[0] << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << data13[0] << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << data14[0] << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << data15[0] << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << data16[0] << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << data17[0] << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << data18[0] << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << data19[0] << "\n";
  result += data19[0];
  return result;
}

DART_EXPORT double UnwrapFloat64List(double* data, size_t length) {
  double result = 0;
  for (size_t i = 0; i < length; i++) {
    std::cout << "data[" << i << "] = " << data[i] << "\n";
    result += data[i];
  }
  return result;
}

DART_EXPORT double UnwrapFloat64ListMany(double* data0,
                                         double* data1,
                                         double* data2,
                                         double* data3,
                                         double* data4,
                                         double* data5,
                                         double* data6,
                                         double* data7,
                                         double* data8,
                                         double* data9,
                                         double* data10,
                                         double* data11,
                                         double* data12,
                                         double* data13,
                                         double* data14,
                                         double* data15,
                                         double* data16,
                                         double* data17,
                                         double* data18,
                                         double* data19) {
  double result = 0;
  std::cout << "data0[0] = " << data0[0] << "\n";
  result += data0[0];
  std::cout << "data1[0] = " << data1[0] << "\n";
  result += data1[0];
  std::cout << "data2[0] = " << data2[0] << "\n";
  result += data2[0];
  std::cout << "data3[0] = " << data3[0] << "\n";
  result += data3[0];
  std::cout << "data4[0] = " << data4[0] << "\n";
  result += data4[0];
  std::cout << "data5[0] = " << data5[0] << "\n";
  result += data5[0];
  std::cout << "data6[0] = " << data6[0] << "\n";
  result += data6[0];
  std::cout << "data7[0] = " << data7[0] << "\n";
  result += data7[0];
  std::cout << "data8[0] = " << data8[0] << "\n";
  result += data8[0];
  std::cout << "data9[0] = " << data9[0] << "\n";
  result += data9[0];
  std::cout << "data10[0] = " << data10[0] << "\n";
  result += data10[0];
  std::cout << "data11[0] = " << data11[0] << "\n";
  result += data11[0];
  std::cout << "data12[0] = " << data12[0] << "\n";
  result += data12[0];
  std::cout << "data13[0] = " << data13[0] << "\n";
  result += data13[0];
  std::cout << "data14[0] = " << data14[0] << "\n";
  result += data14[0];
  std::cout << "data15[0] = " << data15[0] << "\n";
  result += data15[0];
  std::cout << "data16[0] = " << data16[0] << "\n";
  result += data16[0];
  std::cout << "data17[0] = " << data17[0] << "\n";
  result += data17[0];
  std::cout << "data18[0] = " << data18[0] << "\n";
  result += data18[0];
  std::cout << "data19[0] = " << data19[0] << "\n";
  result += data19[0];
  return result;
}

}  // namespace dart
