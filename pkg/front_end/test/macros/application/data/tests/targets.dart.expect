@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
library;
//
// Problems in library:
//
// org-dartlang-test:///a/b/c/main.dart:44:2: Error: The macro can only be applied to fields, functions, methods or variables.
// @VariableAndFunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:43:2: Error: The macro can only be applied to fields or methods.
// @FieldAndMethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:42:2: Error: The macro can only be applied to typedefs.
// @TypeAliasDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:41:2: Error: The macro can only be applied to typedefs.
// @TypeAliasTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:40:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:39:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:38:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:37:2: Error: The macro can only be applied to extensions.
// @ExtensionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:36:2: Error: The macro can only be applied to extensions.
// @ExtensionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:35:2: Error: The macro can only be applied to extensions.
// @ExtensionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:34:2: Error: The macro can only be applied to mixin declarations.
// @MixinDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:33:2: Error: The macro can only be applied to mixin declarations.
// @MixinDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:32:2: Error: The macro can only be applied to mixin declarations.
// @MixinTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:31:2: Error: The macro can only be applied to constructors.
// @ConstructorDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:30:2: Error: The macro can only be applied to constructors.
// @ConstructorDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:29:2: Error: The macro can only be applied to constructors.
// @ConstructorTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:28:2: Error: The macro can only be applied to methods.
// @MethodDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:27:2: Error: The macro can only be applied to methods.
// @MethodDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:26:2: Error: The macro can only be applied to methods.
// @MethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:25:2: Error: The macro can only be applied to fields.
// @FieldDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:24:2: Error: The macro can only be applied to fields.
// @FieldDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:23:2: Error: The macro can only be applied to fields.
// @FieldTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:22:2: Error: The macro can only be applied to enum values.
// @EnumValueDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:21:2: Error: The macro can only be applied to enum values.
// @EnumValueDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:20:2: Error: The macro can only be applied to enum values.
// @EnumValueTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:19:2: Error: The macro can only be applied to enums.
// @EnumDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:18:2: Error: The macro can only be applied to enums.
// @EnumDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:17:2: Error: The macro can only be applied to enums.
// @EnumTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:16:2: Error: The macro can only be applied to classes.
// @ClassDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:15:2: Error: The macro can only be applied to classes.
// @ClassDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:14:2: Error: The macro can only be applied to classes.
// @ClassTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:13:2: Error: The macro can only be applied to fields or variables.
// @VariableDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:12:2: Error: The macro can only be applied to fields or variables.
// @VariableDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:11:2: Error: The macro can only be applied to fields or variables.
// @VariableTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:10:2: Error: The macro can only be applied to functions or methods.
// @FunctionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:9:2: Error: The macro can only be applied to functions or methods.
// @FunctionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:8:2: Error: The macro can only be applied to functions or methods.
// @FunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:89:2: Error: The macro can only be applied to fields, functions, methods or variables.
// @VariableAndFunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:88:2: Error: The macro can only be applied to fields or methods.
// @FieldAndMethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:87:2: Error: The macro can only be applied to typedefs.
// @TypeAliasDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:86:2: Error: The macro can only be applied to typedefs.
// @TypeAliasTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:85:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:84:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:83:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:82:2: Error: The macro can only be applied to extensions.
// @ExtensionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:81:2: Error: The macro can only be applied to extensions.
// @ExtensionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:80:2: Error: The macro can only be applied to extensions.
// @ExtensionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:79:2: Error: The macro can only be applied to mixin declarations.
// @MixinDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:78:2: Error: The macro can only be applied to mixin declarations.
// @MixinDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:77:2: Error: The macro can only be applied to mixin declarations.
// @MixinTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:76:2: Error: The macro can only be applied to constructors.
// @ConstructorDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:75:2: Error: The macro can only be applied to constructors.
// @ConstructorDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:74:2: Error: The macro can only be applied to constructors.
// @ConstructorTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:73:2: Error: The macro can only be applied to methods.
// @MethodDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:72:2: Error: The macro can only be applied to methods.
// @MethodDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:71:2: Error: The macro can only be applied to methods.
// @MethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:70:2: Error: The macro can only be applied to fields.
// @FieldDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:69:2: Error: The macro can only be applied to fields.
// @FieldDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:68:2: Error: The macro can only be applied to fields.
// @FieldTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:67:2: Error: The macro can only be applied to enum values.
// @EnumValueDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:66:2: Error: The macro can only be applied to enum values.
// @EnumValueDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:65:2: Error: The macro can only be applied to enum values.
// @EnumValueTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:64:2: Error: The macro can only be applied to enums.
// @EnumDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:63:2: Error: The macro can only be applied to enums.
// @EnumDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:62:2: Error: The macro can only be applied to enums.
// @EnumTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:58:2: Error: The macro can only be applied to fields or variables.
// @VariableDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:57:2: Error: The macro can only be applied to fields or variables.
// @VariableDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:56:2: Error: The macro can only be applied to fields or variables.
// @VariableTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:55:2: Error: The macro can only be applied to functions or methods.
// @FunctionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:54:2: Error: The macro can only be applied to functions or methods.
// @FunctionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:53:2: Error: The macro can only be applied to functions or methods.
// @FunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:52:2: Error: The macro can only be applied to libraries.
// @LibraryDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:51:2: Error: The macro can only be applied to libraries.
// @LibraryDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:50:2: Error: The macro can only be applied to libraries.
// @LibraryTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:128:4: Error: The macro can only be applied to typedefs.
//   @TypeAliasDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:127:4: Error: The macro can only be applied to typedefs.
//   @TypeAliasTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:126:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:125:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:124:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:123:4: Error: The macro can only be applied to extensions.
//   @ExtensionDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:122:4: Error: The macro can only be applied to extensions.
//   @ExtensionDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:121:4: Error: The macro can only be applied to extensions.
//   @ExtensionTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:120:4: Error: The macro can only be applied to mixin declarations.
//   @MixinDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:119:4: Error: The macro can only be applied to mixin declarations.
//   @MixinDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:118:4: Error: The macro can only be applied to mixin declarations.
//   @MixinTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:117:4: Error: The macro can only be applied to constructors.
//   @ConstructorDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:116:4: Error: The macro can only be applied to constructors.
//   @ConstructorDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:115:4: Error: The macro can only be applied to constructors.
//   @ConstructorTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:114:4: Error: The macro can only be applied to methods.
//   @MethodDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:113:4: Error: The macro can only be applied to methods.
//   @MethodDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:112:4: Error: The macro can only be applied to methods.
//   @MethodTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:108:4: Error: The macro can only be applied to enum values.
//   @EnumValueDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:107:4: Error: The macro can only be applied to enum values.
//   @EnumValueDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:106:4: Error: The macro can only be applied to enum values.
//   @EnumValueTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:105:4: Error: The macro can only be applied to enums.
//   @EnumDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:104:4: Error: The macro can only be applied to enums.
//   @EnumDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:103:4: Error: The macro can only be applied to enums.
//   @EnumTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:102:4: Error: The macro can only be applied to classes.
//   @ClassDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:101:4: Error: The macro can only be applied to classes.
//   @ClassDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:100:4: Error: The macro can only be applied to classes.
//   @ClassTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:96:4: Error: The macro can only be applied to functions or methods.
//   @FunctionDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:95:4: Error: The macro can only be applied to functions or methods.
//   @FunctionDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:94:4: Error: The macro can only be applied to functions or methods.
//   @FunctionTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:93:4: Error: The macro can only be applied to libraries.
//   @LibraryDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:92:4: Error: The macro can only be applied to libraries.
//   @LibraryDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:91:4: Error: The macro can only be applied to libraries.
//   @LibraryTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:212:4: Error: The macro can only be applied to typedefs.
//   @TypeAliasDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:211:4: Error: The macro can only be applied to typedefs.
//   @TypeAliasTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:210:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:209:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:208:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:207:4: Error: The macro can only be applied to extensions.
//   @ExtensionDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:206:4: Error: The macro can only be applied to extensions.
//   @ExtensionDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:205:4: Error: The macro can only be applied to extensions.
//   @ExtensionTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:204:4: Error: The macro can only be applied to mixin declarations.
//   @MixinDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:203:4: Error: The macro can only be applied to mixin declarations.
//   @MixinDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:202:4: Error: The macro can only be applied to mixin declarations.
//   @MixinTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:201:4: Error: The macro can only be applied to constructors.
//   @ConstructorDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:200:4: Error: The macro can only be applied to constructors.
//   @ConstructorDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:199:4: Error: The macro can only be applied to constructors.
//   @ConstructorTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:195:4: Error: The macro can only be applied to fields.
//   @FieldDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:194:4: Error: The macro can only be applied to fields.
//   @FieldDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:193:4: Error: The macro can only be applied to fields.
//   @FieldTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:192:4: Error: The macro can only be applied to enum values.
//   @EnumValueDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:191:4: Error: The macro can only be applied to enum values.
//   @EnumValueDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:190:4: Error: The macro can only be applied to enum values.
//   @EnumValueTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:189:4: Error: The macro can only be applied to enums.
//   @EnumDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:188:4: Error: The macro can only be applied to enums.
//   @EnumDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:187:4: Error: The macro can only be applied to enums.
//   @EnumTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:186:4: Error: The macro can only be applied to classes.
//   @ClassDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:185:4: Error: The macro can only be applied to classes.
//   @ClassDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:184:4: Error: The macro can only be applied to classes.
//   @ClassTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:183:4: Error: The macro can only be applied to fields or variables.
//   @VariableDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:182:4: Error: The macro can only be applied to fields or variables.
//   @VariableDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:181:4: Error: The macro can only be applied to fields or variables.
//   @VariableTypesMacro() // Ok
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:177:4: Error: The macro can only be applied to libraries.
//   @LibraryDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:176:4: Error: The macro can only be applied to libraries.
//   @LibraryDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:175:4: Error: The macro can only be applied to libraries.
//   @LibraryTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:172:4: Error: The macro can only be applied to fields, functions, methods or variables.
//   @VariableAndFunctionTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:171:4: Error: The macro can only be applied to fields or methods.
//   @FieldAndMethodTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:170:4: Error: The macro can only be applied to typedefs.
//   @TypeAliasDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:169:4: Error: The macro can only be applied to typedefs.
//   @TypeAliasTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:168:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:167:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:166:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:165:4: Error: The macro can only be applied to extensions.
//   @ExtensionDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:164:4: Error: The macro can only be applied to extensions.
//   @ExtensionDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:163:4: Error: The macro can only be applied to extensions.
//   @ExtensionTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:162:4: Error: The macro can only be applied to mixin declarations.
//   @MixinDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:161:4: Error: The macro can only be applied to mixin declarations.
//   @MixinDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:160:4: Error: The macro can only be applied to mixin declarations.
//   @MixinTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:156:4: Error: The macro can only be applied to methods.
//   @MethodDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:155:4: Error: The macro can only be applied to methods.
//   @MethodDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:154:4: Error: The macro can only be applied to methods.
//   @MethodTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:153:4: Error: The macro can only be applied to fields.
//   @FieldDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:152:4: Error: The macro can only be applied to fields.
//   @FieldDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:151:4: Error: The macro can only be applied to fields.
//   @FieldTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:150:4: Error: The macro can only be applied to enum values.
//   @EnumValueDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:149:4: Error: The macro can only be applied to enum values.
//   @EnumValueDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:148:4: Error: The macro can only be applied to enum values.
//   @EnumValueTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:147:4: Error: The macro can only be applied to enums.
//   @EnumDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:146:4: Error: The macro can only be applied to enums.
//   @EnumDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:145:4: Error: The macro can only be applied to enums.
//   @EnumTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:144:4: Error: The macro can only be applied to classes.
//   @ClassDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:143:4: Error: The macro can only be applied to classes.
//   @ClassDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:142:4: Error: The macro can only be applied to classes.
//   @ClassTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:141:4: Error: The macro can only be applied to fields or variables.
//   @VariableDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:140:4: Error: The macro can only be applied to fields or variables.
//   @VariableDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:139:4: Error: The macro can only be applied to fields or variables.
//   @VariableTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:138:4: Error: The macro can only be applied to functions or methods.
//   @FunctionDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:137:4: Error: The macro can only be applied to functions or methods.
//   @FunctionDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:136:4: Error: The macro can only be applied to functions or methods.
//   @FunctionTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:135:4: Error: The macro can only be applied to libraries.
//   @LibraryDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:134:4: Error: The macro can only be applied to libraries.
//   @LibraryDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:133:4: Error: The macro can only be applied to libraries.
//   @LibraryTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:341:2: Error: The macro can only be applied to fields, functions, methods or variables.
// @VariableAndFunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:340:2: Error: The macro can only be applied to fields or methods.
// @FieldAndMethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:339:2: Error: The macro can only be applied to typedefs.
// @TypeAliasDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:338:2: Error: The macro can only be applied to typedefs.
// @TypeAliasTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:337:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:336:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:335:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:334:2: Error: The macro can only be applied to extensions.
// @ExtensionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:333:2: Error: The macro can only be applied to extensions.
// @ExtensionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:332:2: Error: The macro can only be applied to extensions.
// @ExtensionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:331:2: Error: The macro can only be applied to mixin declarations.
// @MixinDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:330:2: Error: The macro can only be applied to mixin declarations.
// @MixinDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:329:2: Error: The macro can only be applied to mixin declarations.
// @MixinTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:328:2: Error: The macro can only be applied to constructors.
// @ConstructorDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:327:2: Error: The macro can only be applied to constructors.
// @ConstructorDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:326:2: Error: The macro can only be applied to constructors.
// @ConstructorTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:325:2: Error: The macro can only be applied to methods.
// @MethodDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:324:2: Error: The macro can only be applied to methods.
// @MethodDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:323:2: Error: The macro can only be applied to methods.
// @MethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:322:2: Error: The macro can only be applied to fields.
// @FieldDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:321:2: Error: The macro can only be applied to fields.
// @FieldDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:320:2: Error: The macro can only be applied to fields.
// @FieldTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:319:2: Error: The macro can only be applied to enum values.
// @EnumValueDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:318:2: Error: The macro can only be applied to enum values.
// @EnumValueDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:317:2: Error: The macro can only be applied to enum values.
// @EnumValueTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:316:2: Error: The macro can only be applied to enums.
// @EnumDefinitionMacro() // Ok
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:315:2: Error: The macro can only be applied to enums.
// @EnumDeclarationsMacro() // Ok
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:314:2: Error: The macro can only be applied to enums.
// @EnumTypesMacro() // Ok
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:310:2: Error: The macro can only be applied to fields or variables.
// @VariableDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:309:2: Error: The macro can only be applied to fields or variables.
// @VariableDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:308:2: Error: The macro can only be applied to fields or variables.
// @VariableTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:307:2: Error: The macro can only be applied to functions or methods.
// @FunctionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:306:2: Error: The macro can only be applied to functions or methods.
// @FunctionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:305:2: Error: The macro can only be applied to functions or methods.
// @FunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:304:2: Error: The macro can only be applied to libraries.
// @LibraryDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:303:2: Error: The macro can only be applied to libraries.
// @LibraryDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:302:2: Error: The macro can only be applied to libraries.
// @LibraryTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:380:4: Error: The macro can only be applied to typedefs.
//   @TypeAliasDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:379:4: Error: The macro can only be applied to typedefs.
//   @TypeAliasTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:378:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:377:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:376:4: Error: The macro can only be applied to extension types.
//   @ExtensionTypeTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:375:4: Error: The macro can only be applied to extensions.
//   @ExtensionDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:374:4: Error: The macro can only be applied to extensions.
//   @ExtensionDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:373:4: Error: The macro can only be applied to extensions.
//   @ExtensionTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:372:4: Error: The macro can only be applied to mixin declarations.
//   @MixinDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:371:4: Error: The macro can only be applied to mixin declarations.
//   @MixinDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:370:4: Error: The macro can only be applied to mixin declarations.
//   @MixinTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:369:4: Error: The macro can only be applied to constructors.
//   @ConstructorDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:368:4: Error: The macro can only be applied to constructors.
//   @ConstructorDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:367:4: Error: The macro can only be applied to constructors.
//   @ConstructorTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:366:4: Error: The macro can only be applied to methods.
//   @MethodDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:365:4: Error: The macro can only be applied to methods.
//   @MethodDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:364:4: Error: The macro can only be applied to methods.
//   @MethodTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:360:4: Error: The macro can only be applied to enum values.
//   @EnumValueDefinitionMacro() // Ok
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:359:4: Error: The macro can only be applied to enum values.
//   @EnumValueDeclarationsMacro() // Ok
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:358:4: Error: The macro can only be applied to enum values.
//   @EnumValueTypesMacro() // Ok
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:357:4: Error: The macro can only be applied to enums.
//   @EnumDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:356:4: Error: The macro can only be applied to enums.
//   @EnumDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:355:4: Error: The macro can only be applied to enums.
//   @EnumTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:354:4: Error: The macro can only be applied to classes.
//   @ClassDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:353:4: Error: The macro can only be applied to classes.
//   @ClassDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:352:4: Error: The macro can only be applied to classes.
//   @ClassTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:348:4: Error: The macro can only be applied to functions or methods.
//   @FunctionDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:347:4: Error: The macro can only be applied to functions or methods.
//   @FunctionDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:346:4: Error: The macro can only be applied to functions or methods.
//   @FunctionTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:345:4: Error: The macro can only be applied to libraries.
//   @LibraryDefinitionMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:344:4: Error: The macro can only be applied to libraries.
//   @LibraryDeclarationsMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:343:4: Error: The macro can only be applied to libraries.
//   @LibraryTypesMacro() // Error
//    ^
//
// org-dartlang-test:///a/b/c/main.dart:423:2: Error: The macro can only be applied to fields, functions, methods or variables.
// @VariableAndFunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:422:2: Error: The macro can only be applied to fields or methods.
// @FieldAndMethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:421:2: Error: The macro can only be applied to typedefs.
// @TypeAliasDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:420:2: Error: The macro can only be applied to typedefs.
// @TypeAliasTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:419:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:418:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:417:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:416:2: Error: The macro can only be applied to extensions.
// @ExtensionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:415:2: Error: The macro can only be applied to extensions.
// @ExtensionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:414:2: Error: The macro can only be applied to extensions.
// @ExtensionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:410:2: Error: The macro can only be applied to constructors.
// @ConstructorDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:409:2: Error: The macro can only be applied to constructors.
// @ConstructorDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:408:2: Error: The macro can only be applied to constructors.
// @ConstructorTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:407:2: Error: The macro can only be applied to methods.
// @MethodDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:406:2: Error: The macro can only be applied to methods.
// @MethodDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:405:2: Error: The macro can only be applied to methods.
// @MethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:404:2: Error: The macro can only be applied to fields.
// @FieldDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:403:2: Error: The macro can only be applied to fields.
// @FieldDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:402:2: Error: The macro can only be applied to fields.
// @FieldTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:401:2: Error: The macro can only be applied to enum values.
// @EnumValueDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:400:2: Error: The macro can only be applied to enum values.
// @EnumValueDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:399:2: Error: The macro can only be applied to enum values.
// @EnumValueTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:398:2: Error: The macro can only be applied to enums.
// @EnumDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:397:2: Error: The macro can only be applied to enums.
// @EnumDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:396:2: Error: The macro can only be applied to enums.
// @EnumTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:395:2: Error: The macro can only be applied to classes.
// @ClassDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:394:2: Error: The macro can only be applied to classes.
// @ClassDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:393:2: Error: The macro can only be applied to classes.
// @ClassTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:392:2: Error: The macro can only be applied to fields or variables.
// @VariableDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:391:2: Error: The macro can only be applied to fields or variables.
// @VariableDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:390:2: Error: The macro can only be applied to fields or variables.
// @VariableTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:389:2: Error: The macro can only be applied to functions or methods.
// @FunctionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:388:2: Error: The macro can only be applied to functions or methods.
// @FunctionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:387:2: Error: The macro can only be applied to functions or methods.
// @FunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:386:2: Error: The macro can only be applied to libraries.
// @LibraryDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:385:2: Error: The macro can only be applied to libraries.
// @LibraryDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:384:2: Error: The macro can only be applied to libraries.
// @LibraryTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:507:2: Error: The macro can only be applied to fields, functions, methods or variables.
// @VariableAndFunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:506:2: Error: The macro can only be applied to fields or methods.
// @FieldAndMethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:505:2: Error: The macro can only be applied to typedefs.
// @TypeAliasDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:504:2: Error: The macro can only be applied to typedefs.
// @TypeAliasTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:500:2: Error: The macro can only be applied to extensions.
// @ExtensionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:499:2: Error: The macro can only be applied to extensions.
// @ExtensionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:498:2: Error: The macro can only be applied to extensions.
// @ExtensionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:497:2: Error: The macro can only be applied to mixin declarations.
// @MixinDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:496:2: Error: The macro can only be applied to mixin declarations.
// @MixinDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:495:2: Error: The macro can only be applied to mixin declarations.
// @MixinTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:494:2: Error: The macro can only be applied to constructors.
// @ConstructorDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:493:2: Error: The macro can only be applied to constructors.
// @ConstructorDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:492:2: Error: The macro can only be applied to constructors.
// @ConstructorTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:491:2: Error: The macro can only be applied to methods.
// @MethodDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:490:2: Error: The macro can only be applied to methods.
// @MethodDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:489:2: Error: The macro can only be applied to methods.
// @MethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:488:2: Error: The macro can only be applied to fields.
// @FieldDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:487:2: Error: The macro can only be applied to fields.
// @FieldDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:486:2: Error: The macro can only be applied to fields.
// @FieldTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:485:2: Error: The macro can only be applied to enum values.
// @EnumValueDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:484:2: Error: The macro can only be applied to enum values.
// @EnumValueDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:483:2: Error: The macro can only be applied to enum values.
// @EnumValueTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:482:2: Error: The macro can only be applied to enums.
// @EnumDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:481:2: Error: The macro can only be applied to enums.
// @EnumDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:480:2: Error: The macro can only be applied to enums.
// @EnumTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:479:2: Error: The macro can only be applied to classes.
// @ClassDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:478:2: Error: The macro can only be applied to classes.
// @ClassDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:477:2: Error: The macro can only be applied to classes.
// @ClassTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:476:2: Error: The macro can only be applied to fields or variables.
// @VariableDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:475:2: Error: The macro can only be applied to fields or variables.
// @VariableDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:474:2: Error: The macro can only be applied to fields or variables.
// @VariableTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:473:2: Error: The macro can only be applied to functions or methods.
// @FunctionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:472:2: Error: The macro can only be applied to functions or methods.
// @FunctionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:471:2: Error: The macro can only be applied to functions or methods.
// @FunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:470:2: Error: The macro can only be applied to libraries.
// @LibraryDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:469:2: Error: The macro can only be applied to libraries.
// @LibraryDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:468:2: Error: The macro can only be applied to libraries.
// @LibraryTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:256:2: Error: The macro can only be applied to fields or methods.
// @FieldAndMethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:255:2: Error: The macro can only be applied to typedefs.
// @TypeAliasDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:254:2: Error: The macro can only be applied to typedefs.
// @TypeAliasTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:253:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:252:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:251:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:250:2: Error: The macro can only be applied to extensions.
// @ExtensionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:249:2: Error: The macro can only be applied to extensions.
// @ExtensionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:248:2: Error: The macro can only be applied to extensions.
// @ExtensionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:247:2: Error: The macro can only be applied to mixin declarations.
// @MixinDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:246:2: Error: The macro can only be applied to mixin declarations.
// @MixinDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:245:2: Error: The macro can only be applied to mixin declarations.
// @MixinTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:244:2: Error: The macro can only be applied to constructors.
// @ConstructorDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:243:2: Error: The macro can only be applied to constructors.
// @ConstructorDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:242:2: Error: The macro can only be applied to constructors.
// @ConstructorTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:241:2: Error: The macro can only be applied to methods.
// @MethodDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:240:2: Error: The macro can only be applied to methods.
// @MethodDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:239:2: Error: The macro can only be applied to methods.
// @MethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:238:2: Error: The macro can only be applied to fields.
// @FieldDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:237:2: Error: The macro can only be applied to fields.
// @FieldDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:236:2: Error: The macro can only be applied to fields.
// @FieldTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:235:2: Error: The macro can only be applied to enum values.
// @EnumValueDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:234:2: Error: The macro can only be applied to enum values.
// @EnumValueDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:233:2: Error: The macro can only be applied to enum values.
// @EnumValueTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:232:2: Error: The macro can only be applied to enums.
// @EnumDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:231:2: Error: The macro can only be applied to enums.
// @EnumDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:230:2: Error: The macro can only be applied to enums.
// @EnumTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:229:2: Error: The macro can only be applied to classes.
// @ClassDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:228:2: Error: The macro can only be applied to classes.
// @ClassDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:227:2: Error: The macro can only be applied to classes.
// @ClassTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:226:2: Error: The macro can only be applied to fields or variables.
// @VariableDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:225:2: Error: The macro can only be applied to fields or variables.
// @VariableDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:224:2: Error: The macro can only be applied to fields or variables.
// @VariableTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:220:2: Error: The macro can only be applied to libraries.
// @LibraryDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:219:2: Error: The macro can only be applied to libraries.
// @LibraryDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:218:2: Error: The macro can only be applied to libraries.
// @LibraryTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:298:2: Error: The macro can only be applied to fields or methods.
// @FieldAndMethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:297:2: Error: The macro can only be applied to typedefs.
// @TypeAliasDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:296:2: Error: The macro can only be applied to typedefs.
// @TypeAliasTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:295:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:294:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:293:2: Error: The macro can only be applied to extension types.
// @ExtensionTypeTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:292:2: Error: The macro can only be applied to extensions.
// @ExtensionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:291:2: Error: The macro can only be applied to extensions.
// @ExtensionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:290:2: Error: The macro can only be applied to extensions.
// @ExtensionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:289:2: Error: The macro can only be applied to mixin declarations.
// @MixinDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:288:2: Error: The macro can only be applied to mixin declarations.
// @MixinDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:287:2: Error: The macro can only be applied to mixin declarations.
// @MixinTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:286:2: Error: The macro can only be applied to constructors.
// @ConstructorDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:285:2: Error: The macro can only be applied to constructors.
// @ConstructorDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:284:2: Error: The macro can only be applied to constructors.
// @ConstructorTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:283:2: Error: The macro can only be applied to methods.
// @MethodDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:282:2: Error: The macro can only be applied to methods.
// @MethodDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:281:2: Error: The macro can only be applied to methods.
// @MethodTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:280:2: Error: The macro can only be applied to fields.
// @FieldDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:279:2: Error: The macro can only be applied to fields.
// @FieldDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:278:2: Error: The macro can only be applied to fields.
// @FieldTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:277:2: Error: The macro can only be applied to enum values.
// @EnumValueDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:276:2: Error: The macro can only be applied to enum values.
// @EnumValueDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:275:2: Error: The macro can only be applied to enum values.
// @EnumValueTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:274:2: Error: The macro can only be applied to enums.
// @EnumDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:273:2: Error: The macro can only be applied to enums.
// @EnumDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:272:2: Error: The macro can only be applied to enums.
// @EnumTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:271:2: Error: The macro can only be applied to classes.
// @ClassDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:270:2: Error: The macro can only be applied to classes.
// @ClassDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:269:2: Error: The macro can only be applied to classes.
// @ClassTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:265:2: Error: The macro can only be applied to functions or methods.
// @FunctionDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:264:2: Error: The macro can only be applied to functions or methods.
// @FunctionDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:263:2: Error: The macro can only be applied to functions or methods.
// @FunctionTypesMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:262:2: Error: The macro can only be applied to libraries.
// @LibraryDefinitionMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:261:2: Error: The macro can only be applied to libraries.
// @LibraryDeclarationsMacro() // Error
//  ^
//
// org-dartlang-test:///a/b/c/main.dart:260:2: Error: The macro can only be applied to libraries.
// @LibraryTypesMacro() // Error
//  ^
//
import self as self;
import "package:macro/targets.dart" as tar;
import "package:macro/multi_targets.dart" as mul;
import "dart:core" as core;

import "package:macro/targets.dart";
import "package:macro/multi_targets.dart";

@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
typedef TypeAlias = core::int;
@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
class Class extends core::Object {
  @#C1
  @#C2
  @#C3
  @#C4
  @#C5
  @#C6
  @#C7
  @#C8
  @#C9
  @#C10
  @#C11
  @#C12
  @#C13
  @#C14
  @#C15
  @#C16
  @#C17
  @#C18
  @#C19
  @#C20
  @#C21
  @#C22
  @#C23
  @#C24
  @#C25
  @#C26
  @#C27
  @#C28
  @#C29
  @#C30
  @#C31
  @#C32
  @#C33
  @#C34
  @#C35
  @#C36
  @#C37
  @#C38
  @#C39
  @#C40
  field core::int field = 0;
  @#C1
  @#C2
  @#C3
  @#C4
  @#C5
  @#C6
  @#C7
  @#C8
  @#C9
  @#C10
  @#C11
  @#C12
  @#C13
  @#C14
  @#C15
  @#C16
  @#C17
  @#C18
  @#C19
  @#C20
  @#C21
  @#C22
  @#C23
  @#C24
  @#C25
  @#C26
  @#C27
  @#C28
  @#C29
  @#C30
  @#C31
  @#C32
  @#C33
  @#C34
  @#C35
  @#C36
  @#C37
  @#C38
  @#C39
  @#C40
  constructor •() → self::Class
    : super core::Object::•()
    ;
  @#C1
  @#C2
  @#C3
  @#C4
  @#C5
  @#C6
  @#C7
  @#C8
  @#C9
  @#C10
  @#C11
  @#C12
  @#C13
  @#C14
  @#C15
  @#C16
  @#C17
  @#C18
  @#C19
  @#C20
  @#C21
  @#C22
  @#C23
  @#C24
  @#C25
  @#C26
  @#C27
  @#C28
  @#C29
  @#C30
  @#C31
  @#C32
  @#C33
  @#C34
  @#C35
  @#C36
  @#C37
  @#C38
  @#C39
  @#C40
  method method() → void {}
}
@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
class Enum extends core::_Enum /*isEnum*/  {
  @#C1
  @#C2
  @#C3
  @#C4
  @#C5
  @#C6
  @#C7
  @#C8
  @#C9
  @#C10
  @#C11
  @#C12
  @#C13
  @#C14
  @#C15
  @#C16
  @#C17
  @#C18
  @#C19
  @#C20
  @#C21
  @#C22
  @#C23
  @#C24
  @#C25
  @#C26
  @#C27
  @#C28
  @#C29
  @#C30
  @#C31
  @#C32
  @#C33
  @#C34
  @#C35
  @#C36
  @#C37
  @#C38
  enum-element static const field self::Enum a = #C43;
  static const field core::List<self::Enum> values = #C44;
  const synthetic constructor •(core::int #index, core::String #name) → self::Enum
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "Enum.${this.{core::_Enum::_name}{core::String}}";
}
@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
abstract class Mixin extends core::Object /*isMixinDeclaration*/  {
}
@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
extension Extension on core::int {
}
@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
extension type ExtensionType(core::int it) {
  abstract extension-type-member representation-field get it() → core::int;
  constructor • = self::ExtensionType|constructor#;
  constructor tearoff • = self::ExtensionType|constructor#_#new#tearOff;
}
@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
static field core::int variable = 0;
@#C1
@#C2
@#C3
@#C4
@#C5
@#C6
@#C7
@#C8
@#C9
@#C10
@#C11
@#C12
@#C13
@#C14
@#C15
@#C16
@#C17
@#C18
@#C19
@#C20
@#C21
@#C22
@#C23
@#C24
@#C25
@#C26
@#C27
@#C28
@#C29
@#C30
@#C31
@#C32
@#C33
@#C34
@#C35
@#C36
@#C37
@#C38
@#C39
@#C40
static method function() → void {}
static extension-type-member method ExtensionType|constructor#(core::int it) → self::ExtensionType% /* erasure=core::int, declared=! */ {
  lowered final self::ExtensionType% /* erasure=core::int, declared=! */ #this = it;
  return #this;
}
static extension-type-member method ExtensionType|constructor#_#new#tearOff(core::int it) → self::ExtensionType% /* erasure=core::int, declared=! */
  return self::ExtensionType|constructor#(it);

constants  {
  #C1 = tar::LibraryTypesMacro {}
  #C2 = tar::LibraryDeclarationsMacro {}
  #C3 = tar::LibraryDefinitionMacro {}
  #C4 = tar::FunctionTypesMacro {}
  #C5 = tar::FunctionDeclarationsMacro {}
  #C6 = tar::FunctionDefinitionMacro {}
  #C7 = tar::VariableTypesMacro {}
  #C8 = tar::VariableDeclarationsMacro {}
  #C9 = tar::VariableDefinitionMacro {}
  #C10 = tar::ClassTypesMacro {}
  #C11 = tar::ClassDeclarationsMacro {}
  #C12 = tar::ClassDefinitionMacro {}
  #C13 = tar::EnumTypesMacro {}
  #C14 = tar::EnumDeclarationsMacro {}
  #C15 = tar::EnumDefinitionMacro {}
  #C16 = tar::EnumValueTypesMacro {}
  #C17 = tar::EnumValueDeclarationsMacro {}
  #C18 = tar::EnumValueDefinitionMacro {}
  #C19 = tar::FieldTypesMacro {}
  #C20 = tar::FieldDeclarationsMacro {}
  #C21 = tar::FieldDefinitionMacro {}
  #C22 = tar::MethodTypesMacro {}
  #C23 = tar::MethodDeclarationsMacro {}
  #C24 = tar::MethodDefinitionMacro {}
  #C25 = tar::ConstructorTypesMacro {}
  #C26 = tar::ConstructorDeclarationsMacro {}
  #C27 = tar::ConstructorDefinitionMacro {}
  #C28 = tar::MixinTypesMacro {}
  #C29 = tar::MixinDeclarationsMacro {}
  #C30 = tar::MixinDefinitionMacro {}
  #C31 = tar::ExtensionTypesMacro {}
  #C32 = tar::ExtensionDeclarationsMacro {}
  #C33 = tar::ExtensionDefinitionMacro {}
  #C34 = tar::ExtensionTypeTypesMacro {}
  #C35 = tar::ExtensionTypeDeclarationsMacro {}
  #C36 = tar::ExtensionTypeDefinitionMacro {}
  #C37 = tar::TypeAliasTypesMacro {}
  #C38 = tar::TypeAliasDeclarationsMacro {}
  #C39 = mul::FieldAndMethodTypesMacro {}
  #C40 = mul::VariableAndFunctionTypesMacro {}
  #C41 = 0
  #C42 = "a"
  #C43 = self::Enum {index:#C41, _name:#C42}
  #C44 = <self::Enum>[#C43]
}
