int counter = 1;

void reset() {}

int t(int value) {}

class A {
  A(int x, int y, {required int z});
  factory A.foo(int x, int y, {required int z}) => new A(x, y, z: z);
  void Function(int x, int y, {required int z}) get property =>
      (int x, int y, {required int z}) {};
  void bar(int x, int y, {required int z}) {}
}

typedef B = A;

foo(int x, int y, {required int z}) {}

extension E on int {
  method1() {}
  method2(int bar, {int? foo}) {}
  static staticMethod2(int bar, {int? foo}) {}
}

test(dynamic d, Function f, A a) {}

class Test extends A {
  Test() : super(t(1), t(2), z: t(3));
  Test.c1() : super(t(1), z: t(2), t(3));
  Test.c2() : super(z: t(1), t(2), t(3));
  test() {}
}

main() {}
