library;
import self as self;
import "dart:core" as core;
import "package:expect/expect.dart" as exp;

import "package:expect/expect.dart";

class A extends core::Object /*hasConstConstructor*/  {
  static field dynamic _redirecting# = <dynamic>[self::A::•];
  const constructor empty() → self::A*
    : super core::Object::•()
    ;
  static factory •() → self::A*
    let<BottomType> #redirecting_factory = self::B::• in let core::String* #typeArg0 = null in invalid-expression;
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
class B<T extends core::Object* = dynamic> extends self::A /*hasConstConstructor*/  {
  const constructor •() → self::B<self::B::T*>*
    : super self::A::empty()
    ;
  method toString() → core::String*
    return "${self::B::T*}";
}
static method main() → void {
  exp::Expect::equals("${#C1}", "String");
}

constants  {
  #C1 = self::B<core::String*> {}
}
