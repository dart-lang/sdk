library;
import self as self;
import "dart:core" as core;

abstract class I extends core::Object {
  synthetic constructor •() → self::I*
    ;
  abstract method interfaceMethod() → dynamic;
}
class C extends core::Object implements self::I {
  synthetic constructor •() → self::C*
    ;
  method noSuchMethod(core::Invocation* _) → dynamic
    ;
  no-such-method-forwarder method interfaceMethod() → dynamic
    return this.{self::C::noSuchMethod}(new core::_InvocationMirror::_withType(#interfaceMethod, 0, const <core::Type*>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol*, dynamic>(const <core::Symbol*, dynamic>{}))) as{TypeError,ForDynamic} dynamic;
}
class D extends self::C {
  synthetic constructor •() → self::D*
    ;
  method noSuchMethod(core::Invocation* _) → dynamic
    ;
  method dMethod() → dynamic
    ;
}
static method main() → dynamic
  ;
