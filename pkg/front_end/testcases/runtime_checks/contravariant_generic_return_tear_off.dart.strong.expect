library test;
import self as self;
import "dart:core" as core;

typedef F<contravariant T extends core::Object* = dynamic> = (T*) →* void;
typedef G<contravariant T extends core::Object* = dynamic> = () →* (T*) →* void;
class C<T extends core::Object* = dynamic> extends core::Object {
  field (self::C::T*) →* void _x;
  constructor •((self::C::T*) →* void _x) → self::C<self::C::T*>*
    : self::C::_x = _x, super core::Object::•()
    ;
  method f() → (self::C::T*) →* void
    return this.{self::C::_x};
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method g(self::C<core::num*>* c) → () →* (core::num*) →* void {
  return c.{self::C::f} as{TypeError,CovarianceCheck} () →* (core::num*) →* void;
}
static method h(core::int* i) → void {
  core::print("${i}");
}
static method test() → void {
  () →* (core::num*) →* void x = self::g(new self::C::•<core::int*>(#C1));
}
static method main() → void {}

constants  {
  #C1 = tearoff self::h
}
