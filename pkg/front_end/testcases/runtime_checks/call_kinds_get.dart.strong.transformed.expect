library test;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field dynamic y = null;
  synthetic constructor •() → self::C*
    : super core::Object::•()
    ;
  get x() → dynamic
    return null;
  method test() → void {
    dynamic v1 = this.{self::C::x};
    dynamic v2 = this.{self::C::x};
    dynamic v3 = this.{self::C::y};
    dynamic v4 = this.{self::C::y};
  }
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method test(self::C* c, dynamic d) → void {
  dynamic v1 = c.{self::C::x};
  dynamic v2 = c.{self::C::y};
  dynamic v3 = d.x;
}
static method main() → dynamic {}
