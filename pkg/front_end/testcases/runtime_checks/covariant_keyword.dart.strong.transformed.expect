library test;
import self as self;
import "dart:core" as core;

typedef F<contravariant T extends core::Object* = dynamic> = (T*) →* dynamic;
class C extends core::Object {
  synthetic constructor •() → self::C*
    : super core::Object::•()
    ;
  method f(core::num* x) → void {}
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
class D extends self::C {
  synthetic constructor •() → self::D*
    : super self::C::•()
    ;
  method f(covariant core::int* x) → void {}
}
class E extends self::D {
  synthetic constructor •() → self::E*
    : super self::D::•()
    ;
  method f(covariant core::int* x) → void {}
}
static method g1(self::C* c) → void {
  c.{self::C::f}(1.5);
}
static method g2(self::C* c) → (core::num*) →* dynamic {
  return c.{self::C::f};
}
static method test() → dynamic {
  self::g1(new self::D::•());
  (core::num*) →* dynamic x = self::g2(new self::D::•());
}
static method main() → dynamic {}
