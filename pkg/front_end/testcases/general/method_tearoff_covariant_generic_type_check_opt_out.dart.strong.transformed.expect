library /*isLegacy*/;
//
// Problems in library:
//
// pkg/front_end/testcases/general/method_tearoff_covariant_generic_type_check_opt_out.dart:5:1: Error: Library doesn't support null safety.
// // @dart=2.9
// ^^^^^^^^^^^^
//
import self as self;
import "dart:core" as core;

class A<X extends core::num*> extends core::Object {
  synthetic constructor •() → self::A<self::A::X*>*
    : super core::Object::•()
    ;
  method f<covariant-by-class Y extends self::A::X*>(self::A::f::Y* y) → void {}
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method expectThrows(() →* void f) → dynamic {
  try {
    f(){() →* void};
  }
  on dynamic catch(final dynamic e) {
    return;
  }
  throw "Expected an exception to be thrown!";
}
static method main() → dynamic {
  self::A<core::num*>* a = new self::A::•<core::int*>();
  <Y extends core::num*>(Y*) →* void f = a.{self::A::f}{<Y extends core::num*>(Y*) →* void};
  self::expectThrows(() → Null {
    f<core::double*>(3.14){(core::double*) →* void};
  });
}
