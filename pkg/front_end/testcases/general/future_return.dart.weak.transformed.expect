library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/future_return.dart:11:7: Error: Functions marked 'async' must have a return type assignable to 'Future'.
// Class returnClass() async => new Class();
//       ^^^^^^^^^^^
//
// pkg/front_end/testcases/general/future_return.dart:17:7: Error: Functions marked 'async' must have a return type assignable to 'Future'.
// Class returnClassFromDynamic() async => returnDynamic();
//       ^^^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/future_return.dart:23:7: Error: Functions marked 'async' must have a return type assignable to 'Future'.
// Class returnClassFromFutureClass() async => returnFutureClass();
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/future_return.dart:30:7: Error: Functions marked 'async' must have a return type assignable to 'Future'.
// Class returnClassFromFutureOrClass() async => returnFutureOrClass();
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

import "dart:async";

class Class extends core::Object {
  synthetic constructor •() → self::Class
    : super core::Object::•()
    ;
}
static method returnDynamic() → dynamic
  return new self::Class::•();
static method returnClass() → self::Class async /* emittedValueType= core::Object? */ 
  return new self::Class::•();
static method returnFutureClass() → asy::Future<self::Class> async /* emittedValueType= self::Class */ 
  return new self::Class::•();
static method returnFutureOrClass() → FutureOr<self::Class> async /* emittedValueType= self::Class */ 
  return new self::Class::•();
static method returnClassFromDynamic() → self::Class async /* emittedValueType= core::Object? */ 
  return self::returnDynamic();
static method returnFutureClassDynamic() → asy::Future<self::Class> async /* emittedValueType= self::Class */ 
  return self::returnDynamic() as{TypeError,ForDynamic} FutureOr<self::Class>;
static method returnFutureOrClassDynamic() → FutureOr<self::Class> async /* emittedValueType= self::Class */ 
  return self::returnDynamic() as{TypeError,ForDynamic} FutureOr<self::Class>;
static method returnClassFromFutureClass() → self::Class async /* emittedValueType= core::Object? */ 
  return self::returnFutureClass();
static method returnFutureClassFromFutureClass() → asy::Future<self::Class> async /* emittedValueType= self::Class */ 
  return self::returnFutureClass();
static method returnFutureOrClassFromFutureClass() → FutureOr<self::Class> async /* emittedValueType= self::Class */ 
  return self::returnFutureClass();
static method returnClassFromFutureOrClass() → self::Class async /* emittedValueType= core::Object? */ 
  return self::returnFutureOrClass();
static method returnFutureClassFromFutureOrClass() → asy::Future<self::Class> async /* emittedValueType= self::Class */ 
  return self::returnFutureOrClass();
static method returnFutureOrClassFromFutureOrClass() → FutureOr<self::Class> async /* emittedValueType= self::Class */ 
  return self::returnFutureOrClass();
static method main() → dynamic async /* emittedValueType= dynamic */ {
  await self::returnClass() /* runtimeCheckType= asy::Future<self::Class> */ ;
  await self::returnFutureClass();
  await self::returnFutureOrClass() /* runtimeCheckType= asy::Future<self::Class> */ ;
  await self::returnClassFromDynamic() /* runtimeCheckType= asy::Future<self::Class> */ ;
  await self::returnFutureClassDynamic();
  await self::returnFutureOrClassDynamic() /* runtimeCheckType= asy::Future<self::Class> */ ;
  await self::returnClassFromFutureClass() /* runtimeCheckType= asy::Future<self::Class> */ ;
  await self::returnFutureClassFromFutureClass();
  await self::returnFutureOrClassFromFutureClass() /* runtimeCheckType= asy::Future<self::Class> */ ;
  await self::returnClassFromFutureOrClass() /* runtimeCheckType= asy::Future<self::Class> */ ;
  await self::returnFutureClassFromFutureOrClass();
  await self::returnFutureOrClassFromFutureOrClass() /* runtimeCheckType= asy::Future<self::Class> */ ;
}
