library;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;
import "return_async_promoted_lib.dart" as ret;

import "org-dartlang-testcase:///return_async_promoted_lib.dart";

static method main() → void {
  <T extends core::Object? = dynamic>(dynamic) → asy::Future<core::int> f = <T extends core::Object? = dynamic>(dynamic o) → asy::Future<core::int> async /* emittedValueType= core::int */ => o is core::int ?{core::int} o{core::int} : throw "";
  () → asy::Future<core::int> g = () → asy::Future<core::int> async /* emittedValueType= core::int* */ => ret::legacy();
}
static method nullable() → core::int?
  return null;
static method nonNullable() → core::int?
  return 0;

library /*isLegacy*/;
//
// Problems in library:
//
// pkg/front_end/testcases/general/return_async_promoted_lib.dart:5:1: Error: Library doesn't support null safety.
// // @dart=2.9
// ^^^^^^^^^^^^
//
import self as ret;
import "dart:core" as core;
import "dart:async" as asy;
import "return_async_promoted.dart" as self;

import "org-dartlang-testcase:///return_async_promoted.dart";

static method legacy() → core::int* {
  <T extends core::Object* = dynamic>(dynamic) →* asy::Future<core::int*>* f = <T extends core::Object* = dynamic>(dynamic o) → asy::Future<core::int*>* async /* emittedValueType= core::int* */ => o is{ForLegacy} core::int* ?{core::int*} o{core::int*} : throw "";
  () →* asy::Future<core::int*>* g = () → asy::Future<core::int*>* async /* emittedValueType= core::int* */ => self::nullable();
  () →* asy::Future<core::int*>* h = () → asy::Future<core::int*>* async /* emittedValueType= core::int* */ => self::nonNullable();
  return null;
}
