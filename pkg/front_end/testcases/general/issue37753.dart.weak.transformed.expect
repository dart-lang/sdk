library;
import self as self;
import "dart:core" as core;

static method getElements() → core::Iterable<core::int*>* /* originally sync* */ {
  function :sync_op_gen() → (core::_SyncIterator<dynamic>*, dynamic, dynamic) →* core::bool* {
    core::int* :await_jump_var = 0;
    dynamic :await_ctx_var;
    function :sync_op(core::_SyncIterator<dynamic>* :iterator, dynamic :exception, dynamic :stack_trace) → core::bool* yielding {
      {
        core::Iterable<core::int*>* elements;
        elements = (() → core::Iterable<core::int*>* /* originally sync* */ {
          function :sync_op_gen() → (core::_SyncIterator<dynamic>*, dynamic, dynamic) →* core::bool* {
            core::int* :await_jump_var = 0;
            dynamic :await_ctx_var;
            function :sync_op(core::_SyncIterator<dynamic>* :iterator, dynamic :exception, dynamic :stack_trace) → core::bool* yielding {
              {
                {
                  :iterator.{core::_SyncIterator::_current} = 7;
                  [yield] true;
                }
              }
              return false;
            }
            return :sync_op;
          }
          return new core::_SyncIterable::•<core::int*>(:sync_op_gen);
        })(){() →* core::Iterable<core::int*>*};
        {
          :iterator.{core::_SyncIterator::_yieldEachIterable} = elements;
          [yield] true;
        }
      }
      return false;
    }
    return :sync_op;
  }
  return new core::_SyncIterable::•<core::int*>(:sync_op_gen);
}
static method main() → dynamic
  return core::print(self::getElements());
