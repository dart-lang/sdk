library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/new_as_selector.dart:10:5: Error: 'new' can't be used as an identifier because it's a keyword.
// Try renaming this to be an identifier that isn't a keyword.
// int new = 87; // error
//     ^^^
//
// pkg/front_end/testcases/general/new_as_selector.dart:17:7: Error: 'new' can't be used as an identifier because it's a keyword.
// Try renaming this to be an identifier that isn't a keyword.
//   int new = 42; // error
//       ^^^
//
// pkg/front_end/testcases/general/new_as_selector.dart:19:15: Error: The 'constructor-tearoffs' language feature is disabled for this library.
// Try removing the `@dart=` annotation or setting the language version to 2.15 or higher.
//   C() : super.new(); // error
//               ^^^
// pkg/front_end/testcases/general/new_as_selector.dart:5:1: Context: This is the annotation that opts out this library from the 'constructor-tearoffs' language feature.
// // @dart=2.14
// ^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/new_as_selector.dart:20:20: Error: The 'constructor-tearoffs' language feature is disabled for this library.
// Try removing the `@dart=` annotation or setting the language version to 2.15 or higher.
//   C.named() : this.new(); // error
//                    ^^^
// pkg/front_end/testcases/general/new_as_selector.dart:5:1: Context: This is the annotation that opts out this library from the 'constructor-tearoffs' language feature.
// // @dart=2.14
// ^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/new_as_selector.dart:31:16: Error: 'new' can't be used as an identifier because it's a keyword.
// Try renaming this to be an identifier that isn't a keyword.
//   external int new; // error
//                ^^^
//
import self as self;
import "dart:core" as core;

import "org-dartlang-testcase:///new_as_selector.dart" as prefix1;
import "org-dartlang-testcase:///new_as_selector.dart" deferred as prefix2 hide E;

class Super extends core::Object {
  synthetic constructor •() → self::Super
    ;
}
class C extends self::Super {
  field core::int new;
  constructor •() → self::C
    ;
  constructor named() → self::C
    ;
  method method() → dynamic
    ;
}
extension E on core::int {
  get new = self::E|get#new;
  set new = self::E|set#new;
  method call = self::E|call;
  method tearoff call = self::E|get#call;
}
static field core::int new;
static field self::C c;
external static extension-member method E|get#new(lowered core::int #this) → core::int;
external static extension-member method E|set#new(lowered core::int #this, synthesized core::int #externalFieldValue) → void;
static extension-member method E|call<T extends core::Object? = dynamic>(lowered final core::int #this) → dynamic
  ;
static extension-member method E|get#call(lowered final core::int #this) → <T extends core::Object? = dynamic>() → dynamic
  return <T extends core::Object? = dynamic>() → dynamic => self::E|call<T%>(#this);
static method method(dynamic d) → dynamic
  ;
static method test() → dynamic
  ;
static method main() → dynamic
  ;
