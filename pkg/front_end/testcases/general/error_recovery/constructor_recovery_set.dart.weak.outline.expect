library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/error_recovery/constructor_recovery_set.dart:3:7: Error: A class member can't have the same name as the enclosing class.
// Try renaming the member.
//   set Foo() {}
//       ^^^
//
// pkg/front_end/testcases/general/error_recovery/constructor_recovery_set.dart:5:3: Error: Constructors can't be a setter.
// Try removing 'set'.
//   set Foo() : initializer = true {}
//   ^^^
//
// pkg/front_end/testcases/general/error_recovery/constructor_recovery_set.dart:7:3: Error: Constructors can't be a setter.
// Try removing 'set'.
//   set Foo.x() {}
//   ^^^
//
// pkg/front_end/testcases/general/error_recovery/constructor_recovery_set.dart:9:3: Error: Constructors can't be a setter.
// Try removing 'set'.
//   set Foo.x() : initializer = true {}
//   ^^^
//
// pkg/front_end/testcases/general/error_recovery/constructor_recovery_set.dart:9:7: Error: 'Foo.x' is already declared in this scope.
//   set Foo.x() : initializer = true {}
//       ^^^^^
// pkg/front_end/testcases/general/error_recovery/constructor_recovery_set.dart:7:7: Context: Previous declaration of 'Foo.x'.
//   set Foo.x() {}
//       ^^^^^
//
import self as self;
import "dart:core" as core;

class Foo extends core::Object {
  constructor •() → self::Foo
    ;
  constructor x() → self::Foo
    ;
  set Foo(dynamic #synthetic) → void
    ;
}
