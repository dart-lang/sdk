library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

abstract class Mixin extends core::Object /*isMixinDeclaration*/  {
}
class Base extends core::Object /*hasConstConstructor*/  {
  final field core::int x;
  const constructor •(core::int x) → self::Base
    : self::Base::x = x, super core::Object::•()
    ;
}
class Application = self::Base with self::Mixin /*hasConstConstructor*/  {
  const synthetic constructor •(core::int x) → self::Application
    : super self::Base::•(x)
    ;
}
static method main() → dynamic {
  self::expect(42, #C2.{self::Base::x}{core::int});
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}

constants  {
  #C1 = 42
  #C2 = self::Application {x:#C1}
}


Constructor coverage from constants:
org-dartlang-testcase:///issue41070.dart:
- Application. (from org-dartlang-testcase:///issue41070.dart:12:7)
- Base. (from org-dartlang-testcase:///issue41070.dart:9:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
