library;
import self as self;
import "dart:core" as core;

class Fisk<T extends core::Object? = dynamic> extends core::Object /*hasConstConstructor*/  {
  final field self::Fisk::T% x;
  const constructor fisk(self::Fisk::T% x) → self::Fisk<self::Fisk::T%>
    : self::Fisk::x = x, super core::Object::•()
    ;
}
class Foo extends core::_Enum /*isEnum*/  {
  @#C1
  enum-element static const field self::Foo bar = #C4;
  @#C5
  enum-element static const field self::Foo baz = #C8;
  enum-element static const field self::Foo cafebabe = #C11;
  static const field core::List<self::Foo> values = #C12;
  const synthetic constructor •(core::int #index, core::String #name) → self::Foo
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "Foo.${this.{core::_Enum::_name}{core::String}}";
}
static const field core::int hest = #C1;
static method main() → dynamic {}

constants  {
  #C1 = 42
  #C2 = 0
  #C3 = "bar"
  #C4 = self::Foo {index:#C2, _name:#C3}
  #C5 = self::Fisk<core::int> {x:#C1}
  #C6 = 1
  #C7 = "baz"
  #C8 = self::Foo {index:#C6, _name:#C7}
  #C9 = 2
  #C10 = "cafebabe"
  #C11 = self::Foo {index:#C9, _name:#C10}
  #C12 = <self::Foo>[#C4, #C8, #C11]
}


Constructor coverage from constants:
org-dartlang-testcase:///annotation_on_enum_values.dart:
- Foo. (from org-dartlang-testcase:///annotation_on_enum_values.dart:15:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
- Fisk.fisk (from org-dartlang-testcase:///annotation_on_enum_values.dart:12:9)
