library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
  method foo(covariant-by-declaration core::num x) → void {}
}
abstract class B extends core::Object /*isMixinDeclaration*/  {
  method foo(core::num x) → void {}
}
class C extends core::Object {
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
  method foo(core::num x) → void {}
}
abstract class _D&A&B = self::A with self::B /*isAnonymousMixin*/  {
  synthetic constructor •() → self::_D&A&B
    : super self::A::•()
    ;
  forwarding-stub method foo(covariant-by-declaration core::num x) → void
    return super.{self::B::foo}(x);
}
class D extends self::_D&A&B implements self::C {
  synthetic constructor •() → self::D
    : super self::_D&A&B::•()
    ;
  method foo(covariant-by-declaration core::int x) → void {}
}
static method main() → dynamic {}
