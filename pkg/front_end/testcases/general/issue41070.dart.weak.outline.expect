library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

abstract class Mixin extends core::Object /*isMixinDeclaration*/  {
}
class Base extends core::Object /*hasConstConstructor*/  {
  final field core::int x;
  const constructor •(core::int x) → self::Base
    : self::Base::x = x, super core::Object::•()
    ;
}
class Application = self::Base with self::Mixin /*hasConstConstructor*/  {
  const synthetic constructor •(core::int x) → self::Application
    : super self::Base::•(x)
    ;
}
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;
