library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/future_return.dart:11:7: Error: Functions marked 'async' must have a return type assignable to 'Future'.
// Class returnClass() async => new Class();
//       ^^^^^^^^^^^
//
// pkg/front_end/testcases/general/future_return.dart:17:7: Error: Functions marked 'async' must have a return type assignable to 'Future'.
// Class returnClassFromDynamic() async => returnDynamic();
//       ^^^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/future_return.dart:23:7: Error: Functions marked 'async' must have a return type assignable to 'Future'.
// Class returnClassFromFutureClass() async => returnFutureClass();
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/future_return.dart:30:7: Error: Functions marked 'async' must have a return type assignable to 'Future'.
// Class returnClassFromFutureOrClass() async => returnFutureOrClass();
//       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

import "dart:async";

class Class extends core::Object {
  synthetic constructor •() → self::Class*
    : super core::Object::•()
    ;
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method returnDynamic() → dynamic
  return new self::Class::•();
static method returnClass() → self::Class* async 
  return new self::Class::•();
static method returnFutureClass() → asy::Future<self::Class*>* async 
  return new self::Class::•();
static method returnFutureOrClass() → FutureOr<self::Class*>* async 
  return new self::Class::•();
static method returnClassFromDynamic() → self::Class* async 
  return self::returnDynamic() as{TypeError} FutureOr<self::Class*>*;
static method returnFutureClassDynamic() → asy::Future<self::Class*>* async 
  return self::returnDynamic() as{TypeError} FutureOr<self::Class*>*;
static method returnFutureOrClassDynamic() → FutureOr<self::Class*>* async 
  return self::returnDynamic() as{TypeError} FutureOr<self::Class*>*;
static method returnClassFromFutureClass() → self::Class* async 
  return self::returnFutureClass();
static method returnFutureClassFromFutureClass() → asy::Future<self::Class*>* async 
  return self::returnFutureClass();
static method returnFutureOrClassFromFutureClass() → FutureOr<self::Class*>* async 
  return self::returnFutureClass();
static method returnClassFromFutureOrClass() → self::Class* async 
  return self::returnFutureOrClass();
static method returnFutureClassFromFutureOrClass() → asy::Future<self::Class*>* async 
  return self::returnFutureOrClass();
static method returnFutureOrClassFromFutureOrClass() → FutureOr<self::Class*>* async 
  return self::returnFutureOrClass();
static method main() → dynamic async {
  await self::returnClass();
  await self::returnFutureClass();
  await self::returnFutureOrClass();
  await self::returnClassFromDynamic();
  await self::returnFutureClassDynamic();
  await self::returnFutureOrClassDynamic();
  await self::returnClassFromFutureClass();
  await self::returnFutureClassFromFutureClass();
  await self::returnFutureOrClassFromFutureClass();
  await self::returnClassFromFutureOrClass();
  await self::returnFutureClassFromFutureOrClass();
  await self::returnFutureOrClassFromFutureOrClass();
}
