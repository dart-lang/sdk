library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/general/mixin_inherits_non_object.dart:19:7: Error: The class 'Mixed' can't be used as a mixin because it extends a class other than Object.
// class Mixed = Object with N, M;
//       ^^^^^
//
// pkg/front_end/testcases/general/mixin_inherits_non_object.dart:21:7: Error: The non-abstract class 'A' is missing implementations for these members:
//  - N.text
// Try to either
//  - provide an implementation,
//  - inherit an implementation from a superclass or mixin,
//  - mark the class as abstract, or
//  - provide a 'noSuchMethod' implementation.
//
// class A with Mixed {}
//       ^
// pkg/front_end/testcases/general/mixin_inherits_non_object.dart:16:14: Context: 'N.text' is defined here.
//   String get text => 'Foo';
//              ^^^^
//
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

abstract class M extends core::Object /*isMixinDeclaration*/  {
  get number() → core::int
    return 20;
}
abstract class N extends core::Object /*isMixinDeclaration*/  {
  get text() → core::String
    return "Foo";
}
abstract class _Mixed&Object&N extends core::Object implements self::N /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_Mixed&Object&N
    : super core::Object::•()
    ;
  get text() → core::String
    return "Foo";
}
class Mixed extends self::_Mixed&Object&N implements self::M /*isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::Mixed
    : super self::_Mixed&Object&N::•()
    ;
  get number() → core::int
    return 20;
}
abstract class _A&Object&Mixed extends core::Object implements self::Mixed /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_A&Object&Mixed
    : super core::Object::•()
    ;
  get number() → core::int
    return 20;
}
class A extends self::_A&Object&Mixed {
  synthetic constructor •() → self::A
    : super self::_A&Object&Mixed::•()
    ;
}
static method main() → void /* originally async */ {
  final asy::_Future<dynamic> :async_future = new asy::_Future::•<dynamic>();
  core::bool* :is_sync = false;
  FutureOr<dynamic>? :return_value;
  (dynamic) → dynamic :async_op_then;
  (core::Object, core::StackTrace) → dynamic :async_op_error;
  core::int :await_jump_var = 0;
  dynamic :await_ctx_var;
  function :async_op([dynamic :result, dynamic :exception, dynamic :stack_trace]) → dynamic yielding 
    try {
      #L1:
      {
        final self::A a = new self::A::•();
        core::print(a is{ForNonNullableByDefault} self::N);
        core::print(a is{ForNonNullableByDefault} self::M);
      }
      asy::_completeOnAsyncReturn(:async_future, :return_value, :is_sync);
      return;
    }
    on dynamic catch(dynamic exception, core::StackTrace stack_trace) {
      asy::_completeOnAsyncError(:async_future, exception, stack_trace, :is_sync);
    }
  :async_op_then = asy::_asyncThenWrapperHelper(:async_op);
  :async_op_error = asy::_asyncErrorWrapperHelper(:async_op);
  :async_op.call();
  :is_sync = true;
  return :async_future;
}
