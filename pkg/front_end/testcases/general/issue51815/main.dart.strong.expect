library /*isNonNullableByDefault*/;
import self as self;
import "main_lib.dart" as mai;

import "org-dartlang-testcase:///main_lib.dart";

static method foo(() → void f) → dynamic {}
static method test() → dynamic
  return self::foo(let final mai::B #t1 = new mai::B::•() in #t1 == null ?{() → void} null : #t1.{mai::B::call}{() → void});
static method main() → dynamic {}

library /*isNonNullableByDefault*/;
import self as mai;
import "dart:core" as core;

class A<X extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → mai::A<mai::A::X%>
    : super core::Object::•()
    ;
}
class B extends mai::A<(core::int, core::String)> {
  synthetic constructor •() → mai::B
    : super mai::A::•()
    ;
  method call() → void {}
}
