library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:39:35: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
//   Map<String, List<int>?> map40 = {if (oracle("foo")) ...{"bar", []}, "baz": null};
//                                   ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:71:38: Error: Unexpected type 'Map<String, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   var map82 = {if (oracle("foo")) ...mapToInt else ...dynVar, null};
//                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:106:44: Error: Expected ':' after this.
//   Set<dynamic> set10 = {if (oracle("foo")) 42 else "bar": 3.14};
//                                            ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:107:53: Error: Expected ':' after this.
//   Map<dynamic, dynamic> map10 = {if (oracle("foo")) 42 else "bar": 3.14};
//                                                     ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:108:61: Error: Expected ':' after this.
//   Set<dynamic> set11 = {if (oracle("foo")) "bar": 3.14 else 42};
//                                                             ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:109:70: Error: Expected ':' after this.
//   Map<dynamic, dynamic> map11 = {if (oracle("foo")) "bar": 3.14 else 42};
//                                                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:110:35: Error: Expected ':' after this.
//   var map12 = {if (oracle("foo")) 42 else "bar": 3.14};
//                                   ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:111:52: Error: Expected ':' after this.
//   var map13 = {if (oracle("foo")) "bar": 3.14 else 42};
//                                                    ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:87:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   <int>[if (oracle("foo")) "bar"];
//                            ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:88:29: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
//   <int?>{if (oracle("foo")) "bar", null};
//                             ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:89:44: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
//   <String, int?>{if (oracle("foo")) "bar": "bar", "baz": null};
//                                            ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:90:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   <int>[if (oracle("foo")) ...["bar"]];
//                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:91:33: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
//   <int?>{if (oracle("foo")) ...["bar"], null};
//                                 ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:92:48: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
//   <String, int?>{if (oracle("foo")) ...{"bar": "bar"}, "baz": null};
//                                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:93:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) ...map];
//                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:94:32: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int?>{if (oracle("foo")) ...map, null};
//                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:95:40: Error: Unexpected type 'List<String>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int?>{if (oracle("foo")) ...["bar"], "baz": null};
//                                        ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:96:31: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
//   <String>[if (oracle("foo")) 42 else 3.14];
//                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:96:39: Error: A value of type 'double' can't be assigned to a variable of type 'String'.
//   <String>[if (oracle("foo")) 42 else 3.14];
//                                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:97:32: Error: A value of type 'int' can't be assigned to a variable of type 'String?'.
//   <String?>{if (oracle("foo")) 42 else 3.14, null};
//                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:97:40: Error: A value of type 'double' can't be assigned to a variable of type 'String?'.
//   <String?>{if (oracle("foo")) 42 else 3.14, null};
//                                        ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:98:47: Error: A value of type 'int' can't be assigned to a variable of type 'String?'.
//   <String, String?>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:98:62: Error: A value of type 'double' can't be assigned to a variable of type 'String?'.
//   <String, String?>{if (oracle("foo")) "bar": 42 else "baz": 3.14, "baz": null};
//                                                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:99:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) ...map else 42];
//                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:100:32: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int?>{if (oracle("foo")) ...map else 42, null};
//                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:101:40: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int?>{if (oracle("foo")) ...[42] else "bar": 42, "baz": null};
//                                        ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:102:39: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[if (oracle("foo")) 42 else ...map];
//                                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:103:32: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int?>{if (oracle("foo")) ...map else 42, null};
//                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:104:55: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int?>{if (oracle("foo")) "bar": 42 else ...[42], "baz": null};
//                                                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:106:24: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
//   Set<dynamic> set10 = {if (oracle("foo")) 42 else "bar": 3.14};
//                        ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:108:24: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
//   Set<dynamic> set11 = {if (oracle("foo")) "bar": 3.14 else 42};
//                        ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:112:27: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
//   List<int> list20 = [if (42) 42];
//                           ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:113:25: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
//   Set<int> set20 = {if (42) 42};
//                         ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:114:30: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
//   Map<int, int> map30 = {if (42) 42: 42};
//                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:115:53: Error: A value of type 'bool' can't be assigned to a variable of type 'String'.
//   List<String> list40 = <String>[if (oracle("foo")) true else 42];
//                                                     ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:115:63: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
//   List<String> list40 = <String>[if (oracle("foo")) true else 42];
//                                                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:116:51: Error: A value of type 'bool' can't be assigned to a variable of type 'String'.
//   Set<String> set40 = <String>{if (oracle("foo")) true else 42};
//                                                   ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:116:61: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
//   Set<String> set40 = <String>{if (oracle("foo")) true else 42};
//                                                             ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:117:61: Error: A value of type 'bool' can't be assigned to a variable of type 'String'.
//   Map<String, int> map40 = <String, int>{if (oracle("foo")) true: 42 else 42: 42};
//                                                             ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:117:75: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
//   Map<String, int> map40 = <String, int>{if (oracle("foo")) true: 42 else 42: 42};
//                                                                           ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:118:65: Error: A value of type 'bool' can't be assigned to a variable of type 'String'.
//   Map<int, String> map41 = <int, String>{if (oracle("foo")) 42: true else 42: 42};
//                                                                 ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:118:79: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
//   Map<int, String> map41 = <int, String>{if (oracle("foo")) 42: true else 42: 42};
//                                                                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:230:14: Error: Can't assign to the final variable 'i'.
//   <int>[for (i in <int>[1]) i];
//              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:231:15: Error: Can't assign to the final variable 'i'.
//   <int?>{for (i in <int>[1]) i, null};
//               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:232:23: Error: Can't assign to the final variable 'i'.
//   <String, int?>{for (i in <int>[1]) "bar": i, "baz": null};
//                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:246:17: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var list50 = [await for (;;) 42];
//                 ^^^^^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:247:16: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var set50 = {await for (;;) 42, null};
//                ^^^^^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:248:16: Error: The keyword 'await' isn't allowed for a normal 'for' statement.
// Try removing the keyword, or use a for-each statement.
//   var map50 = {await for (;;) "bar": 42, "baz": null};
//                ^^^^^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:210:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   <int>[for (int i = 0; oracle("foo"); i++) "bar"];
//                                             ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:211:46: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
//   <int?>{for (int i = 0; oracle("foo"); i++) "bar", null};
//                                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:212:51: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   <int, int?>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                   ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:212:58: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
//   <int, int?>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                          ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:212:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   <int, int?>{for (int i = 0; oracle("foo"); i++) "bar": "bar", "baz": null};
//                                                                 ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:213:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   <int>[for (int i = 0; oracle("foo"); i++) ...["bar"]];
//                                                 ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:214:50: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
//   <int?>{for (int i = 0; oracle("foo"); i++) ...["bar"], null};
//                                                  ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:215:55: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   <int, int?>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:215:62: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
//   <int, int?>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:215:70: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   <int, int?>{for (int i = 0; oracle("foo"); i++) ...{"bar": "bar"}, "baz": null};
//                                                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:216:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) ...map];
//                                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:217:49: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int?>{for (int i = 0; oracle("foo"); i++) ...map, null};
//                                                 ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:218:54: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <int, int?>{for (int i = 0; oracle("foo"); i++) ...list, 42: null};
//                                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:219:62: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
//   <String>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14];
//                                                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:219:70: Error: A value of type 'double' can't be assigned to a variable of type 'String'.
//   <String>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14];
//                                                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:220:63: Error: A value of type 'int' can't be assigned to a variable of type 'String?'.
//   <String?>{for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14, null};
//                                                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:220:71: Error: A value of type 'double' can't be assigned to a variable of type 'String?'.
//   <String?>{for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else 3.14, null};
//                                                                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:221:78: Error: A value of type 'int' can't be assigned to a variable of type 'String?'.
//   <String, String?>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else "bar": 3.14, "baz": null};
//                                                                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:221:93: Error: A value of type 'double' can't be assigned to a variable of type 'String?'.
//   <String, String?>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else "bar": 3.14, "baz": null};
//                                                                                             ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:222:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42];
//                                                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:223:63: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int?>{for (int i = 0; oracle("foo"); i++) if (oracle()) ...map else 42, null};
//                                                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:224:71: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int?>{for (int i = 0; oracle("foo"); i++) if (oracle()) ...list else "bar": 42, "baz": null};
//                                                                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:225:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int>[for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else ...map];
//                                                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:226:71: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
//  - 'Map' is from 'dart:core'.
//   <int?>{for (int i = 0; oracle("foo"); i++) if (oracle()) 42 else ...map, null};
//                                                                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:227:86: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
//  - 'List' is from 'dart:core'.
//   <String, int?>{for (int i = 0; oracle("foo"); i++) if (oracle()) "bar": 42 else ...list, "baz": null};
//                                                                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:234:31: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var list10 = [for (var i in "not iterable") i];
//                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:235:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var set10 = {for (var i in "not iterable") i, null};
//                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:236:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
//  - 'Iterable' is from 'dart:core'.
//   var map10 = {for (var i in "not iterable") "bar": i, "baz": null};
//                              ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:237:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var list20 = [for (int i in ["not", "int"]) i];
//                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:237:39: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var list20 = [for (int i in ["not", "int"]) i];
//                                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:238:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var set20 = {for (int i in ["not", "int"]) i, null};
//                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:238:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var set20 = {for (int i in ["not", "int"]) i, null};
//                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:239:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var map20 = {for (int i in ["not", "int"]) "bar": i, "baz": null};
//                               ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:239:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var map20 = {for (int i in ["not", "int"]) "bar": i, "baz": null};
//                                      ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:240:37: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var list30 = [await for (var i in "not stream") i];
//                                     ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:241:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var set30 = {await for (var i in "not stream") i, null};
//                                    ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:242:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
//  - 'Stream' is from 'dart:async'.
//   var map30 = {await for (var i in "not stream") "bar": i, "baz": null};
//                                    ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:243:58: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var list40 = [await for (int i in Stream.fromIterable(["not", "int"])) i];
//                                                          ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:243:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var list40 = [await for (int i in Stream.fromIterable(["not", "int"])) i];
//                                                                 ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:244:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var set40 = {await for (int i in Stream.fromIterable(["not", "int"])) i, null};
//                                                         ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:244:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var set40 = {await for (int i in Stream.fromIterable(["not", "int"])) i, null};
//                                                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:245:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var map40 = {await for (int i in Stream.fromIterable(["not", "int"])) "bar": i, "baz": null};
//                                                         ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:245:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
//   var map40 = {await for (int i in Stream.fromIterable(["not", "int"])) "bar": i, "baz": null};
//                                                                ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:249:24: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
//   var list60 = [for (; "not bool";) 42];
//                        ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:250:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
//   var set60 = {for (; "not bool";) 42, null};
//                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:251:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
//   var map60 = {for (; "not bool";) "bar": 42, "baz": null};
//                       ^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:255:26: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <int>[await for (int i in stream) i];
//                          ^^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:256:26: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <int>{await for (int i in stream) i};
//                          ^^
//
// pkg/front_end/testcases/general/control_flow_collection_inference2.dart:257:34: Error: The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.
// Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.
//   <String, int>{await for (int i in stream) "bar": i};
//                                  ^^
//
import self as self;
import "dart:core" as core;
import "dart:collection" as col;
import "dart:async" as asy;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B extends self::A {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
  get foo() → core::int
    return 42;
}
static method oracle<T extends core::Object? = dynamic>([self::oracle::T? t = #C1]) → dynamic
  return true;
static method testIfElement(dynamic dynVar, core::List<core::int> listInt, core::List<core::double> listDouble, core::Map<core::String, core::int> mapToInt, core::Map<core::String, core::double> mapToDouble) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t1 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t1.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t1;
  core::Set<core::int?> set10 = block {
    final core::Set<core::int?> #t2 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t2.{core::Set::add}{Invariant}(42){(core::int?) → core::bool};
    #t2.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t2;
  core::Map<core::String, core::int?> map10 = block {
    final core::Map<core::String, core::int?> #t3 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t3.{core::Map::[]=}{Invariant}("bar", 42){(core::String, core::int?) → void};
    #t3.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t3;
  core::List<dynamic> list11 = block {
    final core::List<dynamic> #t4 = core::_GrowableList::•<dynamic>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t4.{core::List::add}{Invariant}(dynVar){(dynamic) → void};
  } =>#t4;
  core::Set<dynamic> set11 = block {
    final core::Set<dynamic> #t5 = new col::_Set::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t5.{core::Set::add}{Invariant}(dynVar){(dynamic) → core::bool};
    #t5.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t5;
  core::Map<core::String, dynamic> map11 = block {
    final core::Map<core::String, dynamic> #t6 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t6.{core::Map::[]=}{Invariant}("bar", dynVar){(core::String, dynamic) → void};
    #t6.{core::Map::[]=}{Invariant}("baz", null){(core::String, dynamic) → void};
  } =>#t6;
  core::List<core::List<core::int>> list12 = block {
    final core::List<core::List<core::int>> #t7 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t7.{core::List::add}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::List<core::int>) → void};
  } =>#t7;
  core::Set<core::List<core::int>?> set12 = block {
    final core::Set<core::List<core::int>?> #t8 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t8.{core::Set::add}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::List<core::int>?) → core::bool};
    #t8.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t8;
  core::Map<core::String, core::List<core::int>?> map12 = block {
    final core::Map<core::String, core::List<core::int>?> #t9 = <core::String, core::List<core::int>?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t9.{core::Map::[]=}{Invariant}("bar", core::_GrowableList::_literal1<core::int>(42)){(core::String, core::List<core::int>?) → void};
    #t9.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t9;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t10 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t10.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::Iterable<core::int>) → void};
  } =>#t10;
  core::Set<core::int?> set20 = block {
    final core::Set<core::int?> #t11 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t11.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::Iterable<core::int?>) → void};
    #t11.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t11;
  core::Map<core::String, core::int?> map20 = block {
    final core::Map<core::String, core::int?> #t12 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t12.{core::Map::addAll}{Invariant}(<core::String, core::int>{"bar": 42}){(core::Map<core::String, core::int?>) → void};
    #t12.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t12;
  core::List<dynamic> list21 = block {
    final core::List<dynamic> #t13 = core::_GrowableList::•<dynamic>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t13.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<dynamic>(dynVar)){(core::Iterable<dynamic>) → void};
  } =>#t13;
  core::Set<dynamic> set21 = block {
    final core::Set<dynamic> #t14 = new col::_Set::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t14.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<dynamic>(dynVar)){(core::Iterable<dynamic>) → void};
    #t14.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t14;
  core::Map<core::String, dynamic> map21 = block {
    final core::Map<core::String, dynamic> #t15 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t15.{core::Map::addAll}{Invariant}(<core::String, dynamic>{"bar": dynVar}){(core::Map<core::String, dynamic>) → void};
    #t15.{core::Map::[]=}{Invariant}("baz", null){(core::String, dynamic) → void};
  } =>#t15;
  core::List<core::List<core::int>> list22 = block {
    final core::List<core::List<core::int>> #t16 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t16.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(42))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t16;
  core::Set<core::List<core::int>?> set22 = block {
    final core::Set<core::List<core::int>?> #t17 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t17.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(42))){(core::Iterable<core::List<core::int>?>) → void};
    #t17.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t17;
  core::Map<core::String, core::List<core::int>?> map22 = block {
    final core::Map<core::String, core::List<core::int>?> #t18 = <core::String, core::List<core::int>?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t18.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>>{"bar": core::_GrowableList::_literal1<core::int>(42)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t18.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t18;
  core::List<core::int> list30 = block {
    final core::List<core::int> #t19 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t19.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::Iterable<core::int>) → void};
  } =>#t19;
  core::Set<core::int?> set30 = block {
    final core::Set<core::int?> #t20 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t20.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::Iterable<core::int?>) → void};
    #t20.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t20;
  core::Map<core::String, core::int?> map30 = block {
    final core::Map<core::String, core::int?> #t21 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t21.{core::Map::addAll}{Invariant}(<core::String, core::int>{"bar": 42}){(core::Map<core::String, core::int?>) → void};
    #t21.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t21;
  core::List<dynamic> list31 = block {
    final core::List<dynamic> #t22 = core::_GrowableList::•<dynamic>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t22.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<dynamic>(dynVar)){(core::Iterable<dynamic>) → void};
  } =>#t22;
  core::Set<dynamic> set31 = block {
    final core::Set<dynamic> #t23 = new col::_Set::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t23.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<dynamic>(dynVar)){(core::Iterable<dynamic>) → void};
    #t23.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t23;
  core::Map<core::String, dynamic> map31 = block {
    final core::Map<core::String, dynamic> #t24 = <core::String, dynamic>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t24.{core::Map::addAll}{Invariant}(<core::String, dynamic>{"bar": dynVar}){(core::Map<core::String, dynamic>) → void};
    #t24.{core::Map::[]=}{Invariant}("baz", null){(core::String, dynamic) → void};
  } =>#t24;
  core::List<core::List<core::int>> list33 = block {
    final core::List<core::List<core::int>> #t25 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t25.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(42))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t25;
  core::Set<core::List<core::int>?> set33 = block {
    final core::Set<core::List<core::int>?> #t26 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t26.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(42))){(core::Iterable<core::List<core::int>?>) → void};
    #t26.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t26;
  core::Map<core::String, core::List<core::int>?> map33 = block {
    final core::Map<core::String, core::List<core::int>?> #t27 = <core::String, core::List<core::int>?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t27.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>>{"bar": core::_GrowableList::_literal1<core::int>(42)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t27.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t27;
  core::List<core::List<core::int>> list40 = block {
    final core::List<core::List<core::int>> #t28 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t28.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t28;
  core::Set<core::List<core::int>?> set40 = block {
    final core::Set<core::List<core::int>?> #t29 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t29.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>?>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>?>) → void};
    #t29.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t29;
  core::Map<core::String, core::List<core::int>?> map40 = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:39:35: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
  Map<String, List<int>?> map40 = {if (oracle(\"foo\")) ...{\"bar\", []}, \"baz\": null};
                                  ^";
  core::List<core::List<core::int>> list41 = block {
    final core::List<core::List<core::int>> #t30 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t30.{core::List::addAll}{Invariant}( block {
        final core::Set<core::List<core::int>> #t31 = new col::_Set::•<core::List<core::int>>();
        #t31.{core::Set::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>) → core::bool};
      } =>#t31){(core::Iterable<core::List<core::int>>) → void};
  } =>#t30;
  core::Set<core::List<core::int>?> set41 = block {
    final core::Set<core::List<core::int>?> #t32 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t32.{core::Set::addAll}{Invariant}( block {
        final core::Set<core::List<core::int>?> #t33 = new col::_Set::•<core::List<core::int>?>();
        #t33.{core::Set::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>?) → core::bool};
      } =>#t33){(core::Iterable<core::List<core::int>?>) → void};
    #t32.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t32;
  core::List<core::List<core::int>> list42 = block {
    final core::List<core::List<core::int>> #t34 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t34.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t34;
  core::Set<core::List<core::int>?> set42 = block {
    final core::Set<core::List<core::int>?> #t35 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t35.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>?>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>?>) → void};
    #t35.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t35;
  core::Map<core::String, core::List<core::int>?> map42 = block {
    final core::Map<core::String, core::List<core::int>?> #t36 = <core::String, core::List<core::int>?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t36.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>?>{"bar": core::_GrowableList::•<core::int>(0)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t36.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t36;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t37 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t37.{core::List::addAll}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::Iterable<core::int>) → void};
  } =>#t37;
  core::Set<core::int?> set50 = block {
    final core::Set<core::int?> #t38 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t38.{core::Set::addAll}{Invariant}(core::_GrowableList::•<core::int?>(0)){(core::Iterable<core::int?>) → void};
    #t38.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t38;
  core::Map<core::String, core::int?> map50 = block {
    final core::Map<core::String, core::int?> #t39 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t39.{core::Map::addAll}{Invariant}(<core::String, core::int?>{}){(core::Map<core::String, core::int?>) → void};
    #t39.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t39;
  core::List<core::int> list51 = block {
    final core::List<core::int> #t40 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t40.{core::List::addAll}{Invariant}( block {
        final core::Set<core::int> #t41 = new col::_Set::•<core::int>();
      } =>#t41){(core::Iterable<core::int>) → void};
  } =>#t40;
  core::Set<core::int?> set51 = block {
    final core::Set<core::int?> #t42 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t42.{core::Set::addAll}{Invariant}( block {
        final core::Set<core::int?> #t43 = new col::_Set::•<core::int?>();
      } =>#t43){(core::Iterable<core::int?>) → void};
    #t42.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t42;
  core::List<core::int> list52 = block {
    final core::List<core::int> #t44 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t44.{core::List::addAll}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::Iterable<core::int>) → void};
  } =>#t44;
  core::Set<core::int?> set52 = block {
    final core::Set<core::int?> #t45 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t45.{core::Set::addAll}{Invariant}(core::_GrowableList::•<core::int?>(0)){(core::Iterable<core::int?>) → void};
    #t45.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t45;
  core::Map<core::String, core::int?> map52 = block {
    final core::Map<core::String, core::int?> #t46 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t46.{core::Map::addAll}{Invariant}(<core::String, core::int?>{}){(core::Map<core::String, core::int?>) → void};
    #t46.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t46;
  core::List<core::List<core::int>> list60 = block {
    final core::List<core::List<core::int>> #t47 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t47.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t47;
  core::Set<core::List<core::int>?> set60 = block {
    final core::Set<core::List<core::int>?> #t48 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t48.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>?>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>?>) → void};
    #t48.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t48;
  core::Map<core::String, core::List<core::int>?> map60 = block {
    final core::Map<core::String, core::List<core::int>?> #t49 = <core::String, core::List<core::int>?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t49.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>?>{"bar": core::_GrowableList::•<core::int>(0)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t49.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t49;
  core::List<core::List<core::int>> list61 = block {
    final core::List<core::List<core::int>> #t50 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t50.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t50;
  core::Set<core::List<core::int>?> set61 = block {
    final core::Set<core::List<core::int>?> #t51 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t51.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>?>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>?>) → void};
    #t51.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t51;
  core::Map<core::String, core::List<core::int>?> map61 = block {
    final core::Map<core::String, core::List<core::int>?> #t52 = <core::String, core::List<core::int>?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t52.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>?>{"bar": core::_GrowableList::•<core::int>(0)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t52.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t52;
  core::List<core::List<core::int>> list70 = block {
    final core::List<core::List<core::int>> #t53 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t53.{core::List::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>) → void};
  } =>#t53;
  core::Set<core::List<core::int>?> set70 = block {
    final core::Set<core::List<core::int>?> #t54 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t54.{core::Set::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>?) → core::bool};
    #t54.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t54;
  core::List<core::List<core::int>> list71 = block {
    final core::List<core::List<core::int>> #t55 = core::_GrowableList::•<core::List<core::int>>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t55.{core::List::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>) → void};
  } =>#t55;
  core::Set<core::List<core::int>?> set71 = block {
    final core::Set<core::List<core::int>?> #t56 = new col::_Set::•<core::List<core::int>?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t56.{core::Set::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>?) → core::bool};
    #t56.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t56;
  core::List<core::num> list80 = block {
    final core::List<core::num> #t57 = core::_GrowableList::•<core::num>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t57.{core::List::add}{Invariant}(42){(core::num) → void};
    else
      #t57.{core::List::add}{Invariant}(3.14){(core::num) → void};
  } =>#t57;
  core::Set<core::num?> set80 = block {
    final core::Set<core::num?> #t58 = new col::_Set::•<core::num?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t58.{core::Set::add}{Invariant}(42){(core::num?) → core::bool};
    else
      #t58.{core::Set::add}{Invariant}(3.14){(core::num?) → core::bool};
    #t58.{core::Set::add}{Invariant}(null){(core::num?) → core::bool};
  } =>#t58;
  core::Map<core::String, core::num?> map80 = block {
    final core::Map<core::String, core::num?> #t59 = <core::String, core::num?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t59.{core::Map::[]=}{Invariant}("bar", 42){(core::String, core::num?) → void};
    else
      #t59.{core::Map::[]=}{Invariant}("bar", 3.14){(core::String, core::num?) → void};
    #t59.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::num?) → void};
  } =>#t59;
  core::List<core::num> list81 = block {
    final core::List<core::num> #t60 = core::_GrowableList::•<core::num>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t60.{core::List::addAll}{Invariant}(listInt){(core::Iterable<core::num>) → void};
    else
      #t60.{core::List::addAll}{Invariant}(listDouble){(core::Iterable<core::num>) → void};
  } =>#t60;
  core::Set<core::num?> set81 = block {
    final core::Set<core::num?> #t61 = new col::_Set::•<core::num?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t61.{core::Set::addAll}{Invariant}(listInt){(core::Iterable<core::num?>) → void};
    else
      #t61.{core::Set::addAll}{Invariant}(listDouble){(core::Iterable<core::num?>) → void};
    #t61.{core::Set::add}{Invariant}(null){(core::num?) → core::bool};
  } =>#t61;
  core::Map<core::String, core::num?> map81 = block {
    final core::Map<core::String, core::num?> #t62 = <core::String, core::num?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t62.{core::Map::addAll}{Invariant}(mapToInt){(core::Map<core::String, core::num?>) → void};
    else
      #t62.{core::Map::addAll}{Invariant}(mapToDouble){(core::Map<core::String, core::num?>) → void};
    #t62.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::num?) → void};
  } =>#t62;
  core::List<dynamic> list82 = block {
    final core::List<dynamic> #t63 = core::_GrowableList::•<dynamic>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t63.{core::List::addAll}{Invariant}(listInt){(core::Iterable<dynamic>) → void};
    else
      #t63.{core::List::addAll}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>){(core::Iterable<dynamic>) → void};
  } =>#t63;
  core::Set<dynamic> set82 = block {
    final core::Set<dynamic> #t64 = new col::_Set::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t64.{core::Set::addAll}{Invariant}(listInt){(core::Iterable<dynamic>) → void};
    else
      #t64.{core::Set::addAll}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>){(core::Iterable<dynamic>) → void};
    #t64.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t64;
  core::Set<dynamic> map82 = block {
    final core::Set<dynamic> #t65 = new col::_Set::•<dynamic>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t65.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:71:38: Error: Unexpected type 'Map<String, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  var map82 = {if (oracle(\"foo\")) ...mapToInt else ...dynVar, null};
                                     ^"){(dynamic) → core::bool};
    else
      #t65.{core::Set::addAll}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>){(core::Iterable<dynamic>) → void};
    #t65.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t65;
  core::List<core::num> list83 = block {
    final core::List<core::num> #t66 = core::_GrowableList::•<core::num>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t66.{core::List::add}{Invariant}(42){(core::num) → void};
    else
      #t66.{core::List::addAll}{Invariant}(listDouble){(core::Iterable<core::num>) → void};
  } =>#t66;
  core::Set<core::num?> set83 = block {
    final core::Set<core::num?> #t67 = new col::_Set::•<core::num?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t67.{core::Set::addAll}{Invariant}(listInt){(core::Iterable<core::num?>) → void};
    else
      #t67.{core::Set::add}{Invariant}(3.14){(core::num?) → core::bool};
    #t67.{core::Set::add}{Invariant}(null){(core::num?) → core::bool};
  } =>#t67;
  core::Map<core::String, core::num?> map83 = block {
    final core::Map<core::String, core::num?> #t68 = <core::String, core::num?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t68.{core::Map::addAll}{Invariant}(mapToInt){(core::Map<core::String, core::num?>) → void};
    else
      #t68.{core::Map::[]=}{Invariant}("bar", 3.14){(core::String, core::num?) → void};
    #t68.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::num?) → void};
  } =>#t68;
  core::List<core::int> list90 = block {
    final core::List<core::int> #t69 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t69.{core::List::add}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::int){(core::int) → void};
  } =>#t69;
  core::Set<core::int?> set90 = block {
    final core::Set<core::int?> #t70 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t70.{core::Set::add}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::int?){(core::int?) → core::bool};
    #t70.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t70;
  core::Map<core::String, core::int?> map90 = block {
    final core::Map<core::String, core::int?> #t71 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t71.{core::Map::[]=}{Invariant}("bar", dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::int?){(core::String, core::int?) → void};
    #t71.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t71;
  core::List<core::int> list91 = block {
    final core::List<core::int> #t72 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool) {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final dynamic #t73 = :sync-for-iterator.{core::Iterator::current}{dynamic};
        {
          final core::int #t74 = #t73 as{TypeError,ForNonNullableByDefault} core::int;
          #t72.{core::List::add}{Invariant}(#t74){(core::int) → void};
        }
      }
    }
  } =>#t72;
  core::Set<core::int?> set91 = block {
    final core::Set<core::int?> #t75 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool) {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final dynamic #t76 = :sync-for-iterator.{core::Iterator::current}{dynamic};
        {
          final core::int? #t77 = #t76 as{TypeError,ForNonNullableByDefault} core::int?;
          #t75.{core::Set::add}{Invariant}(#t77){(core::int?) → core::bool};
        }
      }
    }
    #t75.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t75;
  core::Map<core::String, core::int?> map91 = block {
    final core::Map<core::String, core::int?> #t78 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool) {
      synthesized core::Iterator<core::MapEntry<core::String, core::int?>> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Map<dynamic, dynamic>).{core::Map::entries}{core::Iterable<core::MapEntry<core::String, core::int?>>}.{core::Iterable::iterator}{core::Iterator<core::MapEntry<core::String, core::int?>>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final core::MapEntry<dynamic, dynamic> #t79 = :sync-for-iterator.{core::Iterator::current}{core::MapEntry<core::String, core::int?>};
        {
          final core::String #t80 = #t79.{core::MapEntry::key}{dynamic} as{TypeError,ForNonNullableByDefault} core::String;
          final core::int? #t81 = #t79.{core::MapEntry::value}{dynamic} as{TypeError,ForNonNullableByDefault} core::int?;
          #t78.{core::Map::[]=}{Invariant}(#t80, #t81){(core::String, core::int?) → void};
        }
      }
    }
    #t78.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t78;
  core::List<core::int> list100 = block {
    final core::List<core::int> #t82 = core::_GrowableList::•<core::int>(0);
    if(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t82.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t82;
  core::Set<core::int> set100 = block {
    final core::Set<core::int> #t83 = new col::_Set::•<core::int>();
    if(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t83.{core::Set::add}{Invariant}(42){(core::int) → core::bool};
  } =>#t83;
  core::Map<core::int, core::int> map100 = block {
    final core::Map<core::int, core::int> #t84 = <core::int, core::int>{};
    if(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t84.{core::Map::[]=}{Invariant}(42, 42){(core::int, core::int) → void};
  } =>#t84;
}
static method testIfElementErrors(core::Map<core::int, core::int> map) → dynamic {
  block {
    final core::List<core::int> #t85 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t85.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:87:28: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  <int>[if (oracle(\"foo\")) \"bar\"];
                           ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int){(core::int) → void};
  } =>#t85;
  block {
    final core::Set<core::int?> #t86 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t86.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:88:29: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
  <int?>{if (oracle(\"foo\")) \"bar\", null};
                            ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int?){(core::int?) → core::bool};
    #t86.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t86;
  block {
    final core::Map<core::String, core::int?> #t87 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t87.{core::Map::[]=}{Invariant}("bar", invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:89:44: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
  <String, int?>{if (oracle(\"foo\")) \"bar\": \"bar\", \"baz\": null};
                                           ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int?){(core::String, core::int?) → void};
    #t87.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t87;
  block {
    final core::List<core::int> #t88 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t88.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:90:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  <int>[if (oracle(\"foo\")) ...[\"bar\"]];
                               ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int)){(core::Iterable<core::int>) → void};
  } =>#t88;
  block {
    final core::Set<core::int?> #t89 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t89.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::int?>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:91:33: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
  <int?>{if (oracle(\"foo\")) ...[\"bar\"], null};
                                ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int?)){(core::Iterable<core::int?>) → void};
    #t89.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t89;
  block {
    final core::Map<core::String, core::int?> #t90 = <core::String, core::int?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t90.{core::Map::addAll}{Invariant}(<core::String, core::int?>{"bar": invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:92:48: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
  <String, int?>{if (oracle(\"foo\")) ...{\"bar\": \"bar\"}, \"baz\": null};
                                               ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int?}){(core::Map<core::String, core::int?>) → void};
    #t90.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t90;
  block {
    final core::List<core::int> #t91 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t91.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:93:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) ...map];
                              ^"){(core::int) → void};
  } =>#t91;
  block {
    final core::Set<core::int?> #t92 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t92.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:94:32: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int?>{if (oracle(\"foo\")) ...map, null};
                               ^"){(core::int?) → core::bool};
    #t92.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t92;
  <core::String, core::int?>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:95:40: Error: Unexpected type 'List<String>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{if (oracle(\"foo\")) ...[\"bar\"], \"baz\": null};
                                       ^": null, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:95:40: Error: Unexpected type 'List<String>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{if (oracle(\"foo\")) ...[\"bar\"], \"baz\": null};
                                       ^": null};
  block {
    final core::List<core::String> #t93 = core::_GrowableList::•<core::String>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t93.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:96:31: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
  <String>[if (oracle(\"foo\")) 42 else 3.14];
                              ^" in 42 as{TypeError,ForNonNullableByDefault} core::String){(core::String) → void};
    else
      #t93.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:96:39: Error: A value of type 'double' can't be assigned to a variable of type 'String'.
  <String>[if (oracle(\"foo\")) 42 else 3.14];
                                      ^" in 3.14 as{TypeError,ForNonNullableByDefault} core::String){(core::String) → void};
  } =>#t93;
  block {
    final core::Set<core::String?> #t94 = new col::_Set::•<core::String?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t94.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:97:32: Error: A value of type 'int' can't be assigned to a variable of type 'String?'.
  <String?>{if (oracle(\"foo\")) 42 else 3.14, null};
                               ^" in 42 as{TypeError,ForNonNullableByDefault} core::String?){(core::String?) → core::bool};
    else
      #t94.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:97:40: Error: A value of type 'double' can't be assigned to a variable of type 'String?'.
  <String?>{if (oracle(\"foo\")) 42 else 3.14, null};
                                       ^" in 3.14 as{TypeError,ForNonNullableByDefault} core::String?){(core::String?) → core::bool};
    #t94.{core::Set::add}{Invariant}(null){(core::String?) → core::bool};
  } =>#t94;
  block {
    final core::Map<core::String, core::String?> #t95 = <core::String, core::String?>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t95.{core::Map::[]=}{Invariant}("bar", invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:98:47: Error: A value of type 'int' can't be assigned to a variable of type 'String?'.
  <String, String?>{if (oracle(\"foo\")) \"bar\": 42 else \"baz\": 3.14, \"baz\": null};
                                              ^" in 42 as{TypeError,ForNonNullableByDefault} core::String?){(core::String, core::String?) → void};
    else
      #t95.{core::Map::[]=}{Invariant}("baz", invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:98:62: Error: A value of type 'double' can't be assigned to a variable of type 'String?'.
  <String, String?>{if (oracle(\"foo\")) \"bar\": 42 else \"baz\": 3.14, \"baz\": null};
                                                             ^" in 3.14 as{TypeError,ForNonNullableByDefault} core::String?){(core::String, core::String?) → void};
    #t95.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::String?) → void};
  } =>#t95;
  block {
    final core::List<core::int> #t96 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t96.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:99:31: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) ...map else 42];
                              ^"){(core::int) → void};
    else
      #t96.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t96;
  block {
    final core::Set<core::int?> #t97 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t97.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:100:32: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int?>{if (oracle(\"foo\")) ...map else 42, null};
                               ^"){(core::int?) → core::bool};
    else
      #t97.{core::Set::add}{Invariant}(42){(core::int?) → core::bool};
    #t97.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t97;
  <core::String, core::int?>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:101:40: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{if (oracle(\"foo\")) ...[42] else \"bar\": 42, \"baz\": null};
                                       ^": null, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:101:40: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{if (oracle(\"foo\")) ...[42] else \"bar\": 42, \"baz\": null};
                                       ^": null};
  block {
    final core::List<core::int> #t98 = core::_GrowableList::•<core::int>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t98.{core::List::add}{Invariant}(42){(core::int) → void};
    else
      #t98.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:102:39: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[if (oracle(\"foo\")) 42 else ...map];
                                      ^"){(core::int) → void};
  } =>#t98;
  block {
    final core::Set<core::int?> #t99 = new col::_Set::•<core::int?>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t99.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:103:32: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int?>{if (oracle(\"foo\")) ...map else 42, null};
                               ^"){(core::int?) → core::bool};
    else
      #t99.{core::Set::add}{Invariant}(42){(core::int?) → core::bool};
    #t99.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t99;
  <core::String, core::int?>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:104:55: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{if (oracle(\"foo\")) \"bar\": 42 else ...[42], \"baz\": null};
                                                      ^": null, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:104:55: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{if (oracle(\"foo\")) \"bar\": 42 else ...[42], \"baz\": null};
                                                      ^": null};
  core::Set<dynamic> set10 = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:106:24: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
  Set<dynamic> set10 = {if (oracle(\"foo\")) 42 else \"bar\": 3.14};
                       ^";
  core::Map<dynamic, dynamic> map10 = <dynamic, dynamic>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:107:53: Error: Expected ':' after this.
  Map<dynamic, dynamic> map10 = {if (oracle(\"foo\")) 42 else \"bar\": 3.14};
                                                    ^": null};
  core::Set<dynamic> set11 = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:108:24: Error: Both Iterable and Map spread elements encountered in ambiguous literal.
  Set<dynamic> set11 = {if (oracle(\"foo\")) \"bar\": 3.14 else 42};
                       ^";
  core::Map<dynamic, dynamic> map11 = <dynamic, dynamic>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:109:70: Error: Expected ':' after this.
  Map<dynamic, dynamic> map11 = {if (oracle(\"foo\")) \"bar\": 3.14 else 42};
                                                                     ^": null};
  core::Map<dynamic, Null> map12 = <dynamic, Null>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:110:35: Error: Expected ':' after this.
  var map12 = {if (oracle(\"foo\")) 42 else \"bar\": 3.14};
                                  ^": null};
  core::Map<dynamic, Null> map13 = <dynamic, Null>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:111:52: Error: Expected ':' after this.
  var map13 = {if (oracle(\"foo\")) \"bar\": 3.14 else 42};
                                                   ^": null};
  core::List<core::int> list20 = block {
    final core::List<core::int> #t100 = core::_GrowableList::•<core::int>(0);
    if(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:112:27: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
  List<int> list20 = [if (42) 42];
                          ^" in 42 as{TypeError,ForNonNullableByDefault} core::bool)
      #t100.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t100;
  core::Set<core::int> set20 = block {
    final core::Set<core::int> #t101 = new col::_Set::•<core::int>();
    if(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:113:25: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
  Set<int> set20 = {if (42) 42};
                        ^" in 42 as{TypeError,ForNonNullableByDefault} core::bool)
      #t101.{core::Set::add}{Invariant}(42){(core::int) → core::bool};
  } =>#t101;
  core::Map<core::int, core::int> map30 = block {
    final core::Map<core::int, core::int> #t102 = <core::int, core::int>{};
    if(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:114:30: Error: A value of type 'int' can't be assigned to a variable of type 'bool'.
  Map<int, int> map30 = {if (42) 42: 42};
                             ^" in 42 as{TypeError,ForNonNullableByDefault} core::bool)
      #t102.{core::Map::[]=}{Invariant}(42, 42){(core::int, core::int) → void};
  } =>#t102;
  core::List<core::String> list40 = block {
    final core::List<core::String> #t103 = core::_GrowableList::•<core::String>(0);
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t103.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:115:53: Error: A value of type 'bool' can't be assigned to a variable of type 'String'.
  List<String> list40 = <String>[if (oracle(\"foo\")) true else 42];
                                                    ^" in true as{TypeError,ForNonNullableByDefault} core::String){(core::String) → void};
    else
      #t103.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:115:63: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
  List<String> list40 = <String>[if (oracle(\"foo\")) true else 42];
                                                              ^" in 42 as{TypeError,ForNonNullableByDefault} core::String){(core::String) → void};
  } =>#t103;
  core::Set<core::String> set40 = block {
    final core::Set<core::String> #t104 = new col::_Set::•<core::String>();
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t104.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:116:51: Error: A value of type 'bool' can't be assigned to a variable of type 'String'.
  Set<String> set40 = <String>{if (oracle(\"foo\")) true else 42};
                                                  ^" in true as{TypeError,ForNonNullableByDefault} core::String){(core::String) → core::bool};
    else
      #t104.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:116:61: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
  Set<String> set40 = <String>{if (oracle(\"foo\")) true else 42};
                                                            ^" in 42 as{TypeError,ForNonNullableByDefault} core::String){(core::String) → core::bool};
  } =>#t104;
  core::Map<core::String, core::int> map40 = block {
    final core::Map<core::String, core::int> #t105 = <core::String, core::int>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t105.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:117:61: Error: A value of type 'bool' can't be assigned to a variable of type 'String'.
  Map<String, int> map40 = <String, int>{if (oracle(\"foo\")) true: 42 else 42: 42};
                                                            ^" in true as{TypeError,ForNonNullableByDefault} core::String, 42){(core::String, core::int) → void};
    else
      #t105.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:117:75: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
  Map<String, int> map40 = <String, int>{if (oracle(\"foo\")) true: 42 else 42: 42};
                                                                          ^" in 42 as{TypeError,ForNonNullableByDefault} core::String, 42){(core::String, core::int) → void};
  } =>#t105;
  core::Map<core::int, core::String> map41 = block {
    final core::Map<core::int, core::String> #t106 = <core::int, core::String>{};
    if(self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
      #t106.{core::Map::[]=}{Invariant}(42, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:118:65: Error: A value of type 'bool' can't be assigned to a variable of type 'String'.
  Map<int, String> map41 = <int, String>{if (oracle(\"foo\")) 42: true else 42: 42};
                                                                ^" in true as{TypeError,ForNonNullableByDefault} core::String){(core::int, core::String) → void};
    else
      #t106.{core::Map::[]=}{Invariant}(42, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:118:79: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
  Map<int, String> map41 = <int, String>{if (oracle(\"foo\")) 42: true else 42: 42};
                                                                              ^" in 42 as{TypeError,ForNonNullableByDefault} core::String){(core::int, core::String) → void};
  } =>#t106;
}
static method testForElement(dynamic dynVar, core::List<core::int> listInt, core::List<core::double> listDouble, core::int index, core::Map<core::String, core::int> mapStringInt, core::Map<core::String, core::double> mapStringDouble) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t107 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t107.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t107;
  core::Set<core::int?> set10 = block {
    final core::Set<core::int?> #t108 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t108.{core::Set::add}{Invariant}(42){(core::int?) → core::bool};
    #t108.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t108;
  core::Map<core::String, core::int?> map10 = block {
    final core::Map<core::String, core::int?> #t109 = <core::String, core::int?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t109.{core::Map::[]=}{Invariant}("bar", 42){(core::String, core::int?) → void};
    #t109.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t109;
  core::List<dynamic> list11 = block {
    final core::List<dynamic> #t110 = core::_GrowableList::•<dynamic>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t110.{core::List::add}{Invariant}(dynVar){(dynamic) → void};
  } =>#t110;
  core::Set<dynamic> set11 = block {
    final core::Set<dynamic> #t111 = new col::_Set::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t111.{core::Set::add}{Invariant}(dynVar){(dynamic) → core::bool};
    #t111.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t111;
  core::Map<core::String, dynamic> map11 = block {
    final core::Map<core::String, dynamic> #t112 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t112.{core::Map::[]=}{Invariant}("bar", dynVar){(core::String, dynamic) → void};
    #t112.{core::Map::[]=}{Invariant}("baz", null){(core::String, dynamic) → void};
  } =>#t112;
  core::List<core::List<core::int>> list12 = block {
    final core::List<core::List<core::int>> #t113 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t113.{core::List::add}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::List<core::int>) → void};
  } =>#t113;
  core::Set<core::List<core::int>?> set12 = block {
    final core::Set<core::List<core::int>?> #t114 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t114.{core::Set::add}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::List<core::int>?) → core::bool};
    #t114.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t114;
  core::Map<core::String, core::List<core::int>?> map12 = block {
    final core::Map<core::String, core::List<core::int>?> #t115 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t115.{core::Map::[]=}{Invariant}("bar", core::_GrowableList::_literal1<core::int>(42)){(core::String, core::List<core::int>?) → void};
    #t115.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t115;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t116 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t116.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::Iterable<core::int>) → void};
  } =>#t116;
  core::Set<core::int?> set20 = block {
    final core::Set<core::int?> #t117 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t117.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::Iterable<core::int?>) → void};
    #t117.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t117;
  core::Map<core::String, core::int?> map20 = block {
    final core::Map<core::String, core::int?> #t118 = <core::String, core::int?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t118.{core::Map::addAll}{Invariant}(<core::String, core::int>{"bar": 42}){(core::Map<core::String, core::int?>) → void};
    #t118.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t118;
  core::List<dynamic> list21 = block {
    final core::List<dynamic> #t119 = core::_GrowableList::•<dynamic>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t119.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<dynamic>(dynVar)){(core::Iterable<dynamic>) → void};
  } =>#t119;
  core::Set<dynamic> set21 = block {
    final core::Set<dynamic> #t120 = new col::_Set::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t120.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<dynamic>(dynVar)){(core::Iterable<dynamic>) → void};
    #t120.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t120;
  core::Map<core::String, dynamic> map21 = block {
    final core::Map<core::String, dynamic> #t121 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t121.{core::Map::addAll}{Invariant}(<core::String, dynamic>{"bar": dynVar}){(core::Map<core::String, dynamic>) → void};
    #t121.{core::Map::[]=}{Invariant}("baz", null){(core::String, dynamic) → void};
  } =>#t121;
  core::List<core::List<core::int>> list22 = block {
    final core::List<core::List<core::int>> #t122 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t122.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(42))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t122;
  core::Set<core::List<core::int>?> set22 = block {
    final core::Set<core::List<core::int>?> #t123 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t123.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(42))){(core::Iterable<core::List<core::int>?>) → void};
    #t123.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t123;
  core::Map<core::String, core::List<core::int>?> map22 = block {
    final core::Map<core::String, core::List<core::int>?> #t124 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t124.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>>{"bar": core::_GrowableList::_literal1<core::int>(42)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t124.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t124;
  core::List<core::int> list30 = block {
    final core::List<core::int> #t125 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t125.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::Iterable<core::int>) → void};
  } =>#t125;
  core::Set<core::int?> set30 = block {
    final core::Set<core::int?> #t126 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t126.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(42)){(core::Iterable<core::int?>) → void};
    #t126.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t126;
  core::Map<core::String, core::int?> map30 = block {
    final core::Map<core::String, core::int?> #t127 = <core::String, core::int?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t127.{core::Map::addAll}{Invariant}(<core::String, core::int>{"bar": 42}){(core::Map<core::String, core::int?>) → void};
    #t127.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t127;
  core::List<dynamic> list31 = block {
    final core::List<dynamic> #t128 = core::_GrowableList::•<dynamic>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t128.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<dynamic>(dynVar)){(core::Iterable<dynamic>) → void};
  } =>#t128;
  core::Set<dynamic> set31 = block {
    final core::Set<dynamic> #t129 = new col::_Set::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t129.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<dynamic>(dynVar)){(core::Iterable<dynamic>) → void};
    #t129.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t129;
  core::Map<core::String, dynamic> map31 = block {
    final core::Map<core::String, dynamic> #t130 = <core::String, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t130.{core::Map::addAll}{Invariant}(<core::String, dynamic>{"bar": dynVar}){(core::Map<core::String, dynamic>) → void};
    #t130.{core::Map::[]=}{Invariant}("baz", null){(core::String, dynamic) → void};
  } =>#t130;
  core::List<core::List<core::int>> list33 = block {
    final core::List<core::List<core::int>> #t131 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t131.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(42))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t131;
  core::Set<core::List<core::int>?> set33 = block {
    final core::Set<core::List<core::int>?> #t132 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t132.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(42))){(core::Iterable<core::List<core::int>?>) → void};
    #t132.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t132;
  core::Map<core::String, core::List<core::int>?> map33 = block {
    final core::Map<core::String, core::List<core::int>?> #t133 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t133.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>>{"bar": core::_GrowableList::_literal1<core::int>(42)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t133.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t133;
  core::List<core::List<core::int>> list40 = block {
    final core::List<core::List<core::int>> #t134 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t134.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t134;
  core::Set<core::List<core::int>?> set40 = block {
    final core::Set<core::List<core::int>?> #t135 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t135.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>?>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>?>) → void};
    #t135.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t135;
  core::Map<core::String, core::List<core::int>?> map40 = block {
    final core::Map<core::String, core::List<core::int>?> #t136 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t136.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>?>{"bar": core::_GrowableList::•<core::int>(0)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t136.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t136;
  core::List<core::List<core::int>> list41 = block {
    final core::List<core::List<core::int>> #t137 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t137.{core::List::addAll}{Invariant}( block {
        final core::Set<core::List<core::int>> #t138 = new col::_Set::•<core::List<core::int>>();
        #t138.{core::Set::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>) → core::bool};
      } =>#t138){(core::Iterable<core::List<core::int>>) → void};
  } =>#t137;
  core::Set<core::List<core::int>?> set41 = block {
    final core::Set<core::List<core::int>?> #t139 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t139.{core::Set::addAll}{Invariant}( block {
        final core::Set<core::List<core::int>?> #t140 = new col::_Set::•<core::List<core::int>?>();
        #t140.{core::Set::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>?) → core::bool};
      } =>#t140){(core::Iterable<core::List<core::int>?>) → void};
    #t139.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t139;
  core::List<core::List<core::int>> list42 = block {
    final core::List<core::List<core::int>> #t141 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t141.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t141;
  core::Set<core::List<core::int>?> set42 = block {
    final core::Set<core::List<core::int>?> #t142 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t142.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>?>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>?>) → void};
    #t142.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t142;
  core::Map<core::String, core::List<core::int>?> map42 = block {
    final core::Map<core::String, core::List<core::int>?> #t143 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t143.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>?>{"bar": core::_GrowableList::•<core::int>(0)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t143.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t143;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t144 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t144.{core::List::addAll}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::Iterable<core::int>) → void};
  } =>#t144;
  core::Set<core::int?> set50 = block {
    final core::Set<core::int?> #t145 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t145.{core::Set::addAll}{Invariant}(core::_GrowableList::•<core::int?>(0)){(core::Iterable<core::int?>) → void};
    #t145.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t145;
  core::Map<core::String, core::int?> map50 = block {
    final core::Map<core::String, core::int?> #t146 = <core::String, core::int?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t146.{core::Map::addAll}{Invariant}(<core::String, core::int?>{}){(core::Map<core::String, core::int?>) → void};
    #t146.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t146;
  core::List<core::int> list51 = block {
    final core::List<core::int> #t147 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t147.{core::List::addAll}{Invariant}( block {
        final core::Set<core::int> #t148 = new col::_Set::•<core::int>();
      } =>#t148){(core::Iterable<core::int>) → void};
  } =>#t147;
  core::Set<core::int?> set51 = block {
    final core::Set<core::int?> #t149 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t149.{core::Set::addAll}{Invariant}( block {
        final core::Set<core::int?> #t150 = new col::_Set::•<core::int?>();
      } =>#t150){(core::Iterable<core::int?>) → void};
    #t149.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t149;
  core::List<core::int> list52 = block {
    final core::List<core::int> #t151 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t151.{core::List::addAll}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::Iterable<core::int>) → void};
  } =>#t151;
  core::Set<core::int?> set52 = block {
    final core::Set<core::int?> #t152 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t152.{core::Set::addAll}{Invariant}(core::_GrowableList::•<core::int?>(0)){(core::Iterable<core::int?>) → void};
    #t152.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t152;
  core::List<core::List<core::int>> list60 = block {
    final core::List<core::List<core::int>> #t153 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t153.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t153;
  core::Set<core::List<core::int>?> set60 = block {
    final core::Set<core::List<core::int>?> #t154 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t154.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>?>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>?>) → void};
    #t154.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t154;
  core::Map<core::String, core::List<core::int>?> map60 = block {
    final core::Map<core::String, core::List<core::int>?> #t155 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t155.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>?>{"bar": core::_GrowableList::•<core::int>(0)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t155.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t155;
  core::List<core::List<core::int>> list61 = block {
    final core::List<core::List<core::int>> #t156 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t156.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>>) → void};
  } =>#t156;
  core::Set<core::List<core::int>?> set61 = block {
    final core::Set<core::List<core::int>?> #t157 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t157.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::List<core::int>?>(core::_GrowableList::•<core::int>(0))){(core::Iterable<core::List<core::int>?>) → void};
    #t157.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t157;
  core::Map<core::String, core::List<core::int>?> map61 = block {
    final core::Map<core::String, core::List<core::int>?> #t158 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t158.{core::Map::addAll}{Invariant}(<core::String, core::List<core::int>?>{"bar": core::_GrowableList::•<core::int>(0)}){(core::Map<core::String, core::List<core::int>?>) → void};
    #t158.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t158;
  core::List<core::List<core::int>> list70 = block {
    final core::List<core::List<core::int>> #t159 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t159.{core::List::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>) → void};
  } =>#t159;
  core::Set<core::List<core::int>?> set70 = block {
    final core::Set<core::List<core::int>?> #t160 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t160.{core::Set::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>?) → core::bool};
    #t160.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t160;
  core::Map<core::String, core::List<core::int>?> map70 = block {
    final core::Map<core::String, core::List<core::int>?> #t161 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t161.{core::Map::[]=}{Invariant}("bar", core::_GrowableList::•<core::int>(0)){(core::String, core::List<core::int>?) → void};
    #t161.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t161;
  core::List<core::List<core::int>> list71 = block {
    final core::List<core::List<core::int>> #t162 = core::_GrowableList::•<core::List<core::int>>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t162.{core::List::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>) → void};
  } =>#t162;
  core::Set<core::List<core::int>?> set71 = block {
    final core::Set<core::List<core::int>?> #t163 = new col::_Set::•<core::List<core::int>?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t163.{core::Set::add}{Invariant}(core::_GrowableList::•<core::int>(0)){(core::List<core::int>?) → core::bool};
    #t163.{core::Set::add}{Invariant}(null){(core::List<core::int>?) → core::bool};
  } =>#t163;
  core::Map<core::String, core::List<core::int>?> map71 = block {
    final core::Map<core::String, core::List<core::int>?> #t164 = <core::String, core::List<core::int>?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t164.{core::Map::[]=}{Invariant}("bar", core::_GrowableList::•<core::int>(0)){(core::String, core::List<core::int>?) → void};
    #t164.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::List<core::int>?) → void};
  } =>#t164;
  core::List<core::num> list80 = block {
    final core::List<core::num> #t165 = core::_GrowableList::•<core::num>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t165.{core::List::add}{Invariant}(42){(core::num) → void};
      else
        #t165.{core::List::add}{Invariant}(3.14){(core::num) → void};
  } =>#t165;
  core::Set<core::num?> set80 = block {
    final core::Set<core::num?> #t166 = new col::_Set::•<core::num?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t166.{core::Set::add}{Invariant}(42){(core::num?) → core::bool};
      else
        #t166.{core::Set::add}{Invariant}(3.14){(core::num?) → core::bool};
    #t166.{core::Set::add}{Invariant}(null){(core::num?) → core::bool};
  } =>#t166;
  core::Map<core::String, core::num?> map80 = block {
    final core::Map<core::String, core::num?> #t167 = <core::String, core::num?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t167.{core::Map::[]=}{Invariant}("bar", 42){(core::String, core::num?) → void};
      else
        #t167.{core::Map::[]=}{Invariant}("bar", 3.14){(core::String, core::num?) → void};
    #t167.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::num?) → void};
  } =>#t167;
  core::List<core::num> list81 = block {
    final core::List<core::num> #t168 = core::_GrowableList::•<core::num>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t168.{core::List::addAll}{Invariant}(listInt){(core::Iterable<core::num>) → void};
      else
        #t168.{core::List::addAll}{Invariant}(listDouble){(core::Iterable<core::num>) → void};
  } =>#t168;
  core::Set<core::num?> set81 = block {
    final core::Set<core::num?> #t169 = new col::_Set::•<core::num?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t169.{core::Set::addAll}{Invariant}(listInt){(core::Iterable<core::num?>) → void};
      else
        #t169.{core::Set::addAll}{Invariant}(listDouble){(core::Iterable<core::num?>) → void};
    #t169.{core::Set::add}{Invariant}(null){(core::num?) → core::bool};
  } =>#t169;
  core::Map<core::String, core::num?> map81 = block {
    final core::Map<core::String, core::num?> #t170 = <core::String, core::num?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t170.{core::Map::addAll}{Invariant}(mapStringInt){(core::Map<core::String, core::num?>) → void};
      else
        #t170.{core::Map::addAll}{Invariant}(mapStringDouble){(core::Map<core::String, core::num?>) → void};
    #t170.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::num?) → void};
  } =>#t170;
  core::List<dynamic> list82 = block {
    final core::List<dynamic> #t171 = core::_GrowableList::•<dynamic>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t171.{core::List::addAll}{Invariant}(listInt){(core::Iterable<dynamic>) → void};
      else
        #t171.{core::List::addAll}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>){(core::Iterable<dynamic>) → void};
  } =>#t171;
  core::Set<dynamic> set82 = block {
    final core::Set<dynamic> #t172 = new col::_Set::•<dynamic>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t172.{core::Set::addAll}{Invariant}(listInt){(core::Iterable<dynamic>) → void};
      else
        #t172.{core::Set::addAll}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>){(core::Iterable<dynamic>) → void};
    #t172.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t172;
  core::Map<dynamic, dynamic> map82 = block {
    final core::Map<dynamic, dynamic> #t173 = <dynamic, dynamic>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t173.{core::Map::addAll}{Invariant}(mapStringInt){(core::Map<dynamic, dynamic>) → void};
      else
        #t173.{core::Map::addAll}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Map<dynamic, dynamic>){(core::Map<dynamic, dynamic>) → void};
    #t173.{core::Map::[]=}{Invariant}("baz", null){(dynamic, dynamic) → void};
  } =>#t173;
  core::List<core::num> list83 = block {
    final core::List<core::num> #t174 = core::_GrowableList::•<core::num>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t174.{core::List::add}{Invariant}(42){(core::num) → void};
      else
        #t174.{core::List::addAll}{Invariant}(listDouble){(core::Iterable<core::num>) → void};
  } =>#t174;
  core::Set<core::num?> set83 = block {
    final core::Set<core::num?> #t175 = new col::_Set::•<core::num?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t175.{core::Set::addAll}{Invariant}(listInt){(core::Iterable<core::num?>) → void};
      else
        #t175.{core::Set::add}{Invariant}(3.14){(core::num?) → core::bool};
    #t175.{core::Set::add}{Invariant}(null){(core::num?) → core::bool};
  } =>#t175;
  core::Map<core::String, core::num?> map83 = block {
    final core::Map<core::String, core::num?> #t176 = <core::String, core::num?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t176.{core::Map::addAll}{Invariant}(mapStringInt){(core::Map<core::String, core::num?>) → void};
      else
        #t176.{core::Map::[]=}{Invariant}("bar", 3.14){(core::String, core::num?) → void};
    #t176.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::num?) → void};
  } =>#t176;
  core::List<core::int> list90 = block {
    final core::List<core::int> #t177 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t177.{core::List::add}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::int){(core::int) → void};
  } =>#t177;
  core::Set<core::int?> set90 = block {
    final core::Set<core::int?> #t178 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t178.{core::Set::add}{Invariant}(dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::int?){(core::int?) → core::bool};
    #t178.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t178;
  core::Map<core::String, core::int?> map90 = block {
    final core::Map<core::String, core::int?> #t179 = <core::String, core::int?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t179.{core::Map::[]=}{Invariant}("bar", dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::int?){(core::String, core::int?) → void};
    #t179.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t179;
  core::List<core::int> list91 = block {
    final core::List<core::int> #t180 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int}) {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final dynamic #t181 = :sync-for-iterator.{core::Iterator::current}{dynamic};
        {
          final core::int #t182 = #t181 as{TypeError,ForNonNullableByDefault} core::int;
          #t180.{core::List::add}{Invariant}(#t182){(core::int) → void};
        }
      }
    }
  } =>#t180;
  core::Set<core::int?> set91 = block {
    final core::Set<core::int?> #t183 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int}) {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final dynamic #t184 = :sync-for-iterator.{core::Iterator::current}{dynamic};
        {
          final core::int? #t185 = #t184 as{TypeError,ForNonNullableByDefault} core::int?;
          #t183.{core::Set::add}{Invariant}(#t185){(core::int?) → core::bool};
        }
      }
    }
    #t183.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t183;
  core::Map<core::String, core::int?> map91 = block {
    final core::Map<core::String, core::int?> #t186 = <core::String, core::int?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int}) {
      synthesized core::Iterator<core::MapEntry<core::String, core::int?>> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Map<dynamic, dynamic>).{core::Map::entries}{core::Iterable<core::MapEntry<core::String, core::int?>>}.{core::Iterable::iterator}{core::Iterator<core::MapEntry<core::String, core::int?>>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final core::MapEntry<dynamic, dynamic> #t187 = :sync-for-iterator.{core::Iterator::current}{core::MapEntry<core::String, core::int?>};
        {
          final core::String #t188 = #t187.{core::MapEntry::key}{dynamic} as{TypeError,ForNonNullableByDefault} core::String;
          final core::int? #t189 = #t187.{core::MapEntry::value}{dynamic} as{TypeError,ForNonNullableByDefault} core::int?;
          #t186.{core::Map::[]=}{Invariant}(#t188, #t189){(core::String, core::int?) → void};
        }
      }
    }
    #t186.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t186;
  core::List<core::int> list100 = block {
    final core::List<core::int> #t190 = core::_GrowableList::•<core::int>(0);
    for (final core::int #t191 = index = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; index = index.{core::num::+}(1){(core::num) → core::int})
      #t190.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t190;
  core::Set<core::int> set100 = block {
    final core::Set<core::int> #t192 = new col::_Set::•<core::int>();
    for (final core::int #t193 = index = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; index = index.{core::num::+}(1){(core::num) → core::int})
      #t192.{core::Set::add}{Invariant}(42){(core::int) → core::bool};
  } =>#t192;
  core::Map<core::String, core::int> map100 = block {
    final core::Map<core::String, core::int> #t194 = <core::String, core::int>{};
    for (final core::int #t195 = index = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; index = index.{core::num::+}(1){(core::num) → core::int})
      #t194.{core::Map::[]=}{Invariant}("bar", 42){(core::String, core::int) → void};
  } =>#t194;
  core::List<core::int> list110 = block {
    final core::List<core::int> #t196 = core::_GrowableList::•<core::int>(0);
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal3<core::int>(1, 2, 3).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        core::int i = :sync-for-iterator.{core::Iterator::current}{core::int};
        #t196.{core::List::add}{Invariant}(i){(core::int) → void};
      }
    }
  } =>#t196;
  core::Set<core::int?> set110 = block {
    final core::Set<core::int?> #t197 = new col::_Set::•<core::int?>();
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal3<core::int>(1, 2, 3).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        core::int i = :sync-for-iterator.{core::Iterator::current}{core::int};
        #t197.{core::Set::add}{Invariant}(i){(core::int?) → core::bool};
      }
    }
    #t197.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t197;
  core::Map<core::String, core::int?> map110 = block {
    final core::Map<core::String, core::int?> #t198 = <core::String, core::int?>{};
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal3<core::int>(1, 2, 3).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        core::int i = :sync-for-iterator.{core::Iterator::current}{core::int};
        #t198.{core::Map::[]=}{Invariant}("bar", i){(core::String, core::int?) → void};
      }
    }
    #t198.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t198;
  core::List<core::int> list120 = block {
    final core::List<core::int> #t199 = core::_GrowableList::•<core::int>(0);
    {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        dynamic i = :sync-for-iterator.{core::Iterator::current}{dynamic};
        #t199.{core::List::add}{Invariant}(i as{TypeError,ForDynamic,ForNonNullableByDefault} core::int){(core::int) → void};
      }
    }
  } =>#t199;
  core::Set<core::int?> set120 = block {
    final core::Set<core::int?> #t200 = new col::_Set::•<core::int?>();
    {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        dynamic i = :sync-for-iterator.{core::Iterator::current}{dynamic};
        #t200.{core::Set::add}{Invariant}(i as{TypeError,ForDynamic,ForNonNullableByDefault} core::int?){(core::int?) → core::bool};
      }
    }
    #t200.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t200;
  core::Map<core::String, core::int?> map120 = block {
    final core::Map<core::String, core::int?> #t201 = <core::String, core::int?>{};
    {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (dynVar as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        dynamic i = :sync-for-iterator.{core::Iterator::current}{dynamic};
        #t201.{core::Map::[]=}{Invariant}("bar", i as{TypeError,ForDynamic,ForNonNullableByDefault} core::int?){(core::String, core::int?) → void};
      }
    }
    #t201.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t201;
  core::List<core::int> list130 = block {
    final core::List<core::int> #t202 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 1; i.{core::num::<}(2){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int})
      #t202.{core::List::add}{Invariant}(i){(core::int) → void};
  } =>#t202;
  core::Set<core::int> set130 = block {
    final core::Set<core::int> #t203 = new col::_Set::•<core::int>();
    for (core::int i = 1; i.{core::num::<}(2){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int})
      #t203.{core::Set::add}{Invariant}(i){(core::int) → core::bool};
  } =>#t203;
  core::Map<core::int, core::int> map130 = block {
    final core::Map<core::int, core::int> #t204 = <core::int, core::int>{};
    for (core::int i = 1; i.{core::num::<}(2){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int})
      #t204.{core::Map::[]=}{Invariant}(i, i){(core::int, core::int) → void};
  } =>#t204;
}
static method testForElementErrors(core::Map<core::int, core::int> map, core::List<core::int> list) → dynamic async /* futureValueType= dynamic */ {
  block {
    final core::List<core::int> #t205 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t205.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:210:45: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) \"bar\"];
                                            ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int){(core::int) → void};
  } =>#t205;
  block {
    final core::Set<core::int?> #t206 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t206.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:211:46: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
  <int?>{for (int i = 0; oracle(\"foo\"); i++) \"bar\", null};
                                             ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int?){(core::int?) → core::bool};
    #t206.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t206;
  block {
    final core::Map<core::int, core::int?> #t207 = <core::int, core::int?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t207.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:212:51: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  <int, int?>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
                                                  ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:212:58: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
  <int, int?>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
                                                         ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int?){(core::int, core::int?) → void};
    #t207.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:212:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  <int, int?>{for (int i = 0; oracle(\"foo\"); i++) \"bar\": \"bar\", \"baz\": null};
                                                                ^" in "baz" as{TypeError,ForNonNullableByDefault} core::int, null){(core::int, core::int?) → void};
  } =>#t207;
  block {
    final core::List<core::int> #t208 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t208.{core::List::addAll}{Invariant}(core::_GrowableList::_literal1<core::int>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:213:49: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) ...[\"bar\"]];
                                                ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int)){(core::Iterable<core::int>) → void};
  } =>#t208;
  block {
    final core::Set<core::int?> #t209 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t209.{core::Set::addAll}{Invariant}(core::_GrowableList::_literal1<core::int?>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:214:50: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
  <int?>{for (int i = 0; oracle(\"foo\"); i++) ...[\"bar\"], null};
                                                 ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int?)){(core::Iterable<core::int?>) → void};
    #t209.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t209;
  block {
    final core::Map<core::int, core::int?> #t210 = <core::int, core::int?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t210.{core::Map::addAll}{Invariant}(<core::int, core::int?>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:215:55: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  <int, int?>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                      ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int: invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:215:62: Error: A value of type 'String' can't be assigned to a variable of type 'int?'.
  <int, int?>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                             ^" in "bar" as{TypeError,ForNonNullableByDefault} core::int?}){(core::Map<core::int, core::int?>) → void};
    #t210.{core::Map::[]=}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:215:70: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  <int, int?>{for (int i = 0; oracle(\"foo\"); i++) ...{\"bar\": \"bar\"}, \"baz\": null};
                                                                     ^" in "baz" as{TypeError,ForNonNullableByDefault} core::int, null){(core::int, core::int?) → void};
  } =>#t210;
  block {
    final core::List<core::int> #t211 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t211.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:216:48: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) ...map];
                                               ^"){(core::int) → void};
  } =>#t211;
  block {
    final core::Set<core::int?> #t212 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      #t212.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:217:49: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int?>{for (int i = 0; oracle(\"foo\"); i++) ...map, null};
                                                ^"){(core::int?) → core::bool};
    #t212.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t212;
  <core::int, core::int?>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:218:54: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <int, int?>{for (int i = 0; oracle(\"foo\"); i++) ...list, 42: null};
                                                     ^": null, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:218:54: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <int, int?>{for (int i = 0; oracle(\"foo\"); i++) ...list, 42: null};
                                                     ^": null};
  block {
    final core::List<core::String> #t213 = core::_GrowableList::•<core::String>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t213.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:219:62: Error: A value of type 'int' can't be assigned to a variable of type 'String'.
  <String>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14];
                                                             ^" in 42 as{TypeError,ForNonNullableByDefault} core::String){(core::String) → void};
      else
        #t213.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:219:70: Error: A value of type 'double' can't be assigned to a variable of type 'String'.
  <String>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14];
                                                                     ^" in 3.14 as{TypeError,ForNonNullableByDefault} core::String){(core::String) → void};
  } =>#t213;
  block {
    final core::Set<core::String?> #t214 = new col::_Set::•<core::String?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t214.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:220:63: Error: A value of type 'int' can't be assigned to a variable of type 'String?'.
  <String?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14, null};
                                                              ^" in 42 as{TypeError,ForNonNullableByDefault} core::String?){(core::String?) → core::bool};
      else
        #t214.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:220:71: Error: A value of type 'double' can't be assigned to a variable of type 'String?'.
  <String?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else 3.14, null};
                                                                      ^" in 3.14 as{TypeError,ForNonNullableByDefault} core::String?){(core::String?) → core::bool};
    #t214.{core::Set::add}{Invariant}(null){(core::String?) → core::bool};
  } =>#t214;
  block {
    final core::Map<core::String, core::String?> #t215 = <core::String, core::String?>{};
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t215.{core::Map::[]=}{Invariant}("bar", invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:221:78: Error: A value of type 'int' can't be assigned to a variable of type 'String?'.
  <String, String?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else \"bar\": 3.14, \"baz\": null};
                                                                             ^" in 42 as{TypeError,ForNonNullableByDefault} core::String?){(core::String, core::String?) → void};
      else
        #t215.{core::Map::[]=}{Invariant}("bar", invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:221:93: Error: A value of type 'double' can't be assigned to a variable of type 'String?'.
  <String, String?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else \"bar\": 3.14, \"baz\": null};
                                                                                            ^" in 3.14 as{TypeError,ForNonNullableByDefault} core::String?){(core::String, core::String?) → void};
    #t215.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::String?) → void};
  } =>#t215;
  block {
    final core::List<core::int> #t216 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t216.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:222:62: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42];
                                                             ^"){(core::int) → void};
      else
        #t216.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t216;
  block {
    final core::Set<core::int?> #t217 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t217.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:223:63: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...map else 42, null};
                                                              ^"){(core::int?) → core::bool};
      else
        #t217.{core::Set::add}{Invariant}(42){(core::int?) → core::bool};
    #t217.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t217;
  <core::String, core::int?>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:224:71: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...list else \"bar\": 42, \"baz\": null};
                                                                      ^": null, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:224:71: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) ...list else \"bar\": 42, \"baz\": null};
                                                                      ^": null};
  block {
    final core::List<core::int> #t218 = core::_GrowableList::•<core::int>(0);
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t218.{core::List::add}{Invariant}(42){(core::int) → void};
      else
        #t218.{core::List::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:225:70: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int>[for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else ...map];
                                                                     ^"){(core::int) → void};
  } =>#t218;
  block {
    final core::Set<core::int?> #t219 = new col::_Set::•<core::int?>();
    for (core::int i = 0; self::oracle<core::String>("foo") as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool; i = i.{core::num::+}(1){(core::num) → core::int})
      if(self::oracle<dynamic>() as{TypeError,ForDynamic,ForNonNullableByDefault} core::bool)
        #t219.{core::Set::add}{Invariant}(42){(core::int?) → core::bool};
      else
        #t219.{core::Set::add}{Invariant}(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:226:71: Error: Unexpected type 'Map<int, int>' of a spread.  Expected 'dynamic' or an Iterable.
 - 'Map' is from 'dart:core'.
  <int?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) 42 else ...map, null};
                                                                      ^"){(core::int?) → core::bool};
    #t219.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t219;
  <core::String, core::int?>{invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:227:86: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else ...list, \"baz\": null};
                                                                                     ^": null, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:227:86: Error: Unexpected type 'List<int>' of a map spread entry.  Expected 'dynamic' or a Map.
 - 'List' is from 'dart:core'.
  <String, int?>{for (int i = 0; oracle(\"foo\"); i++) if (oracle()) \"bar\": 42 else ...list, \"baz\": null};
                                                                                     ^": null};
  final core::int i = 0;
  block {
    final core::List<core::int> #t220 = core::_GrowableList::•<core::int>(0);
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal1<core::int>(1).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final core::int #t221 = :sync-for-iterator.{core::Iterator::current}{core::int};
        {
          invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:230:14: Error: Can't assign to the final variable 'i'.
  <int>[for (i in <int>[1]) i];
             ^";
          #t220.{core::List::add}{Invariant}(i){(core::int) → void};
        }
      }
    }
  } =>#t220;
  block {
    final core::Set<core::int?> #t222 = new col::_Set::•<core::int?>();
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal1<core::int>(1).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final core::int #t223 = :sync-for-iterator.{core::Iterator::current}{core::int};
        {
          invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:231:15: Error: Can't assign to the final variable 'i'.
  <int?>{for (i in <int>[1]) i, null};
              ^";
          #t222.{core::Set::add}{Invariant}(i){(core::int?) → core::bool};
        }
      }
    }
    #t222.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t222;
  block {
    final core::Map<core::String, core::int?> #t224 = <core::String, core::int?>{};
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal1<core::int>(1).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final core::int #t225 = :sync-for-iterator.{core::Iterator::current}{core::int};
        {
          invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:232:23: Error: Can't assign to the final variable 'i'.
  <String, int?>{for (i in <int>[1]) \"bar\": i, \"baz\": null};
                      ^";
          #t224.{core::Map::[]=}{Invariant}("bar", i){(core::String, core::int?) → void};
        }
      }
    }
    #t224.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t224;
  core::List<dynamic> list10 = block {
    final core::List<dynamic> #t226 = core::_GrowableList::•<dynamic>(0);
    {
      synthesized core::Iterator<Never> :sync-for-iterator = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:234:31: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var list10 = [for (var i in \"not iterable\") i];
                              ^" in "not iterable" as{TypeError,ForNonNullableByDefault} core::Iterable<dynamic>.{core::Iterable::iterator}{core::Iterator<Never>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        dynamic i = :sync-for-iterator.{core::Iterator::current}{Never};
        #t226.{core::List::add}{Invariant}(i){(dynamic) → void};
      }
    }
  } =>#t226;
  core::Set<dynamic> set10 = block {
    final core::Set<dynamic> #t227 = new col::_Set::•<dynamic>();
    {
      synthesized core::Iterator<Never> :sync-for-iterator = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:235:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var set10 = {for (var i in \"not iterable\") i, null};
                             ^" in "not iterable" as{TypeError,ForNonNullableByDefault} core::Iterable<dynamic>.{core::Iterable::iterator}{core::Iterator<Never>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        dynamic i = :sync-for-iterator.{core::Iterator::current}{Never};
        #t227.{core::Set::add}{Invariant}(i){(dynamic) → core::bool};
      }
    }
    #t227.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t227;
  core::Map<core::String, dynamic> map10 = block {
    final core::Map<core::String, dynamic> #t228 = <core::String, dynamic>{};
    {
      synthesized core::Iterator<Never> :sync-for-iterator = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:236:30: Error: The type 'String' used in the 'for' loop must implement 'Iterable<dynamic>'.
 - 'Iterable' is from 'dart:core'.
  var map10 = {for (var i in \"not iterable\") \"bar\": i, \"baz\": null};
                             ^" in "not iterable" as{TypeError,ForNonNullableByDefault} core::Iterable<dynamic>.{core::Iterable::iterator}{core::Iterator<Never>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        dynamic i = :sync-for-iterator.{core::Iterator::current}{Never};
        #t228.{core::Map::[]=}{Invariant}("bar", i){(core::String, dynamic) → void};
      }
    }
    #t228.{core::Map::[]=}{Invariant}("baz", null){(core::String, dynamic) → void};
  } =>#t228;
  core::List<core::int> list20 = block {
    final core::List<core::int> #t229 = core::_GrowableList::•<core::int>(0);
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal2<core::int>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:237:32: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var list20 = [for (int i in [\"not\", \"int\"]) i];
                               ^" in "not" as{TypeError,ForNonNullableByDefault} core::int, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:237:39: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var list20 = [for (int i in [\"not\", \"int\"]) i];
                                      ^" in "int" as{TypeError,ForNonNullableByDefault} core::int).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        core::int i = :sync-for-iterator.{core::Iterator::current}{core::int};
        #t229.{core::List::add}{Invariant}(i){(core::int) → void};
      }
    }
  } =>#t229;
  core::Set<core::int?> set20 = block {
    final core::Set<core::int?> #t230 = new col::_Set::•<core::int?>();
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal2<core::int>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:238:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var set20 = {for (int i in [\"not\", \"int\"]) i, null};
                              ^" in "not" as{TypeError,ForNonNullableByDefault} core::int, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:238:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var set20 = {for (int i in [\"not\", \"int\"]) i, null};
                                     ^" in "int" as{TypeError,ForNonNullableByDefault} core::int).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        core::int i = :sync-for-iterator.{core::Iterator::current}{core::int};
        #t230.{core::Set::add}{Invariant}(i){(core::int?) → core::bool};
      }
    }
    #t230.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t230;
  core::Map<core::String, core::int?> map20 = block {
    final core::Map<core::String, core::int?> #t231 = <core::String, core::int?>{};
    {
      synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal2<core::int>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:239:31: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var map20 = {for (int i in [\"not\", \"int\"]) \"bar\": i, \"baz\": null};
                              ^" in "not" as{TypeError,ForNonNullableByDefault} core::int, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:239:38: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var map20 = {for (int i in [\"not\", \"int\"]) \"bar\": i, \"baz\": null};
                                     ^" in "int" as{TypeError,ForNonNullableByDefault} core::int).{core::Iterable::iterator}{core::Iterator<core::int>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        core::int i = :sync-for-iterator.{core::Iterator::current}{core::int};
        #t231.{core::Map::[]=}{Invariant}("bar", i){(core::String, core::int?) → void};
      }
    }
    #t231.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t231;
  core::List<dynamic> list30 = block {
    final core::List<dynamic> #t232 = core::_GrowableList::•<dynamic>(0);
    {
      synthesized Never :stream = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:240:37: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var list30 = [await for (var i in \"not stream\") i];
                                    ^" in "not stream" as{TypeError,ForNonNullableByDefault} asy::Stream<dynamic>;
      synthesized asy::_StreamIterator<dynamic>? :for-iterator = new asy::_StreamIterator::•<dynamic>(:stream);
      try
        while (let dynamic #t233 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
          dynamic i = :for-iterator.{asy::_StreamIterator::current}{dynamic};
          #t232.{core::List::add}{Invariant}(i){(dynamic) → void};
        }
      finally
        if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<dynamic>?} == null))
          await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
    }
  } =>#t232;
  core::Set<dynamic> set30 = block {
    final core::Set<dynamic> #t234 = new col::_Set::•<dynamic>();
    {
      synthesized Never :stream = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:241:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var set30 = {await for (var i in \"not stream\") i, null};
                                   ^" in "not stream" as{TypeError,ForNonNullableByDefault} asy::Stream<dynamic>;
      synthesized asy::_StreamIterator<dynamic>? :for-iterator = new asy::_StreamIterator::•<dynamic>(:stream);
      try
        while (let dynamic #t235 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
          dynamic i = :for-iterator.{asy::_StreamIterator::current}{dynamic};
          #t234.{core::Set::add}{Invariant}(i){(dynamic) → core::bool};
        }
      finally
        if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<dynamic>?} == null))
          await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
    }
    #t234.{core::Set::add}{Invariant}(null){(dynamic) → core::bool};
  } =>#t234;
  core::Map<core::String, dynamic> map30 = block {
    final core::Map<core::String, dynamic> #t236 = <core::String, dynamic>{};
    {
      synthesized Never :stream = invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:242:36: Error: The type 'String' used in the 'for' loop must implement 'Stream<dynamic>'.
 - 'Stream' is from 'dart:async'.
  var map30 = {await for (var i in \"not stream\") \"bar\": i, \"baz\": null};
                                   ^" in "not stream" as{TypeError,ForNonNullableByDefault} asy::Stream<dynamic>;
      synthesized asy::_StreamIterator<dynamic>? :for-iterator = new asy::_StreamIterator::•<dynamic>(:stream);
      try
        while (let dynamic #t237 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
          dynamic i = :for-iterator.{asy::_StreamIterator::current}{dynamic};
          #t236.{core::Map::[]=}{Invariant}("bar", i){(core::String, dynamic) → void};
        }
      finally
        if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<dynamic>?} == null))
          await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
    }
    #t236.{core::Map::[]=}{Invariant}("baz", null){(core::String, dynamic) → void};
  } =>#t236;
  core::List<core::int> list40 = block {
    final core::List<core::int> #t238 = core::_GrowableList::•<core::int>(0);
    {
      synthesized asy::Stream<core::int> :stream = asy::Stream::fromIterable<core::int>(core::_GrowableList::_literal2<core::int>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:243:58: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var list40 = [await for (int i in Stream.fromIterable([\"not\", \"int\"])) i];
                                                         ^" in "not" as{TypeError,ForNonNullableByDefault} core::int, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:243:65: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var list40 = [await for (int i in Stream.fromIterable([\"not\", \"int\"])) i];
                                                                ^" in "int" as{TypeError,ForNonNullableByDefault} core::int));
      synthesized asy::_StreamIterator<core::int>? :for-iterator = new asy::_StreamIterator::•<core::int>(:stream);
      try
        while (let dynamic #t239 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
          core::int i = :for-iterator.{asy::_StreamIterator::current}{core::int};
          #t238.{core::List::add}{Invariant}(i){(core::int) → void};
        }
      finally
        if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::int>?} == null))
          await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
    }
  } =>#t238;
  core::Set<core::int?> set40 = block {
    final core::Set<core::int?> #t240 = new col::_Set::•<core::int?>();
    {
      synthesized asy::Stream<core::int> :stream = asy::Stream::fromIterable<core::int>(core::_GrowableList::_literal2<core::int>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:244:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var set40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) i, null};
                                                        ^" in "not" as{TypeError,ForNonNullableByDefault} core::int, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:244:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var set40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) i, null};
                                                               ^" in "int" as{TypeError,ForNonNullableByDefault} core::int));
      synthesized asy::_StreamIterator<core::int>? :for-iterator = new asy::_StreamIterator::•<core::int>(:stream);
      try
        while (let dynamic #t241 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
          core::int i = :for-iterator.{asy::_StreamIterator::current}{core::int};
          #t240.{core::Set::add}{Invariant}(i){(core::int?) → core::bool};
        }
      finally
        if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::int>?} == null))
          await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
    }
    #t240.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t240;
  core::Map<core::String, core::int?> map40 = block {
    final core::Map<core::String, core::int?> #t242 = <core::String, core::int?>{};
    {
      synthesized asy::Stream<core::int> :stream = asy::Stream::fromIterable<core::int>(core::_GrowableList::_literal2<core::int>(invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:245:57: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var map40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) \"bar\": i, \"baz\": null};
                                                        ^" in "not" as{TypeError,ForNonNullableByDefault} core::int, invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:245:64: Error: A value of type 'String' can't be assigned to a variable of type 'int'.
  var map40 = {await for (int i in Stream.fromIterable([\"not\", \"int\"])) \"bar\": i, \"baz\": null};
                                                               ^" in "int" as{TypeError,ForNonNullableByDefault} core::int));
      synthesized asy::_StreamIterator<core::int>? :for-iterator = new asy::_StreamIterator::•<core::int>(:stream);
      try
        while (let dynamic #t243 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
          core::int i = :for-iterator.{asy::_StreamIterator::current}{core::int};
          #t242.{core::Map::[]=}{Invariant}("bar", i){(core::String, core::int?) → void};
        }
      finally
        if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::int>?} == null))
          await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
    }
    #t242.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t242;
  core::List<core::int> list50 = block {
    final core::List<core::int> #t244 = core::_GrowableList::•<core::int>(0);
    for (; ; )
      #t244.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t244;
  core::Set<core::int?> set50 = block {
    final core::Set<core::int?> #t245 = new col::_Set::•<core::int?>();
    for (; ; )
      #t245.{core::Set::add}{Invariant}(42){(core::int?) → core::bool};
    #t245.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t245;
  core::Map<core::String, core::int?> map50 = block {
    final core::Map<core::String, core::int?> #t246 = <core::String, core::int?>{};
    for (; ; )
      #t246.{core::Map::[]=}{Invariant}("bar", 42){(core::String, core::int?) → void};
    #t246.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t246;
  core::List<core::int> list60 = block {
    final core::List<core::int> #t247 = core::_GrowableList::•<core::int>(0);
    for (; invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:249:24: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
  var list60 = [for (; \"not bool\";) 42];
                       ^" in "not bool" as{TypeError,ForNonNullableByDefault} core::bool; )
      #t247.{core::List::add}{Invariant}(42){(core::int) → void};
  } =>#t247;
  core::Set<core::int?> set60 = block {
    final core::Set<core::int?> #t248 = new col::_Set::•<core::int?>();
    for (; invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:250:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
  var set60 = {for (; \"not bool\";) 42, null};
                      ^" in "not bool" as{TypeError,ForNonNullableByDefault} core::bool; )
      #t248.{core::Set::add}{Invariant}(42){(core::int?) → core::bool};
    #t248.{core::Set::add}{Invariant}(null){(core::int?) → core::bool};
  } =>#t248;
  core::Map<core::String, core::int?> map60 = block {
    final core::Map<core::String, core::int?> #t249 = <core::String, core::int?>{};
    for (; invalid-expression "pkg/front_end/testcases/general/control_flow_collection_inference2.dart:251:23: Error: A value of type 'String' can't be assigned to a variable of type 'bool'.
  var map60 = {for (; \"not bool\";) \"bar\": 42, \"baz\": null};
                      ^" in "not bool" as{TypeError,ForNonNullableByDefault} core::bool; )
      #t249.{core::Map::[]=}{Invariant}("bar", 42){(core::String, core::int?) → void};
    #t249.{core::Map::[]=}{Invariant}("baz", null){(core::String, core::int?) → void};
  } =>#t249;
}
static method testForElementErrorsNotAsync(asy::Stream<core::int> stream) → dynamic {
  block {
    final core::List<core::int> #t250 = core::_GrowableList::•<core::int>(0);
    await for (core::int i in stream)
      #t250.{core::List::add}{Invariant}(i){(core::int) → void};
  } =>#t250;
  block {
    final core::Set<core::int> #t251 = new col::_Set::•<core::int>();
    await for (core::int i in stream)
      #t251.{core::Set::add}{Invariant}(i){(core::int) → core::bool};
  } =>#t251;
  block {
    final core::Map<core::String, core::int> #t252 = <core::String, core::int>{};
    await for (core::int i in stream)
      #t252.{core::Map::[]=}{Invariant}("bar", i){(core::String, core::int) → void};
  } =>#t252;
}
static method testPromotion(self::A a) → dynamic {
  core::List<core::int> list10 = block {
    final core::List<core::int> #t253 = core::_GrowableList::•<core::int>(0);
    if(a is{ForNonNullableByDefault} self::B)
      #t253.{core::List::add}{Invariant}(a{self::B}.{self::B::foo}{core::int}){(core::int) → void};
  } =>#t253;
  core::Set<core::int> set10 = block {
    final core::Set<core::int> #t254 = new col::_Set::•<core::int>();
    if(a is{ForNonNullableByDefault} self::B)
      #t254.{core::Set::add}{Invariant}(a{self::B}.{self::B::foo}{core::int}){(core::int) → core::bool};
  } =>#t254;
  core::Map<core::int, core::int> map10 = block {
    final core::Map<core::int, core::int> #t255 = <core::int, core::int>{};
    if(a is{ForNonNullableByDefault} self::B)
      #t255.{core::Map::[]=}{Invariant}(a{self::B}.{self::B::foo}{core::int}, a{self::B}.{self::B::foo}{core::int}){(core::int, core::int) → void};
  } =>#t255;
}
static method main() → dynamic {}

constants  {
  #C1 = null
}
