library /*isNonNullableByDefault*/;
import self as self;

import "org-dartlang-testcase:///mixin_from_dill_lib1.dart" as lib1;
import "org-dartlang-testcase:///mixin_from_dill_lib2.dart" as lib2;

static method main() → dynamic
  ;

library /*isNonNullableByDefault*/;
import self as self2;
import "dart:core" as core;

abstract class _Foo&B&D = self2::B with self2::D /*isAnonymousMixin*/  {
  synthetic constructor •() → self2::_Foo&B&D
    : super self2::B::•()
    ;
  mixin-super-stub operator ==(core::Object dynamic) → core::bool
    return super.{self2::D::==}(dynamic);
  mixin-super-stub method x() → void
    return super.{self2::D::x}();
}
class Foo extends self2::_Foo&B&D {
  synthetic constructor •() → self2::Foo
    ;
}
abstract class B extends core::Object implements self2::C {
  synthetic constructor •() → self2::B
    ;
  operator ==(core::Object dynamic) → core::bool
    ;
  method x() → void
    ;
}
abstract class C extends core::Object {
  synthetic constructor •() → self2::C
    ;
}
abstract class D extends core::Object implements self2::C /*isMixinDeclaration*/  {
  operator ==(core::Object dynamic) → core::bool
    ;
  method x() → void
    ;
}

library /*isNonNullableByDefault*/;
import self as self3;
import "dart:core" as core;

abstract class _Foo&B&D extends self3::B implements self3::D /*isAnonymousMixin,isEliminatedMixin*/  {
  synthetic constructor •() → self3::_Foo&B&D
    : super self3::B::•()
    ;
  operator ==(core::Object dynamic) → core::bool
    ;
  method x() → void
    ;
}
class Foo extends self3::_Foo&B&D {
  synthetic constructor •() → self3::Foo
    ;
}
abstract class B extends core::Object implements self3::C {
  synthetic constructor •() → self3::B
    ;
  operator ==(core::Object dynamic) → core::bool
    ;
  method x() → void
    ;
}
abstract class C extends core::Object {
  synthetic constructor •() → self3::C
    ;
}
abstract class D extends core::Object implements self3::C /*isMixinDeclaration*/  {
  operator ==(core::Object dynamic) → core::bool
    ;
  method x() → void
    ;
}
