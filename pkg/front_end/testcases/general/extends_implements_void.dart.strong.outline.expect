library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/extends_implements_void.dart:5:17: Error: Type 'void' can't be used here.
// Try removing 'void' keyword or replace it with 'var', 'final', or a type.
// class A extends void {}
//                 ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:7:20: Error: Type 'void' can't be used here.
// Try removing 'void' keyword or replace it with 'var', 'final', or a type.
// class B implements void {}
//                    ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:9:7: Error: Can't mix 'void' in because it's nullable.
// Try removing the question mark.
// class C with void {}
//       ^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:11:39: Error: Type 'void' can't be used here.
// Try removing 'void' keyword or replace it with 'var', 'final', or a type.
// extension type D(Object o) implements void {}
//                                       ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:13:20: Error: Type 'void' can't be used here.
// Try removing 'void' keyword or replace it with 'var', 'final', or a type.
// mixin E implements void {}
//                    ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:15:12: Error: Type 'void' can't be used here.
// Try removing 'void' keyword or replace it with 'var', 'final', or a type.
// mixin F on void {}
//            ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:19:19: Error: Type 'void' can't be used here.
// Try removing 'void' keyword or replace it with 'var', 'final', or a type.
// enum H implements void { h }
//                   ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:5:17: Error: Type 'void' not found.
// class A extends void {}
//                 ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:7:20: Error: Type 'void' not found.
// class B implements void {}
//                    ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:11:39: Error: Type 'void' not found.
// extension type D(Object o) implements void {}
//                                       ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:13:20: Error: Type 'void' not found.
// mixin E implements void {}
//                    ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:15:12: Error: Type 'void' not found.
// mixin F on void {}
//            ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:19:19: Error: Type 'void' not found.
// enum H implements void { h }
//                   ^^^^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:9:7: Error: The type 'void' can't be mixed in.
// class C with void {}
//       ^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:17:6: Error: The type 'void' can't be mixed in.
// enum G with void { g }
//      ^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:9:14: Error: The type 'void' can't be used as supertype.
// class C with void {}
//              ^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:11:39: Error: The type 'void' can't be implemented by an extension type.
// extension type D(Object o) implements void {}
//                                       ^
//
// pkg/front_end/testcases/general/extends_implements_void.dart:17:13: Error: The type 'void' can't be used as supertype.
// enum G with void { g }
//             ^
//
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    ;
}
class B extends core::Object {
  synthetic constructor •() → self::B
    ;
}
abstract class _C&Object&void extends core::Object /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_C&Object&void
    : super core::Object::•()
    ;
}
class C extends self::_C&Object&void {
  synthetic constructor •() → self::C
    ;
}
abstract class E extends core::Object /*isMixinDeclaration*/  {
}
abstract class F extends core::Object /*isMixinDeclaration*/  {
}
abstract class _G&_Enum&void extends core::_Enum /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_G&_Enum&void
    : super core::_Enum::•(index, _name)
    ;
}
class G extends self::_G&_Enum&void /*isEnum*/  {
  enum-element static const field self::G g = const self::G::•(0, "g");
  static const field core::List<self::G> values = const <self::G>[self::G::g];
  const synthetic constructor •(core::int #index, core::String #name) → self::G
    : super self::_G&_Enum&void::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "G.${this.{core::_Enum::_name}{core::String}}";
}
class H extends core::_Enum /*isEnum*/  {
  enum-element static const field self::H h = const self::H::•(0, "h");
  static const field core::List<self::H> values = const <self::H>[self::H::h];
  const synthetic constructor •(core::int #index, core::String #name) → self::H
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "H.${this.{core::_Enum::_name}{core::String}}";
}
extension type D(core::Object o) {
  abstract extension-type-member representation-field get o() → core::Object;
  constructor • = self::D|constructor#;
  constructor tearoff • = self::D|constructor#_#new#tearOff;
}
static extension-type-member method D|constructor#(core::Object o) → self::D% /* erasure=core::Object, declared=! */
  ;
static extension-type-member method D|constructor#_#new#tearOff(core::Object o) → self::D% /* erasure=core::Object, declared=! */
  return self::D|constructor#(o);


Extra constant evaluation status:
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///extends_implements_void.dart:17:20 -> InstanceConstant(const G{_Enum.index: 0, _Enum._name: "g"})
Evaluated: ListLiteral @ org-dartlang-testcase:///extends_implements_void.dart:17:6 -> ListConstant(const <G>[const G{_Enum.index: 0, _Enum._name: "g"}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///extends_implements_void.dart:19:26 -> InstanceConstant(const H{_Enum.index: 0, _Enum._name: "h"})
Evaluated: ListLiteral @ org-dartlang-testcase:///extends_implements_void.dart:19:6 -> ListConstant(const <H>[const H{_Enum.index: 0, _Enum._name: "h"}])
Extra constant evaluation: evaluated: 18, effectively constant: 4
