library;
import self as self;
import "dart:core" as core;

abstract class A extends core::Object {
  synthetic constructor •() → self::A
    ;
  abstract method method() → (core::Object?, dynamic);
  abstract get getter() → (core::Object?, dynamic);
  abstract set setter((core::Object?, dynamic) → (core::int, core::int) f) → void;
}
abstract class B extends core::Object {
  synthetic constructor •() → self::B
    ;
  abstract method method() → (dynamic, core::Object?);
  abstract get getter() → (dynamic, core::Object?);
  abstract set setter((dynamic, core::Object?) → (core::int, core::int) f) → void;
}
abstract class E extends core::Object implements self::A, self::B {
  synthetic constructor •() → self::E
    ;
  abstract member-signature method method() → (core::Object?, core::Object?); -> self::A::method
  abstract member-signature set setter((core::Object?, core::Object?) → (core::int, core::int) f) → void; -> self::A::setter
  abstract member-signature get getter() → (core::Object?, core::Object?); -> self::A::getter
}
class D extends core::Object implements self::E {
  synthetic constructor •() → self::D
    ;
  method method() → (core::int, core::int)
    ;
  get getter() → (core::int, core::int)
    ;
  set setter((dynamic, dynamic) → (core::int, core::int) f) → void
    ;
}
static method testMethod0(self::E e) → (core::Object?, core::Object?)
  ;
static method testMethod1(self::E e) → (core::int, core::Object?)
  ;
static method testMethod2(self::E e) → (core::Object?, core::int)
  ;
static method testGetter0(self::E e) → (core::Object?, core::Object?)
  ;
static method testGetter1(self::E e) → (core::int, core::Object?)
  ;
static method testGetter2(self::E e) → (core::Object?, core::int)
  ;
static method testSetter(self::E e) → void
  ;
static method method(self::E e) → void
  ;
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;
