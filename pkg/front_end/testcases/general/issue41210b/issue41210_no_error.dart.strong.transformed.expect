library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "issue41210_lib.dart" as iss;

import "org-dartlang-testcase:///issue41210_lib.dart";

abstract class _E&Object&A extends core::Object implements iss::A /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_E&Object&A
    : super core::Object::•()
    ;
  method /* from org-dartlang-testcase:///issue41210_lib.dart */ method(core::num i, {core::String s = #C1}) → core::String
    return s;
}
abstract class _E&Object&A&D extends self::_E&Object&A implements iss::D /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_E&Object&A&D
    : super self::_E&Object&A::•()
    ;
  forwarding-stub method method(covariant-by-declaration core::num i, {core::String s = #C1}) → core::String
    return super.{self::_E&Object&A::method}(i, s: s);
}
class E extends self::_E&Object&A&D {
  synthetic constructor •() → self::E
    : super self::_E&Object&A&D::•()
    ;
}
abstract class _G&Object&A extends core::Object implements iss::A /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_G&Object&A
    : super core::Object::•()
    ;
  method /* from org-dartlang-testcase:///issue41210_lib.dart */ method(core::num i, {core::String s = #C1}) → core::String
    return s;
}
abstract class _G&Object&A&F extends self::_G&Object&A implements iss::F /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_G&Object&A&F
    : super self::_G&Object&A::•()
    ;
}
class G extends self::_G&Object&A&F {
  synthetic constructor •() → self::G
    : super self::_G&Object&A&F::•()
    ;
}
static method main() → dynamic {}

library /*isNonNullableByDefault*/;
import self as iss;
import "dart:core" as core;

abstract class Interface extends core::Object {
  synthetic constructor •() → iss::Interface
    : super core::Object::•()
    ;
  abstract method method(core::num i) → core::String;
}
abstract class Interface2 extends core::Object {
  synthetic constructor •() → iss::Interface2
    : super core::Object::•()
    ;
  abstract method method(covariant-by-declaration core::int i) → core::String;
}
abstract class A extends core::Object implements iss::Interface /*isMixinDeclaration*/  {
  method method(core::num i, {core::String s = #C1}) → core::String
    return s;
}
abstract class B extends core::Object implements iss::Interface /*isMixinDeclaration*/  {
  abstract method method(core::num i) → core::String;
}
abstract class D extends core::Object implements iss::Interface, iss::Interface2 /*isMixinDeclaration*/  {
  abstract forwarding-stub method method(covariant-by-declaration core::num i) → core::String;
}
abstract class F extends core::Object implements iss::Interface /*isMixinDeclaration*/  {
}

constants  {
  #C1 = "hello"
}
