library /*isNonNullableByDefault*/;
import self as self;

import "dart:test";

static method test() → dynamic
  ;
static method main() → dynamic
  ;

library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/general/inject_public/patch_lib.dart:8:7: Error: Can't inject public 'InjectedClass' into 'dart:test'.
// Make 'InjectedClass' private, or make sure injected library has "dart" scheme and is private (e.g. "dart:_internal").
// class InjectedClass {}
//       ^
//
// pkg/front_end/testcases/general/inject_public/patch_lib.dart:10:1: Error: Can't inject public 'injectedMethod' into 'dart:test'.
// Make 'injectedMethod' private, or make sure injected library has "dart" scheme and is private (e.g. "dart:_internal").
// injectedMethod() {}
// ^
//
import self as self2;
import "dart:core" as core;
import "dart:_internal" as _in;

import "dart:_internal";

class InjectedClass extends core::Object { // from org-dartlang-testcase:///patch_lib.dart
  synthetic constructor •() → self2::InjectedClass
    ;
}
@_in::patch
class Class extends core::Object {
  synthetic constructor •() → self2::Class
    ;
  method /* from org-dartlang-testcase:///patch_lib.dart */ injectedMethod() → dynamic
    ;
}
static method /* from org-dartlang-testcase:///patch_lib.dart */ injectedMethod() → dynamic
  ;


Extra constant evaluation status:
Evaluated: StaticGet @ (unknown position in org-dartlang-testcase:///origin_lib.dart) -> InstanceConstant(const _Patch{})
Extra constant evaluation: evaluated: 1, effectively constant: 1
