abstract class A {
  (Object?, dynamic) method();
  (Object?, dynamic) get getter;
  void set setter((int, int) Function(Object?, dynamic) f);
}

abstract class B {
  (dynamic, Object?) method();
  (dynamic, Object?) get getter;
  void set setter((int, int) Function(dynamic, Object?) f);
}

abstract class E implements A, B {}

class D implements E {
  (int, int) method() => (42, 87);
  (int, int) get getter => (42, 87);
  void set setter((int, int) Function(dynamic, dynamic) f) {}
}

(Object?, Object?) testMethod0(E e) => e.method();

(int, Object?) testMethod1(E e) => e.method();

(Object?, int) testMethod2(E e) => e.method();

(Object?, Object?) testGetter0(E e) => e.getter;

(int, Object?) testGetter1(E e) => e.getter;

(Object?, int) testGetter2(E e) => e.getter;

void testSetter(E e) {}

void method(E e) {}

main() {}

expect(expected, actual) {}
