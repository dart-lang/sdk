library;
import self as self;
import "dart:core" as core;

typedef MyList<T extends core::num> = core::List<T>;
static method main() → dynamic {
  const (core::int, core::num, {growable: core::bool}) → core::List<core::num> c1 = #C2;
  const (core::int, core::num, {growable: core::bool}) → core::List<core::num> c2 = #C2;
  const (core::int, core::num, {growable: core::bool}) → core::List<core::num> c3 = #C4;
  const core::bool c4 = #C5;
  const core::bool c5 = #C6;
  self::expect(true, #C5);
  self::expect(false, #C6);
  self::expect(true, core::identical(#C2, #C2));
  self::expect(false, core::identical(#C2, #C4));
  (core::int, core::num, {growable: core::bool}) → core::List<core::num> v1 = #C2;
  (core::int, core::num, {growable: core::bool}) → core::List<core::num> v2 = #C2;
  (core::int, core::num, {growable: core::bool}) → core::List<core::num> v3 = #C4;
  core::bool v4 = core::identical(v1, v2);
  core::bool v5 = core::identical(v1, v3);
  self::expect(true, v4);
  self::expect(false, v5);
  self::expect(true, core::identical(v1, v2));
  self::expect(false, core::identical(v1, v3));
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}
static synthetic method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/array_patch.dart */ _#MyList#empty#tearOff<T extends core::num>({core::bool growable = #C6}) → core::List<self::_#MyList#empty#tearOff::T>
  return core::List::empty<self::_#MyList#empty#tearOff::T>(growable: growable);
static synthetic method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/array_patch.dart */ _#MyList#filled#tearOff<T extends core::num>(core::int length, self::_#MyList#filled#tearOff::T fill, {core::bool growable = #C6}) → core::List<self::_#MyList#filled#tearOff::T>
  return core::List::filled<self::_#MyList#filled#tearOff::T>(length, fill, growable: growable);
static synthetic method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/array_patch.dart */ _#MyList#from#tearOff<T extends core::num>(core::Iterable<dynamic> elements, {core::bool growable = #C5}) → core::List<self::_#MyList#from#tearOff::T>
  return core::List::from<self::_#MyList#from#tearOff::T>(elements, growable: growable);
static synthetic method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/array_patch.dart */ _#MyList#of#tearOff<T extends core::num>(core::Iterable<self::_#MyList#of#tearOff::T> elements, {core::bool growable = #C5}) → core::List<self::_#MyList#of#tearOff::T>
  return core::List::of<self::_#MyList#of#tearOff::T>(elements, growable: growable);
static synthetic method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/array_patch.dart */ _#MyList#generate#tearOff<T extends core::num>(core::int length, (core::int) → self::_#MyList#generate#tearOff::T generator, {core::bool growable = #C5}) → core::List<self::_#MyList#generate#tearOff::T>
  return core::List::generate<self::_#MyList#generate#tearOff::T>(length, generator, growable: growable);
static synthetic method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/array_patch.dart */ _#MyList#unmodifiable#tearOff<T extends core::num>(core::Iterable<dynamic> elements) → core::List<self::_#MyList#unmodifiable#tearOff::T>
  return core::List::unmodifiable<self::_#MyList#unmodifiable#tearOff::T>(elements);

constants  {
  #C1 = constructor-tearoff core::List::filled
  #C2 = instantiation #C1 <core::num>
  #C3 = static-tearoff self::_#MyList#filled#tearOff
  #C4 = instantiation #C3 <core::num>
  #C5 = true
  #C6 = false
}

Extra constant evaluation status:
Evaluated: StaticInvocation @ org-dartlang-testcase:///issue47462.dart:18:16 -> BoolConstant(true)
Evaluated: StaticInvocation @ org-dartlang-testcase:///issue47462.dart:19:17 -> BoolConstant(false)
Extra constant evaluation: evaluated: 50, effectively constant: 2
