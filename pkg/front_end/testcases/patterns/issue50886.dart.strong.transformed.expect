library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test1() → dynamic {
  core::Map<dynamic, dynamic> x = <dynamic, dynamic>{1: 1};
  final core::Map<dynamic, dynamic> #t1 = x;
  core::bool #t2 = true;
  final core::Map<dynamic, dynamic> #t3 = #t1;
  if(#t3 is{ForNonNullableByDefault} core::Map<core::int, core::int> && #t3{core::Map<core::int, core::int>}.{core::Map::containsKey}(1){(core::Object?) → core::bool} && #t3{core::Map<core::int, core::int>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 1) {
    final core::int #t4 = #t3{core::Map<core::int, core::int>}.{core::Map::[]}(1){(core::Object?) → core::int?};
    if(#t4 =={core::num::==}{(core::Object) → core::bool} #C1) {
      #t2 = false;
      {
        return 1;
      }
    }
  }
  if(#t2) {
    return 0;
  }
}
static method test2() → dynamic {
  core::Map<dynamic, dynamic> x = <core::int, core::int>{1: 1, 2: 2};
  final core::Map<dynamic, dynamic> #t5 = x;
  core::bool #t6 = true;
  final core::Map<dynamic, dynamic> #t7 = #t5;
  if(#t7 is{ForNonNullableByDefault} core::Map<core::int, core::int> && #t7{core::Map<core::int, core::int>}.{core::Map::containsKey}(1){(core::Object?) → core::bool} && #t7{core::Map<core::int, core::int>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 1) {
    final core::int #t8 = #t7{core::Map<core::int, core::int>}.{core::Map::[]}(1){(core::Object?) → core::int?};
    if(#t8 =={core::num::==}{(core::Object) → core::bool} #C1) {
      #t6 = false;
      {
        return 1;
      }
    }
  }
  if(#t6) {
    return 0;
  }
}
static method test3() → dynamic {
  core::Map<dynamic, dynamic> x = <core::int, core::int>{1: 1, 2: 2};
  final core::Map<dynamic, dynamic> #t9 = x;
  core::bool #t10 = true;
  final core::Map<dynamic, dynamic> #t11 = #t9;
  if(#t11 is{ForNonNullableByDefault} core::Map<core::int, core::int> && #t11{core::Map<core::int, core::int>}.{core::Map::containsKey}(1){(core::Object?) → core::bool} && #t11{core::Map<core::int, core::int>}.{core::Map::length}{core::int}.{core::num::>=}(1){(core::num) → core::bool}) {
    final core::int #t12 = #t11{core::Map<core::int, core::int>}.{core::Map::[]}(1){(core::Object?) → core::int?};
    if(#t12 =={core::num::==}{(core::Object) → core::bool} #C1) {
      #t10 = false;
      {
        return 0;
      }
    }
  }
  if(#t10) {
    return 1;
  }
}
static method main() → dynamic {
  self::expectEquals(0, self::test1());
  self::expectEquals(0, self::test2());
  self::expectEquals(0, self::test3());
}
static method expectEquals(dynamic x, dynamic y) → dynamic {
  if(!(x =={core::Object::==}{(core::Object) → core::bool} y)) {
    throw "Expected ${x} to be equal to ${y}.";
  }
}

constants  {
  #C1 = 1
}
