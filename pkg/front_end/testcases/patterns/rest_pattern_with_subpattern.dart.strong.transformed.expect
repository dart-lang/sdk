library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic o, [dynamic expectedRest = #C1]) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    core::List<dynamic> rest;
    core::List<dynamic> rest';
    core::List<dynamic> rest'';
    core::List<dynamic> rest''';
    final dynamic #0#0 = o;
    function ##0#1#initializer() → core::int
      return #0#0{core::List<dynamic>}.{core::List::length}{core::int};
    late final core::int #0#1 = ##0#1#initializer(){() → core::int};
    function ##0#3#initializer() → core::bool
      return #0#1.{core::num::>=}(#C2){(core::num) → core::bool};
    late final core::bool #0#3 = ##0#3#initializer(){() → core::bool};
    function ##0#6#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#6 = ##0#6#initializer(){() → dynamic};
    function ##0#9#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#9 = ##0#9#initializer(){() → dynamic};
    function ##0#14#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(#0#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic};
    late final dynamic #0#14 = ##0#14#initializer(){() → dynamic};
    function ##0#28#initializer() → core::bool
      return #0#1.{core::num::>=}(#C3){(core::num) → core::bool};
    late final core::bool #0#28 = ##0#28#initializer(){() → core::bool};
    function ##0#34#initializer() → core::List<dynamic>
      return #0#0{core::List<dynamic>}.{core::List::sublist}(2, #0#1.{core::num::-}(2){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
    late final core::List<dynamic> #0#34 = ##0#34#initializer(){() → core::List<dynamic>};
    function ##0#35#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(#0#1.{core::num::-}(2){(core::num) → core::int}){(core::int) → dynamic};
    late final dynamic #0#35 = ##0#35#initializer(){() → dynamic};
    function ##0#44#initializer() → core::int
      return #0#34.{core::List::length}{core::int};
    late final core::int #0#44 = ##0#44#initializer(){() → core::int};
    dynamic #t2;
    dynamic #t3;
    dynamic #t4;
    dynamic #t5;
    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#3 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#6 && #C5 =={core::num::==}{(core::Object) → core::bool} #0#9) {
      #t1 = 0;
    }
    else
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#3 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#6 && #C5 =={core::num::==}{(core::Object) → core::bool} #0#14) {
        #t1 = 1;
      }
      else
        if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#3 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#6 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#9 && (let final core::List<dynamic> #t6 = rest = #0#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>} in true)) {
          #t1 = 2;
          #t2 = rest;
        }
        else
          if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#3 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#6 && (let final core::List<dynamic> #t7 = rest' = #0#0{core::List<dynamic>}.{core::List::sublist}(1, #0#1.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>} in true) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#14) {
            #t1 = 3;
            #t3 = rest';
          }
          else
            if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#28 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#6 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#9 && (let final core::List<dynamic> #t8 = rest'' = #0#34 in true) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#35 && #C6 =={core::num::==}{(core::Object) → core::bool} #0#14) {
              #t1 = 4;
              #t4 = rest'';
            }
            else
              if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#28 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#6 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#9 && (let final core::List<dynamic> #t9 = #0#34 in #0#44.{core::num::>=}(#C2){(core::num) → core::bool} && #C5 =={core::num::==}{(core::Object) → core::bool} #0#34.{core::List::[]}(0){(core::int) → dynamic} && (let final core::List<dynamic> #t10 = rest''' = #0#34.{core::List::sublist}(1, #0#44.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>} in true) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#34.{core::List::[]}(#0#44.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#35 && #C6 =={core::num::==}{(core::Object) → core::bool} #0#14) {
                #t1 = 5;
                #t5 = rest''';
              }
    switch(#t1) {
      #L2:
      case #C4:
        {
          {
            return 0;
          }
        }
      #L3:
      case #C5:
        {
          {
            return 1;
          }
        }
      #L4:
      case #C2:
        {
          core::List<dynamic> rest = #t2{core::List<dynamic>};
          {
            self::expect(expectedRest, rest);
            return 2;
          }
        }
      #L5:
      case #C6:
        {
          core::List<dynamic> rest = #t3{core::List<dynamic>};
          {
            self::expect(expectedRest, rest);
            return 3;
          }
        }
      #L6:
      case #C3:
        {
          core::List<dynamic> rest = #t4{core::List<dynamic>};
          {
            self::expect(expectedRest, rest);
            return 4;
          }
        }
      #L7:
      case #C7:
        {
          core::List<dynamic> rest = #t5{core::List<dynamic>};
          {
            self::expect(expectedRest, rest);
            return 5;
          }
        }
    }
  }
}
static method main() → dynamic {
  self::expect(0, self::test(core::_GrowableList::_literal2<core::int>(0, 1)));
  self::expect(0, self::test(core::_GrowableList::_literal3<core::int>(0, 1, 2)));
  self::expect(1, self::test(core::_GrowableList::_literal3<core::int>(0, 2, 1)));
  self::expect(1, self::test(core::_GrowableList::_literal4<core::int>(0, 2, 3, 1)));
  self::expect(2, self::test(core::_GrowableList::_literal2<core::int>(0, 2), core::_GrowableList::•<dynamic>(0)));
  self::expect(2, self::test(core::_GrowableList::_literal3<core::int>(0, 2, 2), core::_GrowableList::_literal1<core::int>(2)));
  self::expect(2, self::test(core::_GrowableList::_literal3<core::int>(0, 2, 3), core::_GrowableList::_literal1<core::int>(3)));
  self::expect(2, self::test(core::_GrowableList::_literal4<core::int>(0, 2, 3, 4), core::_GrowableList::_literal2<core::int>(3, 4)));
  self::expect(3, self::test(core::_GrowableList::_literal4<core::int>(0, 3, 4, 2), core::_GrowableList::_literal2<core::int>(3, 4)));
  self::expect(3, self::test(core::_GrowableList::_literal5<core::int>(0, 3, 4, 5, 2), core::_GrowableList::_literal3<core::int>(3, 4, 5)));
  self::expect(4, self::test(core::_GrowableList::_literal4<core::int>(0, 4, 2, 3), core::_GrowableList::•<dynamic>(0)));
  self::expect(4, self::test(core::_GrowableList::_literal5<core::int>(0, 4, 2, 2, 3), core::_GrowableList::_literal1<core::int>(2)));
  self::expect(4, self::test(core::_GrowableList::_literal6<core::int>(0, 4, 2, 3, 2, 3), core::_GrowableList::_literal2<core::int>(2, 3)));
  self::expect(null, self::test(core::_GrowableList::_literal5<core::int>(0, 5, 3, 2, 3)));
  self::expect(null, self::test(core::_GrowableList::_literal5<core::Object>(0, 5, core::_GrowableList::•<dynamic>(0), 2, 3)));
  self::expect(null, self::test(core::_GrowableList::_literal5<core::Object>(0, 5, core::_GrowableList::_literal2<core::int>(0, 1), 2, 3)));
  self::expect(5, self::test(core::_GrowableList::_literal6<core::int>(0, 5, 1, 2, 2, 3), core::_GrowableList::•<dynamic>(0)));
  self::expect(5, self::test(core::_GrowableList::_literal7<core::int>(0, 5, 1, 3, 2, 2, 3), core::_GrowableList::_literal1<core::int>(3)));
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(expected is{ForNonNullableByDefault} core::List<dynamic> && actual is{ForNonNullableByDefault} core::List<dynamic>) {
    if(expected{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} actual{core::List<dynamic>}.{core::List::length}{core::int}) {
      for (core::int i = 0; i.{core::num::<}(expected{core::List<dynamic>}.{core::List::length}{core::int}){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
        if(!(expected{core::List<dynamic>}.{core::List::[]}(i){(core::int) → dynamic} =={core::Object::==}{(core::Object) → core::bool} actual{core::List<dynamic>}.{core::List::[]}(i){(core::int) → dynamic})) {
          throw "Expected ${expected{core::List<dynamic>}.{core::List::[]}(i){(core::int) → dynamic}}, actual ${actual{core::List<dynamic>}.{core::List::[]}(i){(core::int) → dynamic}} @ index ${i}";
        }
      }
      return;
    }
  }
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}

constants  {
  #C1 = null
  #C2 = 2
  #C3 = 4
  #C4 = 0
  #C5 = 1
  #C6 = 3
  #C7 = 5
}
