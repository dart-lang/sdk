library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test1(dynamic x) → dynamic {
  #L1:
  {
    dynamic #t1;
    final dynamic #t2 = x;
    final core::int #t3 = -1;
    final core::bool #t4 = false;
    if(!#t4) {
      final dynamic #t5 = #t2;
      if(#t5 is core::List<dynamic> && #t5{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::==}(1){(core::Object) → core::bool}) {
        final dynamic #t6 = #t5{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
        final dynamic #t7 = #t6;
        if(#t7 is core::int) {
          core::int a = #t7{core::int};
          if(a.{core::num::>}(0){(core::num) → core::bool}) {
            #t3 = 0;
            #t4 = true;
            #t1 = a;
          }
        }
      }
    }
    switch(#t3) {
      #L2:
      case #C1:
        {
          core::int a = #t1{core::int};
          {
            return a;
          }
        }
      #L3:
      default:
        {
          return null;
        }
    }
  }
}
static method test2(dynamic x) → dynamic {
  #L4:
  {
    dynamic #t8;
    final dynamic #t9 = x;
    final core::int #t10 = -1;
    final core::bool #t11 = false;
    if(!#t11) {
      final dynamic #t12 = #t9;
      if(#t12 is core::List<dynamic> && #t12{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::==}(2){(core::Object) → core::bool}) {
        final dynamic #t13 = #t12{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
        final dynamic #t14 = #t13;
        if(#t14 is core::num) {
          core::num a = #t14{core::num};
          if(a is{ForNonNullableByDefault} core::int && a{core::int}.{core::int::isEven}{core::bool}) {
            #t10 = 0;
            #t11 = true;
            #t8 = a;
          }
        }
      }
    }
    if(!#t11) {
      final dynamic #t15 = #t9;
      if(#t15 is core::List<dynamic> && #t15{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::==}(2){(core::Object) → core::bool}) {
        final dynamic #t16 = #t15{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
        final dynamic #t17 = #t16;
        if(#t17 is core::num) {
          core::num a = #t17{core::num};
          if(a is{ForNonNullableByDefault} core::double && a{core::double}.{core::double::ceil}(){() → core::int}.{core::int::isOdd}{core::bool}) {
            #t10 = 0;
            #t11 = true;
            #t8 = a;
          }
        }
      }
    }
    switch(#t10) {
      #L5:
      case #C1:
        {
          core::num a = #t8{core::num};
          {
            return a;
          }
        }
      #L6:
      default:
        {
          return null;
        }
    }
  }
}
static method main() → dynamic {
  self::expectEquals(1, self::test1(<core::int>[1]));
  self::expectEquals(null, self::test1(<core::int>[0]));
  self::expectEquals(null, self::test1(<core::int>[1.{core::int::unary-}(){() → core::int}]));
  self::expectEquals(null, self::test2(<core::Object>[1, "two"]));
  self::expectEquals(2, self::test2(<core::Object>[2, "three"]));
  self::expectEquals(null, self::test2(<core::Object>["one", 1.5]));
  self::expectEquals(2.5, self::test2(<core::Object>["two", 2.5]));
  self::expectEquals(null, self::test2(null));
}
static method expectEquals(dynamic x, dynamic y) → dynamic {
  if(!(x =={core::Object::==}{(core::Object) → core::bool} y)) {
    throw "Expected ${x} to be equal to ${y}.";
  }
}

constants  {
  #C1 = 0
}
