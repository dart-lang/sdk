library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

extension /* unnamed */ _extension#0 on core::Object {
  get q = self::_extension#0|get#q;
}
static method _extension#0|get#q(lowered final core::Object #this) → core::int
  return 42;
static method main() → void {
  #L1:
  {
    core::int #t1 = -1;
    dynamic x;
    final dynamic #0#0 = new core::Object::•() as{ForNonNullableByDefault} dynamic;
    dynamic #t2;
    if(#0#0 is{ForNonNullableByDefault} core::Object && (let final core::int #t3 = x = self::_extension#0|get#q(#0#0{core::Object}) in true)) {
      #t1 = 0;
      #t2 = x;
    }
    switch(#t1) {
      #L2:
      case #C1:
        {
          dynamic x = #t2{dynamic};
          {
            core::print(x);
          }
        }
    }
  }
}

constants  {
  #C1 = 0
}
