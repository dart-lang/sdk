library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  field core::int field;
  final field core::int finalField;
  constructor •(core::int field, core::int finalField) → self::Class
    : self::Class::field = field, self::Class::finalField = finalField, super core::Object::•()
    ;
  get getter() → core::int
    return this.{self::Class::finalField}{core::int};
}
static method ifCase(dynamic o) → core::int {
  core::print("o = ${o}");
  {
    final dynamic #0#0 = o;
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #0#0) {
      return 1;
    }
  }
  {
    final dynamic #1#0 = o;
    late final core::Object? #1#1 = #1#0{({f: core::Object?})}.f{core::Object?};
    if(#1#0 is{ForNonNullableByDefault} ({f: core::Object?}) && ((let final dynamic #t1 = #1#1 as{ForNonNullableByDefault} core::int in (#1#1 as{ForNonNullableByDefault} core::int).{core::num::>=}(#C2){(core::num) → core::bool}) && (let final dynamic #t2 = #1#1 as{ForNonNullableByDefault} core::int in (#1#1 as{ForNonNullableByDefault} core::int).{core::num::<}(#C3){(core::num) → core::bool}))) {
      return 2;
    }
  }
  {
    final dynamic #2#0 = o;
    if(#C4 =={core::num::==}{(core::Object) → core::bool} #2#0 || #C5 =={core::num::==}{(core::Object) → core::bool} #2#0) {
      return 3;
    }
  }
  {
    final dynamic #3#0 = o;
    late final core::Object? #3#1 = #3#0{({g: core::Object?})}.g{core::Object?};
    if(#3#0 is{ForNonNullableByDefault} ({g: core::Object?}) && (let final dynamic #t3 = #3#1 as{ForNonNullableByDefault} core::int in #C6 =={core::num::==}{(core::Object) → core::bool} #3#1 as{ForNonNullableByDefault} core::int)) {
      return 4;
    }
  }
  {
    final dynamic #4#0 = o;
    if(#4#0 is{ForNonNullableByDefault} ({a: core::Object?}) && (let final dynamic #t4 = #4#0{({a: core::Object?})}.a{core::Object?}! in true)) {
      return 5;
    }
  }
  {
    final dynamic #5#0 = o;
    if(#5#0 is{ForNonNullableByDefault} ({b: core::Object?}) && (!(#5#0{({b: core::Object?})}.b{core::Object?} == null) ?{core::bool} true : false)) {
      return 6;
    }
  }
  {
    final dynamic #6#0 = o;
    if(#6#0 is{ForNonNullableByDefault} core::List<dynamic> && #6#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && #C1 =={core::num::==}{(core::Object) → core::bool} #6#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C7 =={core::num::==}{(core::Object) → core::bool} #6#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
      return 7;
    }
  }
  {
    final dynamic #7#0 = o;
    if(#7#0 is{ForNonNullableByDefault} core::List<dynamic> && #7#0{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::>=}(#C7){(core::num) → core::bool} && #C7 =={core::num::==}{(core::Object) → core::bool} #7#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C2 =={core::num::==}{(core::Object) → core::bool} #7#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
      return 8;
    }
  }
  {
    final dynamic #8#0 = o;
    late final core::int #8#1 = #8#0{core::List<dynamic>}.{core::List::length}{core::int};
    if(#8#0 is{ForNonNullableByDefault} core::List<dynamic> && #8#1.{core::num::>=}(#C2){(core::num) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #8#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C8 =={core::num::==}{(core::Object) → core::bool} #8#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && #C3 =={core::num::==}{(core::Object) → core::bool} #8#0{core::List<dynamic>}.{core::List::[]}(#8#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) {
      return 9;
    }
  }
  {
    final dynamic #9#0 = o;
    late final core::List<dynamic> #9#12 = #9#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>};
    late final dynamic #9#15 = #9#12.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #9#19 = #9#12.{core::List::[]}(1){(core::int) → dynamic};
    if(#9#0 is{ForNonNullableByDefault} core::List<dynamic> && #9#0{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::>=}(#C7){(core::num) → core::bool} && #C8 =={core::num::==}{(core::Object) → core::bool} #9#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C3 =={core::num::==}{(core::Object) → core::bool} #9#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && (#9#12.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final dynamic #t5 = #9#15 as{ForNonNullableByDefault} core::int in (#9#15 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final dynamic #t6 = #9#19 as{ForNonNullableByDefault} core::int in (#9#19 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool}))) {
      return 10;
    }
  }
  {
    final dynamic #10#0 = o;
    late final core::int #10#1 = #10#0{core::List<dynamic>}.{core::List::length}{core::int};
    late final core::List<dynamic> #10#12 = #10#0{core::List<dynamic>}.{core::List::sublist}(2, #10#1.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
    late final dynamic #10#16 = #10#12.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #10#20 = #10#12.{core::List::[]}(1){(core::int) → dynamic};
    if(#10#0 is{ForNonNullableByDefault} core::List<dynamic> && #10#1.{core::num::>=}(#C2){(core::num) → core::bool} && #C3 =={core::num::==}{(core::Object) → core::bool} #10#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C4 =={core::num::==}{(core::Object) → core::bool} #10#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && (#10#12.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final dynamic #t7 = #10#16 as{ForNonNullableByDefault} core::int in (#10#16 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final dynamic #t8 = #10#20 as{ForNonNullableByDefault} core::int in (#10#20 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})) && #C5 =={core::num::==}{(core::Object) → core::bool} #10#0{core::List<dynamic>}.{core::List::[]}(#10#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) {
      return 11;
    }
  }
  {
    final dynamic #11#0 = o;
    if(#11#0 is{ForNonNullableByDefault} self::Class && #C1 =={core::num::==}{(core::Object) → core::bool} #11#0{self::Class}.{self::Class::field}{core::int}) {
      return 12;
    }
  }
  {
    final dynamic #12#0 = o;
    if(#12#0 is{ForNonNullableByDefault} self::Class && #C7 =={core::num::==}{(core::Object) → core::bool} #12#0{self::Class}.{self::Class::finalField}{core::int}) {
      return 13;
    }
  }
  {
    final dynamic #13#0 = o;
    if(#13#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #13#0{self::Class}.{self::Class::field}{core::int} && #C8 =={core::num::==}{(core::Object) → core::bool} #13#0{self::Class}.{self::Class::getter}{core::int}) {
      return 14;
    }
  }
  {
    final dynamic #14#0 = o;
    if(#14#0 is{ForNonNullableByDefault} self::Class) {
      return 15;
    }
  }
  {
    final dynamic #15#0 = o;
    if(#15#0{dynamic} =={core::Object::==}{(core::Object) → core::bool} #C9) {
      return 16;
    }
  }
  {
    final dynamic #16#0 = o;
    if(#16#0 is{ForNonNullableByDefault} ({e: core::Object?}) && !(#16#0{({e: core::Object?})}.e{core::Object?} =={core::Object::==}{(core::Object) → core::bool} #C10)) {
      return 17;
    }
  }
  {
    final dynamic #17#0 = o;
    if(#17#0 is{ForNonNullableByDefault} core::List<dynamic> && #17#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (let final dynamic #t9 = #17#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} in true)) {
      return 19;
    }
  }
  {
    final dynamic #18#0 = o;
    if(#18#0 is{ForNonNullableByDefault} core::bool) {
      return 20;
    }
  }
  {
    final dynamic #19#0 = o;
    if(#19#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #19#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C11) {
      return 21;
    }
  }
  {
    final dynamic #20#0 = o;
    if(#20#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #20#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #20#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C11){(core::Object?) → core::bool} && #20#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C11){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::int) {
      return 22;
    }
  }
  {
    final dynamic #21#0 = o;
    if(#21#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #21#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && #21#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #21#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::String) {
      return 23;
    }
  }
  {
    dynamic a;
    final dynamic #22#0 = o;
    if(#22#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #22#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #22#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C7){(core::Object?) → core::bool} && (let final dynamic #t10 = a = #22#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C7){(core::Object?) → dynamic} as{ForNonNullableByDefault} dynamic in true)) {
      return 24;
    }
  }
  {
    core::int b;
    final dynamic #23#0 = o;
    late final dynamic #23#7 = #23#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic};
    if(#23#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #23#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #23#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && (#23#7 is{ForNonNullableByDefault} core::int && (let final dynamic #t11 = b = #23#7{core::int} in true))) {
      return 25;
    }
  }
  {
    final dynamic #24#0 = o;
    if(#24#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C11 =={core::num::==}{(core::Object) → core::bool} #24#0{(core::Object?, core::Object?)}.$0{core::Object?} && #C1 =={core::num::==}{(core::Object) → core::bool} #24#0{(core::Object?, core::Object?)}.$1{core::Object?}) {
      return 26;
    }
  }
  {
    dynamic c;
    final dynamic #25#0 = o;
    if(#25#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C11 =={core::num::==}{(core::Object) → core::bool} #25#0{({a: core::Object?, b: core::Object?})}.a{core::Object?} && (let final dynamic #t12 = c = #25#0{({a: core::Object?, b: core::Object?})}.b{core::Object?} in true)) {
      return 27;
    }
  }
  {
    dynamic d;
    final dynamic #26#0 = o;
    if(#26#0 is{ForNonNullableByDefault} ({c: core::Object?, d: core::Object?}) && #C11 =={core::num::==}{(core::Object) → core::bool} #26#0{({c: core::Object?, d: core::Object?})}.c{core::Object?} && (let final dynamic #t13 = d = #26#0{({c: core::Object?, d: core::Object?})}.d{core::Object?} in true) && d is{ForNonNullableByDefault} core::int) {
      return 28;
    }
  }
  return 0;
}
static method ifCaseElse(dynamic o) → core::int {
  core::print("o = ${o}");
  {
    final dynamic #26#0 = o;
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #26#0) {
      return 1;
    }
    else {
      final dynamic #25#0 = o;
      late final core::Object? #25#1 = #25#0{({f: core::Object?})}.f{core::Object?};
      if(#25#0 is{ForNonNullableByDefault} ({f: core::Object?}) && ((let final dynamic #t14 = #25#1 as{ForNonNullableByDefault} core::int in (#25#1 as{ForNonNullableByDefault} core::int).{core::num::>=}(#C2){(core::num) → core::bool}) && (let final dynamic #t15 = #25#1 as{ForNonNullableByDefault} core::int in (#25#1 as{ForNonNullableByDefault} core::int).{core::num::<}(#C3){(core::num) → core::bool}))) {
        return 2;
      }
      else {
        final dynamic #24#0 = o;
        if(#C4 =={core::num::==}{(core::Object) → core::bool} #24#0 || #C5 =={core::num::==}{(core::Object) → core::bool} #24#0) {
          return 3;
        }
        else {
          final dynamic #23#0 = o;
          late final core::Object? #23#1 = #23#0{({g: core::Object?})}.g{core::Object?};
          if(#23#0 is{ForNonNullableByDefault} ({g: core::Object?}) && (let final dynamic #t16 = #23#1 as{ForNonNullableByDefault} core::int in #C6 =={core::num::==}{(core::Object) → core::bool} #23#1 as{ForNonNullableByDefault} core::int)) {
            return 4;
          }
          else {
            final dynamic #22#0 = o;
            if(#22#0 is{ForNonNullableByDefault} ({a: core::Object?}) && (let final dynamic #t17 = #22#0{({a: core::Object?})}.a{core::Object?}! in true)) {
              return 5;
            }
            else {
              final dynamic #21#0 = o;
              if(#21#0 is{ForNonNullableByDefault} ({b: core::Object?}) && (!(#21#0{({b: core::Object?})}.b{core::Object?} == null) ?{core::bool} true : false)) {
                return 6;
              }
              else {
                final dynamic #20#0 = o;
                if(#20#0 is{ForNonNullableByDefault} core::List<dynamic> && #20#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && #C1 =={core::num::==}{(core::Object) → core::bool} #20#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C7 =={core::num::==}{(core::Object) → core::bool} #20#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
                  return 7;
                }
                else {
                  final dynamic #19#0 = o;
                  if(#19#0 is{ForNonNullableByDefault} core::List<dynamic> && #19#0{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::>=}(#C7){(core::num) → core::bool} && #C7 =={core::num::==}{(core::Object) → core::bool} #19#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C2 =={core::num::==}{(core::Object) → core::bool} #19#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic}) {
                    return 8;
                  }
                  else {
                    final dynamic #18#0 = o;
                    late final core::int #18#1 = #18#0{core::List<dynamic>}.{core::List::length}{core::int};
                    if(#18#0 is{ForNonNullableByDefault} core::List<dynamic> && #18#1.{core::num::>=}(#C2){(core::num) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #18#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C8 =={core::num::==}{(core::Object) → core::bool} #18#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && #C3 =={core::num::==}{(core::Object) → core::bool} #18#0{core::List<dynamic>}.{core::List::[]}(#18#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) {
                      return 9;
                    }
                    else {
                      final dynamic #17#0 = o;
                      late final core::List<dynamic> #17#12 = #17#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>};
                      late final dynamic #17#15 = #17#12.{core::List::[]}(0){(core::int) → dynamic};
                      late final dynamic #17#19 = #17#12.{core::List::[]}(1){(core::int) → dynamic};
                      if(#17#0 is{ForNonNullableByDefault} core::List<dynamic> && #17#0{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::>=}(#C7){(core::num) → core::bool} && #C8 =={core::num::==}{(core::Object) → core::bool} #17#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C3 =={core::num::==}{(core::Object) → core::bool} #17#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && (#17#12.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final dynamic #t18 = #17#15 as{ForNonNullableByDefault} core::int in (#17#15 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final dynamic #t19 = #17#19 as{ForNonNullableByDefault} core::int in (#17#19 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool}))) {
                        return 10;
                      }
                      else {
                        final dynamic #16#0 = o;
                        late final core::int #16#1 = #16#0{core::List<dynamic>}.{core::List::length}{core::int};
                        late final core::List<dynamic> #16#12 = #16#0{core::List<dynamic>}.{core::List::sublist}(2, #16#1.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
                        late final dynamic #16#16 = #16#12.{core::List::[]}(0){(core::int) → dynamic};
                        late final dynamic #16#20 = #16#12.{core::List::[]}(1){(core::int) → dynamic};
                        if(#16#0 is{ForNonNullableByDefault} core::List<dynamic> && #16#1.{core::num::>=}(#C2){(core::num) → core::bool} && #C3 =={core::num::==}{(core::Object) → core::bool} #16#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} && #C4 =={core::num::==}{(core::Object) → core::bool} #16#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic} && (#16#12.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final dynamic #t20 = #16#16 as{ForNonNullableByDefault} core::int in (#16#16 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final dynamic #t21 = #16#20 as{ForNonNullableByDefault} core::int in (#16#20 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})) && #C5 =={core::num::==}{(core::Object) → core::bool} #16#0{core::List<dynamic>}.{core::List::[]}(#16#1.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic}) {
                          return 11;
                        }
                        else {
                          final dynamic #15#0 = o;
                          if(#15#0 is{ForNonNullableByDefault} self::Class && #C1 =={core::num::==}{(core::Object) → core::bool} #15#0{self::Class}.{self::Class::field}{core::int}) {
                            return 12;
                          }
                          else {
                            final dynamic #14#0 = o;
                            if(#14#0 is{ForNonNullableByDefault} self::Class && #C7 =={core::num::==}{(core::Object) → core::bool} #14#0{self::Class}.{self::Class::finalField}{core::int}) {
                              return 13;
                            }
                            else {
                              final dynamic #13#0 = o;
                              if(#13#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #13#0{self::Class}.{self::Class::field}{core::int} && #C8 =={core::num::==}{(core::Object) → core::bool} #13#0{self::Class}.{self::Class::getter}{core::int}) {
                                return 14;
                              }
                              else {
                                final dynamic #12#0 = o;
                                if(#12#0 is{ForNonNullableByDefault} self::Class) {
                                  return 15;
                                }
                                else {
                                  final dynamic #11#0 = o;
                                  if(#11#0{dynamic} =={core::Object::==}{(core::Object) → core::bool} #C9) {
                                    return 16;
                                  }
                                  else {
                                    final dynamic #10#0 = o;
                                    if(#10#0 is{ForNonNullableByDefault} ({e: core::Object?}) && !(#10#0{({e: core::Object?})}.e{core::Object?} =={core::Object::==}{(core::Object) → core::bool} #C10)) {
                                      return 17;
                                    }
                                    else {
                                      final dynamic #9#0 = o;
                                      if(#9#0 is{ForNonNullableByDefault} core::List<dynamic> && #9#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (let final dynamic #t22 = #9#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} in true)) {
                                        return 19;
                                      }
                                      else {
                                        final dynamic #8#0 = o;
                                        if(#8#0 is{ForNonNullableByDefault} core::bool) {
                                          return 20;
                                        }
                                        else {
                                          final dynamic #7#0 = o;
                                          if(#7#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #7#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C11) {
                                            return 21;
                                          }
                                          else {
                                            final dynamic #6#0 = o;
                                            if(#6#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #6#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #6#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C11){(core::Object?) → core::bool} && #6#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C11){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::int) {
                                              return 22;
                                            }
                                            else {
                                              final dynamic #5#0 = o;
                                              if(#5#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #5#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && #5#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #5#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::String) {
                                                return 23;
                                              }
                                              else {
                                                dynamic a;
                                                final dynamic #4#0 = o;
                                                if(#4#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #4#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #4#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C7){(core::Object?) → core::bool} && (let final dynamic #t23 = a = #4#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C7){(core::Object?) → dynamic} as{ForNonNullableByDefault} dynamic in true)) {
                                                  return 24;
                                                }
                                                else {
                                                  core::int b;
                                                  final dynamic #3#0 = o;
                                                  late final dynamic #3#7 = #3#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic};
                                                  if(#3#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #3#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #3#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && (#3#7 is{ForNonNullableByDefault} core::int && (let final dynamic #t24 = b = #3#7{core::int} in true))) {
                                                    return 25;
                                                  }
                                                  else {
                                                    final dynamic #2#0 = o;
                                                    if(#2#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C11 =={core::num::==}{(core::Object) → core::bool} #2#0{(core::Object?, core::Object?)}.$0{core::Object?} && #C1 =={core::num::==}{(core::Object) → core::bool} #2#0{(core::Object?, core::Object?)}.$1{core::Object?}) {
                                                      return 26;
                                                    }
                                                    else {
                                                      dynamic c;
                                                      final dynamic #1#0 = o;
                                                      if(#1#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C11 =={core::num::==}{(core::Object) → core::bool} #1#0{({a: core::Object?, b: core::Object?})}.a{core::Object?} && (let final dynamic #t25 = c = #1#0{({a: core::Object?, b: core::Object?})}.b{core::Object?} in true)) {
                                                        return 27;
                                                      }
                                                      else {
                                                        dynamic d;
                                                        final dynamic #0#0 = o;
                                                        if(#0#0 is{ForNonNullableByDefault} ({c: core::Object?, d: core::Object?}) && #C11 =={core::num::==}{(core::Object) → core::bool} #0#0{({c: core::Object?, d: core::Object?})}.c{core::Object?} && (let final dynamic #t26 = d = #0#0{({c: core::Object?, d: core::Object?})}.d{core::Object?} in true) && d is{ForNonNullableByDefault} core::int) {
                                                          return 28;
                                                        }
                                                        else {
                                                          return 0;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
static method switchStatement(dynamic o) → core::int {
  core::print("o = ${o}");
  #L1:
  {
    core::int #t27 = -1;
    dynamic a;
    core::int b;
    dynamic c;
    dynamic d;
    final dynamic #0#0 = o;
    late final core::Object? #0#3 = #0#0{({f: core::Object?})}.f{core::Object?};
    late final core::Object? #0#13 = #0#0{({g: core::Object?})}.g{core::Object?};
    late final core::Object? #0#17 = #0#0{({a: core::Object?})}.a{core::Object?};
    late final core::Object? #0#19 = #0#0{({b: core::Object?})}.b{core::Object?};
    late final core::int #0#21 = #0#0{core::List<dynamic>}.{core::List::length}{core::int};
    late final dynamic #0#26 = #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#29 = #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final core::bool #0#32 = #0#21.{core::num::>=}(#C7){(core::num) → core::bool};
    late final core::bool #0#39 = #0#21.{core::num::>=}(#C2){(core::num) → core::bool};
    late final dynamic #0#45 = #0#0{core::List<dynamic>}.{core::List::[]}(#0#21.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic};
    late final core::List<dynamic> #0#52 = #0#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>};
    late final dynamic #0#55 = #0#52.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#59 = #0#52.{core::List::[]}(1){(core::int) → dynamic};
    late final core::List<dynamic> #0#67 = #0#0{core::List<dynamic>}.{core::List::sublist}(2, #0#21.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
    late final dynamic #0#70 = #0#67.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#74 = #0#67.{core::List::[]}(1){(core::int) → dynamic};
    late final core::int #0#80 = #0#0{self::Class}.{self::Class::field}{core::int};
    late final core::bool #0#97 = #0#21 =={core::num::==}{(core::Object) → core::bool} #C1;
    late final dynamic #0#114 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic};
    dynamic #t28;
    dynamic #t29;
    dynamic #t30;
    dynamic #t31;
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #0#0) {
      #t27 = 0;
    }
    else
      if(#0#0 is{ForNonNullableByDefault} ({f: core::Object?}) && ((let final dynamic #t32 = #0#3 as{ForNonNullableByDefault} core::int in (#0#3 as{ForNonNullableByDefault} core::int).{core::num::>=}(#C2){(core::num) → core::bool}) && (let final dynamic #t33 = #0#3 as{ForNonNullableByDefault} core::int in (#0#3 as{ForNonNullableByDefault} core::int).{core::num::<}(#C3){(core::num) → core::bool}))) {
        #t27 = 1;
      }
      else
        if(#C4 =={core::num::==}{(core::Object) → core::bool} #0#0 || #C5 =={core::num::==}{(core::Object) → core::bool} #0#0) {
          #t27 = 2;
        }
        else
          if(#0#0 is{ForNonNullableByDefault} ({g: core::Object?}) && (let final dynamic #t34 = #0#13 as{ForNonNullableByDefault} core::int in #C6 =={core::num::==}{(core::Object) → core::bool} #0#13 as{ForNonNullableByDefault} core::int)) {
            #t27 = 3;
          }
          else
            if(#0#0 is{ForNonNullableByDefault} ({a: core::Object?}) && (let final dynamic #t35 = #0#17! in true)) {
              #t27 = 4;
            }
            else
              if(#0#0 is{ForNonNullableByDefault} ({b: core::Object?}) && (!(#0#19 == null) ?{core::bool} true : false)) {
                #t27 = 5;
              }
              else
                if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#21 =={core::num::==}{(core::Object) → core::bool} #C7 && #C1 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#29) {
                  #t27 = 6;
                }
                else
                  if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#32 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#29) {
                    #t27 = 7;
                  }
                  else
                    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#39 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#29 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#45) {
                      #t27 = 8;
                    }
                    else
                      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#32 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#29 && (#0#52.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final dynamic #t36 = #0#55 as{ForNonNullableByDefault} core::int in (#0#55 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final dynamic #t37 = #0#59 as{ForNonNullableByDefault} core::int in (#0#59 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool}))) {
                        #t27 = 9;
                      }
                      else
                        if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#39 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#29 && (#0#67.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final dynamic #t38 = #0#70 as{ForNonNullableByDefault} core::int in (#0#70 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final dynamic #t39 = #0#74 as{ForNonNullableByDefault} core::int in (#0#74 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})) && #C5 =={core::num::==}{(core::Object) → core::bool} #0#45) {
                          #t27 = 10;
                        }
                        else
                          if(#0#0 is{ForNonNullableByDefault} self::Class && #C1 =={core::num::==}{(core::Object) → core::bool} #0#80) {
                            #t27 = 11;
                          }
                          else
                            if(#0#0 is{ForNonNullableByDefault} self::Class && #C7 =={core::num::==}{(core::Object) → core::bool} #0#0{self::Class}.{self::Class::finalField}{core::int}) {
                              #t27 = 12;
                            }
                            else
                              if(#0#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #0#80 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#0{self::Class}.{self::Class::getter}{core::int}) {
                                #t27 = 13;
                              }
                              else
                                if(#0#0 is{ForNonNullableByDefault} self::Class) {
                                  #t27 = 14;
                                }
                                else
                                  if(#0#0{dynamic} =={core::Object::==}{(core::Object) → core::bool} #C9) {
                                    #t27 = 15;
                                  }
                                  else
                                    if(#0#0 is{ForNonNullableByDefault} ({e: core::Object?}) && !(#0#0{({e: core::Object?})}.e{core::Object?} =={core::Object::==}{(core::Object) → core::bool} #C10)) {
                                      #t27 = 16;
                                    }
                                    else
                                      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#97 && (let final dynamic #t40 = #0#26 in true)) {
                                        #t27 = 17;
                                      }
                                      else
                                        if(#0#0 is{ForNonNullableByDefault} core::bool) {
                                          #t27 = 18;
                                        }
                                        else
                                          if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#21 =={core::num::==}{(core::Object) → core::bool} #C11) {
                                            #t27 = 19;
                                          }
                                          else
                                            if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#97 && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C11){(core::Object?) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C11){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::int) {
                                              #t27 = 20;
                                            }
                                            else
                                              if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#21.{core::num::>=}(#C1){(core::num) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::String) {
                                                #t27 = 21;
                                              }
                                              else
                                                if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#97 && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C7){(core::Object?) → core::bool} && (let final dynamic #t41 = a = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C7){(core::Object?) → dynamic} as{ForNonNullableByDefault} dynamic in true)) {
                                                  #t27 = 22;
                                                  #t28 = a;
                                                }
                                                else
                                                  if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#97 && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && (#0#114 is{ForNonNullableByDefault} core::int && (let final dynamic #t42 = b = #0#114{core::int} in true))) {
                                                    #t27 = 23;
                                                    #t29 = b;
                                                  }
                                                  else
                                                    if(#0#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C11 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$0{core::Object?} && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$1{core::Object?}) {
                                                      #t27 = 24;
                                                    }
                                                    else
                                                      if(#0#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C11 =={core::num::==}{(core::Object) → core::bool} #0#17 && (let final dynamic #t43 = c = #0#19 in true)) {
                                                        #t27 = 25;
                                                        #t30 = c;
                                                      }
                                                      else
                                                        if(#0#0 is{ForNonNullableByDefault} ({c: core::Object?, d: core::Object?}) && #C11 =={core::num::==}{(core::Object) → core::bool} #0#0{({c: core::Object?, d: core::Object?})}.c{core::Object?} && (let final dynamic #t44 = d = #0#0{({c: core::Object?, d: core::Object?})}.d{core::Object?} in true) && d is{ForNonNullableByDefault} core::int) {
                                                          #t27 = 26;
                                                          #t31 = d;
                                                        }
                                                        else {
                                                          #t27 = 27;
                                                        }
    switch(#t27) {
      #L2:
      case #C11:
        {
          {
            return 1;
          }
        }
      #L3:
      case #C1:
        {
          {
            return 2;
          }
        }
      #L4:
      case #C7:
        {
          {
            return 3;
          }
        }
      #L5:
      case #C2:
        {
          {
            return 4;
          }
        }
      #L6:
      case #C8:
        {
          {
            return 5;
          }
        }
      #L7:
      case #C3:
        {
          {
            return 6;
          }
        }
      #L8:
      case #C4:
        {
          {
            return 7;
          }
        }
      #L9:
      case #C5:
        {
          {
            return 8;
          }
        }
      #L10:
      case #C6:
        {
          {
            return 9;
          }
        }
      #L11:
      case #C12:
        {
          {
            return 10;
          }
        }
      #L12:
      case #C13:
        {
          {
            return 11;
          }
        }
      #L13:
      case #C14:
        {
          {
            return 12;
          }
        }
      #L14:
      case #C15:
        {
          {
            return 13;
          }
        }
      #L15:
      case #C16:
        {
          {
            return 14;
          }
        }
      #L16:
      case #C17:
        {
          {
            return 15;
          }
        }
      #L17:
      case #C18:
        {
          {
            return 16;
          }
        }
      #L18:
      case #C19:
        {
          {
            return 17;
          }
        }
      #L19:
      case #C20:
        {
          {
            return 19;
          }
        }
      #L20:
      case #C21:
        {
          {
            return 20;
          }
        }
      #L21:
      case #C22:
        {
          {
            return 21;
          }
        }
      #L22:
      case #C23:
        {
          {
            return 22;
          }
        }
      #L23:
      case #C24:
        {
          {
            return 23;
          }
        }
      #L24:
      case #C25:
        {
          dynamic a = #t28{dynamic};
          {
            return 24;
          }
        }
      #L25:
      case #C26:
        {
          core::int b = #t29{core::int};
          {
            return 25;
          }
        }
      #L26:
      case #C27:
        {
          {
            return 26;
          }
        }
      #L27:
      case #C28:
        {
          dynamic c = #t30{dynamic};
          {
            return 27;
          }
        }
      #L28:
      case #C29:
        {
          dynamic d = #t31{dynamic};
          {
            return 28;
          }
        }
      #L29:
      case #C30:
      default:
        {
          {
            return 0;
          }
        }
    }
  }
}
static method switchExpression(dynamic o) → core::int {
  core::print("o = ${o}");
  return block {
    core::int #t45;
    core::int #t46 = -1;
    dynamic a;
    core::int b;
    dynamic c;
    dynamic d;
    final dynamic #0#0 = o;
    late final core::Object? #0#3 = #0#0{({f: core::Object?})}.f{core::Object?};
    late final core::Object? #0#13 = #0#0{({g: core::Object?})}.g{core::Object?};
    late final core::Object? #0#17 = #0#0{({a: core::Object?})}.a{core::Object?};
    late final core::Object? #0#19 = #0#0{({b: core::Object?})}.b{core::Object?};
    late final core::int #0#21 = #0#0{core::List<dynamic>}.{core::List::length}{core::int};
    late final dynamic #0#26 = #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#29 = #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final core::bool #0#32 = #0#21.{core::num::>=}(#C7){(core::num) → core::bool};
    late final core::bool #0#39 = #0#21.{core::num::>=}(#C2){(core::num) → core::bool};
    late final dynamic #0#45 = #0#0{core::List<dynamic>}.{core::List::[]}(#0#21.{core::num::-}(1){(core::num) → core::int}){(core::int) → dynamic};
    late final core::List<dynamic> #0#52 = #0#0{core::List<dynamic>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<dynamic>};
    late final dynamic #0#55 = #0#52.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#59 = #0#52.{core::List::[]}(1){(core::int) → dynamic};
    late final core::List<dynamic> #0#67 = #0#0{core::List<dynamic>}.{core::List::sublist}(2, #0#21.{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<dynamic>};
    late final dynamic #0#70 = #0#67.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#74 = #0#67.{core::List::[]}(1){(core::int) → dynamic};
    late final core::int #0#80 = #0#0{self::Class}.{self::Class::field}{core::int};
    late final core::bool #0#97 = #0#21 =={core::num::==}{(core::Object) → core::bool} #C1;
    late final dynamic #0#114 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic};
    if(#C1 =={core::num::==}{(core::Object) → core::bool} #0#0) {
      #t46 = 0;
    }
    else
      if(#0#0 is{ForNonNullableByDefault} ({f: core::Object?}) && ((let final dynamic #t47 = #0#3 as{ForNonNullableByDefault} core::int in (#0#3 as{ForNonNullableByDefault} core::int).{core::num::>=}(#C2){(core::num) → core::bool}) && (let final dynamic #t48 = #0#3 as{ForNonNullableByDefault} core::int in (#0#3 as{ForNonNullableByDefault} core::int).{core::num::<}(#C3){(core::num) → core::bool}))) {
        #t46 = 1;
      }
      else
        if(#C4 =={core::num::==}{(core::Object) → core::bool} #0#0 || #C5 =={core::num::==}{(core::Object) → core::bool} #0#0) {
          #t46 = 2;
        }
        else
          if(#0#0 is{ForNonNullableByDefault} ({g: core::Object?}) && (let final dynamic #t49 = #0#13 as{ForNonNullableByDefault} core::int in #C6 =={core::num::==}{(core::Object) → core::bool} #0#13 as{ForNonNullableByDefault} core::int)) {
            #t46 = 3;
          }
          else
            if(#0#0 is{ForNonNullableByDefault} ({a: core::Object?}) && (let final dynamic #t50 = #0#17! in true)) {
              #t46 = 4;
            }
            else
              if(#0#0 is{ForNonNullableByDefault} ({b: core::Object?}) && (!(#0#19 == null) ?{core::bool} true : false)) {
                #t46 = 5;
              }
              else
                if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#21 =={core::num::==}{(core::Object) → core::bool} #C7 && #C1 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#29) {
                  #t46 = 6;
                }
                else
                  if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#32 && #C7 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#29) {
                    #t46 = 7;
                  }
                  else
                    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#39 && #C2 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#29 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#45) {
                      #t46 = 8;
                    }
                    else
                      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#32 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#29 && (#0#52.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final dynamic #t51 = #0#55 as{ForNonNullableByDefault} core::int in (#0#55 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final dynamic #t52 = #0#59 as{ForNonNullableByDefault} core::int in (#0#59 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool}))) {
                        #t46 = 9;
                      }
                      else
                        if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#39 && #C3 =={core::num::==}{(core::Object) → core::bool} #0#26 && #C4 =={core::num::==}{(core::Object) → core::bool} #0#29 && (#0#67.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C7 && (let final dynamic #t53 = #0#70 as{ForNonNullableByDefault} core::int in (#0#70 as{ForNonNullableByDefault} core::int).{core::num::<}(#C1){(core::num) → core::bool}) && (let final dynamic #t54 = #0#74 as{ForNonNullableByDefault} core::int in (#0#74 as{ForNonNullableByDefault} core::int).{core::num::>}(#C7){(core::num) → core::bool})) && #C5 =={core::num::==}{(core::Object) → core::bool} #0#45) {
                          #t46 = 10;
                        }
                        else
                          if(#0#0 is{ForNonNullableByDefault} self::Class && #C1 =={core::num::==}{(core::Object) → core::bool} #0#80) {
                            #t46 = 11;
                          }
                          else
                            if(#0#0 is{ForNonNullableByDefault} self::Class && #C7 =={core::num::==}{(core::Object) → core::bool} #0#0{self::Class}.{self::Class::finalField}{core::int}) {
                              #t46 = 12;
                            }
                            else
                              if(#0#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #0#80 && #C8 =={core::num::==}{(core::Object) → core::bool} #0#0{self::Class}.{self::Class::getter}{core::int}) {
                                #t46 = 13;
                              }
                              else
                                if(#0#0 is{ForNonNullableByDefault} self::Class) {
                                  #t46 = 14;
                                }
                                else
                                  if(#0#0{dynamic} =={core::Object::==}{(core::Object) → core::bool} #C9) {
                                    #t46 = 15;
                                  }
                                  else
                                    if(#0#0 is{ForNonNullableByDefault} ({e: core::Object?}) && !(#0#0{({e: core::Object?})}.e{core::Object?} =={core::Object::==}{(core::Object) → core::bool} #C10)) {
                                      #t46 = 16;
                                    }
                                    else
                                      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#97 && (let final dynamic #t55 = #0#26 in true)) {
                                        #t46 = 17;
                                      }
                                      else
                                        if(#0#0 is{ForNonNullableByDefault} core::bool) {
                                          #t46 = 18;
                                        }
                                        else
                                          if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#21 =={core::num::==}{(core::Object) → core::bool} #C11) {
                                            #t46 = 19;
                                          }
                                          else
                                            if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#97 && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C11){(core::Object?) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C11){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::int) {
                                              #t46 = 20;
                                            }
                                            else
                                              if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#21.{core::num::>=}(#C1){(core::num) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} is{ForNonNullableByDefault} core::String) {
                                                #t46 = 21;
                                              }
                                              else
                                                if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#97 && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C7){(core::Object?) → core::bool} && (let final dynamic #t56 = a = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C7){(core::Object?) → dynamic} as{ForNonNullableByDefault} dynamic in true)) {
                                                  #t46 = 22;
                                                }
                                                else
                                                  if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#97 && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && (#0#114 is{ForNonNullableByDefault} core::int && (let final dynamic #t57 = b = #0#114{core::int} in true))) {
                                                    #t46 = 23;
                                                  }
                                                  else
                                                    if(#0#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C11 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$0{core::Object?} && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$1{core::Object?}) {
                                                      #t46 = 24;
                                                    }
                                                    else
                                                      if(#0#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C11 =={core::num::==}{(core::Object) → core::bool} #0#17 && (let final dynamic #t58 = c = #0#19 in true)) {
                                                        #t46 = 25;
                                                      }
                                                      else
                                                        if(#0#0 is{ForNonNullableByDefault} ({c: core::Object?, d: core::Object?}) && #C11 =={core::num::==}{(core::Object) → core::bool} #0#0{({c: core::Object?, d: core::Object?})}.c{core::Object?} && (let final dynamic #t59 = d = #0#0{({c: core::Object?, d: core::Object?})}.d{core::Object?} in true) && d is{ForNonNullableByDefault} core::int) {
                                                          #t46 = 26;
                                                        }
                                                        else
                                                          if(true) {
                                                            #t46 = 27;
                                                          }
    #L30:
    switch(#t46) {
      #L31:
      case #C11:
        {
          #t45 = 1;
          break #L30;
        }
      #L32:
      case #C1:
        {
          #t45 = 2;
          break #L30;
        }
      #L33:
      case #C7:
        {
          #t45 = 3;
          break #L30;
        }
      #L34:
      case #C2:
        {
          #t45 = 4;
          break #L30;
        }
      #L35:
      case #C8:
        {
          #t45 = 5;
          break #L30;
        }
      #L36:
      case #C3:
        {
          #t45 = 6;
          break #L30;
        }
      #L37:
      case #C4:
        {
          #t45 = 7;
          break #L30;
        }
      #L38:
      case #C5:
        {
          #t45 = 8;
          break #L30;
        }
      #L39:
      case #C6:
        {
          #t45 = 9;
          break #L30;
        }
      #L40:
      case #C12:
        {
          #t45 = 10;
          break #L30;
        }
      #L41:
      case #C13:
        {
          #t45 = 11;
          break #L30;
        }
      #L42:
      case #C14:
        {
          #t45 = 12;
          break #L30;
        }
      #L43:
      case #C15:
        {
          #t45 = 13;
          break #L30;
        }
      #L44:
      case #C16:
        {
          #t45 = 14;
          break #L30;
        }
      #L45:
      case #C17:
        {
          #t45 = 15;
          break #L30;
        }
      #L46:
      case #C18:
        {
          #t45 = 16;
          break #L30;
        }
      #L47:
      case #C19:
        {
          #t45 = 17;
          break #L30;
        }
      #L48:
      case #C20:
        {
          #t45 = 19;
          break #L30;
        }
      #L49:
      case #C21:
        {
          #t45 = 20;
          break #L30;
        }
      #L50:
      case #C22:
        {
          #t45 = 21;
          break #L30;
        }
      #L51:
      case #C23:
        {
          #t45 = 22;
          break #L30;
        }
      #L52:
      case #C24:
        {
          #t45 = 23;
          break #L30;
        }
      #L53:
      case #C25:
        {
          #t45 = 24;
          break #L30;
        }
      #L54:
      case #C26:
        {
          #t45 = 25;
          break #L30;
        }
      #L55:
      case #C27:
        {
          #t45 = 26;
          break #L30;
        }
      #L56:
      case #C28:
        {
          #t45 = 27;
          break #L30;
        }
      #L57:
      case #C29:
        {
          #t45 = 28;
          break #L30;
        }
      #L58:
      case #C30:
        {
          #t45 = 0;
          break #L30;
        }
    }
  } =>#t45;
}
static method test(dynamic expected, dynamic value) → dynamic {
  self::expect(expected, self::ifCase(value));
  self::expect(expected, self::ifCaseElse(value));
  self::expect(expected, self::switchStatement(value));
  self::expect(expected, self::switchExpression(value));
}
static method main() → dynamic {
  self::test(0, 0);
  self::test(1, 1);
  self::test(2, ({f: 3}));
  self::test(2, ({f: 4}));
  self::test(3, 6);
  self::test(3, 7);
  self::test(4, ({g: 8}));
  self::test(5, ({a: 1}));
  self::test(6, ({b: 2}));
  self::test(0, ({b: null}));
  self::test(0, <core::int>[1, 3]);
  self::test(7, <core::int>[1, 2]);
  self::test(8, <core::int>[2, 3]);
  self::test(8, <core::int>[2, 3, 4]);
  self::test(8, <core::int>[2, 3, 4, 5]);
  self::test(9, <core::int>[3, 4, 5]);
  self::test(9, <core::int>[3, 4, 6, 5]);
  self::test(10, <core::int>[4, 5, 0, 3]);
  self::test(11, <core::int>[5, 6, 0, 3, 7]);
  self::test(12, new self::Class::•(1, 0));
  self::test(12, new self::Class::•(1, 1));
  self::test(12, new self::Class::•(1, 2));
  self::test(13, new self::Class::•(0, 2));
  self::test(13, new self::Class::•(2, 2));
  self::test(14, new self::Class::•(3, 4));
  self::test(15, new self::Class::•(3, 5));
  self::test(15, new self::Class::•(4, 5));
  self::test(16, "foo");
  self::test(17, ({e: "baz"}));
  self::test(0, ({e: "bar"}));
  self::test(19, <core::bool>[true]);
  self::test(19, <core::String>["foo"]);
  self::test(20, true);
  self::test(20, false);
  self::test(21, <dynamic, dynamic>{});
  self::test(22, <core::int, core::int>{0: 0});
  self::test(22, <core::int, core::int>{0: 1});
  self::test(0, <core::int, core::String>{0: "foo"});
  self::test(23, <core::int, core::String>{1: "foo"});
  self::test(23, <core::int, core::String>{1: "foo", 2: "bar"});
  self::test(0, <core::int, core::int>{1: 0});
  self::test(24, <core::int, core::String>{2: "foo"});
  self::test(24, <core::int, core::int>{2: 0});
  self::test(25, <core::int, core::int>{3: 0});
  self::test(0, <core::int, core::String>{3: "foo"});
  self::test(26, (0, 1));
  self::test(27, ({a: 0, b: 1}));
  self::test(27, ({a: 0, b: "foo"}));
  self::test(28, ({c: 0, d: 1}));
  self::test(28, ({c: 0, d: 2}));
  self::test(0, ({c: 0, d: "foo"}));
  core::print("success");
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  core::print("${expected} = ${actual} ?");
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual)) {
    throw "Expected ${expected}, actual ${actual}";
  }
}

constants  {
  #C1 = 1
  #C2 = 3
  #C3 = 5
  #C4 = 6
  #C5 = 7
  #C6 = 8
  #C7 = 2
  #C8 = 4
  #C9 = "foo"
  #C10 = "bar"
  #C11 = 0
  #C12 = 9
  #C13 = 10
  #C14 = 11
  #C15 = 12
  #C16 = 13
  #C17 = 14
  #C18 = 15
  #C19 = 16
  #C20 = 17
  #C21 = 18
  #C22 = 19
  #C23 = 20
  #C24 = 21
  #C25 = 22
  #C26 = 23
  #C27 = 24
  #C28 = 25
  #C29 = 26
  #C30 = 27
}
