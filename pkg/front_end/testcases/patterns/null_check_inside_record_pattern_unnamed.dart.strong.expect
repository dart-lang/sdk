library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    final dynamic #0#0 = x;
    late final core::Object? #0#1 = #0#0{(core::Object?, core::Object?)}.$0{core::Object?};
    if(#0#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && (!(#0#1 == null) ?{core::bool} #C1 =={core::num::==}{(core::Object) → core::bool} #0#1 : false) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$1{core::Object?}) {
      #t1 = 0;
    }
    switch(#t1) {
      #L2:
      case #C3:
        {
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 2
  #C3 = 0
}
