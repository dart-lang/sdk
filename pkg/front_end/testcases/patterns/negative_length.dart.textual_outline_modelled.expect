import 'dart:collection';
class NegativeLengthList<E> with ListMixin<E> {
  E operator [](int index) => _list[index];
  NegativeLengthList(this._list);
  final List<E> _list;
  int get length => _list.length <= 0 ? -1 : _list.length;
  void operator []=(int index, E value) {}
  void set length(int value) {}
}
class NegativeLengthMap<K, V> with MapMixin<K, V> {
  Iterable<K> get keys => _map.keys;
  NegativeLengthMap(this._map);
  V? operator [](Object? key) => _map[key];
  V? remove(Object? key) => _map.remove(key);
  final Map<K, V> _map;
  int get length => _map.length <= 0 ? -1 : _map.length;
  void clear() => _map.clear();
  void operator []=(K key, V value) {}
}
int switchList(List<int> list) => 
switch (list) {}
---- unknown chunk starts ----
;
---- unknown chunk ends ----
int switchMap(Map<int, String> map) => 
switch (map) {}
---- unknown chunk starts ----
;
---- unknown chunk ends ----
expect(expected, actual) {}
main() {}
