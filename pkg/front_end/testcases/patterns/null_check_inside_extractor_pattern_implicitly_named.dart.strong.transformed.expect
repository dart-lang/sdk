library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field core::int? f = null;
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
}
static method test(dynamic x) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    function ##0#2#initializer() → core::int?
      return #0#0{self::C}.{self::C::f}{core::int?};
    late final synthesized core::int? #0#2 = ##0#2#initializer(){() → core::int?};
    {
      hoisted core::int f;
      if(#0#0 is{ForNonNullableByDefault} self::C && (!(#0#2 == null) ?{core::bool} let final core::int #t1 = f = #0#2{core::int} in true : false)) {
        {
          break #L1;
        }
      }
    }
  }
}
