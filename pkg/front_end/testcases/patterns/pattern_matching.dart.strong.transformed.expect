library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

import "dart:math" as math;

abstract class Shape extends core::Object {
  synthetic constructor •() → self::Shape
    : super core::Object::•()
    ;
  abstract method calculateArea() → core::double;
}
class Square extends core::Object implements self::Shape {
  final field core::double length;
  constructor •(core::double length) → self::Square
    : self::Square::length = length, super core::Object::•()
    ;
  method calculateArea() → core::double
    return this.{self::Square::length}{core::double}.{core::double::*}(this.{self::Square::length}{core::double}){(core::num) → core::double};
}
class Circle extends core::Object implements self::Shape {
  final field core::double radius;
  constructor •(core::double radius) → self::Circle
    : self::Circle::radius = radius, super core::Object::•()
    ;
  method calculateArea() → core::double
    return #C1.{core::double::*}(this.{self::Circle::radius}{core::double}){(core::num) → core::double}.{core::double::*}(this.{self::Circle::radius}{core::double}){(core::num) → core::double};
}
static method calculateArea(self::Shape shape) → core::double
  return block {
    core::double #t1;
    {
      core::double r;
      {
        core::double l;
        final self::Shape #t2 = shape;
        core::int #t3 = -1;
        core::bool #t4 = false;
        if(!#t4) {
          final self::Shape #t5 = #t2;
          if(#t5 is self::Square) {
            final core::double #t6 = #t5{self::Square}.{self::Square::length}{core::double};
            l = #t6;
            #t3 = 0;
            #t4 = true;
          }
        }
        if(!#t4) {
          final self::Shape #t7 = #t2;
          if(#t7 is self::Circle) {
            final core::double #t8 = #t7{self::Circle}.{self::Circle::radius}{core::double};
            r = #t8;
            #t3 = 1;
            #t4 = true;
          }
        }
        #L1:
        switch(#t3) {
          #L2:
          case #C2:
            {
              #t1 = l.{core::double::*}(l){(core::num) → core::double};
              break #L1;
            }
          #L3:
          case #C3:
            {
              #t1 = #C1.{core::double::*}(r){(core::num) → core::double}.{core::double::*}(r){(core::num) → core::double};
              break #L1;
            }
        }
      }
    }
  } =>#t1;
static method main() → dynamic {
  self::Square s1 = new self::Square::•(2.0);
  self::expect(s1.{self::Square::calculateArea}(){() → core::double}, self::calculateArea(s1));
  self::Circle s2 = new self::Circle::•(3.0);
  self::expect(s2.{self::Circle::calculateArea}(){() → core::double}, self::calculateArea(s2));
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}

constants  {
  #C1 = 3.141592653589793
  #C2 = 0
  #C3 = 1
}
