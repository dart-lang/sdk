library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/logical_or_inside_if_case.dart:10:19: Error: Variable pattern 'y' doesn't have the same type or finality in all cases.
//   if (x case [int y, var _] || [var _, String y]) { // Error
//                   ^
//
// pkg/front_end/testcases/patterns/logical_or_inside_if_case.dart:26:19: Error: Variable pattern 'y' doesn't have the same type or finality in all cases.
//   if (x case [int y, var _, _] || [var _, String y, _] || [var _, bool y, _]) {
//                   ^
//
import self as self;
import "dart:core" as core;

static method test1(dynamic x) → dynamic {
  {
    final synthesized dynamic #0#0 = x;
    if(#0#0 is{ForNonNullableByDefault} core::int? || #0#0 is{ForNonNullableByDefault} core::double?) {
    }
  }
}
static method test2(dynamic x) → dynamic {
  {
    hoisted dynamic y;
    final synthesized dynamic #0#0 = x;
    late final synthesized core::bool #0#4 = #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1;
    late final synthesized dynamic #0#6 = #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final synthesized dynamic #0#7 = #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#6 is{ForNonNullableByDefault} core::int && (let final dynamic #t1 = y = #0#6 in true)) || #0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#7 is{ForNonNullableByDefault} core::String && (let final dynamic #t2 = y = #0#7 in true))) {
      return y;
    }
    else {
      return null;
    }
  }
}
static method test3(dynamic x) → dynamic {
  {
    final synthesized dynamic #0#0 = x;
    if(#0#0 =={core::Object::==}{(core::Object) → core::bool} #C2 || #0#0 =={core::Object::==}{(core::Object) → core::bool} #C1 || #0#0 =={core::Object::==}{(core::Object) → core::bool} #C3) {
      return 0;
    }
    else {
      return 1;
    }
  }
}
static method test4(dynamic x) → dynamic {
  {
    hoisted dynamic y;
    final synthesized dynamic #0#0 = x;
    late final synthesized core::bool #0#4 = #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C3;
    late final synthesized dynamic #0#6 = #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final synthesized dynamic #0#7 = #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#6 is{ForNonNullableByDefault} core::int && (let final dynamic #t3 = y = #0#6 in true)) || #0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#7 is{ForNonNullableByDefault} core::String && (let final dynamic #t4 = y = #0#7 in true)) || #0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#7 is{ForNonNullableByDefault} core::bool && (let final dynamic #t5 = y = #0#7 in true))) {
      return y;
    }
    else {
      return null;
    }
  }
}

constants  {
  #C1 = 2
  #C2 = 1
  #C3 = 3
}
