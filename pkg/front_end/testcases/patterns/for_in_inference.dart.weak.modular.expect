library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "dart:collection" as col;

static method test1() → dynamic {
  for (final core::List<core::int> #t1 in <core::List<core::int>>[<core::int>[3, 4, 5, 6]]) {
    hoisted core::int a2;
    hoisted core::int b2;
    hoisted core::List<core::int> c2;
    {
      final synthesized dynamic #0#0 = #t1;
      late final synthesized core::int #0#4 = #0#0{core::List<core::int>}.{core::List::[]}(0){(core::int) → core::int};
      late final synthesized core::List<core::int> #0#6 = #0#0{core::List<core::int>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<core::int>};
      if(!(#0#0{core::List<core::int>}.{core::List::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && (#0#4 is{ForNonNullableByDefault} core::int && (let final dynamic #t2 = a2 = #0#4 in true)) && (let final dynamic #t3 = b2 = #0#0{core::List<core::int>}.{core::List::[]}(1){(core::int) → core::int} in true) && (#0#6 is{ForNonNullableByDefault} core::List<core::int> && (let final dynamic #t4 = c2 = #0#6 in true))))
        throw new core::StateError::•("Pattern matching error");
    }
    return c2.{core::Iterable::first}{core::int}.{core::int::isEven}{core::bool};
  }
}
static method test2() → dynamic {
  return block {
    final core::List<core::bool> #t5 = <core::bool>[];
    for (final core::List<core::int> #t6 in <core::List<core::int>>[<core::int>[3, 4, 5, 6]]) {
      hoisted core::int a2;
      hoisted core::int b2;
      hoisted core::List<core::int> c2;
      {
        final synthesized dynamic #0#0 = #t6;
        late final synthesized core::int #0#4 = #0#0{core::List<core::int>}.{core::List::[]}(0){(core::int) → core::int};
        late final synthesized core::List<core::int> #0#6 = #0#0{core::List<core::int>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<core::int>};
        if(!(#0#0{core::List<core::int>}.{core::List::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && (#0#4 is{ForNonNullableByDefault} core::int && (let final dynamic #t7 = a2 = #0#4 in true)) && (let final dynamic #t8 = b2 = #0#0{core::List<core::int>}.{core::List::[]}(1){(core::int) → core::int} in true) && (#0#6 is{ForNonNullableByDefault} core::List<core::int> && (let final dynamic #t9 = c2 = #0#6 in true))))
          throw new core::StateError::•("Pattern matching error");
      }
      #t5.{core::List::add}{Invariant}(c2.{core::Iterable::first}{core::int}.{core::int::isEven}{core::bool}){(core::bool) → void};
    }
  } =>#t5;
}
static method test3() → core::Iterable<core::bool> {
  return block {
    final core::Set<core::bool> #t10 = col::LinkedHashSet::•<core::bool>();
    for (final core::List<core::int> #t11 in <core::List<core::int>>[<core::int>[3, 4, 5, 6]]) {
      hoisted core::int a2;
      hoisted core::int b2;
      hoisted core::List<core::int> c2;
      {
        final synthesized dynamic #0#0 = #t11;
        late final synthesized core::int #0#4 = #0#0{core::List<core::int>}.{core::List::[]}(0){(core::int) → core::int};
        late final synthesized core::List<core::int> #0#6 = #0#0{core::List<core::int>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<core::int>};
        if(!(#0#0{core::List<core::int>}.{core::List::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && (#0#4 is{ForNonNullableByDefault} core::int && (let final dynamic #t12 = a2 = #0#4 in true)) && (let final dynamic #t13 = b2 = #0#0{core::List<core::int>}.{core::List::[]}(1){(core::int) → core::int} in true) && (#0#6 is{ForNonNullableByDefault} core::List<core::int> && (let final dynamic #t14 = c2 = #0#6 in true))))
          throw new core::StateError::•("Pattern matching error");
      }
      #t10.{core::Set::add}{Invariant}(c2.{core::Iterable::first}{core::int}.{core::int::isEven}{core::bool}){(core::bool) → core::bool};
    }
  } =>#t10;
}
static method test4() → dynamic {
  return block {
    final core::Map<core::int, core::bool> #t15 = <core::int, core::bool>{};
    for (final core::List<core::int> #t16 in <core::List<core::int>>[<core::int>[3, 4, 5, 6]]) {
      hoisted core::int a2;
      hoisted core::int b2;
      hoisted core::List<core::int> c2;
      {
        final synthesized dynamic #0#0 = #t16;
        late final synthesized core::int #0#4 = #0#0{core::List<core::int>}.{core::List::[]}(0){(core::int) → core::int};
        late final synthesized core::List<core::int> #0#6 = #0#0{core::List<core::int>}.{core::List::sublist}(2){(core::int, [core::int?]) → core::List<core::int>};
        if(!(#0#0{core::List<core::int>}.{core::List::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && (#0#4 is{ForNonNullableByDefault} core::int && (let final dynamic #t17 = a2 = #0#4 in true)) && (let final dynamic #t18 = b2 = #0#0{core::List<core::int>}.{core::List::[]}(1){(core::int) → core::int} in true) && (#0#6 is{ForNonNullableByDefault} core::List<core::int> && (let final dynamic #t19 = c2 = #0#6 in true))))
          throw new core::StateError::•("Pattern matching error");
      }
      #t15.{core::Map::[]=}{Invariant}(c2.{core::Iterable::first}{core::int}, c2.{core::Iterable::first}{core::int}.{core::int::isEven}{core::bool}){(core::int, core::bool) → void};
    }
  } =>#t15;
}

constants  {
  #C1 = 2
}
