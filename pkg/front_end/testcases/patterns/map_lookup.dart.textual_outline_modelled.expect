import "dart:collection";
String soundResult = "[key1];" "[key2];";
String test1(Object o) {}
String test2(Object o) => 
String unsoundResult = "containsKey(key1);" "[key1];" "containsKey(key2);" "[key2];";
bool get hasUnsoundNullSafety => const <Null>[] is List<Object>;
class MyMap<K, V> extends MapBase<K, V> {
  @override
  Iterable<K> get keys {}
  Map<K, V> _inner;
  MyMap(this._inner);
  String log = "";
  @override
  bool containsKey(Object? key) {}
  @override
  int get length {}
  @override
  operator [](Object? key) {}
  @override
  remove(Object? key) {}
  @override
  void clear() {}
  void clearLog() {}
  @override
  void operator []=(key, value) {}
}
switch (o) {}
---- unknown chunk starts ----
;
---- unknown chunk ends ----
expect(expected, actual) {}
main() {}
