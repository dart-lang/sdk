library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/simple_switch_with_guards_error.dart:7:15: Error: Variable pattern 'a' doesn't have the same type in all cases.
//     case [int a, _] when a.isEven: // Error: type of 'a' mismatch.
//               ^
//
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    dynamic #t1;
    final dynamic #t2 = x;
    final core::int #t3 = -1;
    final core::bool #t4 = false;
    if(!#t4) {
      final dynamic #t5 = #t2;
      if(#t5 is core::List<dynamic> && #t5{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::==}(2){(core::Object) → core::bool}) {
        final dynamic #t6 = #t5{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
        final dynamic #t7 = #t6;
        if(#t7 is core::int) {
          core::int a = #t7{core::int};
          if(a.{core::int::isEven}{core::bool}) {
            #t3 = 0;
            #t4 = true;
            #t1 = a;
          }
        }
      }
    }
    if(!#t4) {
      final dynamic #t8 = #t2;
      if(#t8 is core::List<dynamic> && #t8{core::List<dynamic>}.{core::List::length}{core::int}.{core::num::==}(2){(core::Object) → core::bool}) {
        final dynamic #t9 = #t8{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
        final dynamic #t10 = #t9;
        if(#t10 is core::double) {
          core::double a = #t10{core::double};
          if(a.{core::double::ceil}(){() → core::int}.{core::int::isOdd}{core::bool}) {
            #t3 = 0;
            #t4 = true;
            #t1 = a;
          }
        }
      }
    }
    switch(#t3) {
      #L2:
      case #C1:
        {
          core::int a = invalid-expression "pkg/front_end/testcases/patterns/simple_switch_with_guards_error.dart:7:15: Error: Variable pattern 'a' doesn't have the same type in all cases.
    case [int a, _] when a.isEven: // Error: type of 'a' mismatch.
              ^";
          {
            return a;
          }
        }
      #L3:
      default:
        {
          return null;
        }
    }
  }
}

constants  {
  #C1 = 0
}
