library;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  {
    final synthesized dynamic #0#0 = x;
    final const synthesized core::int #0#1 = #C1;
    if(#0#0 =={core::Object::==}{(core::Object) → core::bool} #C1) {
    }
  }
  {
    final synthesized dynamic #1#0 = x;
    final const synthesized has-declared-initializer Null #1#1 = #C2;
    if(#1#0 == null) {
    }
  }
  {
    final synthesized dynamic #2#0 = x;
    final const synthesized core::int #2#1 = #C3;
    if(#2#0 =={core::Object::==}{(core::Object) → core::bool} #C3) {
    }
  }
  {
    final synthesized dynamic #3#0 = x;
    final const synthesized core::int #3#1 = #C1;
    if(!(#3#0 =={core::Object::==}{(core::Object) → core::bool} #C1)) {
    }
  }
  {
    final synthesized dynamic #4#0 = x;
    final const synthesized has-declared-initializer Null #4#1 = #C2;
    if(!(#4#0 == null)) {
    }
  }
  {
    final synthesized dynamic #5#0 = x;
    final const synthesized core::int #5#1 = #C1;
    if(#5#0{dynamic}.<(#C1) as core::bool) {
    }
  }
  {
    final synthesized dynamic #6#0 = x;
    final const synthesized core::int #6#1 = #C1;
    if(#6#0{dynamic}.<=(#C1) as core::bool) {
    }
  }
  {
    final synthesized dynamic #7#0 = x;
    final const synthesized core::int #7#1 = #C1;
    if(#7#0{dynamic}.>(#C1) as core::bool) {
    }
  }
  {
    final synthesized dynamic #8#0 = x;
    final const synthesized core::int #8#1 = #C1;
    if(#8#0{dynamic}.>=(#C1) as core::bool) {
    }
  }
}
static method main() → dynamic {}

constants  {
  #C1 = 1
  #C2 = null
  #C3 = 3
}
