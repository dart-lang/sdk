library;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    synthesized dynamic #0#4;
    synthesized core::bool #0#4#isSet = false;
    final const synthesized core::String #0#2 = #C1;
    final const synthesized core::int #0#5 = #C2;
    synthesized dynamic #0#9;
    synthesized core::bool #0#9#isSet = false;
    final const synthesized core::String #0#7 = #C3;
    final const synthesized core::int #0#10 = #C4;
    {
      if(#0#0 is core::Map<dynamic, dynamic> && (!((#0#4#isSet ?{dynamic} #0#4 : let final dynamic #t1 = #0#4#isSet = true in #0#4 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic}) == null) || null is dynamic && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool}) && #C2 =={core::num::==}{(core::Object) → core::bool} (#0#4#isSet ?{dynamic} #0#4 : let final dynamic #t2 = #0#4#isSet = true in #0#4 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic}) && (!((#0#9#isSet ?{dynamic} #0#9 : let final dynamic #t3 = #0#9#isSet = true in #0#9 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C3){(core::Object?) → dynamic}) == null) || null is dynamic && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C3){(core::Object?) → core::bool}) && #C4 =={core::num::==}{(core::Object) → core::bool} (#0#9#isSet ?{dynamic} #0#9 : let final dynamic #t4 = #0#9#isSet = true in #0#9 = #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C3){(core::Object?) → dynamic})) {
        {
          break #L1;
        }
      }
    }
  }
}

constants  {
  #C1 = "a"
  #C2 = 1
  #C3 = "b"
  #C4 = 2
}

Extra constant evaluation status:
Evaluated: IsExpression @ org-dartlang-testcase:///map_pattern_inside_case.dart:7:14 -> BoolConstant(true)
Evaluated: IsExpression @ org-dartlang-testcase:///map_pattern_inside_case.dart:7:22 -> BoolConstant(true)
Extra constant evaluation: evaluated: 55, effectively constant: 2
