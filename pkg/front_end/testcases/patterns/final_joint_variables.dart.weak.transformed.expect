library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    function ##0#4#initializer() → core::bool
      return #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1;
    late final synthesized core::bool #0#4 = ##0#4#initializer(){() → core::bool};
    function ##0#6#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final synthesized dynamic #0#6 = ##0#6#initializer(){() → dynamic};
    dynamic #t1;
    {
      lowered final hoisted core::int a#case#0;
      lowered final hoisted core::int a#case#1;
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#6 is{ForNonNullableByDefault} core::int && (let final core::int #t2 = a#case#0 = #0#6{core::int} in true)) && (let final core::int #t3 = #t1 = a#case#0 in true) || #0#0 is{ForNonNullableByDefault} core::int && (let final core::int #t4 = a#case#1 = #0#0{core::int} in true) && (let final core::int #t5 = #t1 = a#case#1 in true)) {
        final core::int a = #t1{core::int};
        {
          return a;
        }
      }
    }
    {
      final hoisted core::String a;
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#6 is{ForNonNullableByDefault} core::String && (let final core::String #t6 = a = #0#6{core::String} in true)) || #0#0 is{ForNonNullableByDefault} core::String && (let final core::String #t7 = a = #0#0{core::String} in true)) {
        {
          return a;
        }
      }
    }
    {
      {
        {
          return null;
        }
      }
    }
  }
}
static method main() → dynamic {
  self::expectEquals(self::test(0), 0);
  self::expectEquals(self::test(core::_GrowableList::_literal1<core::int>(0)), 0);
  self::expectEquals(self::test("foo"), "foo");
  self::expectEquals(self::test(core::_GrowableList::_literal1<core::String>("foo")), "foo");
  self::expectEquals(self::test(3.14), null);
}
static method expectEquals(dynamic x, dynamic y) → dynamic {
  if(!(x =={core::Object::==}{(core::Object) → core::bool} y)) {
    throw "Expected '${x}' to be equal to '${x}'.";
  }
}

constants  {
  #C1 = 1
}
