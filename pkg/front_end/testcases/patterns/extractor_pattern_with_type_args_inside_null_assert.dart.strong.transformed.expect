library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class C<T extends core::Object? = dynamic> extends core::Object {
  covariant-by-class field self::C::T? f = null;
  synthetic constructor •() → self::C<self::C::T%>
    : super core::Object::•()
    ;
}
static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    final dynamic #0#0 = x;
    if(let final dynamic #t2 = #0#0! in #0#0! is{ForNonNullableByDefault} self::C<core::int> && #C1 =={core::num::==}{(core::Object) → core::bool} (#0#0! as{ForNonNullableByDefault} self::C<core::int>).{self::C::f}{core::int?}) {
      #t1 = 0;
    }
    switch(#t1) {
      #L2:
      case #C2:
        {
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 0
}
