library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    core::int y;
    core::double z;
    final dynamic #0#0 = x;
    function ##0#6#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#6 = ##0#6#initializer(){() → dynamic};
    dynamic #t2;
    dynamic #t3;
    if(#0#0 is{ForNonNullableByDefault} core::int && (let final core::int #t4 = y = #0#0{core::int} in true)) {
      #t1 = 0;
      #t2 = y;
    }
    else
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (#0#6 is{ForNonNullableByDefault} core::double && (let final core::double #t5 = z = #0#6{core::double} in true))) {
        #t1 = 1;
        #t3 = z;
      }
      else {
        #t1 = 2;
      }
    switch(#t1) {
      #L2:
      case #C2:
        {
          core::int y = #t2{core::int};
          {
            return y;
          }
        }
      #L3:
      case #C1:
        {
          core::double z = #t3{core::double};
          {
            return z;
          }
        }
      #L4:
      case #C3:
      default:
        {
          {
            return null;
          }
        }
    }
  }
}
static method main() → dynamic {
  self::expectEquals(self::test(0), 0);
  self::expectEquals(self::test(core::_GrowableList::_literal1<core::double>(3.14)), 3.14);
  self::expectEquals(self::test("foo"), null);
  self::expectEquals(self::test(null), null);
}
static method expectEquals(dynamic x, dynamic y) → dynamic {
  if(!(x =={core::Object::==}{(core::Object) → core::bool} y)) {
    throw "Expected ${x} to be equal to ${y}.";
  }
}

constants  {
  #C1 = 1
  #C2 = 0
  #C3 = 2
}
