library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/issue51112.dart:8:47: Error: Pattern variables can't be assigned inside the guard of the enclosing guarded pattern.
// Try assigning to a different variable.
//     case [int y, _] when () { setToOne = () { y = 1; }; return true; }():
//                                               ^
//
// pkg/front_end/testcases/patterns/issue51112.dart:9:47: Error: Pattern variables can't be assigned inside the guard of the enclosing guarded pattern.
// Try assigning to a different variable.
//     case [_, int y] when () { setToOne = () { y = 1; }; return true; }():
//                                               ^
//
// pkg/front_end/testcases/patterns/issue51112.dart:12:47: Error: Pattern variables can't be assigned inside the guard of the enclosing guarded pattern.
// Try assigning to a different variable.
//     case [double y] when () { setToOne = () { y = 1.0; }; return true; }():
//                                               ^
//
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  () → void setToOne = () → void {};
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    function ##0#2#initializer() → core::int
      return #0#0{core::List<dynamic>}.{core::List::length}{core::int};
    late final synthesized core::int #0#2 = ##0#2#initializer(){() → core::int};
    function ##0#4#initializer() → core::bool
      return #0#2 =={core::num::==}{(core::Object) → core::bool} #C1;
    late final synthesized core::bool #0#4 = ##0#4#initializer(){() → core::bool};
    function ##0#6#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final synthesized dynamic #0#6 = ##0#6#initializer(){() → dynamic};
    function ##0#7#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final synthesized dynamic #0#7 = ##0#7#initializer(){() → dynamic};
    dynamic #t1;
    {
      lowered hoisted core::int y#case#0;
      lowered hoisted core::int y#case#1;
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#6 is{ForNonNullableByDefault} core::int && (let final core::int #t2 = y#case#0 = #0#6{core::int} in true)) && (() → core::bool {
        setToOne = () → void {
          y#case#0 = 1;
        };
        return true;
      })(){() → core::bool} && (let final core::int #t3 = #t1 = y#case#0 in true) || #0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#4 && (#0#7 is{ForNonNullableByDefault} core::int && (let final core::int #t4 = y#case#1 = #0#7{core::int} in true)) && (() → core::bool {
        setToOne = () → void {
          y#case#1 = 1;
        };
        return true;
      })(){() → core::bool} && (let final core::int #t5 = #t1 = y#case#1 in true)) {
        core::int y = #t1{core::int};
        {
          setToOne(){() → void};
          return y;
        }
      }
    }
    {
      hoisted core::double y;
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#2 =={core::num::==}{(core::Object) → core::bool} #C2 && (#0#6 is{ForNonNullableByDefault} core::double && (let final core::double #t6 = y = #0#6{core::double} in true)) && (() → core::bool {
        setToOne = () → void {
          y = 1.0;
        };
        return true;
      })(){() → core::bool}) {
        {
          setToOne(){() → void};
          return y;
        }
      }
    }
    {
      {
        {
          return null;
        }
      }
    }
  }
}
static method main() → dynamic {
  self::expectEquals(self::test(core::_GrowableList::_literal2<core::Object>(0, "foo")), 0);
  self::expectEquals(self::test(core::_GrowableList::_literal2<core::Object>("foo", 0)), 0);
  self::expectEquals(self::test(core::_GrowableList::_literal1<core::double>(3.14)), 1.0);
  self::expectEquals(self::test(null), null);
}
static method expectEquals(dynamic x, dynamic y) → dynamic {
  if(!(x =={core::Object::==}{(core::Object) → core::bool} y)) {
    throw "Expected ${x} to be equal to ${y}.";
  }
}

constants  {
  #C1 = 2
  #C2 = 1
}
