library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "cache_lookups_lib.dart" as cac;

import "org-dartlang-testcase:///cache_lookups_lib.dart";

class Class extends core::Object {
  synthetic constructor •() → self::Class
    : super core::Object::•()
    ;
  get field() → core::int {
    self::counter = self::counter.{core::num::+}(1){(core::num) → core::int};
    return 42;
  }
}
static field core::int counter = 0;
static method test(dynamic o) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = o;
    function ##0#2#initializer() → core::int
      return #0#0{self::Class}.{self::Class::field}{core::int};
    late final synthesized core::int #0#2 = ##0#2#initializer(){() → core::int};
    function ##0#10#initializer() → core::bool
      return #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1;
    late final synthesized core::bool #0#10 = ##0#10#initializer(){() → core::bool};
    function ##0#12#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final synthesized dynamic #0#12 = ##0#12#initializer(){() → dynamic};
    function ##0#13#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final synthesized dynamic #0#13 = ##0#13#initializer(){() → dynamic};
    {
      if(#0#0 is{ForNonNullableByDefault} self::Class && #C2 =={core::num::==}{(core::Object) → core::bool} #0#2 || #0#0 is{ForNonNullableByDefault} self::Class && #C3 =={core::num::==}{(core::Object) → core::bool} #0#2) {
        {
          core::print("Class");
          break #L1;
        }
      }
    }
    {
      core::int a;
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#10 && (#0#12 is{ForNonNullableByDefault} core::int && (let final core::int #t1 = a = #0#12{core::int} in true)) && #C3 =={core::num::==}{(core::Object) → core::bool} #0#13 || #0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#10 && (#0#12 is{ForNonNullableByDefault} core::int && (let final core::int #t2 = a = #0#12{core::int} in true)) && #C1 =={core::num::==}{(core::Object) → core::bool} #0#13) {
        {
          core::print("List");
        }
      }
    }
  }
}
static method main() → dynamic {
  self::expect(0, self::counter);
  self::test(null);
  self::expect(0, self::counter);
  self::test(new self::Class::•());
  self::expect(1, self::counter);
  self::test(new cac::CustomList::•<core::int>(core::_GrowableList::_literal2<core::int>(0, 1)));
  self::expect(2, self::counter);
  self::test(new cac::CustomList::•<core::int>(core::_GrowableList::_literal2<core::int>(0, 2)));
  self::expect(3, self::counter);
  self::test(new cac::CustomList::•<core::int>(core::_GrowableList::_literal2<core::int>(0, 3)));
  self::expect(4, self::counter);
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}

library /*isNonNullableByDefault*/;
import self as cac;
import "dart:core" as core;
import "dart:collection" as col;
import "dart:_internal" as _in;
import "dart:math" as math;
import "cache_lookups.dart" as self;

import "dart:collection";
import "org-dartlang-testcase:///cache_lookups.dart";

abstract class _CustomList&Object&ListMixin<E extends core::Object? = dynamic> extends core::Object implements col::ListMixin<cac::_CustomList&Object&ListMixin::E%> /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → cac::_CustomList&Object&ListMixin<cac::_CustomList&Object&ListMixin::E%>
    : super core::Object::•()
    ;
  get /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ first() → cac::_CustomList&Object&ListMixin::E% {
    if(this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 0)
      throw _in::IterableElementError::noElement();
    return this.{core::List::[]}(0){(core::int) → cac::_CustomList&Object&ListMixin::E%};
  }
  set /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ first(covariant-by-class cac::_CustomList&Object&ListMixin::E% value) → void {
    if(this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 0)
      throw _in::IterableElementError::noElement();
    this.{core::List::[]=}(0, value){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
  }
  get /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ last() → cac::_CustomList&Object&ListMixin::E% {
    if(this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 0)
      throw _in::IterableElementError::noElement();
    return this.{core::List::[]}(this.{core::List::length}{core::int}.{core::num::-}(1){(core::num) → core::int}){(core::int) → cac::_CustomList&Object&ListMixin::E%};
  }
  set /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ last(covariant-by-class cac::_CustomList&Object&ListMixin::E% value) → void {
    if(this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 0)
      throw _in::IterableElementError::noElement();
    this.{core::List::[]=}(this.{core::List::length}{core::int}.{core::num::-}(1){(core::num) → core::int}, value){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
  }
  @#C6
  get /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ iterator() → core::Iterator<cac::_CustomList&Object&ListMixin::E%>
    return new _in::ListIterator::•<cac::_CustomList&Object&ListMixin::E%>(this);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ elementAt(core::int index) → cac::_CustomList&Object&ListMixin::E%
    return this.{core::List::[]}(index){(core::int) → cac::_CustomList&Object&ListMixin::E%};
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ followedBy(covariant-by-class core::Iterable<cac::_CustomList&Object&ListMixin::E%> other) → core::Iterable<cac::_CustomList&Object&ListMixin::E%>
    return _in::FollowedByIterable::firstEfficient<cac::_CustomList&Object&ListMixin::E%>(this, other);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ forEach((cac::_CustomList&Object&ListMixin::E%) → void action) → void {
    core::int length = this.{core::List::length}{core::int};
    for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      action(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%) → void};
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
  }
  @#C6
  get /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ isEmpty() → core::bool
    return this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 0;
  get /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ isNotEmpty() → core::bool
    return !this.{col::ListMixin::isEmpty}{core::bool};
  get /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ single() → cac::_CustomList&Object&ListMixin::E% {
    if(this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 0)
      throw _in::IterableElementError::noElement();
    if(this.{core::List::length}{core::int}.{core::num::>}(1){(core::num) → core::bool})
      throw _in::IterableElementError::tooMany();
    return this.{core::List::[]}(0){(core::int) → cac::_CustomList&Object&ListMixin::E%};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ contains(core::Object? element) → core::bool {
    core::int length = this.{core::List::length}{core::int};
    for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      if(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%} =={core::Object::==}{(core::Object) → core::bool} element)
        return true;
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    return false;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ every((cac::_CustomList&Object&ListMixin::E%) → core::bool test) → core::bool {
    core::int length = this.{core::List::length}{core::int};
    for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      if(!test(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%) → core::bool})
        return false;
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    return true;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ any((cac::_CustomList&Object&ListMixin::E%) → core::bool test) → core::bool {
    core::int length = this.{core::List::length}{core::int};
    for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      if(test(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%) → core::bool})
        return true;
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    return false;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ firstWhere((cac::_CustomList&Object&ListMixin::E%) → core::bool test, {covariant-by-class () →? cac::_CustomList&Object&ListMixin::E% orElse = #C5}) → cac::_CustomList&Object&ListMixin::E% {
    core::int length = this.{core::List::length}{core::int};
    for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      cac::_CustomList&Object&ListMixin::E% element = this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%};
      if(test(element){(cac::_CustomList&Object&ListMixin::E%) → core::bool})
        return element;
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    if(!(orElse == null))
      return orElse{() → cac::_CustomList&Object&ListMixin::E%}(){() → cac::_CustomList&Object&ListMixin::E%};
    throw _in::IterableElementError::noElement();
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ lastWhere((cac::_CustomList&Object&ListMixin::E%) → core::bool test, {covariant-by-class () →? cac::_CustomList&Object&ListMixin::E% orElse = #C5}) → cac::_CustomList&Object&ListMixin::E% {
    core::int length = this.{core::List::length}{core::int};
    for (core::int i = length.{core::num::-}(1){(core::num) → core::int}; i.{core::num::>=}(0){(core::num) → core::bool}; i = i.{core::num::-}(1){(core::num) → core::int}) {
      cac::_CustomList&Object&ListMixin::E% element = this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%};
      if(test(element){(cac::_CustomList&Object&ListMixin::E%) → core::bool})
        return element;
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    if(!(orElse == null))
      return orElse{() → cac::_CustomList&Object&ListMixin::E%}(){() → cac::_CustomList&Object&ListMixin::E%};
    throw _in::IterableElementError::noElement();
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ singleWhere((cac::_CustomList&Object&ListMixin::E%) → core::bool test, {covariant-by-class () →? cac::_CustomList&Object&ListMixin::E% orElse = #C5}) → cac::_CustomList&Object&ListMixin::E% {
    core::int length = this.{core::List::length}{core::int};
    late cac::_CustomList&Object&ListMixin::E% match;
    core::bool matchFound = false;
    for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      cac::_CustomList&Object&ListMixin::E% element = this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%};
      if(test(element){(cac::_CustomList&Object&ListMixin::E%) → core::bool}) {
        if(matchFound) {
          throw _in::IterableElementError::tooMany();
        }
        matchFound = true;
        match = element;
      }
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    if(matchFound)
      return match;
    if(!(orElse == null))
      return orElse{() → cac::_CustomList&Object&ListMixin::E%}(){() → cac::_CustomList&Object&ListMixin::E%};
    throw _in::IterableElementError::noElement();
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ join([core::String separator = #C7]) → core::String {
    if(this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 0)
      return "";
    core::StringBuffer buffer = let final core::StringBuffer #t3 = new core::StringBuffer::•() in block {
      #t3.{core::StringBuffer::writeAll}(this, separator){(core::Iterable<dynamic>, [core::String]) → void};
    } =>#t3;
    return buffer.{core::StringBuffer::toString}(){() → core::String};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ where((cac::_CustomList&Object&ListMixin::E%) → core::bool test) → core::Iterable<cac::_CustomList&Object&ListMixin::E%>
    return new _in::WhereIterable::•<cac::_CustomList&Object&ListMixin::E%>(this, test);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ whereType<T extends core::Object? = dynamic>() → core::Iterable<cac::_CustomList&Object&ListMixin::whereType::T%>
    return new _in::WhereTypeIterable::•<cac::_CustomList&Object&ListMixin::whereType::T%>(this);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ map<T extends core::Object? = dynamic>((cac::_CustomList&Object&ListMixin::E%) → cac::_CustomList&Object&ListMixin::map::T% f) → core::Iterable<cac::_CustomList&Object&ListMixin::map::T%>
    return new _in::MappedListIterable::•<cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::map::T%>(this, f);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ expand<T extends core::Object? = dynamic>((cac::_CustomList&Object&ListMixin::E%) → core::Iterable<cac::_CustomList&Object&ListMixin::expand::T%> f) → core::Iterable<cac::_CustomList&Object&ListMixin::expand::T%>
    return new _in::ExpandIterable::•<cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::expand::T%>(this, f);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ reduce(covariant-by-class (cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::E%) → cac::_CustomList&Object&ListMixin::E% combine) → cac::_CustomList&Object&ListMixin::E% {
    core::int length = this.{core::List::length}{core::int};
    if(length =={core::num::==}{(core::Object) → core::bool} 0)
      throw _in::IterableElementError::noElement();
    cac::_CustomList&Object&ListMixin::E% value = this.{core::List::[]}(0){(core::int) → cac::_CustomList&Object&ListMixin::E%};
    for (core::int i = 1; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      value = combine(value, this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::E%) → cac::_CustomList&Object&ListMixin::E%};
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    return value;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ fold<T extends core::Object? = dynamic>(cac::_CustomList&Object&ListMixin::fold::T% initialValue, (cac::_CustomList&Object&ListMixin::fold::T%, cac::_CustomList&Object&ListMixin::E%) → cac::_CustomList&Object&ListMixin::fold::T% combine) → cac::_CustomList&Object&ListMixin::fold::T% {
    cac::_CustomList&Object&ListMixin::fold::T% value = initialValue;
    core::int length = this.{core::List::length}{core::int};
    for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      value = combine(value, this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::fold::T%, cac::_CustomList&Object&ListMixin::E%) → cac::_CustomList&Object&ListMixin::fold::T%};
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    return value;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ skip(core::int count) → core::Iterable<cac::_CustomList&Object&ListMixin::E%>
    return new _in::SubListIterable::•<cac::_CustomList&Object&ListMixin::E%>(this, count, null);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ skipWhile((cac::_CustomList&Object&ListMixin::E%) → core::bool test) → core::Iterable<cac::_CustomList&Object&ListMixin::E%> {
    return new _in::SkipWhileIterable::•<cac::_CustomList&Object&ListMixin::E%>(this, test);
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ take(core::int count) → core::Iterable<cac::_CustomList&Object&ListMixin::E%>
    return new _in::SubListIterable::•<cac::_CustomList&Object&ListMixin::E%>(this, 0, _in::checkNotNullable<core::int>(count, "count"));
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ takeWhile((cac::_CustomList&Object&ListMixin::E%) → core::bool test) → core::Iterable<cac::_CustomList&Object&ListMixin::E%> {
    return new _in::TakeWhileIterable::•<cac::_CustomList&Object&ListMixin::E%>(this, test);
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ toList({core::bool growable = #C8}) → core::List<cac::_CustomList&Object&ListMixin::E%> {
    if(this.{col::ListMixin::isEmpty}{core::bool})
      return core::List::empty<cac::_CustomList&Object&ListMixin::E%>(growable: growable);
    cac::_CustomList&Object&ListMixin::E% first = this.{core::List::[]}(0){(core::int) → cac::_CustomList&Object&ListMixin::E%};
    core::List<cac::_CustomList&Object&ListMixin::E%> result = core::List::filled<cac::_CustomList&Object&ListMixin::E%>(this.{core::List::length}{core::int}, first, growable: growable);
    for (core::int i = 1; i.{core::num::<}(this.{core::List::length}{core::int}){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      result.{core::List::[]=}(i, this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
    }
    return result;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ toSet() → core::Set<cac::_CustomList&Object&ListMixin::E%> {
    core::Set<cac::_CustomList&Object&ListMixin::E%> result = new col::_Set::•<cac::_CustomList&Object&ListMixin::E%>();
    for (core::int i = 0; i.{core::num::<}(this.{core::List::length}{core::int}){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      result.{core::Set::add}(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%) → core::bool};
    }
    return result;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ add(covariant-by-class cac::_CustomList&Object&ListMixin::E% element) → void {
    this.{core::List::[]=}(let final core::int #t4 = this.{core::List::length}{core::int} in let final core::int #t5 = this.{core::List::length} = #t4.{core::num::+}(1){(core::num) → core::int} in #t4, element){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ addAll(covariant-by-class core::Iterable<cac::_CustomList&Object&ListMixin::E%> iterable) → void {
    core::int i = this.{core::List::length}{core::int};
    {
      synthesized core::Iterator<cac::_CustomList&Object&ListMixin::E%> :sync-for-iterator = iterable.{core::Iterable::iterator}{core::Iterator<cac::_CustomList&Object&ListMixin::E%>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        cac::_CustomList&Object&ListMixin::E% element = :sync-for-iterator.{core::Iterator::current}{cac::_CustomList&Object&ListMixin::E%};
        {
          assert(this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} i || (throw new core::ConcurrentModificationError::•(this)));
          this.{col::ListMixin::add}(element){(cac::_CustomList&Object&ListMixin::E%) → void};
          i = i.{core::num::+}(1){(core::num) → core::int};
        }
      }
    }
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ remove(core::Object? element) → core::bool {
    for (core::int i = 0; i.{core::num::<}(this.{core::List::length}{core::int}){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      if(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%} =={core::Object::==}{(core::Object) → core::bool} element) {
        this.{col::ListMixin::_closeGap}(i, i.{core::num::+}(1){(core::num) → core::int}){(core::int, core::int) → void};
        return true;
      }
    }
    return false;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ _closeGap(core::int start, core::int end) → void {
    core::int length = this.{core::List::length}{core::int};
    assert(0.{core::num::<=}(start){(core::num) → core::bool});
    assert(start.{core::num::<}(end){(core::num) → core::bool});
    assert(end.{core::num::<=}(length){(core::num) → core::bool});
    core::int size = end.{core::num::-}(start){(core::num) → core::int};
    for (core::int i = end; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      this.{core::List::[]=}(i.{core::num::-}(size){(core::num) → core::int}, this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
    }
    this.{core::List::length} = length.{core::num::-}(size){(core::num) → core::int};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ removeWhere((cac::_CustomList&Object&ListMixin::E%) → core::bool test) → void {
    this.{col::ListMixin::_filter}(test, false){((cac::_CustomList&Object&ListMixin::E%) → core::bool, core::bool) → void};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ retainWhere((cac::_CustomList&Object&ListMixin::E%) → core::bool test) → void {
    this.{col::ListMixin::_filter}(test, true){((cac::_CustomList&Object&ListMixin::E%) → core::bool, core::bool) → void};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ _filter((cac::_CustomList&Object&ListMixin::E%) → core::bool test, core::bool retainMatching) → void {
    core::List<cac::_CustomList&Object&ListMixin::E%> retained = core::_GrowableList::•<cac::_CustomList&Object&ListMixin::E%>(0);
    core::int length = this.{core::List::length}{core::int};
    for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      cac::_CustomList&Object&ListMixin::E% element = this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%};
      if(test(element){(cac::_CustomList&Object&ListMixin::E%) → core::bool} =={core::Object::==}{(core::Object) → core::bool} retainMatching) {
        retained.{core::List::add}(element){(cac::_CustomList&Object&ListMixin::E%) → void};
      }
      if(!(length =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
        throw new core::ConcurrentModificationError::•(this);
      }
    }
    if(!(retained.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int})) {
      this.{col::ListMixin::setRange}(0, retained.{core::List::length}{core::int}, retained){(core::int, core::int, core::Iterable<cac::_CustomList&Object&ListMixin::E%>, [core::int]) → void};
      this.{core::List::length} = retained.{core::List::length}{core::int};
    }
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ clear() → void {
    this.{core::List::length} = 0;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ cast<R extends core::Object? = dynamic>() → core::List<cac::_CustomList&Object&ListMixin::cast::R%>
    return core::List::castFrom<cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::cast::R%>(this);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ removeLast() → cac::_CustomList&Object&ListMixin::E% {
    if(this.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} 0) {
      throw _in::IterableElementError::noElement();
    }
    cac::_CustomList&Object&ListMixin::E% result = this.{core::List::[]}(this.{core::List::length}{core::int}.{core::num::-}(1){(core::num) → core::int}){(core::int) → cac::_CustomList&Object&ListMixin::E%};
    this.{core::List::length} = this.{core::List::length}{core::int}.{core::num::-}(1){(core::num) → core::int};
    return result;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ sort([(cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::E%) →? core::int compare = #C5]) → void {
    _in::Sort::sort<cac::_CustomList&Object&ListMixin::E%>(this, let final (cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::E%) →? core::int #t6 = compare in #t6 == null ?{(cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::E%) → core::int} #C9 : #t6{(cac::_CustomList&Object&ListMixin::E%, cac::_CustomList&Object&ListMixin::E%) → core::int});
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ shuffle([math::Random? random = #C5]) → void {
    random == null ?{math::Random} random = math::Random::•() : null;
    if(random{math::Random} == null)
      throw "!";
    core::int length = this.{core::List::length}{core::int};
    while (length.{core::num::>}(1){(core::num) → core::bool}) {
      core::int pos = random{math::Random}.{math::Random::nextInt}(length){(core::int) → core::int};
      length = length.{core::num::-}(1){(core::num) → core::int};
      cac::_CustomList&Object&ListMixin::E% tmp = this.{core::List::[]}(length){(core::int) → cac::_CustomList&Object&ListMixin::E%};
      this.{core::List::[]=}(length, this.{core::List::[]}(pos){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
      this.{core::List::[]=}(pos, tmp){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
    }
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ asMap() → core::Map<core::int, cac::_CustomList&Object&ListMixin::E%> {
    return new _in::ListMapView::•<cac::_CustomList&Object&ListMixin::E%>(this);
  }
  operator /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ +(covariant-by-class core::List<cac::_CustomList&Object&ListMixin::E%> other) → core::List<cac::_CustomList&Object&ListMixin::E%>
    return block {
      final core::List<cac::_CustomList&Object&ListMixin::E%> #t7 = core::List::of<cac::_CustomList&Object&ListMixin::E%>(this);
      #t7.{core::List::addAll}{Invariant}(other){(core::Iterable<cac::_CustomList&Object&ListMixin::E%>) → void};
    } =>#t7;
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ sublist(core::int start, [core::int? end = #C5]) → core::List<cac::_CustomList&Object&ListMixin::E%> {
    core::int listLength = this.{core::List::length}{core::int};
    end == null ?{core::int} end = listLength : null;
    if(end{core::int} == null)
      throw "!";
    core::RangeError::checkValidRange(start, end{core::int}, listLength);
    return core::List::from<cac::_CustomList&Object&ListMixin::E%>(this.{col::ListMixin::getRange}(start, end{core::int}){(core::int, core::int) → core::Iterable<cac::_CustomList&Object&ListMixin::E%>});
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ getRange(core::int start, core::int end) → core::Iterable<cac::_CustomList&Object&ListMixin::E%> {
    core::RangeError::checkValidRange(start, end, this.{core::List::length}{core::int});
    return new _in::SubListIterable::•<cac::_CustomList&Object&ListMixin::E%>(this, start, end);
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ removeRange(core::int start, core::int end) → void {
    core::RangeError::checkValidRange(start, end, this.{core::List::length}{core::int});
    if(end.{core::num::>}(start){(core::num) → core::bool}) {
      this.{col::ListMixin::_closeGap}(start, end){(core::int, core::int) → void};
    }
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ fillRange(core::int start, core::int end, [covariant-by-class cac::_CustomList&Object&ListMixin::E? fill = #C5]) → void {
    cac::_CustomList&Object&ListMixin::E% value = let cac::_CustomList&Object&ListMixin::E? #t8 = fill in #t8 == null ?{cac::_CustomList&Object&ListMixin::E%} let cac::_CustomList&Object&ListMixin::E? #t9 = #t8 in #t9 == null ?{cac::_CustomList&Object&ListMixin::E%} #t9 as{ForNonNullableByDefault} cac::_CustomList&Object&ListMixin::E% : #t9{cac::_CustomList&Object&ListMixin::E%} : #t8{cac::_CustomList&Object&ListMixin::E%};
    core::RangeError::checkValidRange(start, end, this.{core::List::length}{core::int});
    for (core::int i = start; i.{core::num::<}(end){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      this.{core::List::[]=}(i, value){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
    }
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ setRange(core::int start, core::int end, covariant-by-class core::Iterable<cac::_CustomList&Object&ListMixin::E%> iterable, [core::int skipCount = #C2]) → void {
    core::RangeError::checkValidRange(start, end, this.{core::List::length}{core::int});
    core::int length = end.{core::num::-}(start){(core::num) → core::int};
    if(length =={core::num::==}{(core::Object) → core::bool} 0)
      return;
    core::RangeError::checkNotNegative(skipCount, "skipCount");
    core::List<cac::_CustomList&Object&ListMixin::E%> otherList;
    core::int otherStart;
    if(iterable is{ForNonNullableByDefault} core::List<cac::_CustomList&Object&ListMixin::E%>) {
      otherList = iterable{core::List<cac::_CustomList&Object&ListMixin::E%>};
      otherStart = skipCount;
    }
    else {
      otherList = iterable.{core::Iterable::skip}(skipCount){(core::int) → core::Iterable<cac::_CustomList&Object&ListMixin::E%>}.{core::Iterable::toList}(growable: false){({growable: core::bool}) → core::List<cac::_CustomList&Object&ListMixin::E%>};
      otherStart = 0;
    }
    if(otherStart.{core::num::+}(length){(core::num) → core::int}.{core::num::>}(otherList.{core::List::length}{core::int}){(core::num) → core::bool}) {
      throw _in::IterableElementError::tooFew();
    }
    if(otherStart.{core::num::<}(start){(core::num) → core::bool}) {
      for (core::int i = length.{core::num::-}(1){(core::num) → core::int}; i.{core::num::>=}(0){(core::num) → core::bool}; i = i.{core::num::-}(1){(core::num) → core::int}) {
        this.{core::List::[]=}(start.{core::num::+}(i){(core::num) → core::int}, otherList.{core::List::[]}(otherStart.{core::num::+}(i){(core::num) → core::int}){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
      }
    }
    else {
      for (core::int i = 0; i.{core::num::<}(length){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
        this.{core::List::[]=}(start.{core::num::+}(i){(core::num) → core::int}, otherList.{core::List::[]}(otherStart.{core::num::+}(i){(core::num) → core::int}){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
      }
    }
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ replaceRange(core::int start, core::int end, covariant-by-class core::Iterable<cac::_CustomList&Object&ListMixin::E%> newContents) → void {
    core::RangeError::checkValidRange(start, end, this.{core::List::length}{core::int});
    if(start =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int}) {
      this.{col::ListMixin::addAll}(newContents){(core::Iterable<cac::_CustomList&Object&ListMixin::E%>) → void};
      return;
    }
    if(!(newContents is{ForNonNullableByDefault} _in::EfficientLengthIterable<dynamic>)) {
      newContents = newContents.{core::Iterable::toList}(){({growable: core::bool}) → core::List<cac::_CustomList&Object&ListMixin::E%>};
    }
    core::int removeLength = end.{core::num::-}(start){(core::num) → core::int};
    core::int insertLength = newContents.{core::Iterable::length}{core::int};
    if(removeLength.{core::num::>=}(insertLength){(core::num) → core::bool}) {
      core::int insertEnd = start.{core::num::+}(insertLength){(core::num) → core::int};
      this.{col::ListMixin::setRange}(start, insertEnd, newContents){(core::int, core::int, core::Iterable<cac::_CustomList&Object&ListMixin::E%>, [core::int]) → void};
      if(removeLength.{core::num::>}(insertLength){(core::num) → core::bool}) {
        this.{col::ListMixin::_closeGap}(insertEnd, end){(core::int, core::int) → void};
      }
    }
    else
      if(end =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int}) {
        core::int i = start;
        {
          synthesized core::Iterator<cac::_CustomList&Object&ListMixin::E%> :sync-for-iterator = newContents.{core::Iterable::iterator}{core::Iterator<cac::_CustomList&Object&ListMixin::E%>};
          for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
            cac::_CustomList&Object&ListMixin::E% element = :sync-for-iterator.{core::Iterator::current}{cac::_CustomList&Object&ListMixin::E%};
            {
              if(i.{core::num::<}(end){(core::num) → core::bool}) {
                this.{core::List::[]=}(i, element){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
              }
              else {
                this.{col::ListMixin::add}(element){(cac::_CustomList&Object&ListMixin::E%) → void};
              }
              i = i.{core::num::+}(1){(core::num) → core::int};
            }
          }
        }
      }
      else {
        core::int delta = insertLength.{core::num::-}(removeLength){(core::num) → core::int};
        core::int oldLength = this.{core::List::length}{core::int};
        core::int insertEnd = start.{core::num::+}(insertLength){(core::num) → core::int};
        for (core::int i = oldLength.{core::num::-}(delta){(core::num) → core::int}; i.{core::num::<}(oldLength){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
          this.{col::ListMixin::add}(this.{core::List::[]}(i.{core::num::>}(0){(core::num) → core::bool} ?{core::int} i : 0){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%) → void};
        }
        if(insertEnd.{core::num::<}(oldLength){(core::num) → core::bool}) {
          this.{col::ListMixin::setRange}(insertEnd, oldLength, this, end){(core::int, core::int, core::Iterable<cac::_CustomList&Object&ListMixin::E%>, [core::int]) → void};
        }
        this.{col::ListMixin::setRange}(start, insertEnd, newContents){(core::int, core::int, core::Iterable<cac::_CustomList&Object&ListMixin::E%>, [core::int]) → void};
      }
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ indexOf(covariant-by-class core::Object? element, [core::int start = #C2]) → core::int {
    if(start.{core::num::<}(0){(core::num) → core::bool})
      start = 0;
    for (core::int i = start; i.{core::num::<}(this.{core::List::length}{core::int}){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      if(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%} =={core::Object::==}{(core::Object) → core::bool} element)
        return i;
    }
    return 1.{core::int::unary-}(){() → core::int};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ indexWhere((cac::_CustomList&Object&ListMixin::E%) → core::bool test, [core::int start = #C2]) → core::int {
    if(start.{core::num::<}(0){(core::num) → core::bool})
      start = 0;
    for (core::int i = start; i.{core::num::<}(this.{core::List::length}{core::int}){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      if(test(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%) → core::bool})
        return i;
    }
    return 1.{core::int::unary-}(){() → core::int};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ lastIndexOf(covariant-by-class core::Object? element, [core::int? start = #C5]) → core::int {
    if(start == null || start{core::int}.{core::num::>=}(this.{core::List::length}{core::int}){(core::num) → core::bool})
      start = this.{core::List::length}{core::int}.{core::num::-}(1){(core::num) → core::int};
    if(start{core::int} == null)
      throw "!";
    for (core::int i = start{core::int}; i.{core::num::>=}(0){(core::num) → core::bool}; i = i.{core::num::-}(1){(core::num) → core::int}) {
      if(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%} =={core::Object::==}{(core::Object) → core::bool} element)
        return i;
    }
    return 1.{core::int::unary-}(){() → core::int};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ lastIndexWhere((cac::_CustomList&Object&ListMixin::E%) → core::bool test, [core::int? start = #C5]) → core::int {
    if(start == null || start{core::int}.{core::num::>=}(this.{core::List::length}{core::int}){(core::num) → core::bool})
      start = this.{core::List::length}{core::int}.{core::num::-}(1){(core::num) → core::int};
    if(start{core::int} == null)
      throw "!";
    for (core::int i = start{core::int}; i.{core::num::>=}(0){(core::num) → core::bool}; i = i.{core::num::-}(1){(core::num) → core::int}) {
      if(test(this.{core::List::[]}(i){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%) → core::bool})
        return i;
    }
    return 1.{core::int::unary-}(){() → core::int};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ insert(core::int index, covariant-by-class cac::_CustomList&Object&ListMixin::E% element) → void {
    _in::checkNotNullable<core::int>(index, "index");
    core::int length = this.{core::List::length}{core::int};
    core::RangeError::checkValueInInterval(index, 0, length, "index");
    this.{col::ListMixin::add}(element){(cac::_CustomList&Object&ListMixin::E%) → void};
    if(!(index =={core::num::==}{(core::Object) → core::bool} length)) {
      this.{col::ListMixin::setRange}(index.{core::num::+}(1){(core::num) → core::int}, length.{core::num::+}(1){(core::num) → core::int}, this, index){(core::int, core::int, core::Iterable<cac::_CustomList&Object&ListMixin::E%>, [core::int]) → void};
      this.{core::List::[]=}(index, element){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
    }
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ removeAt(core::int index) → cac::_CustomList&Object&ListMixin::E% {
    cac::_CustomList&Object&ListMixin::E% result = this.{core::List::[]}(index){(core::int) → cac::_CustomList&Object&ListMixin::E%};
    this.{col::ListMixin::_closeGap}(index, index.{core::num::+}(1){(core::num) → core::int}){(core::int, core::int) → void};
    return result;
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ insertAll(core::int index, covariant-by-class core::Iterable<cac::_CustomList&Object&ListMixin::E%> iterable) → void {
    core::RangeError::checkValueInInterval(index, 0, this.{core::List::length}{core::int}, "index");
    if(index =={core::num::==}{(core::Object) → core::bool} this.{core::List::length}{core::int}) {
      this.{col::ListMixin::addAll}(iterable){(core::Iterable<cac::_CustomList&Object&ListMixin::E%>) → void};
      return;
    }
    if(!(iterable is{ForNonNullableByDefault} _in::EfficientLengthIterable<dynamic>) || core::identical(iterable, this)) {
      iterable = iterable.{core::Iterable::toList}(){({growable: core::bool}) → core::List<cac::_CustomList&Object&ListMixin::E%>};
    }
    core::int insertionLength = iterable.{core::Iterable::length}{core::int};
    if(insertionLength =={core::num::==}{(core::Object) → core::bool} 0) {
      return;
    }
    core::int oldLength = this.{core::List::length}{core::int};
    for (core::int i = oldLength.{core::num::-}(insertionLength){(core::num) → core::int}; i.{core::num::<}(oldLength){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      this.{col::ListMixin::add}(this.{core::List::[]}(i.{core::num::>}(0){(core::num) → core::bool} ?{core::int} i : 0){(core::int) → cac::_CustomList&Object&ListMixin::E%}){(cac::_CustomList&Object&ListMixin::E%) → void};
    }
    if(!(iterable.{core::Iterable::length}{core::int} =={core::num::==}{(core::Object) → core::bool} insertionLength)) {
      this.{core::List::length} = this.{core::List::length}{core::int}.{core::num::-}(insertionLength){(core::num) → core::int};
      throw new core::ConcurrentModificationError::•(iterable);
    }
    core::int oldCopyStart = index.{core::num::+}(insertionLength){(core::num) → core::int};
    if(oldCopyStart.{core::num::<}(oldLength){(core::num) → core::bool}) {
      this.{col::ListMixin::setRange}(oldCopyStart, oldLength, this, index){(core::int, core::int, core::Iterable<cac::_CustomList&Object&ListMixin::E%>, [core::int]) → void};
    }
    this.{col::ListMixin::setAll}(index, iterable){(core::int, core::Iterable<cac::_CustomList&Object&ListMixin::E%>) → void};
  }
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ setAll(core::int index, covariant-by-class core::Iterable<cac::_CustomList&Object&ListMixin::E%> iterable) → void {
    if(iterable is{ForNonNullableByDefault} core::List<dynamic>) {
      this.{col::ListMixin::setRange}(index, index.{core::num::+}(iterable.{core::Iterable::length}{core::int}){(core::num) → core::int}, iterable){(core::int, core::int, core::Iterable<cac::_CustomList&Object&ListMixin::E%>, [core::int]) → void};
    }
    else {
      {
        synthesized core::Iterator<cac::_CustomList&Object&ListMixin::E%> :sync-for-iterator = iterable.{core::Iterable::iterator}{core::Iterator<cac::_CustomList&Object&ListMixin::E%>};
        for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
          cac::_CustomList&Object&ListMixin::E% element = :sync-for-iterator.{core::Iterator::current}{cac::_CustomList&Object&ListMixin::E%};
          {
            this.{core::List::[]=}(let final core::int #t10 = index in let final core::int #t11 = index = #t10.{core::num::+}(1){(core::num) → core::int} in #t10, element){(core::int, cac::_CustomList&Object&ListMixin::E%) → void};
          }
        }
      }
    }
  }
  get /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ reversed() → core::Iterable<cac::_CustomList&Object&ListMixin::E%>
    return new _in::ReversedListIterable::•<cac::_CustomList&Object&ListMixin::E%>(this);
  method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ toString() → core::String
    return col::IterableBase::iterableToFullString(this, "[", "]");
  static method /* from org-dartlang-sdk:///sdk/lib/collection/list.dart */ _compareAny(dynamic a, dynamic b) → core::int {
    return core::Comparable::compare(a as{ForNonNullableByDefault} core::Comparable<dynamic>, b as{ForNonNullableByDefault} core::Comparable<dynamic>);
  }
}
class CustomList<E extends core::Object? = dynamic> extends cac::_CustomList&Object&ListMixin<cac::CustomList::E%> {
  final field core::List<cac::CustomList::E%> list;
  constructor •(core::List<cac::CustomList::E%> list) → cac::CustomList<cac::CustomList::E%>
    : cac::CustomList::list = list, super cac::_CustomList&Object&ListMixin::•()
    ;
  get length() → core::int {
    self::counter = self::counter.{core::num::+}(1){(core::num) → core::int};
    return this.{cac::CustomList::list}{core::List<cac::CustomList::E%>}.{core::List::length}{core::int};
  }
  set length(core::int value) → void {
    this.{cac::CustomList::list}{core::List<cac::CustomList::E%>}.{core::List::length} = value;
  }
  operator [](core::int index) → cac::CustomList::E%
    return this.{cac::CustomList::list}{core::List<cac::CustomList::E%>}.{core::List::[]}(index){(core::int) → cac::CustomList::E%};
  operator []=(core::int index, covariant-by-class cac::CustomList::E% value) → void {
    this.{cac::CustomList::list}{core::List<cac::CustomList::E%>}.{core::List::[]=}(index, value){(core::int, cac::CustomList::E%) → void};
  }
}

constants  {
  #C1 = 2
  #C2 = 0
  #C3 = 1
  #C4 = "vm:prefer-inline"
  #C5 = null
  #C6 = core::pragma {name:#C4, options:#C5}
  #C7 = ""
  #C8 = true
  #C9 = static-tearoff col::ListMixin::_compareAny
}

Extra constant evaluation status:
Evaluated: InstanceInvocation @ org-dartlang-sdk:///sdk/lib/collection/list.dart:492:12 -> IntConstant(-1)
Evaluated: InstanceInvocation @ org-dartlang-sdk:///sdk/lib/collection/list.dart:500:12 -> IntConstant(-1)
Evaluated: InstanceInvocation @ org-dartlang-sdk:///sdk/lib/collection/list.dart:512:12 -> IntConstant(-1)
Evaluated: InstanceInvocation @ org-dartlang-sdk:///sdk/lib/collection/list.dart:524:12 -> IntConstant(-1)
Extra constant evaluation: evaluated: 1164, effectively constant: 4
