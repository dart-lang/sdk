library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field core::int? f = null;
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
}
static method test(dynamic x) → dynamic {
  #L1:
  {
    final dynamic #t1 = x;
    core::int #t2 = -1;
    core::bool #t3 = false;
    if(!#t3) {
      final core::Object #t4 = let dynamic #t5 = #t1 in #t5 == null ?{core::Object} #t5 as{ForNonNullableByDefault} core::Object : #t5{core::Object};
      final core::Object #t6 = #t4;
      if(#t6 is self::C) {
        final core::int? #t7 = #t6{self::C}.{self::C::f}{core::int?};
        if(#t7 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t2 = 0;
          #t3 = true;
        }
      }
    }
    switch(#t2) {
      #L2:
      case #C2:
        {
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 0
}
