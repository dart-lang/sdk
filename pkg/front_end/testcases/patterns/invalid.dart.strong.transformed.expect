library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/invalid.dart:5:8: Error: Type 'Unresolved' not found.
// method(Unresolved o) {
//        ^^^^^^^^^^
//
// pkg/front_end/testcases/patterns/invalid.dart:5:8: Error: 'Unresolved' isn't a type.
// method(Unresolved o) {
//        ^^^^^^^^^^
//
// pkg/front_end/testcases/patterns/invalid.dart:13:10: Error: The method '<' isn't defined for the class 'List<Object?>'.
//  - 'List' is from 'dart:core'.
//  - 'Object' is from 'dart:core'.
// Try correcting the name to the name of an existing method, or defining a method named '<'.
//     case < 5: // TODO(johnniwinther): Why do we get an error here?
//          ^
//
import self as self;
import "dart:core" as core;

static method method(invalid-type o) → dynamic {
  #L1:
  {
    final synthesized invalid-type #0#0 = o;
    synthesized core::int #0#2;
    synthesized core::bool #0#2#isSet = false;
    function ##0#14#initializer() → core::Object?
      return #0#0{core::Map<core::Object?, core::Object?>}.{core::Map::[]}(#C1){(core::Object?) → core::Object?};
    late final synthesized core::Object? #0#14 = ##0#14#initializer(){() → core::Object?};
    {
      lowered hoisted core::List<core::Object?> a#case#0;
      lowered hoisted core::Object? a#case#1;
      if(#0#0 is{ForNonNullableByDefault} core::List<core::Object?> && (#0#2#isSet ?{core::int} #0#2{core::int} : let final core::bool* #t1 = #0#2#isSet = true in #0#2 = #0#0.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} #C2 || (#0#2#isSet ?{core::int} #0#2{core::int} : let final core::bool* #t2 = #0#2#isSet = true in #0#2 = #0#0.{core::List::length}{core::int}).{core::num::>=}(#C3){(core::num) → core::bool} && (let final core::List<Never> #t3 = a#case#0 = #0#0.{core::List::sublist}(1, (#0#2#isSet ?{core::int} #0#2{core::int} : let final core::bool* #t4 = #0#2#isSet = true in #0#2 = #0#0.{core::List::length}{core::int}).{core::num::-}(1){(core::num) → core::int}){(core::int, [core::int?]) → core::List<core::Object?>} in true) || true || #0#0 is{ForNonNullableByDefault} core::Map<core::Object?, core::Object?> && (!(#0#14 == null) || null is{ForNonNullableByDefault} core::Object? && #0#0{core::Map<core::Object?, core::Object?>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool}) && #C2 =={core::num::==}{(core::Object) → core::bool} #0#14 || #0#0 is{ForNonNullableByDefault} core::String && #C4 =={core::num::==}{(core::Object) → core::bool} (#0#2#isSet ?{core::int} #0#2{core::int} : let final core::bool* #t5 = #0#2#isSet = true in #0#2 = #0#0{core::String}.{core::String::length}{core::int}) || #0#0 =={core::List::==}{(core::Object) → core::bool} #C4 || invalid-expression "pkg/front_end/testcases/patterns/invalid.dart:13:10: Error: The method '<' isn't defined for the class 'List<Object?>'.
 - 'List' is from 'dart:core'.
 - 'Object' is from 'dart:core'.
Try correcting the name to the name of an existing method, or defining a method named '<'.
    case < 5: // TODO(johnniwinther): Why do we get an error here?
         ^" || #0#0 is{ForNonNullableByDefault} (core::Object?, {a: core::Object?}) && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, {a: core::Object?})}.$1{core::Object?} && (let final core::Object? #t6 = a#case#1 = #0#0{(core::Object?, {a: core::Object?})}.a{core::Object?} in true)) {
      }
    }
  }
}

constants  {
  #C1 = 0
  #C2 = 1
  #C3 = 2
  #C4 = 5
}

Extra constant evaluation status:
Evaluated: IsExpression @ org-dartlang-testcase:///invalid.dart:10:12 -> BoolConstant(true)
Extra constant evaluation: evaluated: 85, effectively constant: 1
