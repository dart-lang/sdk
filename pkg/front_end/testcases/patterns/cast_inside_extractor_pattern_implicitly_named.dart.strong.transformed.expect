library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field core::int? f = null;
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
}
static method test(dynamic x) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    function ##0#2#initializer() → core::int?
      return #0#0{self::C}.{self::C::f}{core::int?};
    late final synthesized core::int? #0#2 = ##0#2#initializer(){() → core::int?};
    {
      hoisted core::int f;
      if(#0#0 is{ForNonNullableByDefault} self::C && (let final core::int #t1 = let core::int? #t2 = #0#2 in #t2 == null ?{core::int} #t2 as{ForNonNullableByDefault} core::int : #t2{core::int} in let final core::int #t3 = f = let core::int? #t4 = #0#2 in #t4 == null ?{core::int} #t4 as{ForNonNullableByDefault} core::int : #t4{core::int} in true)) {
        {
          break #L1;
        }
      }
    }
  }
}
