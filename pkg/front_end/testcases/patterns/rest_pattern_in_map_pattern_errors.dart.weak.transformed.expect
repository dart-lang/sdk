library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/rest_pattern_in_map_pattern_errors.dart:6:15: Error: At most one rest element is allowed in a list or map pattern.
// Try removing the duplicate rest element.
//   if (x case {..., 1: 1, ...}) { // Error.
//               ^
// pkg/front_end/testcases/patterns/rest_pattern_in_map_pattern_errors.dart:6:26: Context: The first rest element.
//   if (x case {..., 1: 1, ...}) { // Error.
//                          ^
//
// pkg/front_end/testcases/patterns/rest_pattern_in_map_pattern_errors.dart:9:26: Error: At most one rest element is allowed in a list or map pattern.
// Try removing the duplicate rest element.
//   if (x case {..., 1: 1, ..., 2: 2, ...}) { // Error.
//                          ^
// pkg/front_end/testcases/patterns/rest_pattern_in_map_pattern_errors.dart:9:37: Context: The first rest element.
//   if (x case {..., 1: 1, ..., 2: 2, ...}) { // Error.
//                                     ^
//
// pkg/front_end/testcases/patterns/rest_pattern_in_map_pattern_errors.dart:9:15: Error: At most one rest element is allowed in a list or map pattern.
// Try removing the duplicate rest element.
//   if (x case {..., 1: 1, ..., 2: 2, ...}) { // Error.
//               ^
// pkg/front_end/testcases/patterns/rest_pattern_in_map_pattern_errors.dart:9:26: Context: The first rest element.
//   if (x case {..., 1: 1, ..., 2: 2, ...}) { // Error.
//                          ^
//
// pkg/front_end/testcases/patterns/rest_pattern_in_map_pattern_errors.dart:12:21: Error: The '...' pattern can appear only at the end in map patterns.
//   if (x case {1: 1, ..., 2: 2}) { // Error.
//                     ^
//
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  {
    final synthesized dynamic #0#0 = x;
    if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}.{core::num::>=}(#C1){(core::num) → core::bool} && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic}) {
      return 0;
    }
  }
  {
    final synthesized dynamic #1#0 = x;
    if(#1#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #1#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}.{core::num::>=}(#C2){(core::num) → core::bool} && #1#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #C1 =={core::num::==}{(core::Object) → core::bool} #1#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} && #1#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #1#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic}) {
      return 1;
    }
  }
  {
    final synthesized dynamic #2#0 = x;
    if(#2#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #2#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int}.{core::num::>=}(#C2){(core::num) → core::bool} && #2#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool} && #C1 =={core::num::==}{(core::Object) → core::bool} #2#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic} && #2#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && #C2 =={core::num::==}{(core::Object) → core::bool} #2#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic}) {
      return 2;
    }
  }
}
static method main() → dynamic {}

constants  {
  #C1 = 1
  #C2 = 2
}
