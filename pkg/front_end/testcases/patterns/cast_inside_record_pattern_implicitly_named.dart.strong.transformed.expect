library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    function ##0#2#initializer() → core::Object?
      return #0#0{(core::Object?, {n: core::Object?})}.n{core::Object?};
    late final synthesized core::Object? #0#2 = ##0#2#initializer(){() → core::Object?};
    {
      hoisted core::int n;
      if(#0#0 is{ForNonNullableByDefault} (core::Object?, {n: core::Object?}) && (let final core::int #t1 = #0#2 as{ForNonNullableByDefault} core::int in let final core::int #t2 = n = #0#2 as{ForNonNullableByDefault} core::int in true) && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, {n: core::Object?})}.$1{core::Object?}) {
        {
          break #L1;
        }
      }
    }
  }
}

constants  {
  #C1 = 2
}
