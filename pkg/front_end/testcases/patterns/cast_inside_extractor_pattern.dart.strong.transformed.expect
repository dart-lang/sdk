library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field core::int? f = null;
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
}
static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    final dynamic #0#0 = x;
    function ##0#1#initializer() → core::int?
      return #0#0{self::C}.{self::C::f}{core::int?};
    late final core::int? #0#1 = ##0#1#initializer(){() → core::int?};
    if(#0#0 is{ForNonNullableByDefault} self::C && (let final core::int #t2 = let core::int? #t3 = #0#1 in #t3 == null ?{core::int} #t3 as{ForNonNullableByDefault} core::int : #t3{core::int} in #C1 =={core::num::==}{(core::Object) → core::bool} (let core::int? #t4 = #0#1 in #t4 == null ?{core::int} #t4 as{ForNonNullableByDefault} core::int : #t4{core::int}))) {
      #t1 = 0;
    }
    switch(#t1) {
      #L2:
      case #C2:
        {
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 0
}
