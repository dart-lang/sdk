library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    function ##0#4#initializer() → dynamic
      return #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C1){(core::Object?) → dynamic};
    late final synthesized dynamic #0#4 = ##0#4#initializer(){() → dynamic};
    {
      hoisted core::int as;
      if(#0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (!(#0#4 == null) || null is{ForNonNullableByDefault} dynamic && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C1){(core::Object?) → core::bool}) && (#0#4 is{ForNonNullableByDefault} core::int && (let final core::int #t1 = as = #0#4{core::int} in true))) {
        {
          break #L1;
        }
      }
    }
  }
}

constants  {
  #C1 = "a"
}

Extra constant evaluation status:
Evaluated: IsExpression @ org-dartlang-testcase:///typed_variable_named_as_inside_map_pattern.dart:7:14 -> BoolConstant(true)
Extra constant evaluation: evaluated: 22, effectively constant: 1
