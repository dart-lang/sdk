library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "dart:collection" as col;

static method test1(dynamic x, dynamic another) → core::Iterable<dynamic> {
  return block {
    final core::Set<dynamic> #t1 = new col::_Set::•<dynamic>();
    hoisted core::int i;
    hoisted core::int n;
    {
      final synthesized dynamic #0#0 = x as{TypeError,ForDynamic,ForNonNullableByDefault} core::List<core::int>;
      function ##0#6#initializer() → dynamic
        return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
      late final synthesized dynamic #0#6 = ##0#6#initializer(){() → dynamic};
      function ##0#7#initializer() → dynamic
        return #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
      late final synthesized dynamic #0#7 = ##0#7#initializer(){() → dynamic};
      if(!(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (#0#6 is{ForNonNullableByDefault} core::int && (let final core::int #t2 = i = #0#6{core::int} in true)) && (#0#7 is{ForNonNullableByDefault} core::int && (let final core::int #t3 = n = #0#7{core::int} in true))))
        throw new core::StateError::•("Pattern matching error");
    }
    final core::int #t4 = i;
    final core::int #t5 = n;
    for (core::int i = #t4, core::int n = #t5; i.{core::num::<}(n){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (another as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final dynamic #t6 = :sync-for-iterator.{core::Iterator::current}{dynamic};
        {
          final dynamic #t7 = #t6 as{TypeError,ForNonNullableByDefault} dynamic;
          #t1.{core::Set::add}{Invariant}(#t7){(dynamic) → core::bool};
        }
      }
    }
  } =>#t1;
}
static method test2(dynamic x, dynamic another) → core::Iterable<dynamic> {
  return block {
    final core::Set<dynamic> #t8 = new col::_Set::•<dynamic>();
    {
      final synthesized dynamic #0#0 = x;
      if(#0#0 is{ForNonNullableByDefault} core::String) {
        synthesized core::Iterator<invalid-type> :sync-for-iterator = another.{core::Iterable::iterator}{core::Iterator<invalid-type>};
        for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
          final dynamic #t9 = :sync-for-iterator.{core::Iterator::current}{invalid-type};
          {
            final dynamic #t10 = #t9 as{TypeError,ForNonNullableByDefault} dynamic;
            #t8.{core::Set::add}{Invariant}(#t10){(dynamic) → core::bool};
          }
        }
      }
    }
  } =>#t8;
}
static method test3(dynamic x, dynamic another) → core::Iterable<dynamic> {
  return block {
    final core::Set<dynamic> #t11 = new col::_Set::•<dynamic>();
    {
      synthesized core::Iterator<dynamic> :sync-for-iterator = (x as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final dynamic #t12 = :sync-for-iterator.{core::Iterator::current}{dynamic};
        {
          {
            final synthesized dynamic #0#0 = #t12;
            if(!(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C2 && #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic} is{ForNonNullableByDefault} core::int))
              throw new core::StateError::•("Pattern matching error");
          }
          {
            synthesized core::Iterator<dynamic> :sync-for-iterator = (another as{TypeError,ForDynamic,ForNonNullableByDefault} core::Iterable<dynamic>).{core::Iterable::iterator}{core::Iterator<dynamic>};
            for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
              final dynamic #t13 = :sync-for-iterator.{core::Iterator::current}{dynamic};
              {
                final dynamic #t14 = #t13 as{TypeError,ForNonNullableByDefault} dynamic;
                #t11.{core::Set::add}{Invariant}(#t14){(dynamic) → core::bool};
              }
            }
          }
        }
      }
    }
  } =>#t11;
}
static method main() → dynamic {
  self::expectSetEquals(self::test1(core::_GrowableList::_literal2<core::int>(0, 2), block {
    final core::Set<core::int> #t15 = new col::_Set::•<core::int>();
    #t15.{core::Set::add}{Invariant}(1){(core::int) → core::bool};
    #t15.{core::Set::add}{Invariant}(2){(core::int) → core::bool};
    #t15.{core::Set::add}{Invariant}(3){(core::int) → core::bool};
  } =>#t15) as{ForNonNullableByDefault} core::Set<dynamic>, block {
    final core::Set<dynamic> #t16 = new col::_Set::•<dynamic>();
    #t16.{core::Set::add}{Invariant}(1){(dynamic) → core::bool};
    #t16.{core::Set::add}{Invariant}(2){(dynamic) → core::bool};
    #t16.{core::Set::add}{Invariant}(3){(dynamic) → core::bool};
  } =>#t16);
  self::expectSetEquals(self::test2(core::_GrowableList::_literal2<core::int>(0, 0), block {
    final core::Set<core::int> #t17 = new col::_Set::•<core::int>();
    #t17.{core::Set::add}{Invariant}(1){(core::int) → core::bool};
    #t17.{core::Set::add}{Invariant}(2){(core::int) → core::bool};
    #t17.{core::Set::add}{Invariant}(3){(core::int) → core::bool};
  } =>#t17) as{ForNonNullableByDefault} core::Set<dynamic>, block {
    final core::Set<dynamic> #t18 = new col::_Set::•<dynamic>();
  } =>#t18);
  self::expectThrows(() → void => self::test1(core::_GrowableList::•<dynamic>(0), <dynamic, dynamic>{}));
  self::expectSetEquals(self::test2("foo", block {
    final core::Set<core::int> #t19 = new col::_Set::•<core::int>();
    #t19.{core::Set::add}{Invariant}(1){(core::int) → core::bool};
    #t19.{core::Set::add}{Invariant}(2){(core::int) → core::bool};
    #t19.{core::Set::add}{Invariant}(3){(core::int) → core::bool};
  } =>#t19) as{ForNonNullableByDefault} core::Set<dynamic>, block {
    final core::Set<dynamic> #t20 = new col::_Set::•<dynamic>();
    #t20.{core::Set::add}{Invariant}(1){(dynamic) → core::bool};
    #t20.{core::Set::add}{Invariant}(2){(dynamic) → core::bool};
    #t20.{core::Set::add}{Invariant}(3){(dynamic) → core::bool};
  } =>#t20);
  self::expectSetEquals(self::test2(false, block {
    final core::Set<core::int> #t21 = new col::_Set::•<core::int>();
    #t21.{core::Set::add}{Invariant}(1){(core::int) → core::bool};
    #t21.{core::Set::add}{Invariant}(2){(core::int) → core::bool};
    #t21.{core::Set::add}{Invariant}(3){(core::int) → core::bool};
  } =>#t21) as{ForNonNullableByDefault} core::Set<dynamic>, block {
    final core::Set<dynamic> #t22 = new col::_Set::•<dynamic>();
  } =>#t22);
  self::expectSetEquals(self::test3(core::_GrowableList::_literal2<core::List<core::int>>(core::_GrowableList::_literal1<core::int>(0), core::_GrowableList::_literal1<core::int>(1)), block {
    final core::Set<core::int> #t23 = new col::_Set::•<core::int>();
    #t23.{core::Set::add}{Invariant}(1){(core::int) → core::bool};
    #t23.{core::Set::add}{Invariant}(2){(core::int) → core::bool};
    #t23.{core::Set::add}{Invariant}(3){(core::int) → core::bool};
  } =>#t23) as{ForNonNullableByDefault} core::Set<dynamic>, block {
    final core::Set<dynamic> #t24 = new col::_Set::•<dynamic>();
    #t24.{core::Set::add}{Invariant}(1){(dynamic) → core::bool};
    #t24.{core::Set::add}{Invariant}(2){(dynamic) → core::bool};
    #t24.{core::Set::add}{Invariant}(3){(dynamic) → core::bool};
  } =>#t24);
  self::expectThrows(() → void => self::test3(core::_GrowableList::_literal1<Null>(null), <dynamic, dynamic>{}));
}
static method expectSetEquals(core::Set<dynamic> x, core::Set<dynamic> y) → dynamic {
  if(!x.{core::Set::containsAll}(y){(core::Iterable<core::Object?>) → core::bool} || !y.{core::Set::containsAll}(x){(core::Iterable<core::Object?>) → core::bool}) {
    throw "Expected sets '${x}' and '${y}' to be equal.";
  }
}
static method expectThrows(() → void f) → dynamic {
  core::bool hasThrown = true;
  try {
    f(){() → void};
    hasThrown = false;
  }
  on core::Object catch(final core::Object e) {
  }
  if(!hasThrown) {
    throw "Expected the function to throw.";
  }
}

constants  {
  #C1 = 2
  #C2 = 1
}
