library;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  field core::int? f = null;
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
}
static method test(dynamic x) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    synthesized core::int? #0#2;
    synthesized core::bool #0#2#isSet = false;
    {
      if(#0#0 is self::C && (let final core::int #t1 = #0#2#isSet ?{core::int?} #0#2{core::int?} : let final core::bool* #t2 = #0#2#isSet = true in #0#2 = #0#0{self::C}.{self::C::f}{core::int?} in #C1 =={core::num::==}{(core::Object) → core::bool} (#0#2#isSet ?{core::int?} #0#2{core::int?} : let final core::bool* #t3 = #0#2#isSet = true in #0#2 = #0#0{self::C}.{self::C::f}{core::int?}))) {
        {
          break #L1;
        }
      }
    }
  }
}

constants  {
  #C1 = 1
}
