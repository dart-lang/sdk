library;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  {
    final synthesized dynamic #0#0 = x;
    if(#0#0 is (core::Object?, core::Object?) && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$1{core::Object?} && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$2{core::Object?}) {
    }
  }
  {
    final synthesized dynamic #1#0 = x;
    if(#1#0 is (core::Object?, {a: core::Object?}) && #C1 =={core::num::==}{(core::Object) → core::bool} #1#0{(core::Object?, {a: core::Object?})}.$1{core::Object?} && #C2 =={core::num::==}{(core::Object) → core::bool} #1#0{(core::Object?, {a: core::Object?})}.a{core::Object?}) {
    }
  }
  {
    final synthesized dynamic #2#0 = x;
    if(#2#0 is (core::Object?, {a: core::Object?}) && #C1 =={core::num::==}{(core::Object) → core::bool} #2#0{(core::Object?, {a: core::Object?})}.a{core::Object?} && #C2 =={core::num::==}{(core::Object) → core::bool} #2#0{(core::Object?, {a: core::Object?})}.$1{core::Object?}) {
    }
  }
  {
    final synthesized dynamic #3#0 = x;
    if(#3#0 is ({a: core::Object?, b: core::Object?}) && #C1 =={core::num::==}{(core::Object) → core::bool} #3#0{({a: core::Object?, b: core::Object?})}.a{core::Object?} && #C2 =={core::num::==}{(core::Object) → core::bool} #3#0{({a: core::Object?, b: core::Object?})}.b{core::Object?}) {
    }
  }
  {
    final synthesized dynamic #4#0 = x;
    synthesized core::Object? #4#3;
    synthesized core::bool #4#3#isSet = false;
    synthesized core::Object? #4#4;
    synthesized core::bool #4#4#isSet = false;
    {
      hoisted core::double y;
      if(#4#0 is (core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?}) && #4#0{(core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?})}.$1{core::Object?} is core::int && ((#4#3#isSet ?{core::Object?} #4#3{core::Object?} : let final dynamic #t1 = #4#3#isSet = true in #4#3 = #4#0{(core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?})}.$2{core::Object?}) is core::double && (let final dynamic #t2 = y = (#4#3#isSet ?{core::Object?} #4#3{core::Object?} : let final dynamic #t3 = #4#3#isSet = true in #4#3 = #4#0{(core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?})}.$2{core::Object?}) as{Unchecked} core::double in true)) && (let final dynamic #t4 = (#4#4#isSet ?{core::Object?} #4#4{core::Object?} : let final dynamic #t5 = #4#4#isSet = true in #4#4 = #4#0{(core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?})}.foo{core::Object?})! in (#4#4#isSet ?{core::Object?} #4#4{core::Object?} : let final dynamic #t6 = #4#4#isSet = true in #4#4 = #4#0{(core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?})}.foo{core::Object?})! is core::String)) {
        return 0;
      }
      else {
        return 1;
      }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 2
}
