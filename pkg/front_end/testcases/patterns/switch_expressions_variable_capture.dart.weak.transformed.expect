library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

import "dart:math" as math;

class Circle extends core::Object {
  final field core::double radius;
  constructor •(core::double radius) → self::Circle
    : self::Circle::radius = radius, super core::Object::•()
    ;
}
static field (dynamic) →? dynamic captured;
static method test1(dynamic x) → dynamic
  return block {
    core::double? #t1;
    core::int #t2 = -1;
    core::double r;
    final dynamic #0#0 = x;
    if(#0#0 is{ForNonNullableByDefault} self::Circle && (let final core::double #t3 = r = #0#0{self::Circle}.{self::Circle::radius}{core::double} in true) && r.{core::num::>}(0){(core::num) → core::bool}) {
      #t2 = 0;
    }
    else
      if(true) {
        #t2 = 1;
      }
    #L1:
    switch(#t2) {
      #L2:
      case #C1:
        {
          #t1 = r.{core::double::*}(r){(core::num) → core::double}.{core::double::*}(#C2){(core::num) → core::double};
          break #L1;
        }
      #L3:
      case #C3:
        {
          #t1 = null;
          break #L1;
        }
    }
  } =>#t1;
static method test2(dynamic x) → dynamic
  return block {
    dynamic #t4;
    core::int #t5 = -1;
    core::int a;
    core::int b;
    core::String a';
    core::String b';
    final dynamic #0#0 = x;
    function ##0#3#initializer() → core::bool
      return #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C4;
    late final core::bool #0#3 = ##0#3#initializer(){() → core::bool};
    function ##0#6#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#6 = ##0#6#initializer(){() → dynamic};
    function ##0#7#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#7 = ##0#7#initializer(){() → dynamic};
    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#3 && (#0#6 is{ForNonNullableByDefault} core::int && (let final core::int #t6 = a = #0#6{core::int} in true)) && (#0#7 is{ForNonNullableByDefault} core::int && (let final core::int #t7 = b = #0#7{core::int} in true)) && (self::captured = (dynamic x) → core::int {
      return a.{core::num::+}(b){(core::num) → core::int};
    }) is{ForNonNullableByDefault} dynamic) {
      #t5 = 0;
    }
    else
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#3 && (#0#6 is{ForNonNullableByDefault} core::String && (let final core::String #t8 = a' = #0#6{core::String} in true)) && (#0#7 is{ForNonNullableByDefault} core::String && (let final core::String #t9 = b' = #0#7{core::String} in true)) && (self::captured = (dynamic x) → core::String {
        return a'.{core::String::+}(b'){(core::String) → core::String};
      }) is{ForNonNullableByDefault} dynamic) {
        #t5 = 1;
      }
      else
        if(true) {
          #t5 = 2;
        }
    #L4:
    switch(#t5) {
      #L5:
      case #C1:
        {
          #t4 = self::captured!(a = b){(dynamic) → dynamic};
          break #L4;
        }
      #L6:
      case #C3:
        {
          #t4 = self::captured!(a' = b'){(dynamic) → dynamic};
          break #L4;
        }
      #L7:
      case #C4:
        {
          #t4 = null;
          break #L4;
        }
    }
  } =>#t4;
static method test3(dynamic x) → dynamic {
  #L8:
  {
    core::int #t10 = -1;
    core::int a;
    core::int b;
    core::String a';
    core::String b';
    final dynamic #0#0 = x;
    function ##0#3#initializer() → core::bool
      return #0#0{core::List<dynamic>}.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C4;
    late final core::bool #0#3 = ##0#3#initializer(){() → core::bool};
    function ##0#6#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(0){(core::int) → dynamic};
    late final dynamic #0#6 = ##0#6#initializer(){() → dynamic};
    function ##0#7#initializer() → dynamic
      return #0#0{core::List<dynamic>}.{core::List::[]}(1){(core::int) → dynamic};
    late final dynamic #0#7 = ##0#7#initializer(){() → dynamic};
    dynamic #t11;
    dynamic #t12;
    dynamic #t13;
    dynamic #t14;
    if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#3 && (#0#6 is{ForNonNullableByDefault} core::int && (let final core::int #t15 = a = #0#6{core::int} in true)) && (#0#7 is{ForNonNullableByDefault} core::int && (let final core::int #t16 = b = #0#7{core::int} in true)) && (self::captured = (dynamic x) → core::int {
      return a.{core::num::+}(b){(core::num) → core::int};
    }) is{ForNonNullableByDefault} dynamic) {
      #t10 = 0;
      #t11 = a;
      #t12 = b;
    }
    else
      if(#0#0 is{ForNonNullableByDefault} core::List<dynamic> && #0#3 && (#0#6 is{ForNonNullableByDefault} core::String && (let final core::String #t17 = a' = #0#6{core::String} in true)) && (#0#7 is{ForNonNullableByDefault} core::String && (let final core::String #t18 = b' = #0#7{core::String} in true)) && (self::captured = (dynamic x) → core::String {
        return a'.{core::String::+}(b'){(core::String) → core::String};
      }) is{ForNonNullableByDefault} dynamic) {
        #t10 = 1;
        #t13 = a';
        #t14 = b';
      }
      else {
        #t10 = 2;
      }
    switch(#t10) {
      #L9:
      case #C1:
        {
          core::int a = #t11{core::int};
          core::int b = #t12{core::int};
          {
            return self::captured!(a = b){(dynamic) → dynamic};
          }
        }
      #L10:
      case #C3:
        {
          core::String a = #t13{core::String};
          core::String b = #t14{core::String};
          {
            return self::captured!(a = b){(dynamic) → dynamic};
          }
        }
      #L11:
      case #C4:
      default:
        {
          {
            return null;
          }
        }
    }
  }
}
static method main() → dynamic {
  self::expectEquals(#C2, self::test1(new self::Circle::•(1.0)));
  self::expectEquals(null, self::test1(null));
  self::expectEquals(4, self::test2(core::_GrowableList::_literal2<core::int>(1, 2)));
  self::expectEquals("twotwo", self::test2(core::_GrowableList::_literal2<core::String>("one", "two")));
  self::expectEquals(null, self::test2(null));
  self::expectEquals(4, self::test3(core::_GrowableList::_literal2<core::int>(1, 2)));
  self::expectEquals("twotwo", self::test3(core::_GrowableList::_literal2<core::String>("one", "two")));
  self::expectEquals(null, self::test3(null));
  core::print("success");
}
static method expectEquals(dynamic x, dynamic y) → dynamic {
  if(!(x =={core::Object::==}{(core::Object) → core::bool} y)) {
    throw "Expected ${x} to be equal to ${y}.";
  }
}

constants  {
  #C1 = 0
  #C2 = 3.141592653589793
  #C3 = 1
  #C4 = 2
}
