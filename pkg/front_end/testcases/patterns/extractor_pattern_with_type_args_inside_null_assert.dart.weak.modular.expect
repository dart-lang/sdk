library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class C<T extends core::Object? = dynamic> extends core::Object {
  covariant-by-class field self::C::T? f = null;
  synthetic constructor •() → self::C<self::C::T%>
    : super core::Object::•()
    ;
}
static method test(dynamic x) → dynamic {
  #L1:
  {
    final dynamic #t1 = x;
    core::int #t2 = -1;
    core::bool #t3 = false;
    if(!#t3) {
      final dynamic #t4 = #t1!;
      final dynamic #t5 = #t4;
      if(#t5 is self::C<core::int>) {
        final core::int? #t6 = #t5{self::C<core::int>}.{self::C::f}{core::int?};
        if(#t6 =={core::num::==}{(core::Object) → core::bool} #C1) {
          #t2 = 0;
          #t3 = true;
        }
      }
    }
    switch(#t2) {
      #L2:
      case #C2:
        {
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 0
}
