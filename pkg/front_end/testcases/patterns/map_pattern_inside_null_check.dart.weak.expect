library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    core::int #t1 = -1;
    final dynamic #0#0 = x;
    if(!(#0#0 == null) ?{core::bool} #0#0 is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && #0#0{core::Map<dynamic, dynamic>}.{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && #0#0{core::Map<dynamic, dynamic>}.{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{core::Map<dynamic, dynamic>}.{core::Map::[]}(#C2){(core::Object?) → dynamic} : false) {
      #t1 = 0;
    }
    switch(#t1) {
      #L2:
      case #C3:
        {
          {
            break #L1;
          }
        }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = "a"
  #C3 = 0
}
