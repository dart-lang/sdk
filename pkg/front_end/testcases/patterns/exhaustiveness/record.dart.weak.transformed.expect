library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/exhaustiveness/record.dart:18:73: Error: The type '(int, String, {bool named})' is not exhaustively matched by the switch cases since it doesn't match '(int(), String(), named: true)'.
// Try adding a wildcard pattern or cases that match '(_, _, named: true)'.
// nonExhaustiveRestrictedValue1((int, String, {bool named}) r) => switch (r) {
//                                                                         ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/record.dart:22:73: Error: The type '(int, String, {bool named})' is not exhaustively matched by the switch cases since it doesn't match '(int(), String(), named: true)'.
// Try adding a wildcard pattern or cases that match '(_, _, named: true)'.
// nonExhaustiveRestrictedValue2((int, String, {bool named}) r) => switch (r) {
//                                                                         ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/record.dart:26:73: Error: The type '(int, String, {bool named})' is not exhaustively matched by the switch cases since it doesn't match '(int(), String(), named: false)'.
// Try adding a wildcard pattern or cases that match '(_, _, named: false)'.
// nonExhaustiveRestrictedValue3((int, String, {bool named}) r) => switch (r) {
//                                                                         ^
//
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

static method exhaustiveWildcard((core::int, core::String, {required named: core::bool}) r) → dynamic
  return block {
    core::int #t1;
    final synthesized(core::int, core::String, {required named: core::bool}) #0#0 = r;
    #L1:
    {
      {
        if(true) {
          #t1 = 0;
          break #L1;
        }
      }
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch expression with a non-nullable type.");
    }
  } =>#t1;
static method exhaustiveTyped((core::int, core::String, {required named: core::bool}) r) → dynamic
  return block {
    core::int #t2;
    final synthesized(core::int, core::String, {required named: core::bool}) #0#0 = r;
    #L2:
    {
      {
        if(true) {
          #t2 = 0;
          break #L2;
        }
      }
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch expression with a non-nullable type.");
    }
  } =>#t2;
static method exhaustiveValue((core::int, core::String, {required named: core::bool}) r) → dynamic
  return block {
    core::int #t3;
    final synthesized(core::int, core::String, {required named: core::bool}) #0#0 = r;
    function ##0#3#initializer() → core::bool
      return #0#0.named{core::bool};
    late final synthesized core::bool #0#3 = ##0#3#initializer(){() → core::bool};
    #L3:
    {
      {
        if(#C1 =={core::Object::==}{(core::Object) → core::bool} #0#3) {
          #t3 = 0;
          break #L3;
        }
      }
      {
        if(#C2 =={core::Object::==}{(core::Object) → core::bool} #0#3) {
          #t3 = 1;
          break #L3;
        }
      }
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch expression with a non-nullable type.");
    }
  } =>#t3;
static method nonExhaustiveRestrictedValue1((core::int, core::String, {required named: core::bool}) r) → dynamic
  return block {
    core::int #t4;
    final synthesized(core::int, core::String, {required named: core::bool}) #0#0 = r;
    #L4:
    {
      {
        if(#C3 =={core::num::==}{(core::Object) → core::bool} #0#0.$1{core::int}) {
          #t4 = 1;
          break #L4;
        }
      }
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch expression with a non-nullable type.");
    }
  } =>#t4;
static method nonExhaustiveRestrictedValue2((core::int, core::String, {required named: core::bool}) r) → dynamic
  return block {
    core::int #t5;
    final synthesized(core::int, core::String, {required named: core::bool}) #0#0 = r;
    #L5:
    {
      {
        if(#C4 =={core::String::==}{(core::Object) → core::bool} #0#0.$2{core::String}) {
          #t5 = 1;
          break #L5;
        }
      }
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch expression with a non-nullable type.");
    }
  } =>#t5;
static method nonExhaustiveRestrictedValue3((core::int, core::String, {required named: core::bool}) r) → dynamic
  return block {
    core::int #t6;
    final synthesized(core::int, core::String, {required named: core::bool}) #0#0 = r;
    #L6:
    {
      {
        if(#C1 =={core::Object::==}{(core::Object) → core::bool} #0#0.named{core::bool}) {
          #t6 = 1;
          break #L6;
        }
      }
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch expression with a non-nullable type.");
    }
  } =>#t6;

constants  {
  #C1 = true
  #C2 = false
  #C3 = 5
  #C4 = "foo"
}
