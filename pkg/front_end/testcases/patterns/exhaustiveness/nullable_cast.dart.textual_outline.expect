import 'dart:async';

exhaustiveNonNullableTypeVariable<T extends Object>(int? o) => switch (o) {
      int() as T => 0,
    };

exhaustiveNonNullableType(int? o) => switch (o) {
      int() as int => 0,
    };

exhaustiveNonNullableSuperType(int? o) => switch (o) {
      int() as num => 0,
    };

exhaustiveNonNullableFutureOr1(FutureOr<int>? o) => switch (o) {
      FutureOr<int>() as FutureOr<int> => 0,
    };

exhaustiveNonNullableFutureOr2(FutureOr<int?> o) => switch (o) {
      FutureOr<int>() as FutureOr<int> => 0,
    };

exhaustiveNonNullableFutureOrTypeVariable1<T extends Object>(FutureOr<T>? o) =>
    switch (o) {
      FutureOr<T>() as FutureOr<T> => 0,
    };

exhaustiveNonNullableFutureOrTypeVariable2<T extends Object>(FutureOr<T?> o) =>
    switch (o) {
      FutureOr<T>() as FutureOr<T> => 0,
    };

main() {}

expect(expected, actual) {}

final bool inWeakMode = const <Null>[] is List<Object>;

throwsOr(expectedIfWeak, dynamic Function() f) {}

throws(dynamic Function() f) {}
