library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart:22:11: Error: The type 'Enum' is not exhaustively matched by the switch cases since it doesn't match 'Enum.c'.
//  - 'Enum' is from 'pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart'.
// Try adding a default case or cases that match 'Enum.c'.
//   switch (e) /* Error */ {
//           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart:33:11: Error: The type 'Enum' is not exhaustively matched by the switch cases since it doesn't match 'Enum.b'.
//  - 'Enum' is from 'pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart'.
// Try adding a default case or cases that match 'Enum.b'.
//   switch (e) /* Error */ {
//           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart:44:11: Error: The type 'Enum' is not exhaustively matched by the switch cases since it doesn't match 'Enum.a'.
//  - 'Enum' is from 'pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart'.
// Try adding a default case or cases that match 'Enum.a'.
//   switch (e) /* Error */ {
//           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart:55:11: Error: The type 'Enum' is not exhaustively matched by the switch cases since it doesn't match 'Enum.a'.
//  - 'Enum' is from 'pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart'.
// Try adding a default case or cases that match 'Enum.a'.
//   switch (e) /* Error */ {
//           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart:91:11: Error: The type 'Enum?' is not exhaustively matched by the switch cases since it doesn't match 'null'.
//  - 'Enum' is from 'pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart'.
// Try adding a default case or cases that match 'null'.
//   switch (e) /* Error */ {
//           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart:105:11: Error: The type 'Enum?' is not exhaustively matched by the switch cases since it doesn't match 'Enum.b'.
//  - 'Enum' is from 'pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart'.
// Try adding a default case or cases that match 'Enum.b'.
//   switch (e) /* Error */ {
//           ^
//
// pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart:136:11: Error: The type 'Enum' is not exhaustively matched by the switch cases since it doesn't match 'Enum.c'.
//  - 'Enum' is from 'pkg/front_end/testcases/patterns/exhaustiveness/enum_switch.dart'.
// Try adding a default case or cases that match 'Enum.c'.
//   switch (e) /* Non-exhaustive */ {
//           ^
//
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

class Enum extends core::_Enum /*isEnum*/  {
  static const field core::List<self::Enum> values = #C10;
  enum-element static const field self::Enum a = #C3;
  enum-element static const field self::Enum b = #C6;
  enum-element static const field self::Enum c = #C9;
  const constructor •(core::int #index, core::String #name) → self::Enum
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "Enum.${this.{core::_Enum::_name}{core::String}}";
}
class GenericEnum<T extends core::Object? = dynamic> extends core::_Enum /*isEnum*/  {
  static const field core::List<self::GenericEnum<dynamic>> values = #C14;
  enum-element static const field self::GenericEnum<core::int> a = #C11;
  enum-element static const field self::GenericEnum<core::String> b = #C12;
  enum-element static const field self::GenericEnum<core::bool> c = #C13;
  const constructor •(core::int #index, core::String #name) → self::GenericEnum<self::GenericEnum::T%>
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "GenericEnum.${this.{core::_Enum::_name}{core::String}}";
}
static method exhaustiveSwitch(self::Enum e) → void {
  #L1:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L2:
    case #C3:
      {
        core::print("a");
        break #L1;
      }
    #L3:
    case #C6:
      {
        core::print("b");
        break #L1;
      }
    #L4:
    case #C9:
      {
        core::print("c");
        break #L1;
      }
    #L5:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method nonExhaustiveSwitch1(self::Enum e) → void {
  #L6:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L7:
    case #C3:
      {
        core::print("a");
        break #L6;
      }
    #L8:
    case #C6:
      {
        core::print("b");
        break #L6;
      }
    #L9:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method nonExhaustiveSwitch2(self::Enum e) → void {
  #L10:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L11:
    case #C3:
      {
        core::print("a");
        break #L10;
      }
    #L12:
    case #C9:
      {
        core::print("c");
        break #L10;
      }
    #L13:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method nonExhaustiveSwitch3(self::Enum e) → void {
  #L14:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L15:
    case #C6:
      {
        core::print("b");
        break #L14;
      }
    #L16:
    case #C9:
      {
        core::print("c");
        break #L14;
      }
    #L17:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method nonExhaustiveSwitch4(self::Enum e) → void {
  #L18:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L19:
    case #C6:
      {
        core::print("b");
        break #L18;
      }
    #L20:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method nonExhaustiveSwitchWithDefault(self::Enum e) → void {
  #L21:
  switch(e) {
    #L22:
    case #C6:
      {
        core::print("b");
        break #L21;
      }
    #L23:
    default:
      {
        core::print("a|c");
        break #L21;
      }
  }
}
static method exhaustiveNullableSwitch(self::Enum? e) → void {
  #L24:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L25:
    case #C3:
      {
        core::print("a");
        break #L24;
      }
    #L26:
    case #C6:
      {
        core::print("b");
        break #L24;
      }
    #L27:
    case #C9:
      {
        core::print("c");
        break #L24;
      }
    #L28:
    case #C15:
      {
        core::print("null");
        break #L24;
      }
    #L29:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method nonExhaustiveNullableSwitch1(self::Enum? e) → void {
  #L30:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L31:
    case #C3:
      {
        core::print("a");
        break #L30;
      }
    #L32:
    case #C6:
      {
        core::print("b");
        break #L30;
      }
    #L33:
    case #C9:
      {
        core::print("c");
        break #L30;
      }
    #L34:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method nonExhaustiveNullableSwitch2(self::Enum? e) → void {
  #L35:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L36:
    case #C3:
      {
        core::print("a");
        break #L35;
      }
    #L37:
    case #C9:
      {
        core::print("c");
        break #L35;
      }
    #L38:
    case #C15:
      {
        core::print("null");
        break #L35;
      }
    #L39:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method unreachableCase1(self::Enum e) → void {
  #L40:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L41:
    case #C3:
      {
        core::print("a1");
        break #L40;
      }
    #L42:
    case #C6:
      {
        core::print("b");
        break #L40;
      }
    #L43:
    case #C3:
      {
        core::print("a2");
        break #L40;
      }
    #L44:
    case #C9:
      {
        core::print("c");
        break #L40;
      }
    #L45:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method unreachableCase2(self::Enum e) → void {
  #L46:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L47:
    case #C3:
      {
        core::print("a1");
        break #L46;
      }
    #L48:
    case #C6:
      {
        core::print("b");
        break #L46;
      }
    #L49:
    case #C3:
      {
        core::print("a2");
        break #L46;
      }
    #L50:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method unreachableCase3(self::Enum e) → void {
  #L51:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L52:
    case #C3:
      {
        core::print("a");
        break #L51;
      }
    #L53:
    case #C6:
      {
        core::print("b");
        break #L51;
      }
    #L54:
    case #C9:
      {
        core::print("c");
        break #L51;
      }
    #L55:
    case #C15:
      {
        core::print("null");
        break #L51;
      }
    #L56:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method unreachableCase4(self::Enum? e) → void {
  #L57:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L58:
    case #C3:
      {
        core::print("a");
        break #L57;
      }
    #L59:
    case #C6:
      {
        core::print("b");
        break #L57;
      }
    #L60:
    case #C9:
      {
        core::print("c");
        break #L57;
      }
    #L61:
    case #C15:
      {
        core::print("null1");
        break #L57;
      }
    #L62:
    case #C15:
      {
        core::print("null2");
        break #L57;
      }
    #L63:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method exhaustiveGenericSwitch(self::GenericEnum<dynamic> e) → void {
  #L64:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L65:
    case #C11:
      {
        core::print("a");
        break #L64;
      }
    #L66:
    case #C12:
      {
        core::print("b");
        break #L64;
      }
    #L67:
    case #C13:
      {
        core::print("c");
        break #L64;
      }
    #L68:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}
static method exhaustiveGenericSwitchTyped(self::GenericEnum<core::int> e) → void {
  #L69:
  switch(e) /*isExplicitlyExhaustive*/ {
    #L70:
    case #C11:
      {
        core::print("a");
        break #L69;
      }
    #L71:
    default:
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch statement with a non-nullable type.");
  }
}

constants  {
  #C1 = 0
  #C2 = "a"
  #C3 = self::Enum {index:#C1, _name:#C2}
  #C4 = 1
  #C5 = "b"
  #C6 = self::Enum {index:#C4, _name:#C5}
  #C7 = 2
  #C8 = "c"
  #C9 = self::Enum {index:#C7, _name:#C8}
  #C10 = <self::Enum*>[#C3, #C6, #C9]
  #C11 = self::GenericEnum<core::int*> {index:#C1, _name:#C2}
  #C12 = self::GenericEnum<core::String*> {index:#C4, _name:#C5}
  #C13 = self::GenericEnum<core::bool*> {index:#C7, _name:#C8}
  #C14 = <self::GenericEnum<dynamic>*>[#C11, #C12, #C13]
  #C15 = null
}


Constructor coverage from constants:
org-dartlang-testcase:///enum_switch.dart:
- Enum. (from org-dartlang-testcase:///enum_switch.dart:5:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
- GenericEnum. (from org-dartlang-testcase:///enum_switch.dart:187:6)
