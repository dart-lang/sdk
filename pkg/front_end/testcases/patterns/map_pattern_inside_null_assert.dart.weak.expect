library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  #L1:
  {
    final synthesized dynamic #0#0 = x;
    {
      if(let final dynamic #t1 = #0#0! in #0#0! is{ForNonNullableByDefault} core::Map<dynamic, dynamic> && (#0#0! as{ForNonNullableByDefault} core::Map<dynamic, dynamic>).{core::Map::length}{core::int} =={core::num::==}{(core::Object) → core::bool} #C1 && (#0#0! as{ForNonNullableByDefault} core::Map<dynamic, dynamic>).{core::Map::containsKey}(#C2){(core::Object?) → core::bool} && #C1 =={core::num::==}{(core::Object) → core::bool} (#0#0! as{ForNonNullableByDefault} core::Map<dynamic, dynamic>).{core::Map::[]}(#C2){(core::Object?) → dynamic}) {
        {
          break #L1;
        }
      }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = "a"
}
