library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method test(dynamic x) → dynamic {
  {
    final dynamic #0#0 = x;
    if(#0#0 is{ForNonNullableByDefault} (core::Object?, core::Object?) && #C1 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$0{core::Object?} && #C2 =={core::num::==}{(core::Object) → core::bool} #0#0{(core::Object?, core::Object?)}.$1{core::Object?}) {
    }
  }
  {
    final dynamic #1#0 = x;
    if(#1#0 is{ForNonNullableByDefault} (core::Object?, {a: core::Object?}) && #C1 =={core::num::==}{(core::Object) → core::bool} #1#0{(core::Object?, {a: core::Object?})}.$0{core::Object?} && #C2 =={core::num::==}{(core::Object) → core::bool} #1#0{(core::Object?, {a: core::Object?})}.a{core::Object?}) {
    }
  }
  {
    final dynamic #2#0 = x;
    if(#2#0 is{ForNonNullableByDefault} (core::Object?, {a: core::Object?}) && #C1 =={core::num::==}{(core::Object) → core::bool} #2#0{(core::Object?, {a: core::Object?})}.a{core::Object?} && #C2 =={core::num::==}{(core::Object) → core::bool} #2#0{(core::Object?, {a: core::Object?})}.$0{core::Object?}) {
    }
  }
  {
    final dynamic #3#0 = x;
    if(#3#0 is{ForNonNullableByDefault} ({a: core::Object?, b: core::Object?}) && #C1 =={core::num::==}{(core::Object) → core::bool} #3#0{({a: core::Object?, b: core::Object?})}.a{core::Object?} && #C2 =={core::num::==}{(core::Object) → core::bool} #3#0{({a: core::Object?, b: core::Object?})}.b{core::Object?}) {
    }
  }
  {
    core::double y;
    final dynamic #4#0 = x;
    function ##4#2#initializer() → core::Object?
      return #4#0{(core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?})}.$1{core::Object?};
    late final core::Object? #4#2 = ##4#2#initializer(){() → core::Object?};
    function ##4#3#initializer() → core::Object?
      return #4#0{(core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?})}.foo{core::Object?};
    late final core::Object? #4#3 = ##4#3#initializer(){() → core::Object?};
    if(#4#0 is{ForNonNullableByDefault} (core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?}) && #4#0{(core::Object?, core::Object?, {bar: core::Object?, foo: core::Object?})}.$0{core::Object?} is{ForNonNullableByDefault} core::int && (#4#2 is{ForNonNullableByDefault} core::double && (let final core::double #t1 = y = #4#2{core::double} in true)) && (let final core::Object? #t2 = #4#3! in #4#3! is{ForNonNullableByDefault} core::String) && true) {
      return 0;
    }
    else {
      return 1;
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 2
}
