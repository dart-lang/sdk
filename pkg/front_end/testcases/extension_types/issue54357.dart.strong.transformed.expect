library;
import self as self;
import "dart:core" as core;

extension type ExInt(core::int _) implements core::int {
  abstract extension-type-member representation-field get _() → core::int;
  constructor • = self::ExInt|constructor#;
  constructor tearoff • = self::ExInt|constructor#_#new#tearOff;
}
static const field self::ExInt /* = core::int */ ex3 = #C1;
static const field self::ExInt /* = core::int */ ex4 = #C2;
static const field core::List<self::ExInt /* = core::int */> l3 = #C3;
static const field core::List<self::ExInt /* = core::int */> l4 = #C4;
static const field core::List<core::int> l34i = #C5;
static const field core::List<self::ExInt /* = core::int */> l43 = #C6;
static const field core::List<self::ExInt /* = core::int */> l3s4 = #C5;
static const field core::List<self::ExInt /* = core::int */> ls43 = #C6;
static const field core::List<self::ExInt /* = core::int */> ls3s4 = #C5;
static const field core::Set<self::ExInt /* = core::int */> s3 = #C7;
static const field core::Set<self::ExInt /* = core::int */> s4 = #C8;
static const field core::Set<core::int> s34i = #C9;
static const field core::Set<self::ExInt /* = core::int */> s43 = #C10;
static const field core::Set<self::ExInt /* = core::int */> s3s4 = #C9;
static const field core::Set<self::ExInt /* = core::int */> ss43 = #C10;
static const field core::Set<self::ExInt /* = core::int */> ss3s4 = #C9;
static const field core::Map<self::ExInt /* = core::int */, self::ExInt /* = core::int */> m3 = #C11;
static const field core::Map<self::ExInt /* = core::int */, self::ExInt /* = core::int */> m4 = #C12;
static const field core::Map<core::int, core::int> m34i = #C13;
static const field core::Map<self::ExInt /* = core::int */, self::ExInt /* = core::int */> m43 = #C14;
static const field core::Map<self::ExInt /* = core::int */, self::ExInt /* = core::int */> m3s4 = #C13;
static const field core::Map<self::ExInt /* = core::int */, self::ExInt /* = core::int */> ms43 = #C14;
static const field core::Map<self::ExInt /* = core::int */, self::ExInt /* = core::int */> ms3s4 = #C13;
static extension-type-member method ExInt|constructor#(core::int _) → self::ExInt /* = core::int */ {
  lowered final self::ExInt /* = core::int */ #this = _;
  return #this;
}
static extension-type-member method ExInt|constructor#_#new#tearOff(core::int _) → self::ExInt /* = core::int */
  return self::ExInt|constructor#(_);

constants  {
  #C1 = 3
  #C2 = 4
  #C3 = <core::int>[#C1]
  #C4 = <core::int>[#C2]
  #C5 = <core::int>[#C1, #C2]
  #C6 = <core::int>[#C2, #C1]
  #C7 = <core::int>{#C1}
  #C8 = <core::int>{#C2}
  #C9 = <core::int>{#C1, #C2}
  #C10 = <core::int>{#C2, #C1}
  #C11 = <core::int, core::int>{#C1:#C1}
  #C12 = <core::int, core::int>{#C2:#C2}
  #C13 = <core::int, core::int>{#C1:#C1, #C2:#C2}
  #C14 = <core::int, core::int>{#C2:#C2, #C1:#C1}
}
