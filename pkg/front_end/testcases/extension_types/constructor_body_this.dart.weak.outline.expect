library;
import self as self;
import "dart:core" as core;

extension type V1(core::int id) {
  abstract extension-type-member representation-field get id() → core::int;
  constructor n0 = self::V1|constructor#n0;
  constructor tearoff n0 = self::V1|constructor#_#n0#tearOff;
  constructor • = self::V1|constructor#;
  constructor tearoff • = self::V1|constructor#_#new#tearOff;
  constructor n1 = self::V1|constructor#n1;
  constructor tearoff n1 = self::V1|constructor#_#n1#tearOff;
  constructor n2 = self::V1|constructor#n2;
  constructor tearoff n2 = self::V1|constructor#_#n2#tearOff;
}
static extension-type-member method V1|constructor#n0(core::int id) → self::V1 /* = core::int */
  ;
static extension-type-member method V1|constructor#_#n0#tearOff(core::int id) → self::V1 /* = core::int */
  return self::V1|constructor#n0(id);
static extension-type-member method V1|constructor#(core::int id) → self::V1 /* = core::int */
  ;
static extension-type-member method V1|constructor#_#new#tearOff(core::int id) → self::V1 /* = core::int */
  return self::V1|constructor#(id);
static extension-type-member method V1|constructor#n1([core::int x = 0]) → self::V1 /* = core::int */
  ;
static extension-type-member method V1|constructor#_#n1#tearOff([has-declared-initializer core::int x]) → self::V1 /* = core::int */
  return self::V1|constructor#n1(x);
static extension-type-member method V1|constructor#n2(core::int id) → self::V1 /* = core::int */
  ;
static extension-type-member method V1|constructor#_#n2#tearOff(core::int id) → self::V1 /* = core::int */
  return self::V1|constructor#n2(id);
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;
