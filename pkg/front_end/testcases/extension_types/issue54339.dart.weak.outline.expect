library;
import self as self;
import "dart:core" as core;

class C extends core::Object {
  synthetic constructor •() → self::C
    ;
  method call() → core::String
    ;
}
class D extends core::Object {
  synthetic constructor •() → self::D
    ;
  get getter1() → core::Function
    ;
  get getter2() → core::Function
    ;
  get getter3() → core::Function
    ;
  get getter4() → core::Function
    ;
  method method1<T extends self::C>(self::D::method1::T c) → core::Function
    ;
  method method2<T extends self::C>(self::D::method2::T c) → core::Function
    ;
  method method3<T extends self::Ext /* = core::Function */>(self::Ext /* = core::Function */ e) → core::Function
    ;
  method method4<T extends self::Ext2 /* = self::C */>(self::Ext2 /* = self::C */ e) → core::Function
    ;
  method method5<T extends core::Object? = dynamic>(self::D::method5::T% c) → core::Function
    ;
  method method6<T extends core::Object? = dynamic, S extends self::C>(self::D::method6::T% c) → core::Function
    ;
}
class E extends core::Object {
  synthetic constructor •() → self::E
    ;
  get getter1() → core::String
    ;
  get getter2() → core::String
    ;
  get getter3() → core::String
    ;
  get getter4() → core::String
    ;
  method method1<T extends self::C>(self::E::method1::T c) → core::String
    ;
  method method2<T extends self::C>(self::E::method2::T c) → core::String
    ;
  method method3<T extends self::Ext /* = core::Function */>(self::Ext /* = core::Function */ e) → core::String
    ;
  method method4<T extends self::Ext2 /* = self::C */>(self::Ext2 /* = self::C */ e) → core::String
    ;
  method method5<T extends core::Object? = dynamic>(self::E::method5::T% c) → core::String
    ;
  method method6<T extends core::Object? = dynamic, S extends self::C>(self::E::method6::T% c) → core::String
    ;
}
extension type Ext(core::Function it) {
  abstract extension-type-member representation-field get it() → core::Function;
  method call = self::Ext|call;
  method tearoff call = self::Ext|get#call;
  constructor • = self::Ext|constructor#;
  constructor tearoff • = self::Ext|constructor#_#new#tearOff;
}
extension type Ext2(self::C c) implements self::C {
  abstract extension-type-member representation-field get c() → self::C;
  constructor • = self::Ext2|constructor#;
  constructor tearoff • = self::Ext2|constructor#_#new#tearOff;
}
static extension-type-member method Ext|constructor#(core::Function it) → self::Ext /* = core::Function */
  ;
static extension-type-member method Ext|constructor#_#new#tearOff(core::Function it) → self::Ext /* = core::Function */
  return self::Ext|constructor#(it);
static extension-type-member method Ext|call(lowered final self::Ext /* = core::Function */ #this) → core::String
  ;
static extension-type-member method Ext|get#call(lowered final self::Ext /* = core::Function */ #this) → () → core::String
  return () → core::String => self::Ext|call(#this);
static extension-type-member method Ext2|constructor#(self::C c) → self::Ext2 /* = self::C */
  ;
static extension-type-member method Ext2|constructor#_#new#tearOff(self::C c) → self::Ext2 /* = self::C */
  return self::Ext2|constructor#(c);
static method main() → void
  ;
