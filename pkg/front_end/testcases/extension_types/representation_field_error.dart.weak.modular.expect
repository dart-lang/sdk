library;
//
// Problems in library:
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:5:23: Error: Expected a representation type.
// extension type E1(var foo) {} // Error.
//                       ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:6:25: Error: Expected a representation type.
// extension type E2(final foo) {} // Error.
//                         ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:6:25: Error: Representation fields can't have modifiers.
// extension type E2(final foo) {} // Error.
//                         ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:7:32: Error: Representation fields can't have modifiers.
// extension type E3(final String foo) {} // Error.
//                                ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:8:19: Error: Can't have modifier 'covariant' in a primary constructor.
// Try removing 'covariant'.
// extension type E4(covariant num foo) {} // Error.
//                   ^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:9:19: Error: Can't have modifier 'const' here.
// Try removing 'const'.
// extension type E5(const bool foo) {} // Error.
//                   ^^^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:9:30: Error: Representation fields can't have modifiers.
// extension type E5(const bool foo) {} // Error.
//                              ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:10:19: Error: Can't have modifier 'covariant' in a primary constructor.
// Try removing 'covariant'.
// extension type E6(covariant final double foo) {} // Error.
//                   ^^^^^^^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:10:42: Error: Representation fields can't have modifiers.
// extension type E6(covariant final double foo) {} // Error.
//                                          ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:11:25: Error: Members can't be declared to be both 'var' and 'const'.
// Try removing one of the keywords.
// extension type E7(const var foo) {} // Error.
//                         ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:11:19: Error: Can't have modifier 'const' here.
// Try removing 'const'.
// extension type E7(const var foo) {} // Error.
//                   ^^^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:11:29: Error: Expected a representation type.
// extension type E7(const var foo) {} // Error.
//                             ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:11:29: Error: Representation fields can't have modifiers.
// extension type E7(const var foo) {} // Error.
//                             ^^^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:12:18: Error: Expected a representation field.
// extension type E8() {} // Error.
//                  ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:13:18: Error: Each extension type should have exactly one representation field.
// extension type E9(int foo, String bar) {} // Error.
//                  ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:14:19: Error: Each extension type should have exactly one representation field.
// extension type E10(num foo, bool bar, double baz) {} // Error.
//                   ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:15:28: Error: The representation field can't have a trailing comma.
// extension type E11(bool foo,) {} // Error.
//                            ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:16:29: Error: Non-optional parameters can't have a default value.
// Try removing the default value or making the parameter optional.
// extension type E12(bool foo = false,) {} // Error.
//                             ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:16:36: Error: The representation field can't have a trailing comma.
// extension type E12(bool foo = false,) {} // Error.
//                                    ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:17:26: Error: Extension type declarations can't have optional parameters.
// extension type E13([int? foo]) {} // Error.
//                          ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:18:29: Error: Extension type declarations can't have named parameters.
// extension type E14({String? foo}) {} // Error.
//                             ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:19:37: Error: Extension type declarations can't have named parameters.
// extension type E15({required double foo}) {} // Error.
//                                     ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:20:39: Error: Extension type declarations can't have optional parameters.
// extension type E16(bool foo, [dynamic bar]) {} // Error.
//                                       ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:21:51: Error: Extension type declarations can't have named parameters.
// extension type E17(Object foo, {num? bar, String? baz}) {} // Error.
//                                                   ^
//
// pkg/front_end/testcases/extension_types/representation_field_error.dart:22:46: Error: Extension type declarations can't have named parameters.
// extension type E18(double foo, {required int bar}) {} // Error.
//                                              ^
//
import self as self;
import "dart:core" as core;

extension type E1(invalid-type foo) {
  abstract extension-type-member representation-field get foo() → invalid-type;
  constructor • = self::E1|constructor#;
  constructor tearoff • = self::E1|constructor#_#new#tearOff;
}
extension type E2(invalid-type foo) {
  abstract extension-type-member representation-field get foo() → invalid-type;
  constructor • = self::E2|constructor#;
  constructor tearoff • = self::E2|constructor#_#new#tearOff;
}
extension type E3(core::String foo) {
  abstract extension-type-member representation-field get foo() → core::String;
  constructor • = self::E3|constructor#;
  constructor tearoff • = self::E3|constructor#_#new#tearOff;
}
extension type E4(core::num foo) {
  abstract extension-type-member representation-field get foo() → core::num;
  constructor • = self::E4|constructor#;
  constructor tearoff • = self::E4|constructor#_#new#tearOff;
}
extension type E5(core::bool foo) {
  abstract extension-type-member representation-field get foo() → core::bool;
  constructor • = self::E5|constructor#;
  constructor tearoff • = self::E5|constructor#_#new#tearOff;
}
extension type E6(core::double foo) {
  abstract extension-type-member representation-field get foo() → core::double;
  constructor • = self::E6|constructor#;
  constructor tearoff • = self::E6|constructor#_#new#tearOff;
}
extension type E7(invalid-type foo) {
  abstract extension-type-member representation-field get foo() → invalid-type;
  constructor • = self::E7|constructor#;
  constructor tearoff • = self::E7|constructor#_#new#tearOff;
}
extension type E8(invalid-type #) {
  constructor • = self::E8|constructor#;
  constructor tearoff • = self::E8|constructor#_#new#tearOff;
}
extension type E9(core::int foo) {
  abstract extension-type-member representation-field get foo() → core::int;
  abstract extension-type-member representation-field get bar() → core::String;
  constructor • = self::E9|constructor#;
  constructor tearoff • = self::E9|constructor#_#new#tearOff;
}
extension type E10(core::num foo) {
  abstract extension-type-member representation-field get foo() → core::num;
  abstract extension-type-member representation-field get bar() → core::bool;
  abstract extension-type-member representation-field get baz() → core::double;
  constructor • = self::E10|constructor#;
  constructor tearoff • = self::E10|constructor#_#new#tearOff;
}
extension type E11(core::bool foo) {
  abstract extension-type-member representation-field get foo() → core::bool;
  constructor • = self::E11|constructor#;
  constructor tearoff • = self::E11|constructor#_#new#tearOff;
}
extension type E12(core::bool foo) {
  abstract extension-type-member representation-field get foo() → core::bool;
  constructor • = self::E12|constructor#;
  constructor tearoff • = self::E12|constructor#_#new#tearOff;
}
extension type E13(core::int? foo) {
  abstract extension-type-member representation-field get foo() → core::int?;
  constructor • = self::E13|constructor#;
  constructor tearoff • = self::E13|constructor#_#new#tearOff;
}
extension type E14(core::String? foo) {
  abstract extension-type-member representation-field get foo() → core::String?;
  constructor • = self::E14|constructor#;
  constructor tearoff • = self::E14|constructor#_#new#tearOff;
}
extension type E15(core::double foo) {
  abstract extension-type-member representation-field get foo() → core::double;
  constructor • = self::E15|constructor#;
  constructor tearoff • = self::E15|constructor#_#new#tearOff;
}
extension type E16(core::bool foo) {
  abstract extension-type-member representation-field get foo() → core::bool;
  abstract extension-type-member representation-field get bar() → dynamic;
  constructor • = self::E16|constructor#;
  constructor tearoff • = self::E16|constructor#_#new#tearOff;
}
extension type E17(core::Object foo) {
  abstract extension-type-member representation-field get foo() → core::Object;
  abstract extension-type-member representation-field get bar() → core::num?;
  abstract extension-type-member representation-field get baz() → core::String?;
  constructor • = self::E17|constructor#;
  constructor tearoff • = self::E17|constructor#_#new#tearOff;
}
extension type E18(core::double foo) {
  abstract extension-type-member representation-field get foo() → core::double;
  abstract extension-type-member representation-field get bar() → core::int;
  constructor • = self::E18|constructor#;
  constructor tearoff • = self::E18|constructor#_#new#tearOff;
}
static extension-type-member method E1|constructor#(invalid-type foo) → self::E1 /* = invalid-type */ {
  lowered final self::E1 /* = invalid-type */ #this = foo;
  return #this;
}
static extension-type-member method E1|constructor#_#new#tearOff(invalid-type foo) → self::E1 /* = invalid-type */
  return self::E1|constructor#(foo);
static extension-type-member method E2|constructor#(final invalid-type foo) → self::E2 /* = invalid-type */ {
  lowered final self::E2 /* = invalid-type */ #this = foo;
  return #this;
}
static extension-type-member method E2|constructor#_#new#tearOff(invalid-type foo) → self::E2 /* = invalid-type */
  return self::E2|constructor#(foo);
static extension-type-member method E3|constructor#(final core::String foo) → self::E3 /* = core::String */ {
  lowered final self::E3 /* = core::String */ #this = foo;
  return #this;
}
static extension-type-member method E3|constructor#_#new#tearOff(core::String foo) → self::E3 /* = core::String */
  return self::E3|constructor#(foo);
static extension-type-member method E4|constructor#(covariant-by-declaration core::num foo) → self::E4 /* = core::num */ {
  lowered final self::E4 /* = core::num */ #this = foo;
  return #this;
}
static extension-type-member method E4|constructor#_#new#tearOff(core::num foo) → self::E4 /* = core::num */
  return self::E4|constructor#(foo);
static extension-type-member method E5|constructor#(core::bool foo) → self::E5 /* = core::bool */ {
  lowered final self::E5 /* = core::bool */ #this = foo;
  return #this;
}
static extension-type-member method E5|constructor#_#new#tearOff(core::bool foo) → self::E5 /* = core::bool */
  return self::E5|constructor#(foo);
static extension-type-member method E6|constructor#_#new#tearOff(core::double foo) → self::E6 /* = core::double */
  return self::E6|constructor#(foo);
static extension-type-member method E6|constructor#(covariant-by-declaration final core::double foo) → self::E6 /* = core::double */ {
  lowered final self::E6 /* = core::double */ #this = foo;
  return #this;
}
static extension-type-member method E7|constructor#(invalid-type foo) → self::E7 /* = invalid-type */ {
  lowered final self::E7 /* = invalid-type */ #this = foo;
  return #this;
}
static extension-type-member method E7|constructor#_#new#tearOff(invalid-type foo) → self::E7 /* = invalid-type */
  return self::E7|constructor#(foo);
static extension-type-member method E8|constructor#() → self::E8 /* = invalid-type */ {
  lowered final self::E8 /* = invalid-type */ #this;
  return #this;
}
static extension-type-member method E8|constructor#_#new#tearOff() → self::E8 /* = invalid-type */
  return self::E8|constructor#();
static extension-type-member method E9|constructor#(core::int foo, core::String bar) → self::E9 /* = core::int */ {
  lowered final self::E9 /* = core::int */ #this = bar;
  return #this;
}
static extension-type-member method E9|constructor#_#new#tearOff(core::int foo, core::String bar) → self::E9 /* = core::int */
  return self::E9|constructor#(foo, bar);
static extension-type-member method E10|constructor#(core::num foo, core::bool bar, core::double baz) → self::E10 /* = core::num */ {
  lowered final self::E10 /* = core::num */ #this = baz;
  return #this;
}
static extension-type-member method E10|constructor#_#new#tearOff(core::num foo, core::bool bar, core::double baz) → self::E10 /* = core::num */
  return self::E10|constructor#(foo, bar, baz);
static extension-type-member method E11|constructor#(core::bool foo) → self::E11 /* = core::bool */ {
  lowered final self::E11 /* = core::bool */ #this = foo;
  return #this;
}
static extension-type-member method E11|constructor#_#new#tearOff(core::bool foo) → self::E11 /* = core::bool */
  return self::E11|constructor#(foo);
static extension-type-member method E12|constructor#(core::bool foo = #C1) → self::E12 /* = core::bool */ {
  lowered final self::E12 /* = core::bool */ #this = foo;
  return #this;
}
static extension-type-member method E12|constructor#_#new#tearOff(core::bool foo = #C1) → self::E12 /* = core::bool */
  return self::E12|constructor#(foo);
static extension-type-member method E13|constructor#([core::int? foo = #C2]) → self::E13 /* = core::int? */ {
  lowered final self::E13 /* = core::int? */ #this = foo;
  return #this;
}
static extension-type-member method E13|constructor#_#new#tearOff([core::int? foo = #C2]) → self::E13 /* = core::int? */
  return self::E13|constructor#(foo);
static extension-type-member method E14|constructor#({core::String? foo = #C2}) → self::E14 /* = core::String? */ {
  lowered final self::E14 /* = core::String? */ #this = foo;
  return #this;
}
static extension-type-member method E14|constructor#_#new#tearOff({core::String? foo = #C2}) → self::E14 /* = core::String? */
  return self::E14|constructor#(foo: foo);
static extension-type-member method E15|constructor#({required core::double foo}) → self::E15 /* = core::double */ {
  lowered final self::E15 /* = core::double */ #this = foo;
  return #this;
}
static extension-type-member method E15|constructor#_#new#tearOff({required core::double foo}) → self::E15 /* = core::double */
  return self::E15|constructor#(foo: foo);
static extension-type-member method E16|constructor#(core::bool foo, [dynamic bar = #C2]) → self::E16 /* = core::bool */ {
  lowered final self::E16 /* = core::bool */ #this = bar;
  return #this;
}
static extension-type-member method E16|constructor#_#new#tearOff(core::bool foo, [dynamic bar = #C2]) → self::E16 /* = core::bool */
  return self::E16|constructor#(foo, bar);
static extension-type-member method E17|constructor#(core::Object foo, {core::num? bar = #C2, core::String? baz = #C2}) → self::E17 /* = core::Object */ {
  lowered final self::E17 /* = core::Object */ #this = baz;
  return #this;
}
static extension-type-member method E17|constructor#_#new#tearOff(core::Object foo, {core::num? bar = #C2, core::String? baz = #C2}) → self::E17 /* = core::Object */
  return self::E17|constructor#(foo, bar: bar, baz: baz);
static extension-type-member method E18|constructor#(core::double foo, {required core::int bar}) → self::E18 /* = core::double */ {
  lowered final self::E18 /* = core::double */ #this = bar;
  return #this;
}
static extension-type-member method E18|constructor#_#new#tearOff(core::double foo, {required core::int bar}) → self::E18 /* = core::double */
  return self::E18|constructor#(foo, bar: bar);

constants  {
  #C1 = false
  #C2 = null
}
