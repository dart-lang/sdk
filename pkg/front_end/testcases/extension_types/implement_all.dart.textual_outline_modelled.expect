import 'dart:async';
class Class {}
class GenericClass<T> {}
extension Extension on int {}
extension type ET_Alias(Alias it) implements Alias {}
extension type ET_Class(Class it) implements Class {}
extension type ET_Dynamic(dynamic it) implements dynamic {}
extension type ET_Extension(Never it) implements Extension {}
extension type ET_ExtensionType(int it) implements ExtensionType {}
extension type ET_Function(Function it) implements Function {}
extension type ET_FunctionType(FunctionType it) implements FunctionType {}
extension type ET_FutureOr(FutureOr<int> it) implements FutureOr<int> {}
extension type ET_GenericAlias<T>(GenericAlias<T> it) implements GenericAlias<T> {}
extension type ET_GenericClass<T>(GenericClass<T> it) implements GenericClass<T> {}
extension type ET_GenericExtensionType<T>(T it) implements GenericExtensionType<T> {}
extension type ET_Never(Never it) implements Never {}
extension type ET_Null(Null it) implements Null {}
extension type ET_NullableExtensionType(int it) implements NullableExtensionType {}
extension type ET_NullableInterfaceType(NullableInterfaceType it) implements NullableInterfaceType {}
extension type ET_Object(Object it) implements Object {}
extension type ET_Record(Record it) implements Record {}
extension type ET_RecordType(RecordType it) implements RecordType {}
extension type ET_TypeVariable<T>(T it) implements T {}
extension type ET_Void(Never it) implements void {}
extension type ExtensionType(int it) {}
extension type GenericExtensionType<T>(T it) {}
typedef Alias = Class;
typedef FunctionType = void Function();
typedef GenericAlias<T> = GenericClass<T>;
typedef NullableExtensionType = ExtensionType?;
typedef NullableInterfaceType = String?;
typedef RecordType = (int, String);
