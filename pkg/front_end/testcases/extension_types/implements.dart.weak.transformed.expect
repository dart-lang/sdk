library;
//
// Problems in library:
//
// pkg/front_end/testcases/extension_types/implements.dart:26:5: Error: The method 'methodB' isn't defined for the class 'A'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodB'.
//   a.methodB(); // Error
//     ^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:27:5: Error: The method 'methodC1' isn't defined for the class 'A'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC1'.
//   a.methodC1(); // Error
//     ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:28:5: Error: The method 'methodC2' isn't defined for the class 'A'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
//   a.methodC2(); // Error
//     ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:29:5: Error: The method 'methodD1' isn't defined for the class 'A'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
//   a.methodD1(); // Error
//     ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:31:6: Error: The method 'methodA' isn't defined for the class 'B<String>'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodA'.
//   b1.methodA(); // Error
//      ^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:32:6: Error: The method 'methodC1' isn't defined for the class 'B<String>'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC1'.
//   b1.methodC1(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:33:6: Error: The method 'methodC2' isn't defined for the class 'B<String>'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
//   b1.methodC2(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:34:6: Error: The method 'methodD1' isn't defined for the class 'B<String>'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
//   b1.methodD1(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:36:6: Error: The method 'methodA' isn't defined for the class 'B<num>'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodA'.
//   b2.methodA(); // Error
//      ^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:37:6: Error: The method 'methodC1' isn't defined for the class 'B<num>'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC1'.
//   b2.methodC1(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:38:6: Error: The method 'methodC2' isn't defined for the class 'B<num>'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
//   b2.methodC2(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:39:6: Error: The method 'methodD1' isn't defined for the class 'B<num>'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
//   b2.methodD1(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:41:6: Error: The method 'methodB' isn't defined for the class 'C1'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodB'.
//   c1.methodB(); // Error
//      ^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:42:6: Error: The method 'methodC2' isn't defined for the class 'C1'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
//   c1.methodC2(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:43:6: Error: The method 'methodD1' isn't defined for the class 'C1'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
//   c1.methodD1(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:45:6: Error: The method 'methodC1' isn't defined for the class 'C2'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC1'.
//   c2.methodC1(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:46:6: Error: The method 'methodD1' isn't defined for the class 'C2'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
//   c2.methodD1(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:48:6: Error: The method 'methodB' isn't defined for the class 'D1'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodB'.
//   d1.methodB(); // Error
//      ^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:49:6: Error: The method 'methodC2' isn't defined for the class 'D1'.
// Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
//   d1.methodC2(); // Error
//      ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/implements.dart:51:7: Error: A value of type 'B<String>' can't be assigned to a variable of type 'A'.
//   a = b1; // Error
//       ^
//
// pkg/front_end/testcases/extension_types/implements.dart:52:7: Error: A value of type 'B<num>' can't be assigned to a variable of type 'A'.
//   a = b2; // Error
//       ^
//
// pkg/front_end/testcases/extension_types/implements.dart:54:8: Error: A value of type 'A' can't be assigned to a variable of type 'B<String>'.
//   b1 = a; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:55:8: Error: A value of type 'B<num>' can't be assigned to a variable of type 'B<String>'.
//   b1 = b2; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:56:8: Error: A value of type 'C1' can't be assigned to a variable of type 'B<String>'.
//   b1 = c1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:57:8: Error: A value of type 'C2' can't be assigned to a variable of type 'B<String>'.
//   b1 = c2; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:58:8: Error: A value of type 'D1' can't be assigned to a variable of type 'B<String>'.
//   b1 = d1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:60:8: Error: A value of type 'A' can't be assigned to a variable of type 'B<num>'.
//   b2 = a; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:61:8: Error: A value of type 'B<String>' can't be assigned to a variable of type 'B<num>'.
//   b2 = b1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:62:8: Error: A value of type 'C1' can't be assigned to a variable of type 'B<num>'.
//   b2 = c1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:63:8: Error: A value of type 'D1' can't be assigned to a variable of type 'B<num>'.
//   b2 = d1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:65:8: Error: A value of type 'A' can't be assigned to a variable of type 'C1'.
//   c1 = a; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:66:8: Error: A value of type 'B<String>' can't be assigned to a variable of type 'C1'.
//   c1 = b1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:67:8: Error: A value of type 'B<num>' can't be assigned to a variable of type 'C1'.
//   c1 = b2; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:68:8: Error: A value of type 'C2' can't be assigned to a variable of type 'C1'.
//   c1 = c2; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:70:8: Error: A value of type 'A' can't be assigned to a variable of type 'C2'.
//   c2 = a; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:71:8: Error: A value of type 'B<String>' can't be assigned to a variable of type 'C2'.
//   c2 = b1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:72:8: Error: A value of type 'B<num>' can't be assigned to a variable of type 'C2'.
//   c2 = b2; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:73:8: Error: A value of type 'C1' can't be assigned to a variable of type 'C2'.
//   c2 = c1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:74:8: Error: A value of type 'D1' can't be assigned to a variable of type 'C2'.
//   c2 = d1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:76:8: Error: A value of type 'A' can't be assigned to a variable of type 'D1'.
//   d1 = a; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:77:8: Error: A value of type 'B<String>' can't be assigned to a variable of type 'D1'.
//   d1 = b1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:78:8: Error: A value of type 'B<num>' can't be assigned to a variable of type 'D1'.
//   d1 = b2; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:79:8: Error: A value of type 'C1' can't be assigned to a variable of type 'D1'.
//   d1 = c1; // Error
//        ^
//
// pkg/front_end/testcases/extension_types/implements.dart:80:8: Error: A value of type 'C2' can't be assigned to a variable of type 'D1'.
//   d1 = c2; // Error
//        ^
//
import self as self;
import "dart:core" as core;

extension type A(core::int it) {
  abstract extension-type-member representation-field get it() â†’ core::int;
  method methodA = self::A|methodA;
  method tearoff methodA = self::A|get#methodA;
  constructor â€¢ = self::A|constructor#;
  constructor tearoff â€¢ = self::A|constructor#_#new#tearOff;
}
extension type B<T extends core::Object? = dynamic>(T% it) {
  abstract extension-type-member representation-field get it() â†’ T%;
  method methodB = self::B|methodB;
  method tearoff methodB = self::B|get#methodB;
  constructor â€¢ = self::B|constructor#;
  constructor tearoff â€¢ = self::B|constructor#_#new#tearOff;
}
extension type C1(core::int it) implements self::A /* = core::int */ {
  abstract extension-type-member representation-field get it() â†’ core::int;
  method methodC1 = self::C1|methodC1;
  method tearoff methodC1 = self::C1|get#methodC1;
  constructor â€¢ = self::C1|constructor#;
  constructor tearoff â€¢ = self::C1|constructor#_#new#tearOff;
}
extension type C2(core::int it) implements self::A /* = core::int */, self::B<core::int> /* = core::int */ {
  abstract extension-type-member representation-field get it() â†’ core::int;
  method methodC2 = self::C2|methodC2;
  method tearoff methodC2 = self::C2|get#methodC2;
  constructor â€¢ = self::C2|constructor#;
  constructor tearoff â€¢ = self::C2|constructor#_#new#tearOff;
}
extension type D1(core::int it) implements self::C1 /* = core::int */ {
  abstract extension-type-member representation-field get it() â†’ core::int;
  method methodD1 = self::D1|methodD1;
  method tearoff methodD1 = self::D1|get#methodD1;
  constructor â€¢ = self::D1|constructor#;
  constructor tearoff â€¢ = self::D1|constructor#_#new#tearOff;
}
static extension-type-member method A|constructor#(core::int it) â†’ self::A /* = core::int */ {
  lowered final self::A /* = core::int */ #this = it;
  return #this;
}
static extension-type-member method A|constructor#_#new#tearOff(core::int it) â†’ self::A /* = core::int */
  return self::A|constructor#(it);
static extension-type-member method A|methodA(lowered final self::A /* = core::int */ #this) â†’ core::int
  return (#this as{Unchecked} core::int).{core::num::+}(5){(core::num) â†’ core::int};
static extension-type-member method A|get#methodA(lowered final self::A /* = core::int */ #this) â†’ () â†’ core::int
  return () â†’ core::int => self::A|methodA(#this);
static extension-type-member method B|constructor#<T extends core::Object? = dynamic>(self::B|constructor#::T% it) â†’ self::B<self::B|constructor#::T%> /* = self::B|constructor#::T% */ {
  lowered final self::B<self::B|constructor#::T%> /* = self::B|constructor#::T% */ #this = it;
  return #this;
}
static extension-type-member method B|constructor#_#new#tearOff<T extends core::Object? = dynamic>(self::B|constructor#_#new#tearOff::T% it) â†’ self::B<self::B|constructor#_#new#tearOff::T%>% /* = self::B|constructor#_#new#tearOff::T% */
  return self::B|constructor#<self::B|constructor#_#new#tearOff::T%>(it);
static extension-type-member method B|methodB<T extends core::Object? = dynamic>(lowered final self::B<self::B|methodB::T%> /* = self::B|methodB::T% */ #this) â†’ self::B|methodB::T%
  return #this as{Unchecked} self::B|methodB::T%;
static extension-type-member method B|get#methodB<T extends core::Object? = dynamic>(lowered final self::B<self::B|get#methodB::T%>% /* = self::B|get#methodB::T% */ #this) â†’ () â†’ self::B|get#methodB::T%
  return () â†’ self::B|get#methodB::T% => self::B|methodB<self::B|get#methodB::T%>(#this);
static extension-type-member method C1|constructor#(core::int it) â†’ self::C1 /* = core::int */ {
  lowered final self::C1 /* = core::int */ #this = it;
  return #this;
}
static extension-type-member method C1|constructor#_#new#tearOff(core::int it) â†’ self::C1 /* = core::int */
  return self::C1|constructor#(it);
static extension-type-member method C1|methodC1(lowered final self::C1 /* = core::int */ #this) â†’ core::int
  return (#this as{Unchecked} core::int).{core::num::+}(42){(core::num) â†’ core::int};
static extension-type-member method C1|get#methodC1(lowered final self::C1 /* = core::int */ #this) â†’ () â†’ core::int
  return () â†’ core::int => self::C1|methodC1(#this);
static extension-type-member method C2|constructor#(core::int it) â†’ self::C2 /* = core::int */ {
  lowered final self::C2 /* = core::int */ #this = it;
  return #this;
}
static extension-type-member method C2|constructor#_#new#tearOff(core::int it) â†’ self::C2 /* = core::int */
  return self::C2|constructor#(it);
static extension-type-member method C2|methodC2(lowered final self::C2 /* = core::int */ #this) â†’ core::int
  return (#this as{Unchecked} core::int).{core::num::+}(87){(core::num) â†’ core::int};
static extension-type-member method C2|get#methodC2(lowered final self::C2 /* = core::int */ #this) â†’ () â†’ core::int
  return () â†’ core::int => self::C2|methodC2(#this);
static extension-type-member method D1|constructor#(core::int it) â†’ self::D1 /* = core::int */ {
  lowered final self::D1 /* = core::int */ #this = it;
  return #this;
}
static extension-type-member method D1|constructor#_#new#tearOff(core::int it) â†’ self::D1 /* = core::int */
  return self::D1|constructor#(it);
static extension-type-member method D1|methodD1(lowered final self::D1 /* = core::int */ #this) â†’ core::int
  return (#this as{Unchecked} core::int).{core::num::+}(123){(core::num) â†’ core::int};
static extension-type-member method D1|get#methodD1(lowered final self::D1 /* = core::int */ #this) â†’ () â†’ core::int
  return () â†’ core::int => self::D1|methodD1(#this);
static method errors(self::A /* = core::int */ a, self::B<core::String> /* = core::String */ b1, self::B<core::num> /* = core::num */ b2, self::C1 /* = core::int */ c1, self::C2 /* = core::int */ c2, self::D1 /* = core::int */ d1) â†’ dynamic {
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:26:5: Error: The method 'methodB' isn't defined for the class 'A'.
Try correcting the name to the name of an existing method, or defining a method named 'methodB'.
  a.methodB(); // Error
    ^^^^^^^" in a{<unresolved>}.methodB();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:27:5: Error: The method 'methodC1' isn't defined for the class 'A'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC1'.
  a.methodC1(); // Error
    ^^^^^^^^" in a{<unresolved>}.methodC1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:28:5: Error: The method 'methodC2' isn't defined for the class 'A'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
  a.methodC2(); // Error
    ^^^^^^^^" in a{<unresolved>}.methodC2();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:29:5: Error: The method 'methodD1' isn't defined for the class 'A'.
Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
  a.methodD1(); // Error
    ^^^^^^^^" in a{<unresolved>}.methodD1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:31:6: Error: The method 'methodA' isn't defined for the class 'B<String>'.
Try correcting the name to the name of an existing method, or defining a method named 'methodA'.
  b1.methodA(); // Error
     ^^^^^^^" in b1{<unresolved>}.methodA();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:32:6: Error: The method 'methodC1' isn't defined for the class 'B<String>'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC1'.
  b1.methodC1(); // Error
     ^^^^^^^^" in b1{<unresolved>}.methodC1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:33:6: Error: The method 'methodC2' isn't defined for the class 'B<String>'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
  b1.methodC2(); // Error
     ^^^^^^^^" in b1{<unresolved>}.methodC2();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:34:6: Error: The method 'methodD1' isn't defined for the class 'B<String>'.
Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
  b1.methodD1(); // Error
     ^^^^^^^^" in b1{<unresolved>}.methodD1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:36:6: Error: The method 'methodA' isn't defined for the class 'B<num>'.
Try correcting the name to the name of an existing method, or defining a method named 'methodA'.
  b2.methodA(); // Error
     ^^^^^^^" in b2{<unresolved>}.methodA();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:37:6: Error: The method 'methodC1' isn't defined for the class 'B<num>'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC1'.
  b2.methodC1(); // Error
     ^^^^^^^^" in b2{<unresolved>}.methodC1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:38:6: Error: The method 'methodC2' isn't defined for the class 'B<num>'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
  b2.methodC2(); // Error
     ^^^^^^^^" in b2{<unresolved>}.methodC2();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:39:6: Error: The method 'methodD1' isn't defined for the class 'B<num>'.
Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
  b2.methodD1(); // Error
     ^^^^^^^^" in b2{<unresolved>}.methodD1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:41:6: Error: The method 'methodB' isn't defined for the class 'C1'.
Try correcting the name to the name of an existing method, or defining a method named 'methodB'.
  c1.methodB(); // Error
     ^^^^^^^" in c1{<unresolved>}.methodB();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:42:6: Error: The method 'methodC2' isn't defined for the class 'C1'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
  c1.methodC2(); // Error
     ^^^^^^^^" in c1{<unresolved>}.methodC2();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:43:6: Error: The method 'methodD1' isn't defined for the class 'C1'.
Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
  c1.methodD1(); // Error
     ^^^^^^^^" in c1{<unresolved>}.methodD1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:45:6: Error: The method 'methodC1' isn't defined for the class 'C2'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC1'.
  c2.methodC1(); // Error
     ^^^^^^^^" in c2{<unresolved>}.methodC1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:46:6: Error: The method 'methodD1' isn't defined for the class 'C2'.
Try correcting the name to the name of an existing method, or defining a method named 'methodD1'.
  c2.methodD1(); // Error
     ^^^^^^^^" in c2{<unresolved>}.methodD1();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:48:6: Error: The method 'methodB' isn't defined for the class 'D1'.
Try correcting the name to the name of an existing method, or defining a method named 'methodB'.
  d1.methodB(); // Error
     ^^^^^^^" in d1{<unresolved>}.methodB();
  invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:49:6: Error: The method 'methodC2' isn't defined for the class 'D1'.
Try correcting the name to the name of an existing method, or defining a method named 'methodC2'.
  d1.methodC2(); // Error
     ^^^^^^^^" in d1{<unresolved>}.methodC2();
  a = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:51:7: Error: A value of type 'B<String>' can't be assigned to a variable of type 'A'.
  a = b1; // Error
      ^" in b1 as{TypeError} self::A /* = core::int */;
  a = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:52:7: Error: A value of type 'B<num>' can't be assigned to a variable of type 'A'.
  a = b2; // Error
      ^" in b2 as{TypeError} self::A /* = core::int */;
  b1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:54:8: Error: A value of type 'A' can't be assigned to a variable of type 'B<String>'.
  b1 = a; // Error
       ^" in a as{TypeError} self::B<core::String> /* = core::String */;
  b1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:55:8: Error: A value of type 'B<num>' can't be assigned to a variable of type 'B<String>'.
  b1 = b2; // Error
       ^" in b2 as{TypeError} self::B<core::String> /* = core::String */;
  b1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:56:8: Error: A value of type 'C1' can't be assigned to a variable of type 'B<String>'.
  b1 = c1; // Error
       ^" in c1 as{TypeError} self::B<core::String> /* = core::String */;
  b1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:57:8: Error: A value of type 'C2' can't be assigned to a variable of type 'B<String>'.
  b1 = c2; // Error
       ^" in c2 as{TypeError} self::B<core::String> /* = core::String */;
  b1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:58:8: Error: A value of type 'D1' can't be assigned to a variable of type 'B<String>'.
  b1 = d1; // Error
       ^" in d1 as{TypeError} self::B<core::String> /* = core::String */;
  b2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:60:8: Error: A value of type 'A' can't be assigned to a variable of type 'B<num>'.
  b2 = a; // Error
       ^" in a as{TypeError} self::B<core::num> /* = core::num */;
  b2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:61:8: Error: A value of type 'B<String>' can't be assigned to a variable of type 'B<num>'.
  b2 = b1; // Error
       ^" in b1 as{TypeError} self::B<core::num> /* = core::num */;
  b2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:62:8: Error: A value of type 'C1' can't be assigned to a variable of type 'B<num>'.
  b2 = c1; // Error
       ^" in c1 as{TypeError} self::B<core::num> /* = core::num */;
  b2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:63:8: Error: A value of type 'D1' can't be assigned to a variable of type 'B<num>'.
  b2 = d1; // Error
       ^" in d1 as{TypeError} self::B<core::num> /* = core::num */;
  c1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:65:8: Error: A value of type 'A' can't be assigned to a variable of type 'C1'.
  c1 = a; // Error
       ^" in a as{TypeError} self::C1 /* = core::int */;
  c1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:66:8: Error: A value of type 'B<String>' can't be assigned to a variable of type 'C1'.
  c1 = b1; // Error
       ^" in b1 as{TypeError} self::C1 /* = core::int */;
  c1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:67:8: Error: A value of type 'B<num>' can't be assigned to a variable of type 'C1'.
  c1 = b2; // Error
       ^" in b2 as{TypeError} self::C1 /* = core::int */;
  c1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:68:8: Error: A value of type 'C2' can't be assigned to a variable of type 'C1'.
  c1 = c2; // Error
       ^" in c2 as{TypeError} self::C1 /* = core::int */;
  c2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:70:8: Error: A value of type 'A' can't be assigned to a variable of type 'C2'.
  c2 = a; // Error
       ^" in a as{TypeError} self::C2 /* = core::int */;
  c2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:71:8: Error: A value of type 'B<String>' can't be assigned to a variable of type 'C2'.
  c2 = b1; // Error
       ^" in b1 as{TypeError} self::C2 /* = core::int */;
  c2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:72:8: Error: A value of type 'B<num>' can't be assigned to a variable of type 'C2'.
  c2 = b2; // Error
       ^" in b2 as{TypeError} self::C2 /* = core::int */;
  c2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:73:8: Error: A value of type 'C1' can't be assigned to a variable of type 'C2'.
  c2 = c1; // Error
       ^" in c1 as{TypeError} self::C2 /* = core::int */;
  c2 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:74:8: Error: A value of type 'D1' can't be assigned to a variable of type 'C2'.
  c2 = d1; // Error
       ^" in d1 as{TypeError} self::C2 /* = core::int */;
  d1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:76:8: Error: A value of type 'A' can't be assigned to a variable of type 'D1'.
  d1 = a; // Error
       ^" in a as{TypeError} self::D1 /* = core::int */;
  d1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:77:8: Error: A value of type 'B<String>' can't be assigned to a variable of type 'D1'.
  d1 = b1; // Error
       ^" in b1 as{TypeError} self::D1 /* = core::int */;
  d1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:78:8: Error: A value of type 'B<num>' can't be assigned to a variable of type 'D1'.
  d1 = b2; // Error
       ^" in b2 as{TypeError} self::D1 /* = core::int */;
  d1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:79:8: Error: A value of type 'C1' can't be assigned to a variable of type 'D1'.
  d1 = c1; // Error
       ^" in c1 as{TypeError} self::D1 /* = core::int */;
  d1 = invalid-expression "pkg/front_end/testcases/extension_types/implements.dart:80:8: Error: A value of type 'C2' can't be assigned to a variable of type 'D1'.
  d1 = c2; // Error
       ^" in c2 as{TypeError} self::D1 /* = core::int */;
}
static method method(self::A /* = core::int */ a, self::B<core::String> /* = core::String */ b1, self::B<core::num> /* = core::num */ b2, self::C1 /* = core::int */ c1, self::C2 /* = core::int */ c2, self::D1 /* = core::int */ d1) â†’ dynamic {
  self::expect(0.{core::num::+}(5){(core::num) â†’ core::int}, self::A|methodA(a));
  self::expect("0", self::B|methodB<core::String>(b1));
  self::expect(1.{core::num::+}(0){(core::num) â†’ core::int}, self::B|methodB<core::num>(b2));
  self::expect(2.{core::num::+}(5){(core::num) â†’ core::int}, self::A|methodA(c1));
  self::expect(2.{core::num::+}(42){(core::num) â†’ core::int}, self::C1|methodC1(c1));
  self::expect(3.{core::num::+}(5){(core::num) â†’ core::int}, self::A|methodA(c2));
  self::expect(3, self::B|methodB<core::int>(c2));
  self::expect(3.{core::num::+}(87){(core::num) â†’ core::int}, self::C2|methodC2(c2));
  self::expect(4.{core::num::+}(5){(core::num) â†’ core::int}, self::A|methodA(d1));
  self::expect(4.{core::num::+}(42){(core::num) â†’ core::int}, self::C1|methodC1(d1));
  self::expect(4.{core::num::+}(123){(core::num) â†’ core::int}, self::D1|methodD1(d1));
  a = a;
  a = c1;
  a = c2;
  a = d1;
  b1 = b1;
  b2 = b2;
  b2 = c2;
  c1 = c1;
  c1 = d1;
  c2 = c2;
  d1 = d1;
}
static method main() â†’ dynamic {
  self::method(self::A|constructor#(0), self::B|constructor#<core::String>("0"), self::B|constructor#<core::num>(1), self::C1|constructor#(2), self::C2|constructor#(3), self::D1|constructor#(4));
}
static method expect(dynamic expected, dynamic actual) â†’ dynamic {
  if(!(expected =={core::Object::==}{(core::Object) â†’ core::bool} actual)) {
    throw "Expected ${expected}, actual ${actual}";
  }
}


Extra constant evaluation status:
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:84:12 -> IntConstant(5)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:88:12 -> IntConstant(1)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:90:12 -> IntConstant(7)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:91:12 -> IntConstant(44)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:93:12 -> IntConstant(8)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:95:12 -> IntConstant(90)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:97:12 -> IntConstant(9)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:98:12 -> IntConstant(46)
Evaluated: InstanceInvocation @ org-dartlang-testcase:///implements.dart:99:12 -> IntConstant(127)
Extra constant evaluation: evaluated: 153, effectively constant: 9
