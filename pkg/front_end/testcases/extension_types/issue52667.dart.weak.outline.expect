library;
import self as self;
import "dart:core" as core;

class Foo extends core::Object {
  synthetic constructor •() → self::Foo
    ;
}
extension type FooBar(self::Foo i) implements self::Foo {
  abstract extension-type-member representation-field get i() → self::Foo;
  constructor • = self::FooBar|constructor#;
  constructor tearoff • = self::FooBar|constructor#_#new#tearOff;
}
extension type FooBaz(self::Foo i) implements self::Foo {
  abstract extension-type-member representation-field get i() → self::Foo;
  constructor • = self::FooBaz|constructor#;
  constructor tearoff • = self::FooBaz|constructor#_#new#tearOff;
}
static extension-type-member method FooBar|constructor#(self::Foo i) → self::FooBar /* = self::Foo */
  ;
static extension-type-member method FooBar|constructor#_#new#tearOff(self::Foo i) → self::FooBar /* = self::Foo */
  return self::FooBar|constructor#(i);
static extension-type-member method FooBaz|constructor#(self::Foo i) → self::FooBaz /* = self::Foo */
  ;
static extension-type-member method FooBaz|constructor#_#new#tearOff(self::Foo i) → self::FooBaz /* = self::Foo */
  return self::FooBaz|constructor#(i);
static method main() → void
  ;
