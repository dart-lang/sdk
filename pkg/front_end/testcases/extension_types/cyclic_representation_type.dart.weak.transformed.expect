library;
//
// Problems in library:
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:64:20: Error: Expected 0 type arguments.
// extension type E21(Alias21<int> it) /* Error */ {}
//                    ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:66:20: Error: Expected 0 type arguments.
// typedef Alias22a = Alias22b<int>; /* Error */
//                    ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:5:19: Error: An extension type can't depend on itself through its representation type.
// extension type E1(E1 it) /* Error */ {}
//                   ^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:7:20: Error: An extension type can't depend on itself through its representation type.
// extension type E2a(E2b it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:8:16: Context: The issue arises via this extension type declaration.
// extension type E2b(E2a it) /* Error */ {}
//                ^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:8:20: Error: An extension type can't depend on itself through its representation type.
// extension type E2b(E2a it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:7:16: Context: The issue arises via this extension type declaration.
// extension type E2a(E2b it) /* Error */ {}
//                ^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:10:20: Error: An extension type can't depend on itself through its representation type.
// extension type E3a(E3b it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:11:16: Context: The issue arises via this extension type declaration.
// extension type E3b(E3c it) /* Error */ {}
//                ^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:12:16: Context: The issue arises via this extension type declaration.
// extension type E3c(E3a it) /* Error */ {}
//                ^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:11:20: Error: An extension type can't depend on itself through its representation type.
// extension type E3b(E3c it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:12:16: Context: The issue arises via this extension type declaration.
// extension type E3c(E3a it) /* Error */ {}
//                ^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:10:16: Context: The issue arises via this extension type declaration.
// extension type E3a(E3b it) /* Error */ {}
//                ^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:12:20: Error: An extension type can't depend on itself through its representation type.
// extension type E3c(E3a it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:10:16: Context: The issue arises via this extension type declaration.
// extension type E3a(E3b it) /* Error */ {}
//                ^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:11:16: Context: The issue arises via this extension type declaration.
// extension type E3b(E3c it) /* Error */ {}
//                ^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:14:22: Error: An extension type can't depend on itself through its representation type.
// extension type E4(E4 Function() it) /* Error */ {}
//                      ^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:16:24: Error: An extension type can't depend on itself through its representation type.
// extension type E5(void Function(E5) it) /* Error */ {}
//                        ^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:18:19: Error: An extension type can't depend on itself through its representation type.
// extension type E6((E6, int) it) /* Error */ {}
//                   ^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:20:24: Error: An extension type can't depend on itself through its representation type.
// extension type E7(void Function<T extends E7>() it) /* Error */ {}
//                        ^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:22:22: Error: An extension type can't depend on itself through its representation type.
// extension type E8<T>(List<E8> it) /* Error */ {}
//                      ^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:25:19: Error: An extension type can't depend on itself through its representation type.
// extension type E9(Alias9 it) /* Error */ {}
//                   ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:24:9: Context: The issue arises via this type alias.
// typedef Alias9 = E9;
//         ^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:28:23: Error: An extension type can't depend on itself through its representation type.
// extension type E10<T>(Alias10<T> it) /* Error */ {}
//                       ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:27:9: Context: The issue arises via this type alias.
// typedef Alias10<T> = E10<T>;
//         ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:31:20: Error: An extension type can't depend on itself through its representation type.
// extension type E11(Alias11 it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:30:9: Context: The issue arises via this type alias.
// typedef Alias11 = E11 Function();
//         ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:34:20: Error: An extension type can't depend on itself through its representation type.
// extension type E12(Alias12 it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:33:9: Context: The issue arises via this type alias.
// typedef Alias12 = void Function(E12);
//         ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:37:20: Error: An extension type can't depend on itself through its representation type.
// extension type E13(Alias13 it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:36:9: Context: The issue arises via this type alias.
// typedef Alias13 = void Function<T extends E13>();
//         ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:43:21: Error: An extension type can't depend on itself through its representation type.
// extension type E15a(Alias15<E15b> it) /* Error */ {}
//                     ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:44:16: Context: The issue arises via this extension type declaration.
// extension type E15b(Alias15<E15a> it) /* Error */ {}
//                ^^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:42:9: Context: The issue arises via this type alias.
// typedef Alias15<T> = List<T>;
//         ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:44:21: Error: An extension type can't depend on itself through its representation type.
// extension type E15b(Alias15<E15a> it) /* Error */ {}
//                     ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:43:16: Context: The issue arises via this extension type declaration.
// extension type E15a(Alias15<E15b> it) /* Error */ {}
//                ^^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:42:9: Context: The issue arises via this type alias.
// typedef Alias15<T> = List<T>;
//         ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:48:21: Error: An extension type can't depend on itself through its representation type.
// extension type E16a(Alias16a<int> it) /* Error */ {}
//                     ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:49:16: Context: The issue arises via this extension type declaration.
// extension type E16b(Alias16b<int> it) /* Error */ {}
//                ^^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:46:9: Context: The issue arises via this type alias.
// typedef Alias16a<T> = List<E16b>;
//         ^^^^^^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:47:9: Context: The issue arises via this type alias.
// typedef Alias16b<T> = List<E16a>;
//         ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:49:21: Error: An extension type can't depend on itself through its representation type.
// extension type E16b(Alias16b<int> it) /* Error */ {}
//                     ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:48:16: Context: The issue arises via this extension type declaration.
// extension type E16a(Alias16a<int> it) /* Error */ {}
//                ^^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:47:9: Context: The issue arises via this type alias.
// typedef Alias16b<T> = List<E16a>;
//         ^^^^^^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:46:9: Context: The issue arises via this type alias.
// typedef Alias16a<T> = List<E16b>;
//         ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:51:20: Error: An extension type can't depend on itself through its representation type.
// extension type E17((int, {E17 a}) it) /* Error */ {}
//                    ^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:55:20: Error: An extension type can't depend on itself through its representation type.
// extension type E18(Alias18a<int> it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:53:9: Context: The issue arises via this type alias.
// typedef Alias18a<T> = Alias18b<E18>;
//         ^^^^^^^^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:54:9: Context: The issue arises via this type alias.
// typedef Alias18b<T> = void Function(T);
//         ^^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:60:9: Error: The typedef 'Alias20' has a reference to itself.
// typedef Alias20 = Alias20; /* Error */
//         ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:71:20: Error: An extension type can't depend on itself through its representation type.
// extension type E23(Alias23 it) /* Error */ {}
//                    ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:70:9: Context: The issue arises via this type alias.
// typedef Alias23<T extends E23> = List<T>;
//         ^^^^^^^
//
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:74:23: Error: An extension type can't depend on itself through its representation type.
// extension type E24<T>(Alias24 it) /* Error */ {}
//                       ^
// pkg/front_end/testcases/extension_types/cyclic_representation_type.dart:73:9: Context: The issue arises via this type alias.
// typedef Alias24<T extends E24<T>> = List<T>;
//         ^^^^^^^
//
import self as self;
import "dart:core" as core;

typedef Alias9 = self::E9 /* = invalid-type */;
typedef Alias10<T extends core::Object? = dynamic> = self::E10<T%> /* = invalid-type */;
typedef Alias11 = () → self::E11 /* = invalid-type */;
typedef Alias12 = (self::E12 /* = invalid-type */) → void;
typedef Alias13 = <T extends self::E13 /* = invalid-type */ = dynamic>() → void;
typedef Alias14<unrelated T extends core::Object? = dynamic> = core::int;
typedef Alias15<T extends core::Object? = dynamic> = core::List<T%>;
typedef Alias16a<unrelated T extends core::Object? = dynamic> = core::List<self::E16b /* = invalid-type */>;
typedef Alias16b<unrelated T extends core::Object? = dynamic> = core::List<self::E16a /* = invalid-type */>;
typedef Alias18a<unrelated T extends core::Object? = dynamic> = (self::E18% /* = invalid-type */) → void;
typedef Alias18b<contravariant T extends core::Object? = dynamic> = (T%) → void;
typedef Alias20 = invalid-type;
typedef Alias21 = core::int;
typedef Alias22a = invalid-type;
typedef Alias22b = core::int;
typedef Alias23<T extends self::E23 /* = invalid-type */> = core::List<T%>;
typedef Alias24<T extends self::E24<T%> /* = invalid-type */ = self::E24<dynamic> /* = invalid-type */> = core::List<T%>;
extension type E1(invalid-type it) {
  abstract extension-type-member representation-field get it() → self::E1 /* = invalid-type */;
  constructor • = self::E1|constructor#;
  constructor tearoff • = self::E1|constructor#_#new#tearOff;
}
extension type E2a(invalid-type it) {
  abstract extension-type-member representation-field get it() → self::E2b /* = invalid-type */;
  constructor • = self::E2a|constructor#;
  constructor tearoff • = self::E2a|constructor#_#new#tearOff;
}
extension type E2b(invalid-type it) {
  abstract extension-type-member representation-field get it() → self::E2a /* = invalid-type */;
  constructor • = self::E2b|constructor#;
  constructor tearoff • = self::E2b|constructor#_#new#tearOff;
}
extension type E3a(invalid-type it) {
  abstract extension-type-member representation-field get it() → self::E3b /* = invalid-type */;
  constructor • = self::E3a|constructor#;
  constructor tearoff • = self::E3a|constructor#_#new#tearOff;
}
extension type E3b(invalid-type it) {
  abstract extension-type-member representation-field get it() → self::E3c /* = invalid-type */;
  constructor • = self::E3b|constructor#;
  constructor tearoff • = self::E3b|constructor#_#new#tearOff;
}
extension type E3c(invalid-type it) {
  abstract extension-type-member representation-field get it() → self::E3a /* = invalid-type */;
  constructor • = self::E3c|constructor#;
  constructor tearoff • = self::E3c|constructor#_#new#tearOff;
}
extension type E4(invalid-type it) {
  abstract extension-type-member representation-field get it() → () → self::E4 /* = invalid-type */;
  constructor • = self::E4|constructor#;
  constructor tearoff • = self::E4|constructor#_#new#tearOff;
}
extension type E5(invalid-type it) {
  abstract extension-type-member representation-field get it() → (self::E5 /* = invalid-type */) → void;
  constructor • = self::E5|constructor#;
  constructor tearoff • = self::E5|constructor#_#new#tearOff;
}
extension type E6(invalid-type it) {
  abstract extension-type-member representation-field get it() → (self::E6 /* = invalid-type */, core::int);
  constructor • = self::E6|constructor#;
  constructor tearoff • = self::E6|constructor#_#new#tearOff;
}
extension type E7(invalid-type it) {
  abstract extension-type-member representation-field get it() → <T extends self::E7 /* = invalid-type */ = dynamic>() → void;
  constructor • = self::E7|constructor#;
  constructor tearoff • = self::E7|constructor#_#new#tearOff;
}
extension type E8<T extends core::Object? = dynamic>(invalid-type it) {
  abstract extension-type-member representation-field get it() → core::List<self::E8<dynamic> /* = invalid-type */>;
  constructor • = self::E8|constructor#;
  constructor tearoff • = self::E8|constructor#_#new#tearOff;
}
extension type E9(invalid-type it) {
  abstract extension-type-member representation-field get it() → self::E9% /* = invalid-type */;
  constructor • = self::E9|constructor#;
  constructor tearoff • = self::E9|constructor#_#new#tearOff;
}
extension type E10<T extends core::Object? = dynamic>(invalid-type it) {
  abstract extension-type-member representation-field get it() → self::E10<T%>% /* = invalid-type */;
  constructor • = self::E10|constructor#;
  constructor tearoff • = self::E10|constructor#_#new#tearOff;
}
extension type E11(invalid-type it) {
  abstract extension-type-member representation-field get it() → () → self::E11 /* = invalid-type */;
  constructor • = self::E11|constructor#;
  constructor tearoff • = self::E11|constructor#_#new#tearOff;
}
extension type E12(invalid-type it) {
  abstract extension-type-member representation-field get it() → (self::E12 /* = invalid-type */) → void;
  constructor • = self::E12|constructor#;
  constructor tearoff • = self::E12|constructor#_#new#tearOff;
}
extension type E13(invalid-type it) {
  abstract extension-type-member representation-field get it() → <T extends self::E13 /* = invalid-type */ = dynamic>() → void;
  constructor • = self::E13|constructor#;
  constructor tearoff • = self::E13|constructor#_#new#tearOff;
}
extension type E14(core::int it) {
  abstract extension-type-member representation-field get it() → core::int;
  constructor • = self::E14|constructor#;
  constructor tearoff • = self::E14|constructor#_#new#tearOff;
}
extension type E15a(invalid-type it) {
  abstract extension-type-member representation-field get it() → core::List<self::E15b% /* = invalid-type */>;
  constructor • = self::E15a|constructor#;
  constructor tearoff • = self::E15a|constructor#_#new#tearOff;
}
extension type E15b(invalid-type it) {
  abstract extension-type-member representation-field get it() → core::List<self::E15a% /* = invalid-type */>;
  constructor • = self::E15b|constructor#;
  constructor tearoff • = self::E15b|constructor#_#new#tearOff;
}
extension type E16a(invalid-type it) {
  abstract extension-type-member representation-field get it() → core::List<self::E16b /* = invalid-type */>;
  constructor • = self::E16a|constructor#;
  constructor tearoff • = self::E16a|constructor#_#new#tearOff;
}
extension type E16b(invalid-type it) {
  abstract extension-type-member representation-field get it() → core::List<self::E16a /* = invalid-type */>;
  constructor • = self::E16b|constructor#;
  constructor tearoff • = self::E16b|constructor#_#new#tearOff;
}
extension type E17(invalid-type it) {
  abstract extension-type-member representation-field get it() → (core::int, {required a: self::E17 /* = invalid-type */});
  constructor • = self::E17|constructor#;
  constructor tearoff • = self::E17|constructor#_#new#tearOff;
}
extension type E18(invalid-type it) {
  abstract extension-type-member representation-field get it() → (self::E18% /* = invalid-type */) → void;
  constructor • = self::E18|constructor#;
  constructor tearoff • = self::E18|constructor#_#new#tearOff;
}
extension type E19a((self::E19b /* = core::int */, self::E19b /* = core::int */) it) {
  abstract extension-type-member representation-field get it() → (self::E19b /* = core::int */, self::E19b /* = core::int */);
  constructor • = self::E19a|constructor#;
  constructor tearoff • = self::E19a|constructor#_#new#tearOff;
}
extension type E19b(core::int it) {
  abstract extension-type-member representation-field get it() → core::int;
  constructor • = self::E19b|constructor#;
  constructor tearoff • = self::E19b|constructor#_#new#tearOff;
}
extension type E20(invalid-type it) {
  abstract extension-type-member representation-field get it() → invalid-type;
  constructor • = self::E20|constructor#;
  constructor tearoff • = self::E20|constructor#_#new#tearOff;
}
extension type E21(invalid-type it) {
  abstract extension-type-member representation-field get it() → invalid-type;
  constructor • = self::E21|constructor#;
  constructor tearoff • = self::E21|constructor#_#new#tearOff;
}
extension type E22(invalid-type it) {
  abstract extension-type-member representation-field get it() → invalid-type;
  constructor • = self::E22|constructor#;
  constructor tearoff • = self::E22|constructor#_#new#tearOff;
}
extension type E23(invalid-type it) {
  abstract extension-type-member representation-field get it() → core::List<self::E23% /* = invalid-type */>;
  constructor • = self::E23|constructor#;
  constructor tearoff • = self::E23|constructor#_#new#tearOff;
}
extension type E24<T extends core::Object? = dynamic>(invalid-type it) {
  abstract extension-type-member representation-field get it() → core::List<self::E24<dynamic>% /* = invalid-type */>;
  constructor • = self::E24|constructor#;
  constructor tearoff • = self::E24|constructor#_#new#tearOff;
}
static extension-type-member method E1|constructor#(self::E1 /* = invalid-type */ it) → self::E1 /* = invalid-type */ {
  lowered final self::E1 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E1|constructor#_#new#tearOff(self::E1 /* = invalid-type */ it) → self::E1 /* = invalid-type */
  return self::E1|constructor#(it);
static extension-type-member method E2a|constructor#(self::E2b /* = invalid-type */ it) → self::E2a /* = invalid-type */ {
  lowered final self::E2a /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E2a|constructor#_#new#tearOff(self::E2b /* = invalid-type */ it) → self::E2a /* = invalid-type */
  return self::E2a|constructor#(it);
static extension-type-member method E2b|constructor#(self::E2a /* = invalid-type */ it) → self::E2b /* = invalid-type */ {
  lowered final self::E2b /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E2b|constructor#_#new#tearOff(self::E2a /* = invalid-type */ it) → self::E2b /* = invalid-type */
  return self::E2b|constructor#(it);
static extension-type-member method E3a|constructor#(self::E3b /* = invalid-type */ it) → self::E3a /* = invalid-type */ {
  lowered final self::E3a /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E3a|constructor#_#new#tearOff(self::E3b /* = invalid-type */ it) → self::E3a /* = invalid-type */
  return self::E3a|constructor#(it);
static extension-type-member method E3b|constructor#(self::E3c /* = invalid-type */ it) → self::E3b /* = invalid-type */ {
  lowered final self::E3b /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E3b|constructor#_#new#tearOff(self::E3c /* = invalid-type */ it) → self::E3b /* = invalid-type */
  return self::E3b|constructor#(it);
static extension-type-member method E3c|constructor#(self::E3a /* = invalid-type */ it) → self::E3c /* = invalid-type */ {
  lowered final self::E3c /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E3c|constructor#_#new#tearOff(self::E3a /* = invalid-type */ it) → self::E3c /* = invalid-type */
  return self::E3c|constructor#(it);
static extension-type-member method E4|constructor#(() → self::E4 /* = invalid-type */ it) → self::E4 /* = invalid-type */ {
  lowered final self::E4 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E4|constructor#_#new#tearOff(() → self::E4 /* = invalid-type */ it) → self::E4 /* = invalid-type */
  return self::E4|constructor#(it);
static extension-type-member method E5|constructor#((self::E5 /* = invalid-type */) → void it) → self::E5 /* = invalid-type */ {
  lowered final self::E5 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E5|constructor#_#new#tearOff((self::E5 /* = invalid-type */) → void it) → self::E5 /* = invalid-type */
  return self::E5|constructor#(it);
static extension-type-member method E6|constructor#((self::E6 /* = invalid-type */, core::int) it) → self::E6 /* = invalid-type */ {
  lowered final self::E6 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E6|constructor#_#new#tearOff((self::E6 /* = invalid-type */, core::int) it) → self::E6 /* = invalid-type */
  return self::E6|constructor#(it);
static extension-type-member method E7|constructor#_#new#tearOff(<T extends self::E7 /* = invalid-type */ = dynamic>() → void it) → self::E7 /* = invalid-type */
  return self::E7|constructor#(it);
static extension-type-member method E7|constructor#(<T extends self::E7 /* = invalid-type */ = dynamic>() → void it) → self::E7 /* = invalid-type */ {
  lowered final self::E7 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E8|constructor#<T extends core::Object? = dynamic>(core::List<self::E8<dynamic> /* = invalid-type */> it) → self::E8<self::E8|constructor#::T%> /* = invalid-type */ {
  lowered final self::E8<self::E8|constructor#::T%> /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E8|constructor#_#new#tearOff<T extends core::Object? = dynamic>(core::List<self::E8<dynamic> /* = invalid-type */> it) → self::E8<self::E8|constructor#_#new#tearOff::T%>% /* = invalid-type */
  return self::E8|constructor#<self::E8|constructor#_#new#tearOff::T%>(it);
static extension-type-member method E9|constructor#(self::E9% /* = invalid-type */ it) → self::E9 /* = invalid-type */ {
  lowered final self::E9 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E9|constructor#_#new#tearOff(self::E9% /* = invalid-type */ it) → self::E9 /* = invalid-type */
  return self::E9|constructor#(it);
static extension-type-member method E10|constructor#<T extends core::Object? = dynamic>(self::E10<self::E10|constructor#::T%>% /* = invalid-type */ it) → self::E10<self::E10|constructor#::T%> /* = invalid-type */ {
  lowered final self::E10<self::E10|constructor#::T%> /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E10|constructor#_#new#tearOff<T extends core::Object? = dynamic>(self::E10<self::E10|constructor#_#new#tearOff::T%>% /* = invalid-type */ it) → self::E10<self::E10|constructor#_#new#tearOff::T%>% /* = invalid-type */
  return self::E10|constructor#<self::E10|constructor#_#new#tearOff::T%>(it);
static extension-type-member method E11|constructor#(() → self::E11 /* = invalid-type */ it) → self::E11 /* = invalid-type */ {
  lowered final self::E11 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E11|constructor#_#new#tearOff(() → self::E11 /* = invalid-type */ it) → self::E11 /* = invalid-type */
  return self::E11|constructor#(it);
static extension-type-member method E12|constructor#((self::E12 /* = invalid-type */) → void it) → self::E12 /* = invalid-type */ {
  lowered final self::E12 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E12|constructor#_#new#tearOff((self::E12 /* = invalid-type */) → void it) → self::E12 /* = invalid-type */
  return self::E12|constructor#(it);
static extension-type-member method E13|constructor#(<T extends self::E13 /* = invalid-type */ = dynamic>() → void it) → self::E13 /* = invalid-type */ {
  lowered final self::E13 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E13|constructor#_#new#tearOff(<T extends self::E13 /* = invalid-type */ = dynamic>() → void it) → self::E13 /* = invalid-type */
  return self::E13|constructor#(it);
static extension-type-member method E14|constructor#(core::int it) → self::E14 /* = core::int */ {
  lowered final self::E14 /* = core::int */ #this = it;
  return #this;
}
static extension-type-member method E14|constructor#_#new#tearOff(core::int it) → self::E14 /* = core::int */
  return self::E14|constructor#(it);
static extension-type-member method E15a|constructor#(core::List<self::E15b% /* = invalid-type */> it) → self::E15a /* = invalid-type */ {
  lowered final self::E15a /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E15a|constructor#_#new#tearOff(core::List<self::E15b% /* = invalid-type */> it) → self::E15a /* = invalid-type */
  return self::E15a|constructor#(it);
static extension-type-member method E15b|constructor#(core::List<self::E15a% /* = invalid-type */> it) → self::E15b /* = invalid-type */ {
  lowered final self::E15b /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E15b|constructor#_#new#tearOff(core::List<self::E15a% /* = invalid-type */> it) → self::E15b /* = invalid-type */
  return self::E15b|constructor#(it);
static extension-type-member method E16a|constructor#(core::List<self::E16b /* = invalid-type */> it) → self::E16a /* = invalid-type */ {
  lowered final self::E16a /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E16a|constructor#_#new#tearOff(core::List<self::E16b /* = invalid-type */> it) → self::E16a /* = invalid-type */
  return self::E16a|constructor#(it);
static extension-type-member method E16b|constructor#(core::List<self::E16a /* = invalid-type */> it) → self::E16b /* = invalid-type */ {
  lowered final self::E16b /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E16b|constructor#_#new#tearOff(core::List<self::E16a /* = invalid-type */> it) → self::E16b /* = invalid-type */
  return self::E16b|constructor#(it);
static extension-type-member method E17|constructor#((core::int, {required a: self::E17 /* = invalid-type */}) it) → self::E17 /* = invalid-type */ {
  lowered final self::E17 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E17|constructor#_#new#tearOff((core::int, {required a: self::E17 /* = invalid-type */}) it) → self::E17 /* = invalid-type */
  return self::E17|constructor#(it);
static extension-type-member method E18|constructor#((self::E18% /* = invalid-type */) → void it) → self::E18 /* = invalid-type */ {
  lowered final self::E18 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E18|constructor#_#new#tearOff((self::E18% /* = invalid-type */) → void it) → self::E18 /* = invalid-type */
  return self::E18|constructor#(it);
static extension-type-member method E19a|constructor#((self::E19b /* = core::int */, self::E19b /* = core::int */) it) → self::E19a /* =(core::int, core::int) */ {
  lowered final self::E19a /* =(core::int, core::int) */ #this = it;
  return #this;
}
static extension-type-member method E19a|constructor#_#new#tearOff((self::E19b /* = core::int */, self::E19b /* = core::int */) it) → self::E19a /* =(core::int, core::int) */
  return self::E19a|constructor#(it);
static extension-type-member method E19b|constructor#(core::int it) → self::E19b /* = core::int */ {
  lowered final self::E19b /* = core::int */ #this = it;
  return #this;
}
static extension-type-member method E19b|constructor#_#new#tearOff(core::int it) → self::E19b /* = core::int */
  return self::E19b|constructor#(it);
static extension-type-member method E20|constructor#(invalid-type it) → self::E20 /* = invalid-type */ {
  lowered final self::E20 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E20|constructor#_#new#tearOff(invalid-type it) → self::E20 /* = invalid-type */
  return self::E20|constructor#(it);
static extension-type-member method E21|constructor#(invalid-type it) → self::E21 /* = invalid-type */ {
  lowered final self::E21 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E21|constructor#_#new#tearOff(invalid-type it) → self::E21 /* = invalid-type */
  return self::E21|constructor#(it);
static extension-type-member method E22|constructor#(invalid-type it) → self::E22 /* = invalid-type */ {
  lowered final self::E22 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E22|constructor#_#new#tearOff(invalid-type it) → self::E22 /* = invalid-type */
  return self::E22|constructor#(it);
static extension-type-member method E23|constructor#(core::List<self::E23% /* = invalid-type */> it) → self::E23 /* = invalid-type */ {
  lowered final self::E23 /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E23|constructor#_#new#tearOff(core::List<self::E23% /* = invalid-type */> it) → self::E23 /* = invalid-type */
  return self::E23|constructor#(it);
static extension-type-member method E24|constructor#<T extends core::Object? = dynamic>(core::List<self::E24<dynamic>% /* = invalid-type */> it) → self::E24<self::E24|constructor#::T%> /* = invalid-type */ {
  lowered final self::E24<self::E24|constructor#::T%> /* = invalid-type */ #this = it;
  return #this;
}
static extension-type-member method E24|constructor#_#new#tearOff<T extends core::Object? = dynamic>(core::List<self::E24<dynamic>% /* = invalid-type */> it) → self::E24<self::E24|constructor#_#new#tearOff::T%>% /* = invalid-type */
  return self::E24|constructor#<self::E24|constructor#_#new#tearOff::T%>(it);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/integers_patch.dart */ _#Alias14#fromEnvironment#tearOff<unrelated T extends core::Object? = dynamic>(core::String name, {core::int defaultValue = #C1}) → core::int
  return core::int::fromEnvironment(name, defaultValue: defaultValue);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16a#filled#tearOff<unrelated T extends core::Object? = dynamic>(core::int length, self::E16b% /* = invalid-type */ fill, {core::bool growable = #C2}) → core::List<self::E16b% /* = invalid-type */>
  return core::List::filled<self::E16b /* = invalid-type */>(length, fill, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16a#empty#tearOff<unrelated T extends core::Object? = dynamic>({core::bool growable = #C2}) → core::List<self::E16b% /* = invalid-type */>
  return core::List::empty<self::E16b /* = invalid-type */>(growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16a#from#tearOff<unrelated T extends core::Object? = dynamic>(core::Iterable<dynamic> elements, {core::bool growable = #C3}) → core::List<self::E16b% /* = invalid-type */>
  return core::List::from<self::E16b /* = invalid-type */>(elements, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16a#of#tearOff<unrelated T extends core::Object? = dynamic>(core::Iterable<self::E16b% /* = invalid-type */> elements, {core::bool growable = #C3}) → core::List<self::E16b% /* = invalid-type */>
  return core::List::of<self::E16b /* = invalid-type */>(elements, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16a#generate#tearOff<unrelated T extends core::Object? = dynamic>(core::int length, (core::int) → self::E16b% /* = invalid-type */ generator, {core::bool growable = #C3}) → core::List<self::E16b% /* = invalid-type */>
  return core::List::generate<self::E16b /* = invalid-type */>(length, generator, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16a#unmodifiable#tearOff<unrelated T extends core::Object? = dynamic>(core::Iterable<dynamic> elements) → core::List<self::E16b% /* = invalid-type */>
  return core::List::unmodifiable<self::E16b /* = invalid-type */>(elements);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16b#filled#tearOff<unrelated T extends core::Object? = dynamic>(core::int length, self::E16a% /* = invalid-type */ fill, {core::bool growable = #C2}) → core::List<self::E16a% /* = invalid-type */>
  return core::List::filled<self::E16a /* = invalid-type */>(length, fill, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16b#empty#tearOff<unrelated T extends core::Object? = dynamic>({core::bool growable = #C2}) → core::List<self::E16a% /* = invalid-type */>
  return core::List::empty<self::E16a /* = invalid-type */>(growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16b#from#tearOff<unrelated T extends core::Object? = dynamic>(core::Iterable<dynamic> elements, {core::bool growable = #C3}) → core::List<self::E16a% /* = invalid-type */>
  return core::List::from<self::E16a /* = invalid-type */>(elements, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16b#of#tearOff<unrelated T extends core::Object? = dynamic>(core::Iterable<self::E16a% /* = invalid-type */> elements, {core::bool growable = #C3}) → core::List<self::E16a% /* = invalid-type */>
  return core::List::of<self::E16a /* = invalid-type */>(elements, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16b#generate#tearOff<unrelated T extends core::Object? = dynamic>(core::int length, (core::int) → self::E16a% /* = invalid-type */ generator, {core::bool growable = #C3}) → core::List<self::E16a% /* = invalid-type */>
  return core::List::generate<self::E16a /* = invalid-type */>(length, generator, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias16b#unmodifiable#tearOff<unrelated T extends core::Object? = dynamic>(core::Iterable<dynamic> elements) → core::List<self::E16a% /* = invalid-type */>
  return core::List::unmodifiable<self::E16a /* = invalid-type */>(elements);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias23#filled#tearOff<T extends self::E23 /* = invalid-type */>(core::int length, self::_#Alias23#filled#tearOff::T% fill, {core::bool growable = #C2}) → core::List<self::_#Alias23#filled#tearOff::T%>
  return core::List::filled<self::_#Alias23#filled#tearOff::T%>(length, fill, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias23#empty#tearOff<T extends self::E23 /* = invalid-type */>({core::bool growable = #C2}) → core::List<self::_#Alias23#empty#tearOff::T%>
  return core::List::empty<self::_#Alias23#empty#tearOff::T%>(growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias23#from#tearOff<T extends self::E23 /* = invalid-type */>(core::Iterable<dynamic> elements, {core::bool growable = #C3}) → core::List<self::_#Alias23#from#tearOff::T%>
  return core::List::from<self::_#Alias23#from#tearOff::T%>(elements, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias23#of#tearOff<T extends self::E23 /* = invalid-type */>(core::Iterable<self::_#Alias23#of#tearOff::T%> elements, {core::bool growable = #C3}) → core::List<self::_#Alias23#of#tearOff::T%>
  return core::List::of<self::_#Alias23#of#tearOff::T%>(elements, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias23#generate#tearOff<T extends self::E23 /* = invalid-type */>(core::int length, (core::int) → self::_#Alias23#generate#tearOff::T% generator, {core::bool growable = #C3}) → core::List<self::_#Alias23#generate#tearOff::T%>
  return core::List::generate<self::_#Alias23#generate#tearOff::T%>(length, generator, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias23#unmodifiable#tearOff<T extends self::E23 /* = invalid-type */>(core::Iterable<dynamic> elements) → core::List<self::_#Alias23#unmodifiable#tearOff::T%>
  return core::List::unmodifiable<self::_#Alias23#unmodifiable#tearOff::T%>(elements);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias24#filled#tearOff<T extends self::E24<self::_#Alias24#filled#tearOff::T%>% /* = invalid-type */ = self::E24<dynamic> /* = invalid-type */>(core::int length, self::_#Alias24#filled#tearOff::T% fill, {core::bool growable = #C2}) → core::List<self::_#Alias24#filled#tearOff::T%>
  return core::List::filled<self::_#Alias24#filled#tearOff::T%>(length, fill, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias24#empty#tearOff<T extends self::E24<self::_#Alias24#empty#tearOff::T%>% /* = invalid-type */ = self::E24<dynamic> /* = invalid-type */>({core::bool growable = #C2}) → core::List<self::_#Alias24#empty#tearOff::T%>
  return core::List::empty<self::_#Alias24#empty#tearOff::T%>(growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias24#from#tearOff<T extends self::E24<self::_#Alias24#from#tearOff::T%>% /* = invalid-type */ = self::E24<dynamic> /* = invalid-type */>(core::Iterable<dynamic> elements, {core::bool growable = #C3}) → core::List<self::_#Alias24#from#tearOff::T%>
  return core::List::from<self::_#Alias24#from#tearOff::T%>(elements, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias24#of#tearOff<T extends self::E24<self::_#Alias24#of#tearOff::T%>% /* = invalid-type */ = self::E24<dynamic> /* = invalid-type */>(core::Iterable<self::_#Alias24#of#tearOff::T%> elements, {core::bool growable = #C3}) → core::List<self::_#Alias24#of#tearOff::T%>
  return core::List::of<self::_#Alias24#of#tearOff::T%>(elements, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias24#generate#tearOff<T extends self::E24<self::_#Alias24#generate#tearOff::T%>% /* = invalid-type */ = self::E24<dynamic> /* = invalid-type */>(core::int length, (core::int) → self::_#Alias24#generate#tearOff::T% generator, {core::bool growable = #C3}) → core::List<self::_#Alias24#generate#tearOff::T%>
  return core::List::generate<self::_#Alias24#generate#tearOff::T%>(length, generator, growable: growable);
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/array_patch.dart */ _#Alias24#unmodifiable#tearOff<T extends self::E24<self::_#Alias24#unmodifiable#tearOff::T%>% /* = invalid-type */ = self::E24<dynamic> /* = invalid-type */>(core::Iterable<dynamic> elements) → core::List<self::_#Alias24#unmodifiable#tearOff::T%>
  return core::List::unmodifiable<self::_#Alias24#unmodifiable#tearOff::T%>(elements);

constants  {
  #C1 = 0
  #C2 = false
  #C3 = true
}
