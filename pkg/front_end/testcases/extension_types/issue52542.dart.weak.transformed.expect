library;
import self as self;
import "dart:core" as core;

class None extends core::Object /*hasConstConstructor*/  {
  const constructor •() → self::None
    : super core::Object::•()
    ;
}
extension type Option<V extends core::Object? = dynamic>(core::Object? _value) {
  abstract extension-type-member representation-field get _value() → core::Object?;
  static field none = self::Option|none;
  get value = self::Option|get#value;
  constructor • = self::Option|constructor#;
  constructor tearoff • = self::Option|constructor#_#new#tearOff;
}
static const field self::Option<Never> /* = core::Object? */ Option|none = #C1;
static extension-type-member method Option|constructor#<V extends core::Object? = dynamic>(core::Object? _value) → self::Option<self::Option|constructor#::V%> /* = core::Object? */ {
  lowered final self::Option<self::Option|constructor#::V%> /* = core::Object? */ #this = _value;
  return #this;
}
static extension-type-member method Option|constructor#_#new#tearOff<V extends core::Object? = dynamic>(core::Object? _value) → self::Option<self::Option|constructor#_#new#tearOff::V%>% /* = core::Object? */
  return self::Option|constructor#<self::Option|constructor#_#new#tearOff::V%>(_value);
static extension-type-member method Option|get#value<V extends core::Object? = dynamic>(lowered final self::Option<self::Option|get#value::V%> /* = core::Object? */ #this) → self::Option|get#value::V%
  return #this is self::None ?{self::Option|get#value::V%} throw new core::StateError::•("No Value") : #this as self::Option|get#value::V%;

constants  {
  #C1 = self::None {}
}


Constructor coverage from constants:
org-dartlang-testcase:///issue52542.dart:
- None. (from org-dartlang-testcase:///issue52542.dart:12:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
