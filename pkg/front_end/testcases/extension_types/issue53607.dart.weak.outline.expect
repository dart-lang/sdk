library;
import self as self;
import "dart:core" as core;

extension type E(core::int i) {
  abstract extension-type-member representation-field get i() → core::int;
  get value = self::E|get#value;
  get foo = self::E|get#foo;
  constructor _ = self::E|constructor#_;
  constructor tearoff _ = self::E|constructor#_#_#tearOff;
  constructor foo = self::E|constructor#foo;
  constructor tearoff foo = self::E|constructor#_#foo#tearOff;
}
static extension-type-member method E|constructor#_(core::int i) → self::E /* = core::int */
  ;
static extension-type-member method E|constructor#_#_#tearOff(core::int i) → self::E /* = core::int */
  return self::E|constructor#_(i);
static extension-type-member method E|constructor#foo(core::int i) → self::E /* = core::int */
  ;
static extension-type-member method E|constructor#_#foo#tearOff(core::int i) → self::E /* = core::int */
  return self::E|constructor#foo(i);
static extension-type-member method E|get#value(lowered final self::E /* = core::int */ #this) → core::int
  ;
static extension-type-member method E|get#foo(lowered final self::E /* = core::int */ #this) → core::int
  ;
static method main() → void
  ;
