library;
import self as self;
import "dart:core" as core;

extension type Ext(core::Object? _) {
  abstract extension-type-member representation-field get _() → core::Object?;
  get value = self::Ext|get#value;
  constructor • = self::Ext|constructor#;
  constructor tearoff • = self::Ext|constructor#_#new#tearOff;
}
static extension-type-member method Ext|constructor#(core::Object? _) → self::Ext /* = core::Object? */ {
  lowered final self::Ext /* = core::Object? */ #this = _;
  return #this;
}
static extension-type-member method Ext|constructor#_#new#tearOff(core::Object? _) → self::Ext /* = core::Object? */
  return self::Ext|constructor#(_);
static extension-type-member method Ext|get#value(lowered final self::Ext /* = core::Object? */ #this) → core::int
  return 42;
static method main() → void {
  {
    final synthesized self::Ext /* = core::Object? */ #0#0 = self::Ext|constructor#("");
    {
      hoisted core::int value;
      if(true) {
        value = self::Ext|get#value(#0#0);
        core::print(value);
      }
    }
  }
}
