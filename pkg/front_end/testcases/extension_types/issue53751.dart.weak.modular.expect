library;
import self as self;
import "dart:core" as core;

extension type E(core::int? n) {
  abstract extension-type-member representation-field get n() → core::int?;
  constructor • = self::E|constructor#;
  constructor tearoff • = self::E|constructor#_#new#tearOff;
}
static const field self::E /* = core::int? */ e = #C1;
static extension-type-member method E|constructor#(core::int? n) → self::E /* = core::int? */ {
  lowered final self::E /* = core::int? */ #this = n;
  return #this;
}
static extension-type-member method E|constructor#_#new#tearOff(core::int? n) → self::E /* = core::int? */
  return self::E|constructor#(n);

constants  {
  #C1 = null
}
