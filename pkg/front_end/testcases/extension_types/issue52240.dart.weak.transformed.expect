library;
import self as self;
import "dart:core" as core;

extension type X(core::int obj) {
  abstract extension-type-member representation-field get obj() → core::int;
  constructor _ = self::X|constructor#_;
  constructor tearoff _ = self::X|constructor#_#_#tearOff;
  constructor • = self::X|constructor#;
  constructor tearoff • = self::X|constructor#_#new#tearOff;
  constructor named = self::X|constructor#named;
  constructor tearoff named = self::X|constructor#_#named#tearOff;
}
static extension-type-member method X|constructor#_(core::int obj) → self::X /* = core::int */ {
  lowered final self::X /* = core::int */ #this = obj;
  return #this;
}
static extension-type-member method X|constructor#_#_#tearOff(core::int obj) → self::X /* = core::int */
  return self::X|constructor#_(obj);
static extension-type-member method X|constructor#() → self::X /* = core::int */ {
  lowered final self::X /* = core::int */ #this = 0;
  return #this;
}
static extension-type-member method X|constructor#_#new#tearOff() → self::X /* = core::int */
  return self::X|constructor#();
static extension-type-member method X|constructor#named() → self::X /* = core::int */ {
  lowered final self::X /* = core::int */ #this = 0;
  return #this;
}
static extension-type-member method X|constructor#_#named#tearOff() → self::X /* = core::int */
  return self::X|constructor#named();
static method main() → void {
  core::print(#C1(){() → self::X /* = core::int */} as{Unchecked} core::int);
  core::print(#C2(){() → self::X /* = core::int */} as{Unchecked} core::int);
}

constants  {
  #C1 = static-tearoff self::X|constructor#_#new#tearOff
  #C2 = static-tearoff self::X|constructor#_#named#tearOff
}
