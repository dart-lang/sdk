abstract class A {
  (Object?, dynamic) method();
  (Object?, dynamic) get getter;
  void set setter((int, int) Function(Object?, dynamic) f);
}

abstract class B {
  (dynamic, Object?) method();
  (dynamic, Object?) get getter;
  void set setter((int, int) Function(dynamic, Object?) f);
}

class C implements A, B {
  (int, int) method() => (42, 87);
  (int, int) get getter => (42, 87);
  void set setter((int, int) Function(dynamic, dynamic) f) {}
}

extension type E(C c) implements A, B {}

(Object?, Object?) testMethod0(E e) => e.method();

(int, Object?) testMethod1(E e) => e.method();

(Object?, int) testMethod2(E e) => e.method();

testMethod3(E e) => e.method().$1.unresolved();

testMethod4(E e) => e.method().$2.unresolved();

(Object?, Object?) testGetter0(E e) => e.getter;

(int, Object?) testGetter1(E e) => e.getter;

(Object?, int) testGetter2(E e) => e.getter;

void testSetter(E e) {}

E e = E(C());

var f = e.method();

(Object?, Object?) f1 = f;

(Object?, int) f2 = f;

(int, Object?) f3 = f;

testMethod5(E e) => f.$1.unresolved();

testMethod6(E e) => f.$2.unresolved();

var g = e.getter;

(Object?, Object?) g1 = g;

(Object?, int) g2 = g;

(int, Object?) g3 = g;

testGetter5(E e) => g.$1.unresolved();

testGetter6(E e) => g.$2.unresolved();

void method(E e) {}

main() {}

expect(expected, actual) {}
