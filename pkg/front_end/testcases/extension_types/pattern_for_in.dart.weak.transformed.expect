library;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

import "dart:async";

extension type MyList<T extends core::Object? = dynamic>(core::List<T%> it) implements core::List<T%> {
  abstract extension-type-member representation-field get it() → core::List<T%>;
  constructor • = self::MyList|constructor#;
  constructor tearoff • = self::MyList|constructor#_#new#tearOff;
}
extension type MyStream<T extends core::Object? = dynamic>(asy::Stream<T%> it) implements asy::Stream<T%> {
  abstract extension-type-member representation-field get it() → asy::Stream<T%>;
  constructor • = self::MyStream|constructor#;
  constructor tearoff • = self::MyStream|constructor#_#new#tearOff;
}
static extension-type-member method MyList|constructor#<T extends core::Object? = dynamic>(core::List<self::MyList|constructor#::T%> it) → self::MyList<self::MyList|constructor#::T%> /* = core::List<self::MyList|constructor#::T%> */ {
  lowered final self::MyList<self::MyList|constructor#::T%> /* = core::List<self::MyList|constructor#::T%> */ #this = it;
  return #this;
}
static extension-type-member method MyList|constructor#_#new#tearOff<T extends core::Object? = dynamic>(core::List<self::MyList|constructor#_#new#tearOff::T%> it) → self::MyList<self::MyList|constructor#_#new#tearOff::T%> /* = core::List<self::MyList|constructor#_#new#tearOff::T%> */
  return self::MyList|constructor#<self::MyList|constructor#_#new#tearOff::T%>(it);
static extension-type-member method MyStream|constructor#<T extends core::Object? = dynamic>(asy::Stream<self::MyStream|constructor#::T%> it) → self::MyStream<self::MyStream|constructor#::T%> /* = asy::Stream<self::MyStream|constructor#::T%> */ {
  lowered final self::MyStream<self::MyStream|constructor#::T%> /* = asy::Stream<self::MyStream|constructor#::T%> */ #this = it;
  return #this;
}
static extension-type-member method MyStream|constructor#_#new#tearOff<T extends core::Object? = dynamic>(asy::Stream<self::MyStream|constructor#_#new#tearOff::T%> it) → self::MyStream<self::MyStream|constructor#_#new#tearOff::T%> /* = asy::Stream<self::MyStream|constructor#_#new#tearOff::T%> */
  return self::MyStream|constructor#<self::MyStream|constructor#_#new#tearOff::T%>(it);
static method method1(self::MyList<core::int> /* = core::List<core::int> */ list, self::MyStream<core::int> /* = asy::Stream<core::int> */ stream) → dynamic async /* emittedValueType= dynamic */ {
  {
    synthesized core::Iterator<core::int> :sync-for-iterator = list.{core::Iterable::iterator}{core::Iterator<core::int>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      core::int a = :sync-for-iterator.{core::Iterator::current}{core::int};
      {}
    }
  }
  {
    synthesized self::MyStream<core::int> /* = asy::Stream<core::int> */ :stream = stream;
    synthesized asy::_StreamIterator<core::int>? :for-iterator = new asy::_StreamIterator::•<core::int>(:stream);
    try
      while (let dynamic #t1 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        core::int a = :for-iterator.{asy::_StreamIterator::current}{core::int};
        {}
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::int>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
}
static method method2(self::MyList<(core::int, core::String)> /* = core::List<(core::int, core::String)> */ list, self::MyStream<(core::int, core::String)> /* = asy::Stream<(core::int, core::String)> */ stream) → dynamic async /* emittedValueType= dynamic */ {
  {
    synthesized core::Iterator<(core::int, core::String)> :sync-for-iterator = list.{core::Iterable::iterator}{core::Iterator<(core::int, core::String)>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      final(core::int, core::String) #t2 = :sync-for-iterator.{core::Iterator::current}{(core::int, core::String)};
      {
        hoisted core::int a;
        hoisted core::String b;
        {
          final synthesized(core::int, core::String) #0#0 = #t2;
          a = #0#0.$1{core::int};
          b = #0#0.$2{core::String};
        }
      }
    }
  }
  {
    synthesized self::MyStream<(core::int, core::String)> /* = asy::Stream<(core::int, core::String)> */ :stream = stream;
    synthesized asy::_StreamIterator<(core::int, core::String)>? :for-iterator = new asy::_StreamIterator::•<(core::int, core::String)>(:stream);
    try
      while (let dynamic #t3 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        final(core::int, core::String) #t4 = :for-iterator.{asy::_StreamIterator::current}{(core::int, core::String)};
        {
          hoisted core::int a;
          hoisted core::String b;
          {
            final synthesized(core::int, core::String) #1#0 = #t4;
            a = #1#0.$1{core::int};
            b = #1#0.$2{core::String};
          }
        }
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<(core::int, core::String)>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
}
