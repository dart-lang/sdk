library test;
import self as self;
import "dart:core" as core;

abstract class Test1 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::int;
  abstract operator []=(core::String s, core::int v) → void;
  method test() → void {
    core::int v1 = let final dynamic #t1 = "x" in let final dynamic #t2 = self::getInt() in let final dynamic #t3 = this.{self::Test1::[]=}(#t1, #t2) in #t2;
    core::num v2 = let final dynamic #t4 = "x" in let final dynamic #t5 = self::getNum() in let final dynamic #t6 = this.{self::Test1::[]=}(#t4, #t5) in #t5;
    core::int v4 = let final dynamic #t7 = "x" in let final dynamic #t8 = this.{self::Test1::[]}(#t7) in #t8.{core::num::==}(null) ? let final dynamic #t9 = self::getInt() in let final dynamic #t10 = this.{self::Test1::[]=}(#t7, #t9) in #t9 : #t8;
    core::num v5 = let final dynamic #t11 = "x" in let final dynamic #t12 = this.{self::Test1::[]}(#t11) in #t12.{core::num::==}(null) ? let final dynamic #t13 = self::getNum() in let final dynamic #t14 = this.{self::Test1::[]=}(#t11, #t13) in #t13 : #t12;
    core::int v7 = let final dynamic #t15 = "x" in let final dynamic #t16 = this.{self::Test1::[]}(#t15).{core::num::+}(self::getInt()) in let final dynamic #t17 = this.{self::Test1::[]=}(#t15, #t16) in #t16;
    core::num v8 = let final dynamic #t18 = "x" in let final dynamic #t19 = this.{self::Test1::[]}(#t18).{core::num::+}(self::getNum()) in let final dynamic #t20 = this.{self::Test1::[]=}(#t18, #t19) in #t19;
    core::int v10 = let final dynamic #t21 = "x" in let final dynamic #t22 = this.{self::Test1::[]}(#t21).{core::num::+}(1) in let final dynamic #t23 = this.{self::Test1::[]=}(#t21, #t22) in #t22;
    core::int v11 = let final dynamic #t24 = "x" in let final dynamic #t25 = this.{self::Test1::[]}(#t24) in let final dynamic #t26 = this.{self::Test1::[]=}(#t24, #t25.{core::num::+}(1)) in #t25;
  }
}
abstract class Test2 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::int;
  abstract operator []=(core::String s, core::num v) → void;
  method test() → void {
    core::int v1 = let final dynamic #t27 = "x" in let final dynamic #t28 = self::getInt() in let final dynamic #t29 = this.{self::Test2::[]=}(#t27, #t28) in #t28;
    core::num v2 = let final dynamic #t30 = "x" in let final dynamic #t31 = self::getNum() in let final dynamic #t32 = this.{self::Test2::[]=}(#t30, #t31) in #t31;
    core::double v3 = let final dynamic #t33 = "x" in let final dynamic #t34 = self::getDouble() in let final dynamic #t35 = this.{self::Test2::[]=}(#t33, #t34) in #t34;
    core::num v4 = let final dynamic #t36 = "x" in let final dynamic #t37 = this.{self::Test2::[]}(#t36) in #t37.{core::num::==}(null) ? let final dynamic #t38 = self::getInt() in let final dynamic #t39 = this.{self::Test2::[]=}(#t36, #t38) in #t38 : #t37;
    core::num v5 = let final dynamic #t40 = "x" in let final dynamic #t41 = this.{self::Test2::[]}(#t40) in #t41.{core::num::==}(null) ? let final dynamic #t42 = self::getNum() in let final dynamic #t43 = this.{self::Test2::[]=}(#t40, #t42) in #t42 : #t41;
    core::num v6 = let final dynamic #t44 = "x" in let final dynamic #t45 = this.{self::Test2::[]}(#t44) in #t45.{core::num::==}(null) ? let final dynamic #t46 = self::getDouble() in let final dynamic #t47 = this.{self::Test2::[]=}(#t44, #t46) in #t46 : #t45;
    core::num v7 = let final dynamic #t48 = "x" in let final dynamic #t49 = this.{self::Test2::[]}(#t48).{core::num::+}(self::getInt()) in let final dynamic #t50 = this.{self::Test2::[]=}(#t48, #t49) in #t49;
    core::num v8 = let final dynamic #t51 = "x" in let final dynamic #t52 = this.{self::Test2::[]}(#t51).{core::num::+}(self::getNum()) in let final dynamic #t53 = this.{self::Test2::[]=}(#t51, #t52) in #t52;
    core::num v9 = let final dynamic #t54 = "x" in let final dynamic #t55 = this.{self::Test2::[]}(#t54).{core::num::+}(self::getDouble()) in let final dynamic #t56 = this.{self::Test2::[]=}(#t54, #t55) in #t55;
    core::num v10 = let final dynamic #t57 = "x" in let final dynamic #t58 = this.{self::Test2::[]}(#t57).{core::num::+}(1) in let final dynamic #t59 = this.{self::Test2::[]=}(#t57, #t58) in #t58;
    core::num v11 = let final dynamic #t60 = "x" in let final dynamic #t61 = this.{self::Test2::[]}(#t60) in let final dynamic #t62 = this.{self::Test2::[]=}(#t60, #t61.{core::num::+}(1)) in #t61;
  }
}
abstract class Test3 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::int;
  abstract operator []=(core::String s, core::double v) → void;
  method test() → void {
    core::num v2 = let final dynamic #t63 = "x" in let final dynamic #t64 = self::getNum() in let final dynamic #t65 = this.{self::Test3::[]=}(#t63, #t64) in #t64;
    core::double v3 = let final dynamic #t66 = "x" in let final dynamic #t67 = self::getDouble() in let final dynamic #t68 = this.{self::Test3::[]=}(#t66, #t67) in #t67;
    core::num v5 = let final dynamic #t69 = "x" in let final dynamic #t70 = this.{self::Test3::[]}(#t69) in #t70.{core::num::==}(null) ? let final dynamic #t71 = self::getNum() in let final dynamic #t72 = this.{self::Test3::[]=}(#t69, #t71) in #t71 : #t70;
    core::double v6 = let final dynamic #t73 = "x" in let final dynamic #t74 = this.{self::Test3::[]}(#t73) in #t74.{core::num::==}(null) ? let final dynamic #t75 = self::getDouble() in let final dynamic #t76 = this.{self::Test3::[]=}(#t73, #t75) in #t75 : #t74;
    core::double v7 = let final dynamic #t77 = "x" in let final dynamic #t78 = this.{self::Test3::[]}(#t77).{core::double::+}(self::getInt()) in let final dynamic #t79 = this.{self::Test3::[]=}(#t77, #t78) in #t78;
    core::double v8 = let final dynamic #t80 = "x" in let final dynamic #t81 = this.{self::Test3::[]}(#t80).{core::double::+}(self::getNum()) in let final dynamic #t82 = this.{self::Test3::[]=}(#t80, #t81) in #t81;
    core::double v9 = let final dynamic #t83 = "x" in let final dynamic #t84 = this.{self::Test3::[]}(#t83).{core::double::+}(self::getDouble()) in let final dynamic #t85 = this.{self::Test3::[]=}(#t83, #t84) in #t84;
    core::double v10 = let final dynamic #t86 = "x" in let final dynamic #t87 = this.{self::Test3::[]}(#t86).{core::double::+}(1) in let final dynamic #t88 = this.{self::Test3::[]=}(#t86, #t87) in #t87;
    core::double v11 = let final dynamic #t89 = "x" in let final dynamic #t90 = this.{self::Test3::[]}(#t89) in let final dynamic #t91 = this.{self::Test3::[]=}(#t89, #t90.{core::double::+}(1)) in #t90;
  }
}
abstract class Test4 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::num;
  abstract operator []=(core::String s, core::int v) → void;
  method test() → void {
    core::int v1 = let final dynamic #t92 = "x" in let final dynamic #t93 = self::getInt() in let final dynamic #t94 = this.{self::Test4::[]=}(#t92, #t93) in #t93;
    core::num v2 = let final dynamic #t95 = "x" in let final dynamic #t96 = self::getNum() in let final dynamic #t97 = this.{self::Test4::[]=}(#t95, #t96) in #t96;
    core::int v4 = let final dynamic #t98 = "x" in let final dynamic #t99 = this.{self::Test4::[]}(#t98) in #t99.{core::num::==}(null) ? let final dynamic #t100 = self::getInt() in let final dynamic #t101 = this.{self::Test4::[]=}(#t98, #t100) in #t100 : #t99;
    core::num v5 = let final dynamic #t102 = "x" in let final dynamic #t103 = this.{self::Test4::[]}(#t102) in #t103.{core::num::==}(null) ? let final dynamic #t104 = self::getNum() in let final dynamic #t105 = this.{self::Test4::[]=}(#t102, #t104) in #t104 : #t103;
    core::int v7 = let final dynamic #t106 = "x" in let final dynamic #t107 = this.{self::Test4::[]}(#t106).{core::num::+}(self::getInt()) in let final dynamic #t108 = this.{self::Test4::[]=}(#t106, #t107) in #t107;
    core::num v8 = let final dynamic #t109 = "x" in let final dynamic #t110 = this.{self::Test4::[]}(#t109).{core::num::+}(self::getNum()) in let final dynamic #t111 = this.{self::Test4::[]=}(#t109, #t110) in #t110;
    core::int v10 = let final dynamic #t112 = "x" in let final dynamic #t113 = this.{self::Test4::[]}(#t112).{core::num::+}(1) in let final dynamic #t114 = this.{self::Test4::[]=}(#t112, #t113) in #t113;
    core::int v11 = let final dynamic #t115 = "x" in let final dynamic #t116 = this.{self::Test4::[]}(#t115) in let final dynamic #t117 = this.{self::Test4::[]=}(#t115, #t116.{core::num::+}(1)) in #t116;
  }
}
abstract class Test5 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::num;
  abstract operator []=(core::String s, core::num v) → void;
  method test() → void {
    core::int v1 = let final dynamic #t118 = "x" in let final dynamic #t119 = self::getInt() in let final dynamic #t120 = this.{self::Test5::[]=}(#t118, #t119) in #t119;
    core::num v2 = let final dynamic #t121 = "x" in let final dynamic #t122 = self::getNum() in let final dynamic #t123 = this.{self::Test5::[]=}(#t121, #t122) in #t122;
    core::double v3 = let final dynamic #t124 = "x" in let final dynamic #t125 = self::getDouble() in let final dynamic #t126 = this.{self::Test5::[]=}(#t124, #t125) in #t125;
    core::num v4 = let final dynamic #t127 = "x" in let final dynamic #t128 = this.{self::Test5::[]}(#t127) in #t128.{core::num::==}(null) ? let final dynamic #t129 = self::getInt() in let final dynamic #t130 = this.{self::Test5::[]=}(#t127, #t129) in #t129 : #t128;
    core::num v5 = let final dynamic #t131 = "x" in let final dynamic #t132 = this.{self::Test5::[]}(#t131) in #t132.{core::num::==}(null) ? let final dynamic #t133 = self::getNum() in let final dynamic #t134 = this.{self::Test5::[]=}(#t131, #t133) in #t133 : #t132;
    core::num v6 = let final dynamic #t135 = "x" in let final dynamic #t136 = this.{self::Test5::[]}(#t135) in #t136.{core::num::==}(null) ? let final dynamic #t137 = self::getDouble() in let final dynamic #t138 = this.{self::Test5::[]=}(#t135, #t137) in #t137 : #t136;
    core::num v7 = let final dynamic #t139 = "x" in let final dynamic #t140 = this.{self::Test5::[]}(#t139).{core::num::+}(self::getInt()) in let final dynamic #t141 = this.{self::Test5::[]=}(#t139, #t140) in #t140;
    core::num v8 = let final dynamic #t142 = "x" in let final dynamic #t143 = this.{self::Test5::[]}(#t142).{core::num::+}(self::getNum()) in let final dynamic #t144 = this.{self::Test5::[]=}(#t142, #t143) in #t143;
    core::num v9 = let final dynamic #t145 = "x" in let final dynamic #t146 = this.{self::Test5::[]}(#t145).{core::num::+}(self::getDouble()) in let final dynamic #t147 = this.{self::Test5::[]=}(#t145, #t146) in #t146;
    core::num v10 = let final dynamic #t148 = "x" in let final dynamic #t149 = this.{self::Test5::[]}(#t148).{core::num::+}(1) in let final dynamic #t150 = this.{self::Test5::[]=}(#t148, #t149) in #t149;
    core::num v11 = let final dynamic #t151 = "x" in let final dynamic #t152 = this.{self::Test5::[]}(#t151) in let final dynamic #t153 = this.{self::Test5::[]=}(#t151, #t152.{core::num::+}(1)) in #t152;
  }
}
abstract class Test6 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::num;
  abstract operator []=(core::String s, core::double v) → void;
  method test() → void {
    core::num v2 = let final dynamic #t154 = "x" in let final dynamic #t155 = self::getNum() in let final dynamic #t156 = this.{self::Test6::[]=}(#t154, #t155) in #t155;
    core::double v3 = let final dynamic #t157 = "x" in let final dynamic #t158 = self::getDouble() in let final dynamic #t159 = this.{self::Test6::[]=}(#t157, #t158) in #t158;
    core::num v5 = let final dynamic #t160 = "x" in let final dynamic #t161 = this.{self::Test6::[]}(#t160) in #t161.{core::num::==}(null) ? let final dynamic #t162 = self::getNum() in let final dynamic #t163 = this.{self::Test6::[]=}(#t160, #t162) in #t162 : #t161;
    core::double v6 = let final dynamic #t164 = "x" in let final dynamic #t165 = this.{self::Test6::[]}(#t164) in #t165.{core::num::==}(null) ? let final dynamic #t166 = self::getDouble() in let final dynamic #t167 = this.{self::Test6::[]=}(#t164, #t166) in #t166 : #t165;
    core::double v7 = let final dynamic #t168 = "x" in let final dynamic #t169 = this.{self::Test6::[]}(#t168).{core::double::+}(self::getInt()) in let final dynamic #t170 = this.{self::Test6::[]=}(#t168, #t169) in #t169;
    core::double v8 = let final dynamic #t171 = "x" in let final dynamic #t172 = this.{self::Test6::[]}(#t171).{core::double::+}(self::getNum()) in let final dynamic #t173 = this.{self::Test6::[]=}(#t171, #t172) in #t172;
    core::double v9 = let final dynamic #t174 = "x" in let final dynamic #t175 = this.{self::Test6::[]}(#t174).{core::double::+}(self::getDouble()) in let final dynamic #t176 = this.{self::Test6::[]=}(#t174, #t175) in #t175;
    core::double v10 = let final dynamic #t177 = "x" in let final dynamic #t178 = this.{self::Test6::[]}(#t177).{core::double::+}(1) in let final dynamic #t179 = this.{self::Test6::[]=}(#t177, #t178) in #t178;
    core::double v11 = let final dynamic #t180 = "x" in let final dynamic #t181 = this.{self::Test6::[]}(#t180) in let final dynamic #t182 = this.{self::Test6::[]=}(#t180, #t181.{core::double::+}(1)) in #t181;
  }
}
abstract class Test7 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::double;
  abstract operator []=(core::String s, core::int v) → void;
  method test() → void {
    core::int v1 = let final dynamic #t183 = "x" in let final dynamic #t184 = self::getInt() in let final dynamic #t185 = this.{self::Test7::[]=}(#t183, #t184) in #t184;
    core::num v2 = let final dynamic #t186 = "x" in let final dynamic #t187 = self::getNum() in let final dynamic #t188 = this.{self::Test7::[]=}(#t186, #t187) in #t187;
    core::int v4 = let final dynamic #t189 = "x" in let final dynamic #t190 = this.{self::Test7::[]}(#t189) in #t190.{core::num::==}(null) ? let final dynamic #t191 = self::getInt() in let final dynamic #t192 = this.{self::Test7::[]=}(#t189, #t191) in #t191 : #t190;
    core::num v5 = let final dynamic #t193 = "x" in let final dynamic #t194 = this.{self::Test7::[]}(#t193) in #t194.{core::num::==}(null) ? let final dynamic #t195 = self::getNum() in let final dynamic #t196 = this.{self::Test7::[]=}(#t193, #t195) in #t195 : #t194;
    core::int v7 = let final dynamic #t197 = "x" in let final dynamic #t198 = this.{self::Test7::[]}(#t197).{core::num::+}(self::getInt()) in let final dynamic #t199 = this.{self::Test7::[]=}(#t197, #t198) in #t198;
    core::num v8 = let final dynamic #t200 = "x" in let final dynamic #t201 = this.{self::Test7::[]}(#t200).{core::num::+}(self::getNum()) in let final dynamic #t202 = this.{self::Test7::[]=}(#t200, #t201) in #t201;
    core::int v10 = let final dynamic #t203 = "x" in let final dynamic #t204 = this.{self::Test7::[]}(#t203).{core::num::+}(1) in let final dynamic #t205 = this.{self::Test7::[]=}(#t203, #t204) in #t204;
    core::int v11 = let final dynamic #t206 = "x" in let final dynamic #t207 = this.{self::Test7::[]}(#t206) in let final dynamic #t208 = this.{self::Test7::[]=}(#t206, #t207.{core::num::+}(1)) in #t207;
  }
}
abstract class Test8 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::double;
  abstract operator []=(core::String s, core::num v) → void;
  method test() → void {
    core::int v1 = let final dynamic #t209 = "x" in let final dynamic #t210 = self::getInt() in let final dynamic #t211 = this.{self::Test8::[]=}(#t209, #t210) in #t210;
    core::num v2 = let final dynamic #t212 = "x" in let final dynamic #t213 = self::getNum() in let final dynamic #t214 = this.{self::Test8::[]=}(#t212, #t213) in #t213;
    core::double v3 = let final dynamic #t215 = "x" in let final dynamic #t216 = self::getDouble() in let final dynamic #t217 = this.{self::Test8::[]=}(#t215, #t216) in #t216;
    core::num v4 = let final dynamic #t218 = "x" in let final dynamic #t219 = this.{self::Test8::[]}(#t218) in #t219.{core::num::==}(null) ? let final dynamic #t220 = self::getInt() in let final dynamic #t221 = this.{self::Test8::[]=}(#t218, #t220) in #t220 : #t219;
    core::num v5 = let final dynamic #t222 = "x" in let final dynamic #t223 = this.{self::Test8::[]}(#t222) in #t223.{core::num::==}(null) ? let final dynamic #t224 = self::getNum() in let final dynamic #t225 = this.{self::Test8::[]=}(#t222, #t224) in #t224 : #t223;
    core::num v6 = let final dynamic #t226 = "x" in let final dynamic #t227 = this.{self::Test8::[]}(#t226) in #t227.{core::num::==}(null) ? let final dynamic #t228 = self::getDouble() in let final dynamic #t229 = this.{self::Test8::[]=}(#t226, #t228) in #t228 : #t227;
    core::num v7 = let final dynamic #t230 = "x" in let final dynamic #t231 = this.{self::Test8::[]}(#t230).{core::num::+}(self::getInt()) in let final dynamic #t232 = this.{self::Test8::[]=}(#t230, #t231) in #t231;
    core::num v8 = let final dynamic #t233 = "x" in let final dynamic #t234 = this.{self::Test8::[]}(#t233).{core::num::+}(self::getNum()) in let final dynamic #t235 = this.{self::Test8::[]=}(#t233, #t234) in #t234;
    core::num v9 = let final dynamic #t236 = "x" in let final dynamic #t237 = this.{self::Test8::[]}(#t236).{core::num::+}(self::getDouble()) in let final dynamic #t238 = this.{self::Test8::[]=}(#t236, #t237) in #t237;
    core::num v10 = let final dynamic #t239 = "x" in let final dynamic #t240 = this.{self::Test8::[]}(#t239).{core::num::+}(1) in let final dynamic #t241 = this.{self::Test8::[]=}(#t239, #t240) in #t240;
    core::num v11 = let final dynamic #t242 = "x" in let final dynamic #t243 = this.{self::Test8::[]}(#t242) in let final dynamic #t244 = this.{self::Test8::[]=}(#t242, #t243.{core::num::+}(1)) in #t243;
  }
}
abstract class Test9 extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → core::double;
  abstract operator []=(core::String s, core::double v) → void;
  method test() → void {
    core::num v2 = let final dynamic #t245 = "x" in let final dynamic #t246 = self::getNum() in let final dynamic #t247 = this.{self::Test9::[]=}(#t245, #t246) in #t246;
    core::double v3 = let final dynamic #t248 = "x" in let final dynamic #t249 = self::getDouble() in let final dynamic #t250 = this.{self::Test9::[]=}(#t248, #t249) in #t249;
    core::num v5 = let final dynamic #t251 = "x" in let final dynamic #t252 = this.{self::Test9::[]}(#t251) in #t252.{core::num::==}(null) ? let final dynamic #t253 = self::getNum() in let final dynamic #t254 = this.{self::Test9::[]=}(#t251, #t253) in #t253 : #t252;
    core::double v6 = let final dynamic #t255 = "x" in let final dynamic #t256 = this.{self::Test9::[]}(#t255) in #t256.{core::num::==}(null) ? let final dynamic #t257 = self::getDouble() in let final dynamic #t258 = this.{self::Test9::[]=}(#t255, #t257) in #t257 : #t256;
    core::double v7 = let final dynamic #t259 = "x" in let final dynamic #t260 = this.{self::Test9::[]}(#t259).{core::double::+}(self::getInt()) in let final dynamic #t261 = this.{self::Test9::[]=}(#t259, #t260) in #t260;
    core::double v8 = let final dynamic #t262 = "x" in let final dynamic #t263 = this.{self::Test9::[]}(#t262).{core::double::+}(self::getNum()) in let final dynamic #t264 = this.{self::Test9::[]=}(#t262, #t263) in #t263;
    core::double v9 = let final dynamic #t265 = "x" in let final dynamic #t266 = this.{self::Test9::[]}(#t265).{core::double::+}(self::getDouble()) in let final dynamic #t267 = this.{self::Test9::[]=}(#t265, #t266) in #t266;
    core::double v10 = let final dynamic #t268 = "x" in let final dynamic #t269 = this.{self::Test9::[]}(#t268).{core::double::+}(1) in let final dynamic #t270 = this.{self::Test9::[]=}(#t268, #t269) in #t269;
    core::double v11 = let final dynamic #t271 = "x" in let final dynamic #t272 = this.{self::Test9::[]}(#t271) in let final dynamic #t273 = this.{self::Test9::[]=}(#t271, #t272.{core::double::+}(1)) in #t272;
  }
}
static method getInt() → core::int
  return 0;
static method getNum() → core::num
  return 0;
static method getDouble() → core::double
  return 0.0;
static method main() → dynamic {}
