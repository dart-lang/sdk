library test;
import self as self;
import "dart:core" as core;

class Foo extends core::Object /*hasConstConstructor*/  {
  const constructor •(core::List<core::String> l) → self::Foo
    : super core::Object::•()
    ;
}
static method test() → void {
  for (@#C1 core::int i = 0; i.{core::num::<}(1){(core::num) → core::bool}; i = i.{core::num::+}(1){(core::num) → core::int}) {
  }
  for (@#C1 core::int i in <core::int>[0]) {
  }
}
static method main() → dynamic {}

constants  {
  #C1 = self::Foo {}
}


Constructor coverage from constants:
org-dartlang-testcase:///downwards_inference_annotations_for_loop_variable.dart:
- Foo. (from org-dartlang-testcase:///downwards_inference_annotations_for_loop_variable.dart:8:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
