library;
import self as self;
import "dart:core" as core;

class I<X extends core::Object = dynamic> extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class M0<X extends core::Object = dynamic, Y extends core::Comparable<self::M0::Y> = core::Comparable<dynamic>> extends self::I<self::M0::X> {
  synthetic constructor •() → void
    : super self::I::•()
    ;
}
class M1 extends core::Object implements self::I<core::int> {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
abstract class _A&M1&M0 = self::M1 with self::M0<core::int, core::Comparable<dynamic>> {
}
class A extends self::_A&M1&M0 {
  synthetic constructor •() → void
    : super self::M1::•()
    ;
}
static method main() → dynamic {}
