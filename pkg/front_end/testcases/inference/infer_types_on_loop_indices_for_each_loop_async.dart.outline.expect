library test;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

class Foo extends core::Object {
  field core::int bar;
  default constructor •() → void
    ;
}
class Bar<T extends asy::Stream<core::String>> extends core::Object {
  default constructor •() → void
    ;
  method foo(self::Bar::T t) → dynamic
    ;
}
class Baz<T extends core::Object, E extends asy::Stream<self::Baz::T>, S extends self::Baz::E> extends core::Object {
  default constructor •() → void
    ;
  method foo(self::Baz::S t) → dynamic
    ;
}
abstract class MyStream<T extends core::Object> extends asy::Stream<self::MyStream::T> {
  static factory •<T extends core::Object>() → self::MyStream<self::MyStream::•::T>
    ;
}
static method test() → dynamic
  ;
static method main() → dynamic
  ;
