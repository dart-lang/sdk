library test;
//
// Problems in library:
//
// pkg/front_end/testcases/inference/infer_assign_to_property_null_aware.dart:22:5: Error: Field 'member' should be initialized because its type 'B' doesn't allow null.
//  - 'B' is from 'pkg/front_end/testcases/inference/infer_assign_to_property_null_aware.dart'.
//   B member;
//     ^^^^^^
//
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B extends self::A {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
  operator +(self::C v) → self::B
    return throw "";
  operator -(core::int i) → self::B
    return throw "";
  operator *(self::B v) → self::B
    return throw "";
  operator &(self::A v) → self::C
    return throw "";
}
class C extends self::B {
  synthetic constructor •() → self::C
    : super self::B::•()
    ;
}
class Test extends core::Object {
  field self::B member = null;
  synthetic constructor •() → self::Test
    : super core::Object::•()
    ;
  static method test(self::Test? t) → void {
    let final self::Test? #t1 = t in #t1 == null ?{self::B?} null : #t1{self::Test}.{self::Test::member} = self::f<self::B>();
    let final self::Test? #t2 = t in #t2 == null ?{self::B?} null : #t2{self::Test}.{self::Test::member}{self::B} == null ?{self::B?} #t2{self::Test}.{self::Test::member} = self::f<self::B>() : null;
    let final self::Test? #t3 = t in #t3 == null ?{self::B?} null : #t3{self::Test}.{self::Test::member} = #t3{self::Test}.{self::Test::member}{self::B}.{self::B::+}(self::f<self::C>()){(self::C) → self::B};
    let final self::Test? #t4 = t in #t4 == null ?{self::B?} null : #t4{self::Test}.{self::Test::member} = #t4{self::Test}.{self::Test::member}{self::B}.{self::B::*}(self::f<self::B>()){(self::B) → self::B};
    let final self::Test? #t5 = t in #t5 == null ?{self::C?} null : #t5{self::Test}.{self::Test::member} = #t5{self::Test}.{self::Test::member}{self::B}.{self::B::&}(self::f<self::A>()){(self::A) → self::C};
    let final self::Test? #t6 = t in #t6 == null ?{self::B?} null : #t6{self::Test}.{self::Test::member} = #t6{self::Test}.{self::Test::member}{self::B}.{self::B::-}(1){(core::int) → self::B};
    let final self::Test? #t7 = t in #t7 == null ?{self::B?} null : #t7{self::Test}.{self::Test::member} = #t7{self::Test}.{self::Test::member}{self::B}.{self::B::-}(1){(core::int) → self::B};
    self::B? v1 = let final self::Test? #t8 = t in #t8 == null ?{self::B?} null : #t8{self::Test}.{self::Test::member} = self::f<self::B>();
    self::B? v2 = let final self::Test? #t9 = t in #t9 == null ?{self::B?} null : let final self::B #t10 = #t9{self::Test}.{self::Test::member}{self::B} in #t10 == null ?{self::B} #t9{self::Test}.{self::Test::member} = self::f<self::B>() : #t10;
    self::B? v3 = let final self::Test? #t11 = t in #t11 == null ?{self::B?} null : #t11{self::Test}.{self::Test::member} = #t11{self::Test}.{self::Test::member}{self::B}.{self::B::+}(self::f<self::C>()){(self::C) → self::B};
    self::B? v4 = let final self::Test? #t12 = t in #t12 == null ?{self::B?} null : #t12{self::Test}.{self::Test::member} = #t12{self::Test}.{self::Test::member}{self::B}.{self::B::*}(self::f<self::B>()){(self::B) → self::B};
    self::C? v5 = let final self::Test? #t13 = t in #t13 == null ?{self::C?} null : #t13{self::Test}.{self::Test::member} = #t13{self::Test}.{self::Test::member}{self::B}.{self::B::&}(self::f<self::A>()){(self::A) → self::C};
    self::B? v6 = let final self::Test? #t14 = t in #t14 == null ?{self::B?} null : #t14{self::Test}.{self::Test::member} = #t14{self::Test}.{self::Test::member}{self::B}.{self::B::-}(1){(core::int) → self::B};
    self::B? v7 = let final self::Test? #t15 = t in #t15 == null ?{self::B?} null : let final self::B #t16 = #t15{self::Test}.{self::Test::member}{self::B} in let final void #t17 = #t15{self::Test}.{self::Test::member} = #t16.{self::B::-}(1){(core::int) → self::B} in #t16;
  }
}
static method f<T extends core::Object? = dynamic>() → self::f::T%
  return throw "";
static method main() → dynamic {}
