library test;
import self as self;
import "dart:core" as core;

abstract class I<E extends core::Object = dynamic> extends core::Object {
  synthetic constructor •() → self::I<self::I::E>
    : super core::Object::•()
    ;
  abstract method m(dynamic a, (dynamic, self::I::E) → core::String f) → core::String;
}
abstract class A<E extends core::Object = dynamic> extends core::Object implements self::I<self::A::E> {
  const constructor •() → self::A<self::A::E>
    : super core::Object::•()
    ;
  abstract method m(dynamic a, (dynamic, self::A::E) → core::String f) → core::String;
}
abstract class M extends core::Object {
  final field core::int y = 0;
  synthetic constructor •() → self::M
    : super core::Object::•()
    ;
}
class B<E extends core::Object = dynamic> extends self::A<self::B::E> implements self::M {
  const constructor •() → self::B<self::B::E>
    : super self::A::•()
    ;
  get y() → core::int
    return 0;
  method m(dynamic a, (dynamic, self::B::E) → dynamic f) → dynamic {}
}
static method foo() → dynamic {
  core::int y = new self::B::•<dynamic>().m(null, null);
  core::String z = new self::B::•<dynamic>().m(null, null);
}
static method main() → dynamic {}
