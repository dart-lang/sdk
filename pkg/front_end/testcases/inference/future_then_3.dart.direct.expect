library test;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

class MyFuture<T extends core::Object> extends core::Object implements asy::Future<self::MyFuture::T> {
  constructor •() → void
    : super core::Object::•() {}
  constructor value(self::MyFuture::T x) → void
    : super core::Object::•() {}
  abstract method noSuchMethod(dynamic invocation) → dynamic;
  method then<S extends core::Object>((self::MyFuture::T) → asy::FutureOr<self::MyFuture::then::S> f, {core::Function onError = null}) → self::MyFuture<self::MyFuture::then::S>
    return null;
}
static method test() → void {
  self::MyFuture<dynamic> f;
  self::MyFuture<core::int> t1 = f.then((dynamic _) → dynamic async => await asy::Future::value<core::int>(3));
  self::MyFuture<core::int> t2 = f.then((dynamic _) → dynamic async {
    return await asy::Future::value<core::int>(3);
  });
  self::MyFuture<core::int> t3 = f.then((dynamic _) → dynamic async => 3);
  self::MyFuture<core::int> t4 = f.then((dynamic _) → dynamic async {
    return 3;
  });
  self::MyFuture<core::int> t5 = f.then((dynamic _) → dynamic => asy::Future::value<core::int>(3));
  self::MyFuture<core::int> t6 = f.then((dynamic _) → dynamic {
    return asy::Future::value<core::int>(3);
  });
  self::MyFuture<core::int> t7 = f.then((dynamic _) → dynamic async => asy::Future::value<core::int>(3));
  self::MyFuture<core::int> t8 = f.then((dynamic _) → dynamic async {
    return asy::Future::value<core::int>(3);
  });
}
static method main() → dynamic {}
