library test;
import self as self;
import "dart:core" as core;

class C<T extends core::num> extends core::Object /*hasConstConstructor*/  {
  final field self::C::T x;
  const constructor •(self::C::T x) → self::C<self::C::T>
    : self::C::x = x, super core::Object::•()
    ;
}
class D<T extends core::num> extends core::Object /*hasConstConstructor*/  {
  const constructor •() → self::D<self::D::T>
    : super core::Object::•()
    ;
}
static method main() → void {
  const self::C<core::int> c = #C2;
  self::C<core::int> c2 = #C2;
  const self::D<core::int> d = #C3;
}

constants  {
  #C1 = 0
  #C2 = self::C<core::int> {x:#C1}
  #C3 = self::D<core::int> {}
}


Constructor coverage from constants:
org-dartlang-testcase:///constructors_infer_from_arguments_const_with_upper_bound.dart:
- C. (from org-dartlang-testcase:///constructors_infer_from_arguments_const_with_upper_bound.dart:9:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
- D. (from org-dartlang-testcase:///constructors_infer_from_arguments_const_with_upper_bound.dart:13:9)
