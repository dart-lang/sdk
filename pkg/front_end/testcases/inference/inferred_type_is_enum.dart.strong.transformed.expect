library test;
import self as self;
import "dart:core" as core;

class E extends core::Object /*isEnum*/  {
  final field core::int* index;
  final field core::String* _name;
  static const field core::List<self::E*>* values = #C4;
  static const field self::E* v1 = #C3;
  const constructor •(core::int* index, core::String* _name) → self::E*
    : self::E::index = index, self::E::_name = _name, super core::Object::•()
    ;
  method toString() → core::String*
    return this.{=self::E::_name};
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static final field self::E* x = #C3;
static method main() → dynamic {
  self::x;
}

constants  {
  #C1 = 0
  #C2 = "E.v1"
  #C3 = self::E {index:#C1, _name:#C2}
  #C4 = <self::E*>[#C3]
}
