library test;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

typedef IntToInt = (core::int) → core::int;
static method a() → (core::int) → core::int {
  return (core::int x) → core::int => x;
}
static method b() → asy::Future<(core::int) → core::int> async {
  return (dynamic x) → dynamic => x;
}
static method c() → core::Iterable<(core::int) → core::int> sync* {
  yield(core::int x) → core::int => x;
}
static method d() → core::Iterable<(core::int) → core::int> sync* {
  yield*<(core::int) → core::int>[(core::int x) → core::int => x];
}
static method e() → asy::Stream<(core::int) → core::int> async* {
  yield(core::int x) → core::int => x;
}
static method f() → asy::Stream<(core::int) → core::int> async* {
  yield* asy::Stream::fromIterable<(core::int) → core::int>(<(core::int) → core::int>[(core::int x) → core::int => x]);
}
static method main() → dynamic {}
