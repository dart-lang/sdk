library test;
import self as self;
import "dart:async" as asy;
import "dart:core" as core;

import "dart:async";

static method foo(() → asy::Stream<core::int> values) → void {}
static method main() → void {
  self::foo(() → asy::Stream<core::int> /* originally async* */ {
    asy::_AsyncStarStreamController<core::int> :controller;
    dynamic :controller_stream;
    dynamic :async_stack_trace;
    dynamic :async_op_then;
    dynamic :async_op_error;
    dynamic :await_jump_var = 0;
    dynamic :await_ctx_var;
    dynamic :saved_try_context_var0;
    dynamic :saved_try_context_var1;
    function :async_op([dynamic :result, dynamic :exception, dynamic :stack_trace]) → dynamic yielding 
      try
        try {
          #L1:
          {
            if(:controller.{asy::_AsyncStarStreamController::add}(0))
              return null;
            else
              [yield] null;
            if(:controller.{asy::_AsyncStarStreamController::add}(1))
              return null;
            else
              [yield] null;
          }
          return;
        }
        on dynamic catch(dynamic :exception, dynamic :stack_trace) {
          :controller.{asy::_AsyncStarStreamController::addError}(:exception, :stack_trace);
        }
      finally {
        :controller.{asy::_AsyncStarStreamController::close}();
      }
    :async_stack_trace = asy::_asyncStackTraceHelper(:async_op);
    :async_op_then = asy::_asyncThenWrapperHelper(:async_op);
    :async_op_error = asy::_asyncErrorWrapperHelper(:async_op);
    :controller = new asy::_AsyncStarStreamController::•<core::int>(:async_op);
    :controller_stream = :controller.{asy::_AsyncStarStreamController::stream};
    return :controller_stream;
  });
}
