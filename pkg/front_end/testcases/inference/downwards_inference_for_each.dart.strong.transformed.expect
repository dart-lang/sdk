library test /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

import "dart:async";

abstract class MyStream<T extends core::Object? = dynamic> extends asy::Stream<self::MyStream::T%> {
  static factory •<T extends core::Object? = dynamic>() → self::MyStream<self::MyStream::•::T%>
    return throw "";
}
static method F<T extends core::Object? = dynamic>() → self::F::T%
  return throw "";
static method f() → asy::Future<dynamic> async /* futureValueType= dynamic */ {
  dynamic d;
  core::Object o;
  {
    synthesized core::Iterator<core::Object?> :sync-for-iterator = self::F<core::Iterable<core::Object?>>().{core::Iterable::iterator}{core::Iterator<core::Object?>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      core::Object? x = :sync-for-iterator.{core::Iterator::current}{core::Object?};
      {}
    }
  }
  {
    synthesized core::Iterator<dynamic> :sync-for-iterator = self::F<core::Iterable<dynamic>>().{core::Iterable::iterator}{core::Iterator<dynamic>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      dynamic x = :sync-for-iterator.{core::Iterator::current}{dynamic};
      {}
    }
  }
  {
    synthesized core::Iterator<core::Object> :sync-for-iterator = self::F<core::Iterable<core::Object>>().{core::Iterable::iterator}{core::Iterator<core::Object>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      core::Object x = :sync-for-iterator.{core::Iterator::current}{core::Object};
      {}
    }
  }
  {
    synthesized core::Iterator<dynamic> :sync-for-iterator = self::F<core::Iterable<dynamic>>().{core::Iterable::iterator}{core::Iterator<dynamic>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      final dynamic #t1 = :sync-for-iterator.{core::Iterator::current}{dynamic};
      {
        d = #t1;
      }
    }
  }
  {
    synthesized core::Iterator<core::Object> :sync-for-iterator = self::F<core::Iterable<core::Object>>().{core::Iterable::iterator}{core::Iterator<core::Object>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      final core::Object #t2 = :sync-for-iterator.{core::Iterator::current}{core::Object};
      {
        o = #t2;
      }
    }
  }
  {
    synthesized asy::Stream<core::Object?> :stream = self::F<asy::Stream<core::Object?>>();
    synthesized asy::_StreamIterator<core::Object?>? :for-iterator = new asy::_StreamIterator::•<core::Object?>(:stream);
    try
      while (let dynamic #t3 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        core::Object? x = :for-iterator.{asy::_StreamIterator::current}{core::Object?};
        {}
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::Object?>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
  {
    synthesized asy::Stream<dynamic> :stream = self::F<asy::Stream<dynamic>>();
    synthesized asy::_StreamIterator<dynamic>? :for-iterator = new asy::_StreamIterator::•<dynamic>(:stream);
    try
      while (let dynamic #t4 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        dynamic x = :for-iterator.{asy::_StreamIterator::current}{dynamic};
        {}
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<dynamic>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
  {
    synthesized asy::Stream<core::Object> :stream = self::F<asy::Stream<core::Object>>();
    synthesized asy::_StreamIterator<core::Object>? :for-iterator = new asy::_StreamIterator::•<core::Object>(:stream);
    try
      while (let dynamic #t5 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        core::Object x = :for-iterator.{asy::_StreamIterator::current}{core::Object};
        {}
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::Object>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
  {
    synthesized asy::Stream<dynamic> :stream = self::F<asy::Stream<dynamic>>();
    synthesized asy::_StreamIterator<dynamic>? :for-iterator = new asy::_StreamIterator::•<dynamic>(:stream);
    try
      while (let dynamic #t6 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        final dynamic #t7 = :for-iterator.{asy::_StreamIterator::current}{dynamic};
        {
          d = #t7;
        }
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<dynamic>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
  {
    synthesized asy::Stream<core::Object> :stream = self::F<asy::Stream<core::Object>>();
    synthesized asy::_StreamIterator<core::Object>? :for-iterator = new asy::_StreamIterator::•<core::Object>(:stream);
    try
      while (let dynamic #t8 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        final core::Object #t9 = :for-iterator.{asy::_StreamIterator::current}{core::Object};
        {
          o = #t9;
        }
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::Object>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
}
static method main() → asy::Future<dynamic> async /* futureValueType= dynamic */ {
  {
    synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal3<core::int>(1, 2, 3).{core::Iterable::iterator}{core::Iterator<core::int>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      core::int x = :sync-for-iterator.{core::Iterator::current}{core::int};
      {}
    }
  }
  {
    synthesized core::Iterator<core::num> :sync-for-iterator = core::_GrowableList::_literal3<core::num>(1, 2, 3).{core::Iterable::iterator}{core::Iterator<core::num>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      core::num x = :sync-for-iterator.{core::Iterator::current}{core::num};
      {}
    }
  }
  {
    synthesized core::Iterator<core::int> :sync-for-iterator = core::_GrowableList::_literal3<core::int>(1, 2, 3).{core::Iterable::iterator}{core::Iterator<core::int>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      core::int x = :sync-for-iterator.{core::Iterator::current}{core::int};
      {}
    }
  }
  {
    synthesized self::MyStream<core::int> :stream = self::MyStream::•<core::int>();
    synthesized asy::_StreamIterator<core::int>? :for-iterator = new asy::_StreamIterator::•<core::int>(:stream);
    try
      while (let dynamic #t10 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        core::int x = :for-iterator.{asy::_StreamIterator::current}{core::int};
        {}
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::int>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
  {
    synthesized self::MyStream<core::int> :stream = self::MyStream::•<core::int>();
    synthesized asy::_StreamIterator<core::int>? :for-iterator = new asy::_StreamIterator::•<core::int>(:stream);
    try
      while (let dynamic #t11 = asy::_asyncStarMoveNextHelper(:stream) in await :for-iterator.{asy::_StreamIterator::moveNext}(){() → asy::Future<core::bool>}) {
        core::int x = :for-iterator.{asy::_StreamIterator::current}{core::int};
        {}
      }
    finally
      if(!(:for-iterator.{asy::_StreamIterator::_subscription}{asy::StreamSubscription<core::int>?} == null))
        await :for-iterator.{asy::_StreamIterator::cancel}(){() → asy::Future<dynamic>};
  }
}
