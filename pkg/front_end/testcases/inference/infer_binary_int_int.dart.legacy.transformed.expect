library test;
import self as self;

static field dynamic a_equal = 1.==(2);
static field dynamic a_notEqual = !1.==(2);
static field dynamic a_bitXor = 1.^(2);
static field dynamic a_bitAnd = 1.&(2);
static field dynamic a_bitOr = 1.|(2);
static field dynamic a_bitShiftRight = 1.>>(2);
static field dynamic a_bitShiftLeft = 1.<<(2);
static field dynamic a_add = 1.+(2);
static field dynamic a_subtract = 1.-(2);
static field dynamic a_multiply = 1.*(2);
static field dynamic a_divide = 1./(2);
static field dynamic a_floorDivide = 1.~/(2);
static field dynamic a_greater = 1.>(2);
static field dynamic a_less = 1.<(2);
static field dynamic a_greaterEqual = 1.>=(2);
static field dynamic a_lessEqual = 1.<=(2);
static field dynamic a_modulo = 1.%(2);
static method main() â†’ dynamic {
  self::a_equal;
  self::a_notEqual;
  self::a_bitXor;
  self::a_bitAnd;
  self::a_bitOr;
  self::a_bitShiftRight;
  self::a_bitShiftLeft;
  self::a_add;
  self::a_subtract;
  self::a_multiply;
  self::a_divide;
  self::a_floorDivide;
  self::a_greater;
  self::a_less;
  self::a_greaterEqual;
  self::a_lessEqual;
  self::a_modulo;
}
