library test;
import self as self;
import "dart:core" as core;

typedef F<@#C1 unrelated T extends core::Object? = dynamic> = () → void;
class Foo extends core::Object /*hasConstConstructor*/  {
  const constructor •(core::List<core::String> l) → self::Foo
    : super core::Object::•()
    ;
}
class C<@#C1 T extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::C<self::C::T%>
    : super core::Object::•()
    ;
}
class D extends core::Object {
  synthetic constructor •() → self::D
    : super core::Object::•()
    ;
  method m<@#C1 T extends core::Object? = dynamic>() → void {}
}
static method f<@#C1 T extends core::Object? = dynamic>() → void {}
static method main() → dynamic {}

constants  {
  #C1 = self::Foo {}
}


Constructor coverage from constants:
org-dartlang-testcase:///downwards_inference_annotations_type_variable.dart:
- Foo. (from org-dartlang-testcase:///downwards_inference_annotations_type_variable.dart:8:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
