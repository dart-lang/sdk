library test;
import self as self;
import "dart:core" as core;

class C<T extends core::Object? = dynamic> extends core::Object /*hasConstConstructor*/  {
  final field self::C::T% t;
  const constructor •(self::C::T% t) → self::C<self::C::T%>
    : self::C::t = t, super core::Object::•()
    ;
}
static method main() → dynamic {
  self::C<core::int> x = #C2;
}

constants  {
  #C1 = 42
  #C2 = self::C<core::int> {t:#C1}
}


Constructor coverage from constants:
org-dartlang-testcase:///constructors_infer_from_arguments_const.dart:
- C. (from org-dartlang-testcase:///constructors_infer_from_arguments_const.dart:9:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
