library test;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

class D<T extends core::Object> extends core::Object {
  default constructor •() → void
    : super core::Object::•()
    ;
}
class E<T extends core::Object> extends self::D<self::E::T> {
  default constructor •() → void
    : super self::D::•()
    ;
}
class B<T extends core::Object> extends core::Object {
  generic-covariant-impl generic-covariant-interface field self::D<self::B::T> x = null;
  default constructor •() → void
    : super core::Object::•()
    ;
}
class C<U extends core::Object> extends self::B<asy::Future<self::C::U>> {
  default constructor •() → void
    : super self::B::•()
    ;
  get x() → self::E<asy::Future<self::C::U>>
    return null;
  set x(generic-covariant-impl core::Object x) → void {}
  method g() → void {
    super.{self::B::x} = self::f<self::D<asy::Future<self::C::U>>>();
  }
}
static method f<T extends core::Object>() → self::f::T
  return null;
static method main() → dynamic {}
