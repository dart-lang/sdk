library test;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  field core::int x = null;
  default constructor •() → void
    : super core::Object::•()
    ;
  operator +(dynamic other) → self::B
    return null;
}
class B extends self::A {
  constructor •(dynamic ignore) → void
    : super self::A::•()
    ;
}
static field self::A a = new self::A::•();
static field self::B b = new self::B::•(throw new core::NoSuchMethodError::withInvocation(null, new core::_InvocationMirror::_withType(#x, 33, const <dynamic>[], const <dynamic>[], core::Map::unmodifiable<dynamic, dynamic>(const <dynamic, dynamic>{}))));
static field core::List<dynamic> c1 = <dynamic>[throw new core::NoSuchMethodError::withInvocation(null, new core::_InvocationMirror::_withType(#x, 33, const <dynamic>[], const <dynamic>[], core::Map::unmodifiable<dynamic, dynamic>(const <dynamic, dynamic>{})))];
static field core::List<dynamic> c2 = const <dynamic>[];
static field core::Map<dynamic, dynamic> d = <dynamic, dynamic>{"a": "b"};
static field self::A e = let final self::A #t1 = new self::A::•() in let final dynamic #t2 = #t1.{self::A::x} = 3 in #t1;
static field core::int f = 2.{core::num::+}(3);
static field core::int g = 3.{core::int::unary-}();
static field self::B h = new self::A::•().{self::A::+}(3);
static field dynamic i = new self::A::•().unary-();
static field self::B j = null as self::B;
static method test1() → dynamic {
  self::a = "hi" as{TypeError} self::A;
  self::a = new self::B::•(3);
  self::b = "hi" as{TypeError} self::B;
  self::b = new self::B::•(3);
  self::c1 = <dynamic>[];
  self::c1 = <dynamic, dynamic>{} as{TypeError} core::List<dynamic>;
  self::c2 = <dynamic>[];
  self::c2 = <dynamic, dynamic>{} as{TypeError} core::List<dynamic>;
  self::d = <dynamic, dynamic>{};
  self::d = 3 as{TypeError} core::Map<dynamic, dynamic>;
  self::e = new self::A::•();
  self::e = <dynamic, dynamic>{} as{TypeError} self::A;
  self::f = 3;
  self::f = false as{TypeError} core::int;
  self::g = 1;
  self::g = false as{TypeError} core::int;
  self::h = false as{TypeError} self::B;
  self::h = new self::B::•("b");
  self::i = false;
  self::j = new self::B::•("b");
  self::j = false as{TypeError} self::B;
  self::j = <dynamic>[] as{TypeError} self::B;
}
static method main() → dynamic {}
