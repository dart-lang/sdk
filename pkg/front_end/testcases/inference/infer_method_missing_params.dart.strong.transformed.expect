library test;
//
// Problems in library:
//
// pkg/front_end/testcases/inference/infer_method_missing_params.dart:24:3: Error: Can't infer types for 'f' as the overridden members don't have a combined signature.
// Try adding explicit types.
//   f(x, y);
//   ^
// pkg/front_end/testcases/inference/infer_method_missing_params.dart:10:7: Context: This is one of the overridden members.
//   int f(int x, int y);
//       ^
// pkg/front_end/testcases/inference/infer_method_missing_params.dart:17:7: Context: This is one of the overridden members.
//   int f(int x);
//       ^
//
// pkg/front_end/testcases/inference/infer_method_missing_params.dart:27:3: Error: Can't infer types for 'i' as the overridden members don't have a combined signature.
// Try adding explicit types.
//   i(x, {y, z});
//   ^
// pkg/front_end/testcases/inference/infer_method_missing_params.dart:13:7: Context: This is one of the overridden members.
//   int i(int x, {int y});
//       ^
// pkg/front_end/testcases/inference/infer_method_missing_params.dart:20:7: Context: This is one of the overridden members.
//   int i(int x, {int z});
//       ^
//
// pkg/front_end/testcases/inference/infer_method_missing_params.dart:24:3: Error: The method 'C.f' has more required arguments than those of overridden method 'B.f'.
//   f(x, y);
//   ^
// pkg/front_end/testcases/inference/infer_method_missing_params.dart:17:7: Context: This is the overridden method ('f').
//   int f(int x);
//       ^
//
import self as self;
import "dart:core" as core;

abstract class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
  abstract method f(core::int x, core::int y) → core::int;
  abstract method g(core::int x, [core::int y = #C1]) → core::int;
  abstract method h(core::int x, {core::int y = #C1}) → core::int;
  abstract method i(core::int x, {core::int y = #C1}) → core::int;
}
abstract class B extends core::Object {
  synthetic constructor •() → self::B
    : super core::Object::•()
    ;
  abstract method f(core::int x) → core::int;
  abstract method g(core::int x) → core::int;
  abstract method h(core::int x) → core::int;
  abstract method i(core::int x, {core::int z = #C1}) → core::int;
}
abstract class C extends core::Object implements self::A, self::B {
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
  abstract erroneous method f(invalid-type x, invalid-type y) → invalid-type;
  abstract method g(core::int x, [core::int y = #C1]) → core::int;
  abstract method h(core::int x, {core::int y = #C1}) → core::int;
  abstract method i(invalid-type x, {invalid-type y = #C1, invalid-type z = #C1}) → invalid-type;
}
static method main() → dynamic {}

constants  {
  #C1 = null
}
