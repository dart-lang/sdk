library test;
import self as self;
import "dart:core" as core;
import "infer_from_variables_in_cycle_libs_when_flag_is_on_a.dart" as inf;

import "org-dartlang-testcase:///infer_from_variables_in_cycle_libs_when_flag_is_on_a.dart";

static field core::int* y = inf::x;
static method test1() → dynamic {
  core::int* t = 3;
  t = inf::x;
  t = self::y;
}
static method main() → dynamic {}

library;
import self as inf;
import "dart:core" as core;

import "org-dartlang-testcase:///infer_from_variables_in_cycle_libs_when_flag_is_on2.dart";

static field core::int* x = 2;
static method main() → dynamic {}

library test;
import self as self2;
import "dart:core" as core;
import "infer_from_variables_in_cycle_libs_when_flag_is_on2_a.dart" as inf2;

import "org-dartlang-testcase:///infer_from_variables_in_cycle_libs_when_flag_is_on2_a.dart";

class B extends core::Object {
  static field core::int* y = inf2::A::x;
  synthetic constructor •() → self2::B*
    : super core::Object::•()
    ;
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method test1() → dynamic {
  core::int* t = 3;
  t = inf2::A::x;
  t = self2::B::y;
}
static method main() → dynamic {}

library;
import self as inf2;
import "dart:core" as core;

import "org-dartlang-testcase:///infer_from_variables_in_cycle_libs_when_flag_is_on2.dart";

class A extends core::Object {
  static field core::int* x = 2;
  synthetic constructor •() → inf2::A*
    : super core::Object::•()
    ;
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method main() → dynamic {}
