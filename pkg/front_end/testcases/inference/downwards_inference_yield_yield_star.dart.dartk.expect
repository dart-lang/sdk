library test;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

abstract class MyStream<T extends core::Object> extends asy::Stream<self::MyStream::T> {
  static factory •<T extends core::Object>() → dynamic
    return null;
}
static method foo() → asy::Stream<core::List<core::int>> {
  yield<dynamic>[];
  yield throw new core::NoSuchMethodError::•(null, #MyStream, <dynamic>[], <dynamic, dynamic>{}, null);
  yield*<dynamic>[];
  yield* throw new core::NoSuchMethodError::•(null, #MyStream, <dynamic>[], <dynamic, dynamic>{}, null);
}
static method bar() → core::Iterable<core::Map<core::int, core::int>> {
  yield<dynamic, dynamic>{};
  yield throw new core::NoSuchMethodError::•(null, #List, <dynamic>[], <dynamic, dynamic>{}, null);
  yield*<dynamic, dynamic>{};
  yield* throw new core::NoSuchMethodError::•(null, #List, <dynamic>[], <dynamic, dynamic>{}, null);
}
