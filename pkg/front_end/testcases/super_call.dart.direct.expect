library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  default constructor •() → void
    : super core::Object::•()
    ;
  method call(core::int x) → core::int
    return x.*(2);
}
class B extends self::A {
  default constructor •() → void
    : super self::A::•()
    ;
  method call(core::int x) → core::int
    return x.*(3);
  method call_super() → core::int {
    return invalid-expression "pkg/front_end/testcases/super_call.dart:14:12: Error: Can't use 'super' as an expression.\nTo delegate a constructor to a super constructor, put the super call as an initializer.\n    return super(5);\n           ^";
  }
}
static method main() → dynamic {
  assert(new self::B::•().call_super().==(10));
}
