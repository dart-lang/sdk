library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/sealed_class/extends_implements_with/main.dart:7:22: Error: The class 'Sealed' can't be extended, implemented, or mixed in outside of its library because it's a sealed class.
// class Class1 extends Sealed {}
//                      ^
//
// pkg/front_end/testcases/sealed_class/extends_implements_with/main.dart:9:25: Error: The class 'Sealed' can't be extended, implemented, or mixed in outside of its library because it's a sealed class.
// class Class2 implements Sealed {}
//                         ^
//
// pkg/front_end/testcases/sealed_class/extends_implements_with/main.dart:11:19: Error: The class 'Sealed' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class Class3 with Sealed {}
//                   ^
//
// pkg/front_end/testcases/sealed_class/extends_implements_with/main.dart:11:19: Error: The class 'Sealed' can't be extended, implemented, or mixed in outside of its library because it's a sealed class.
// class Class3 with Sealed {}
//                   ^
//
import self as self;
import "main_lib.dart" as mai;
import "dart:core" as core;

import "org-dartlang-testcase:///main_lib.dart";

class Class1 extends mai::Sealed {
  synthetic constructor •() → self::Class1
    : super mai::Sealed::•()
    ;
}
class Class2 extends core::Object implements mai::Sealed {
  synthetic constructor •() → self::Class2
    : super core::Object::•()
    ;
}
abstract sealed class _Class3&Object&Sealed = core::Object with mai::Sealed /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_Class3&Object&Sealed
    : super core::Object::•()
    ;
}
class Class3 extends self::_Class3&Object&Sealed {
  synthetic constructor •() → self::Class3
    : super self::_Class3&Object&Sealed::•()
    ;
}

library /*isNonNullableByDefault*/;
import self as mai;
import "dart:core" as core;

abstract sealed class Sealed extends core::Object {
  synthetic constructor •() → mai::Sealed
    : super core::Object::•()
    ;
}
