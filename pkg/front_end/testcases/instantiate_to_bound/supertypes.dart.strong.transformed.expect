library;
import self as self;
import "dart:core" as core;
import "package:expect/expect.dart" as exp;

import "package:expect/expect.dart";

class B extends core::Object {
  synthetic constructor •() → self::B*
    : super core::Object::•()
    ;
}
class X<T extends self::B* = self::B*> extends core::Object {
  synthetic constructor •() → self::X<self::X::T*>*
    : super core::Object::•()
    ;
}
class Y extends self::X<self::B*> {
  synthetic constructor •() → self::Y*
    : super self::X::•()
    ;
}
static method main() → void {
  exp::Expect::isTrue(new self::Y::•() is self::X<self::B*>*);
}
