library;
import self as self;
import "dart:core" as core;

typedef Foo<S extends core::Object* = dynamic> = <T extends core::Object* = dynamic>(T*) →* S*;
class A extends core::Object {
  field <T extends core::Object* = dynamic>(T*) →* core::int* f = null;
  synthetic constructor •() → self::A*
    : super core::Object::•()
    ;
  method test() → void {
    let final core::String* #t1 = "hello" in this.{self::A::f}.call<core::String*>(#t1);
  }
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method foo<T extends core::Object* = dynamic>(self::foo::T* x) → core::int*
  return 3;
static method bar() → <T extends core::Object* = dynamic>(T*) →* core::int*
  return #C1;
static method test1() → void {
  self::bar().call<core::String*>("hello");
}
static method main() → dynamic {}

constants  {
  #C1 = tearoff self::foo
}
