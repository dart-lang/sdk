library;
//
// Problems in library:
//
// pkg/front_end/testcases/regress/enum_multiple_empty_elements_then_good_ones_etc.dart:8:8: Error: Expected an identifier, but got ','.
// Try inserting an identifier before ','.
//   /*b*/,
//        ^
//
// pkg/front_end/testcases/regress/enum_multiple_empty_elements_then_good_ones_etc.dart:9:8: Error: Expected an identifier, but got ','.
// Try inserting an identifier before ','.
//   /*c*/,
//        ^
//
// pkg/front_end/testcases/regress/enum_multiple_empty_elements_then_good_ones_etc.dart:10:8: Error: Expected an identifier, but got ','.
// Try inserting an identifier before ','.
//   /*d*/,
//        ^
//
import self as self;
import "dart:core" as core;

class Foo extends core::_Enum /*isEnum*/  {
  enum-element static const field self::Foo a = #C3;
  enum-element static const field self::Foo e = #C6;
  enum-element static const field self::Foo f = #C9;
  static const field core::List<self::Foo> values = #C10;
  const synthetic constructor •(core::int #index, core::String #name) → self::Foo
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "Foo.${this.{core::_Enum::_name}{core::String}}";
}

constants  {
  #C1 = 0
  #C2 = "a"
  #C3 = self::Foo {index:#C1, _name:#C2}
  #C4 = 1
  #C5 = "e"
  #C6 = self::Foo {index:#C4, _name:#C5}
  #C7 = 2
  #C8 = "f"
  #C9 = self::Foo {index:#C7, _name:#C8}
  #C10 = <self::Foo>[#C3, #C6, #C9]
}


Constructor coverage from constants:
org-dartlang-testcase:///enum_multiple_empty_elements_then_good_ones_etc.dart:
- Foo. (from org-dartlang-testcase:///enum_multiple_empty_elements_then_good_ones_etc.dart:5:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
