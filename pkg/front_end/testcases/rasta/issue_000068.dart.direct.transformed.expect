library;
import self as self;
import "dart:core" as core;
import "package:expect/expect.dart" as exp;

class G<T extends core::Object = dynamic> extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class A extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class B extends self::A {
  synthetic constructor •() → void
    : super self::A::•()
    ;
}
class C extends self::B {
  synthetic constructor •() → void
    : super self::B::•()
    ;
}
static method main() → dynamic {
  exp::Expect::isFalse(new self::G::•<self::B>() is self::G<self::C>);
  exp::Expect::isFalse(new self::G::•<self::A>() is self::G<self::B>);
  exp::Expect::isFalse(new self::G::•<self::A>() is self::G<self::C>);
  exp::Expect::isFalse(new self::G::•<core::Object>() is self::G<self::B>);
  exp::Expect::isFalse(new self::G::•<core::int>() is self::G<self::B>);
  exp::Expect::isFalse(new self::G::•<core::int>() is self::G<core::double>);
  exp::Expect::isFalse(new self::G::•<core::int>() is self::G<core::String>);
}
