library;
import self as self;
import "dart:core" as core;

typedef Func = () → void;
class C<T extends core::Object> extends core::Object {
  constructor •() → void
    : super core::Object::•()
    ;
  method test() → dynamic {
    self::C<dynamic>;
    self::use(self::C<dynamic>);
    dynamic;
    self::use(dynamic);
    self::C::T;
    self::use(self::C::T);
    () → void;
    self::use(() → void);
    self::C<dynamic>.call();
    self::use(self::C<dynamic>.call());
    core::Type.call();
    self::use(core::Type.call());
    self::C::T.call();
    self::use(self::C::T.call());
    () → void.call();
    self::use(() → void.call());
    let final dynamic #t1 = 42 in invalid-expression;
    self::use(let final dynamic #t2 = 42 in invalid-expression);
    let final dynamic #t3 = 42 in invalid-expression;
    self::use(let final dynamic #t4 = 42 in invalid-expression);
    let final dynamic #t5 = 42 in invalid-expression;
    self::use(let final dynamic #t6 = 42 in invalid-expression);
    let final dynamic #t7 = 42 in invalid-expression;
    self::use(let final dynamic #t8 = 42 in invalid-expression);
    let final dynamic #t9 = self::C<dynamic> in let final dynamic #t10 = #t9.+(1) in invalid-expression;
    self::use(let final dynamic #t11 = self::C<dynamic> in let final dynamic #t12 = #t11 in let final dynamic #t13 = let final dynamic #t14 = #t12.+(1) in invalid-expression in #t12);
    let final dynamic #t15 = dynamic in let final dynamic #t16 = #t15.+(1) in invalid-expression;
    self::use(let final dynamic #t17 = dynamic in let final dynamic #t18 = #t17 in let final dynamic #t19 = let final dynamic #t20 = #t18.+(1) in invalid-expression in #t18);
    let final dynamic #t21 = self::C::T in let final dynamic #t22 = #t21.+(1) in invalid-expression;
    self::use(let final dynamic #t23 = self::C::T in let final dynamic #t24 = #t23 in let final dynamic #t25 = let final dynamic #t26 = #t24.+(1) in invalid-expression in #t24);
    let final dynamic #t27 = () → void in let final dynamic #t28 = #t27.+(1) in invalid-expression;
    self::use(let final dynamic #t29 = () → void in let final dynamic #t30 = #t29 in let final dynamic #t31 = let final dynamic #t32 = #t30.+(1) in invalid-expression in #t30);
    let final dynamic #t33 = self::C<dynamic> in let final dynamic #t34 = #t33.+(1) in invalid-expression;
    self::use(let final dynamic #t35 = self::C<dynamic> in let final dynamic #t36 = #t35.+(1) in invalid-expression);
    let final dynamic #t37 = dynamic in let final dynamic #t38 = #t37.+(1) in invalid-expression;
    self::use(let final dynamic #t39 = dynamic in let final dynamic #t40 = #t39.+(1) in invalid-expression);
    let final dynamic #t41 = self::C::T in let final dynamic #t42 = #t41.+(1) in invalid-expression;
    self::use(let final dynamic #t43 = self::C::T in let final dynamic #t44 = #t43.+(1) in invalid-expression);
    let final dynamic #t45 = () → void in let final dynamic #t46 = #t45.+(1) in invalid-expression;
    self::use(let final dynamic #t47 = () → void in let final dynamic #t48 = #t47.+(1) in invalid-expression);
    let final dynamic #t49 = self::C<dynamic> in let final dynamic #t50 = #t49.-(1) in invalid-expression;
    self::use(let final dynamic #t51 = self::C<dynamic> in let final dynamic #t52 = #t51 in let final dynamic #t53 = let final dynamic #t54 = #t52.-(1) in invalid-expression in #t52);
    let final dynamic #t55 = dynamic in let final dynamic #t56 = #t55.-(1) in invalid-expression;
    self::use(let final dynamic #t57 = dynamic in let final dynamic #t58 = #t57 in let final dynamic #t59 = let final dynamic #t60 = #t58.-(1) in invalid-expression in #t58);
    let final dynamic #t61 = self::C::T in let final dynamic #t62 = #t61.-(1) in invalid-expression;
    self::use(let final dynamic #t63 = self::C::T in let final dynamic #t64 = #t63 in let final dynamic #t65 = let final dynamic #t66 = #t64.-(1) in invalid-expression in #t64);
    let final dynamic #t67 = () → void in let final dynamic #t68 = #t67.-(1) in invalid-expression;
    self::use(let final dynamic #t69 = () → void in let final dynamic #t70 = #t69 in let final dynamic #t71 = let final dynamic #t72 = #t70.-(1) in invalid-expression in #t70);
    let final dynamic #t73 = self::C<dynamic> in let final dynamic #t74 = #t73.-(1) in invalid-expression;
    self::use(let final dynamic #t75 = self::C<dynamic> in let final dynamic #t76 = #t75.-(1) in invalid-expression);
    let final dynamic #t77 = dynamic in let final dynamic #t78 = #t77.-(1) in invalid-expression;
    self::use(let final dynamic #t79 = dynamic in let final dynamic #t80 = #t79.-(1) in invalid-expression);
    let final dynamic #t81 = self::C::T in let final dynamic #t82 = #t81.-(1) in invalid-expression;
    self::use(let final dynamic #t83 = self::C::T in let final dynamic #t84 = #t83.-(1) in invalid-expression);
    let final dynamic #t85 = () → void in let final dynamic #t86 = #t85.-(1) in invalid-expression;
    self::use(let final dynamic #t87 = () → void in let final dynamic #t88 = #t87.-(1) in invalid-expression);
    self::C<dynamic>;
    self::use(self::C<dynamic>);
    dynamic;
    self::use(dynamic);
    let final dynamic #t89 = self::C::T in #t89.==(null) ? let final dynamic #t90 = 42 in invalid-expression : null;
    self::use(let final dynamic #t91 = self::C::T in let final dynamic #t92 = #t91 in #t92.==(null) ? let final dynamic #t93 = 42 in invalid-expression : #t92);
    () → void;
    self::use(() → void);
    let final dynamic #t94 = self::C<dynamic> in let final dynamic #t95 = #t94.+(42) in invalid-expression;
    self::use(let final dynamic #t96 = self::C<dynamic> in let final dynamic #t97 = #t96.+(42) in invalid-expression);
    let final dynamic #t98 = dynamic in let final dynamic #t99 = #t98.+(42) in invalid-expression;
    self::use(let final dynamic #t100 = dynamic in let final dynamic #t101 = #t100.+(42) in invalid-expression);
    let final dynamic #t102 = self::C::T in let final dynamic #t103 = #t102.+(42) in invalid-expression;
    self::use(let final dynamic #t104 = self::C::T in let final dynamic #t105 = #t104.+(42) in invalid-expression);
    let final dynamic #t106 = () → void in let final dynamic #t107 = #t106.+(42) in invalid-expression;
    self::use(let final dynamic #t108 = () → void in let final dynamic #t109 = #t108.+(42) in invalid-expression);
    let final dynamic #t110 = self::C<dynamic> in let final dynamic #t111 = #t110.-(42) in invalid-expression;
    self::use(let final dynamic #t112 = self::C<dynamic> in let final dynamic #t113 = #t112.-(42) in invalid-expression);
    let final dynamic #t114 = dynamic in let final dynamic #t115 = #t114.-(42) in invalid-expression;
    self::use(let final dynamic #t116 = dynamic in let final dynamic #t117 = #t116.-(42) in invalid-expression);
    let final dynamic #t118 = self::C::T in let final dynamic #t119 = #t118.-(42) in invalid-expression;
    self::use(let final dynamic #t120 = self::C::T in let final dynamic #t121 = #t120.-(42) in invalid-expression);
    let final dynamic #t122 = () → void in let final dynamic #t123 = #t122.-(42) in invalid-expression;
    self::use(let final dynamic #t124 = () → void in let final dynamic #t125 = #t124.-(42) in invalid-expression);
  }
}
static method use(dynamic x) → dynamic {
  if(x.==(new core::DateTime::now().millisecondsSinceEpoch))
    throw "Shouldn't happen";
}
static method main() → dynamic {
  new self::C::•<dynamic>().test();
}
