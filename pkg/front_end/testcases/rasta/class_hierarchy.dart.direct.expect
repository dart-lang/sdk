library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : invalid-initializer;
}
class B extends core::Object {
  synthetic constructor •() → self::B
    : invalid-initializer;
}
class C extends core::Object {
  constructor •() → dynamic
    : invalid-initializer;
}
class D extends core::Object {
  static field dynamic _redirecting# = <dynamic>[self::D::•];
  static factory •() → self::D
    let dynamic #redirecting_factory = "Missing" in invalid-expression;
}
static method main() → void {
  new self::A::•();
  new self::B::•();
  new self::C::•();
  throw new core::NoSuchMethodError::withInvocation(null, new core::_InvocationMirror::_withType(#Missing, 32, null, <dynamic>[].toList(growable: false), <dynamic, dynamic>{}));
}
