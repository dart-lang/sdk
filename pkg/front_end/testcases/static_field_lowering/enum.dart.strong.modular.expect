library;
import self as self;
import "dart:core" as core;

class A extends core::_Enum /*isEnum*/  {
  enum-element static const field self::A a = #C3;
  enum-element static const field self::A b = #C6;
  static const field core::List<self::A> values = #C7;
  const synthetic constructor •(core::int #index, core::String #name) → self::A
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "A.${this.{core::_Enum::_name}{core::String}}";
}
static method main() → dynamic {}

constants  {
  #C1 = 0
  #C2 = "a"
  #C3 = self::A {index:#C1, _name:#C2}
  #C4 = 1
  #C5 = "b"
  #C6 = self::A {index:#C4, _name:#C5}
  #C7 = <self::A>[#C3, #C6]
}


Constructor coverage from constants:
org-dartlang-testcase:///enum.dart:
- A. (from org-dartlang-testcase:///enum.dart:5:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
