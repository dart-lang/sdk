library /*isNonNullableByDefault*/;
import self as self;
import "dart:_internal" as _in;
import "dart:core" as core;

static method test(Never nonNullableNever, Never? nullableNever) → dynamic {
  Never v1 = let final Never #t1 = (let final Never #t2 = nonNullableNever in throw new _in::ReachabilityError::•("`null` encountered as the result from expression with type `Never`.")) =={core::Object::==}{(dynamic) → Never} (let final Never #t3 = nonNullableNever in throw new _in::ReachabilityError::•("`null` encountered as the result from expression with type `Never`.")) in throw new _in::ReachabilityError::•("`null` encountered as the result from expression with type `Never`.");
  core::bool v2 = nullableNever =={core::Object::==}{(core::Object) → core::bool} nullableNever;
}
static method main() → dynamic {}
