library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method add<X extends core::num, Y extends core::int, Z extends core::double>(core::num n, core::int i, core::double d, self::add::X x, self::add::Y y, self::add::Z z) → dynamic {
  core::num n_n = n.{core::num::+}(n){(core::num) → core::num};
  core::num n_i = n.{core::num::+}(i){(core::num) → core::num};
  core::double n_d = n.{core::num::+}(d){(core::num) → core::double};
  core::num n_x = n.{core::num::+}(x){(core::num) → core::num};
  core::num n_y = n.{core::num::+}(y){(core::num) → core::num};
  core::double n_z = n.{core::num::+}(z){(core::num) → core::double};
  core::num i_n = i.{core::num::+}(n){(core::num) → core::num};
  core::int i_i = i.{core::num::+}(i){(core::num) → core::int};
  core::double i_d = i.{core::num::+}(d){(core::num) → core::double};
  core::num i_x = i.{core::num::+}(x){(core::num) → core::num};
  core::int i_y = i.{core::num::+}(y){(core::num) → core::int};
  core::double i_z = i.{core::num::+}(z){(core::num) → core::double};
  core::double d_n = d.{core::double::+}(n){(core::num) → core::double};
  core::double d_i = d.{core::double::+}(i){(core::num) → core::double};
  core::double d_d = d.{core::double::+}(d){(core::num) → core::double};
  core::double d_x = d.{core::double::+}(x){(core::num) → core::double};
  core::double d_y = d.{core::double::+}(y){(core::num) → core::double};
  core::double d_z = d.{core::double::+}(z){(core::num) → core::double};
  core::num x_n = x.{core::num::+}(n){(core::num) → core::num};
  core::num x_i = x.{core::num::+}(i){(core::num) → core::num};
  core::double x_d = x.{core::num::+}(d){(core::num) → core::double};
  core::num x_x = x.{core::num::+}(x){(core::num) → core::num};
  core::num x_y = x.{core::num::+}(y){(core::num) → core::num};
  core::double x_z = x.{core::num::+}(z){(core::num) → core::double};
  core::num y_n = y.{core::num::+}(n){(core::num) → core::num};
  core::int y_i = y.{core::num::+}(i){(core::num) → core::int};
  core::double y_d = y.{core::num::+}(d){(core::num) → core::double};
  core::num y_x = y.{core::num::+}(x){(core::num) → core::num};
  core::int y_y = y.{core::num::+}(y){(core::num) → core::int};
  core::double y_z = y.{core::num::+}(z){(core::num) → core::double};
  core::double z_n = z.{core::double::+}(n){(core::num) → core::double};
  core::double z_i = z.{core::double::+}(i){(core::num) → core::double};
  core::double z_d = z.{core::double::+}(d){(core::num) → core::double};
  core::double z_x = z.{core::double::+}(x){(core::num) → core::double};
  core::double z_y = z.{core::double::+}(y){(core::num) → core::double};
  core::double z_z = z.{core::double::+}(z){(core::num) → core::double};
}
static method sub<X extends core::num, Y extends core::int, Z extends core::double>(core::num n, core::int i, core::double d, self::sub::X x, self::sub::Y y, self::sub::Z z) → dynamic {
  core::num n_n = n.{core::num::-}(n){(core::num) → core::num};
  core::num n_i = n.{core::num::-}(i){(core::num) → core::num};
  core::double n_d = n.{core::num::-}(d){(core::num) → core::double};
  core::num n_x = n.{core::num::-}(x){(core::num) → core::num};
  core::num n_y = n.{core::num::-}(y){(core::num) → core::num};
  core::double n_z = n.{core::num::-}(z){(core::num) → core::double};
  core::num i_n = i.{core::num::-}(n){(core::num) → core::num};
  core::int i_i = i.{core::num::-}(i){(core::num) → core::int};
  core::double i_d = i.{core::num::-}(d){(core::num) → core::double};
  core::num i_x = i.{core::num::-}(x){(core::num) → core::num};
  core::int i_y = i.{core::num::-}(y){(core::num) → core::int};
  core::double i_z = i.{core::num::-}(z){(core::num) → core::double};
  core::double d_n = d.{core::double::-}(n){(core::num) → core::double};
  core::double d_i = d.{core::double::-}(i){(core::num) → core::double};
  core::double d_d = d.{core::double::-}(d){(core::num) → core::double};
  core::double d_x = d.{core::double::-}(x){(core::num) → core::double};
  core::double d_y = d.{core::double::-}(y){(core::num) → core::double};
  core::double d_z = d.{core::double::-}(z){(core::num) → core::double};
  core::num x_n = x.{core::num::-}(n){(core::num) → core::num};
  core::num x_i = x.{core::num::-}(i){(core::num) → core::num};
  core::double x_d = x.{core::num::-}(d){(core::num) → core::double};
  core::num x_x = x.{core::num::-}(x){(core::num) → core::num};
  core::num x_y = x.{core::num::-}(y){(core::num) → core::num};
  core::double x_z = x.{core::num::-}(z){(core::num) → core::double};
  core::num y_n = y.{core::num::-}(n){(core::num) → core::num};
  core::int y_i = y.{core::num::-}(i){(core::num) → core::int};
  core::double y_d = y.{core::num::-}(d){(core::num) → core::double};
  core::num y_x = y.{core::num::-}(x){(core::num) → core::num};
  core::int y_y = y.{core::num::-}(y){(core::num) → core::int};
  core::double y_z = y.{core::num::-}(z){(core::num) → core::double};
  core::double z_n = z.{core::double::-}(n){(core::num) → core::double};
  core::double z_i = z.{core::double::-}(i){(core::num) → core::double};
  core::double z_d = z.{core::double::-}(d){(core::num) → core::double};
  core::double z_x = z.{core::double::-}(x){(core::num) → core::double};
  core::double z_y = z.{core::double::-}(y){(core::num) → core::double};
  core::double z_z = z.{core::double::-}(z){(core::num) → core::double};
}
static method mul<X extends core::num, Y extends core::int, Z extends core::double>(core::num n, core::int i, core::double d, self::mul::X x, self::mul::Y y, self::mul::Z z) → dynamic {
  core::num n_n = n.{core::num::*}(n){(core::num) → core::num};
  core::num n_i = n.{core::num::*}(i){(core::num) → core::num};
  core::double n_d = n.{core::num::*}(d){(core::num) → core::double};
  core::num n_x = n.{core::num::*}(x){(core::num) → core::num};
  core::num n_y = n.{core::num::*}(y){(core::num) → core::num};
  core::double n_z = n.{core::num::*}(z){(core::num) → core::double};
  core::num i_n = i.{core::num::*}(n){(core::num) → core::num};
  core::int i_i = i.{core::num::*}(i){(core::num) → core::int};
  core::double i_d = i.{core::num::*}(d){(core::num) → core::double};
  core::num i_x = i.{core::num::*}(x){(core::num) → core::num};
  core::int i_y = i.{core::num::*}(y){(core::num) → core::int};
  core::double i_z = i.{core::num::*}(z){(core::num) → core::double};
  core::double d_n = d.{core::double::*}(n){(core::num) → core::double};
  core::double d_i = d.{core::double::*}(i){(core::num) → core::double};
  core::double d_d = d.{core::double::*}(d){(core::num) → core::double};
  core::double d_x = d.{core::double::*}(x){(core::num) → core::double};
  core::double d_y = d.{core::double::*}(y){(core::num) → core::double};
  core::double d_z = d.{core::double::*}(z){(core::num) → core::double};
  core::num x_n = x.{core::num::*}(n){(core::num) → core::num};
  core::num x_i = x.{core::num::*}(i){(core::num) → core::num};
  core::double x_d = x.{core::num::*}(d){(core::num) → core::double};
  core::num x_x = x.{core::num::*}(x){(core::num) → core::num};
  core::num x_y = x.{core::num::*}(y){(core::num) → core::num};
  core::double x_z = x.{core::num::*}(z){(core::num) → core::double};
  core::num y_n = y.{core::num::*}(n){(core::num) → core::num};
  core::int y_i = y.{core::num::*}(i){(core::num) → core::int};
  core::double y_d = y.{core::num::*}(d){(core::num) → core::double};
  core::num y_x = y.{core::num::*}(x){(core::num) → core::num};
  core::int y_y = y.{core::num::*}(y){(core::num) → core::int};
  core::double y_z = y.{core::num::*}(z){(core::num) → core::double};
  core::double z_n = z.{core::double::*}(n){(core::num) → core::double};
  core::double z_i = z.{core::double::*}(i){(core::num) → core::double};
  core::double z_d = z.{core::double::*}(d){(core::num) → core::double};
  core::double z_x = z.{core::double::*}(x){(core::num) → core::double};
  core::double z_y = z.{core::double::*}(y){(core::num) → core::double};
  core::double z_z = z.{core::double::*}(z){(core::num) → core::double};
}
static method mod<X extends core::num, Y extends core::int, Z extends core::double>(core::num n, core::int i, core::double d, self::mod::X x, self::mod::Y y, self::mod::Z z) → dynamic {
  core::num n_n = n.{core::num::%}(n){(core::num) → core::num};
  core::num n_i = n.{core::num::%}(i){(core::num) → core::num};
  core::double n_d = n.{core::num::%}(d){(core::num) → core::double};
  core::num n_x = n.{core::num::%}(x){(core::num) → core::num};
  core::num n_y = n.{core::num::%}(y){(core::num) → core::num};
  core::double n_z = n.{core::num::%}(z){(core::num) → core::double};
  core::num i_n = i.{core::num::%}(n){(core::num) → core::num};
  core::int i_i = i.{core::num::%}(i){(core::num) → core::int};
  core::double i_d = i.{core::num::%}(d){(core::num) → core::double};
  core::num i_x = i.{core::num::%}(x){(core::num) → core::num};
  core::int i_y = i.{core::num::%}(y){(core::num) → core::int};
  core::double i_z = i.{core::num::%}(z){(core::num) → core::double};
  core::double d_n = d.{core::double::%}(n){(core::num) → core::double};
  core::double d_i = d.{core::double::%}(i){(core::num) → core::double};
  core::double d_d = d.{core::double::%}(d){(core::num) → core::double};
  core::double d_x = d.{core::double::%}(x){(core::num) → core::double};
  core::double d_y = d.{core::double::%}(y){(core::num) → core::double};
  core::double d_z = d.{core::double::%}(z){(core::num) → core::double};
  core::num x_n = x.{core::num::%}(n){(core::num) → core::num};
  core::num x_i = x.{core::num::%}(i){(core::num) → core::num};
  core::double x_d = x.{core::num::%}(d){(core::num) → core::double};
  core::num x_x = x.{core::num::%}(x){(core::num) → core::num};
  core::num x_y = x.{core::num::%}(y){(core::num) → core::num};
  core::double x_z = x.{core::num::%}(z){(core::num) → core::double};
  core::num y_n = y.{core::num::%}(n){(core::num) → core::num};
  core::int y_i = y.{core::num::%}(i){(core::num) → core::int};
  core::double y_d = y.{core::num::%}(d){(core::num) → core::double};
  core::num y_x = y.{core::num::%}(x){(core::num) → core::num};
  core::int y_y = y.{core::num::%}(y){(core::num) → core::int};
  core::double y_z = y.{core::num::%}(z){(core::num) → core::double};
  core::double z_n = z.{core::double::%}(n){(core::num) → core::double};
  core::double z_i = z.{core::double::%}(i){(core::num) → core::double};
  core::double z_d = z.{core::double::%}(d){(core::num) → core::double};
  core::double z_x = z.{core::double::%}(x){(core::num) → core::double};
  core::double z_y = z.{core::double::%}(y){(core::num) → core::double};
  core::double z_z = z.{core::double::%}(z){(core::num) → core::double};
}
static method remainder<X extends core::num, Y extends core::int, Z extends core::double>(core::num n, core::int i, core::double d, self::remainder::X x, self::remainder::Y y, self::remainder::Z z) → dynamic {
  core::num n_n = n.{core::num::remainder}(n){(core::num) → core::num};
  core::num n_i = n.{core::num::remainder}(i){(core::num) → core::num};
  core::double n_d = n.{core::num::remainder}(d){(core::num) → core::double};
  core::num n_x = n.{core::num::remainder}(x){(core::num) → core::num};
  core::num n_y = n.{core::num::remainder}(y){(core::num) → core::num};
  core::double n_z = n.{core::num::remainder}(z){(core::num) → core::double};
  core::num i_n = i.{core::num::remainder}(n){(core::num) → core::num};
  core::int i_i = i.{core::num::remainder}(i){(core::num) → core::int};
  core::double i_d = i.{core::num::remainder}(d){(core::num) → core::double};
  core::num i_x = i.{core::num::remainder}(x){(core::num) → core::num};
  core::int i_y = i.{core::num::remainder}(y){(core::num) → core::int};
  core::double i_z = i.{core::num::remainder}(z){(core::num) → core::double};
  core::double d_n = d.{core::double::remainder}(n){(core::num) → core::double};
  core::double d_i = d.{core::double::remainder}(i){(core::num) → core::double};
  core::double d_d = d.{core::double::remainder}(d){(core::num) → core::double};
  core::double d_x = d.{core::double::remainder}(x){(core::num) → core::double};
  core::double d_y = d.{core::double::remainder}(y){(core::num) → core::double};
  core::double d_z = d.{core::double::remainder}(z){(core::num) → core::double};
  core::num x_n = x.{core::num::remainder}(n){(core::num) → core::num};
  core::num x_i = x.{core::num::remainder}(i){(core::num) → core::num};
  core::double x_d = x.{core::num::remainder}(d){(core::num) → core::double};
  core::num x_x = x.{core::num::remainder}(x){(core::num) → core::num};
  core::num x_y = x.{core::num::remainder}(y){(core::num) → core::num};
  core::double x_z = x.{core::num::remainder}(z){(core::num) → core::double};
  core::num y_n = y.{core::num::remainder}(n){(core::num) → core::num};
  core::int y_i = y.{core::num::remainder}(i){(core::num) → core::int};
  core::double y_d = y.{core::num::remainder}(d){(core::num) → core::double};
  core::num y_x = y.{core::num::remainder}(x){(core::num) → core::num};
  core::int y_y = y.{core::num::remainder}(y){(core::num) → core::int};
  core::double y_z = y.{core::num::remainder}(z){(core::num) → core::double};
  core::double z_n = z.{core::double::remainder}(n){(core::num) → core::double};
  core::double z_i = z.{core::double::remainder}(i){(core::num) → core::double};
  core::double z_d = z.{core::double::remainder}(d){(core::num) → core::double};
  core::double z_x = z.{core::double::remainder}(x){(core::num) → core::double};
  core::double z_y = z.{core::double::remainder}(y){(core::num) → core::double};
  core::double z_z = z.{core::double::remainder}(z){(core::num) → core::double};
}
static method clamp<X extends core::num, Y extends core::int, Z extends core::double>(core::num n, core::int i, core::double d, self::clamp::X x, self::clamp::Y y, self::clamp::Z z) → dynamic {
  core::num n_n_n = n.{core::num::clamp}(n, n){(core::num, core::num) → core::num};
  core::num n_i_n = n.{core::num::clamp}(i, n){(core::num, core::num) → core::num};
  core::num n_d_n = n.{core::num::clamp}(d, n){(core::num, core::num) → core::num};
  core::num n_x_n = n.{core::num::clamp}(x, n){(core::num, core::num) → core::num};
  core::num n_y_n = n.{core::num::clamp}(y, n){(core::num, core::num) → core::num};
  core::num n_z_n = n.{core::num::clamp}(z, n){(core::num, core::num) → core::num};
  core::num n_n_i = n.{core::num::clamp}(n, i){(core::num, core::num) → core::num};
  core::num n_i_i = n.{core::num::clamp}(i, i){(core::num, core::num) → core::num};
  core::num n_d_i = n.{core::num::clamp}(d, i){(core::num, core::num) → core::num};
  core::num n_x_i = n.{core::num::clamp}(x, i){(core::num, core::num) → core::num};
  core::num n_y_i = n.{core::num::clamp}(y, i){(core::num, core::num) → core::num};
  core::num n_z_i = n.{core::num::clamp}(z, i){(core::num, core::num) → core::num};
  core::num n_n_d = n.{core::num::clamp}(n, d){(core::num, core::num) → core::num};
  core::num n_i_d = n.{core::num::clamp}(i, d){(core::num, core::num) → core::num};
  core::num n_d_d = n.{core::num::clamp}(d, d){(core::num, core::num) → core::num};
  core::num n_x_d = n.{core::num::clamp}(x, d){(core::num, core::num) → core::num};
  core::num n_y_d = n.{core::num::clamp}(y, d){(core::num, core::num) → core::num};
  core::num n_z_d = n.{core::num::clamp}(z, d){(core::num, core::num) → core::num};
  core::num n_n_x = n.{core::num::clamp}(n, x){(core::num, core::num) → core::num};
  core::num n_i_x = n.{core::num::clamp}(i, x){(core::num, core::num) → core::num};
  core::num n_d_x = n.{core::num::clamp}(d, x){(core::num, core::num) → core::num};
  core::num n_x_x = n.{core::num::clamp}(x, x){(core::num, core::num) → core::num};
  core::num n_y_x = n.{core::num::clamp}(y, x){(core::num, core::num) → core::num};
  core::num n_z_x = n.{core::num::clamp}(z, x){(core::num, core::num) → core::num};
  core::num n_n_y = n.{core::num::clamp}(n, y){(core::num, core::num) → core::num};
  core::num n_i_y = n.{core::num::clamp}(i, y){(core::num, core::num) → core::num};
  core::num n_d_y = n.{core::num::clamp}(d, y){(core::num, core::num) → core::num};
  core::num n_x_y = n.{core::num::clamp}(x, y){(core::num, core::num) → core::num};
  core::num n_y_y = n.{core::num::clamp}(y, y){(core::num, core::num) → core::num};
  core::num n_z_y = n.{core::num::clamp}(z, y){(core::num, core::num) → core::num};
  core::num n_n_z = n.{core::num::clamp}(n, z){(core::num, core::num) → core::num};
  core::num n_i_z = n.{core::num::clamp}(i, z){(core::num, core::num) → core::num};
  core::num n_d_z = n.{core::num::clamp}(d, z){(core::num, core::num) → core::num};
  core::num n_x_z = n.{core::num::clamp}(x, z){(core::num, core::num) → core::num};
  core::num n_y_z = n.{core::num::clamp}(y, z){(core::num, core::num) → core::num};
  core::num n_z_z = n.{core::num::clamp}(z, z){(core::num, core::num) → core::num};
  core::num i_n_n = i.{core::num::clamp}(n, n){(core::num, core::num) → core::num};
  core::num i_i_n = i.{core::num::clamp}(i, n){(core::num, core::num) → core::num};
  core::num i_d_n = i.{core::num::clamp}(d, n){(core::num, core::num) → core::num};
  core::num i_x_n = i.{core::num::clamp}(x, n){(core::num, core::num) → core::num};
  core::num i_y_n = i.{core::num::clamp}(y, n){(core::num, core::num) → core::num};
  core::num i_z_n = i.{core::num::clamp}(z, n){(core::num, core::num) → core::num};
  core::num i_n_i = i.{core::num::clamp}(n, i){(core::num, core::num) → core::num};
  core::int i_i_i = i.{core::num::clamp}(i, i){(core::num, core::num) → core::int};
  core::num i_d_i = i.{core::num::clamp}(d, i){(core::num, core::num) → core::num};
  core::num i_x_i = i.{core::num::clamp}(x, i){(core::num, core::num) → core::num};
  core::int i_y_i = i.{core::num::clamp}(y, i){(core::num, core::num) → core::int};
  core::num i_z_i = i.{core::num::clamp}(z, i){(core::num, core::num) → core::num};
  core::num i_n_d = i.{core::num::clamp}(n, d){(core::num, core::num) → core::num};
  core::num i_i_d = i.{core::num::clamp}(i, d){(core::num, core::num) → core::num};
  core::num i_d_d = i.{core::num::clamp}(d, d){(core::num, core::num) → core::num};
  core::num i_x_d = i.{core::num::clamp}(x, d){(core::num, core::num) → core::num};
  core::num i_y_d = i.{core::num::clamp}(y, d){(core::num, core::num) → core::num};
  core::num i_z_d = i.{core::num::clamp}(z, d){(core::num, core::num) → core::num};
  core::num i_n_x = i.{core::num::clamp}(n, x){(core::num, core::num) → core::num};
  core::num i_i_x = i.{core::num::clamp}(i, x){(core::num, core::num) → core::num};
  core::num i_d_x = i.{core::num::clamp}(d, x){(core::num, core::num) → core::num};
  core::num i_x_x = i.{core::num::clamp}(x, x){(core::num, core::num) → core::num};
  core::num i_y_x = i.{core::num::clamp}(y, x){(core::num, core::num) → core::num};
  core::num i_z_x = i.{core::num::clamp}(z, x){(core::num, core::num) → core::num};
  core::num i_n_y = i.{core::num::clamp}(n, y){(core::num, core::num) → core::num};
  core::int i_i_y = i.{core::num::clamp}(i, y){(core::num, core::num) → core::int};
  core::num i_d_y = i.{core::num::clamp}(d, y){(core::num, core::num) → core::num};
  core::num i_x_y = i.{core::num::clamp}(x, y){(core::num, core::num) → core::num};
  core::int i_y_y = i.{core::num::clamp}(y, y){(core::num, core::num) → core::int};
  core::num i_z_y = i.{core::num::clamp}(z, y){(core::num, core::num) → core::num};
  core::num i_n_z = i.{core::num::clamp}(n, z){(core::num, core::num) → core::num};
  core::num i_i_z = i.{core::num::clamp}(i, z){(core::num, core::num) → core::num};
  core::num i_d_z = i.{core::num::clamp}(d, z){(core::num, core::num) → core::num};
  core::num i_x_z = i.{core::num::clamp}(x, z){(core::num, core::num) → core::num};
  core::num i_y_z = i.{core::num::clamp}(y, z){(core::num, core::num) → core::num};
  core::num i_z_z = i.{core::num::clamp}(z, z){(core::num, core::num) → core::num};
  core::num d_n_n = d.{core::num::clamp}(n, n){(core::num, core::num) → core::num};
  core::num d_i_n = d.{core::num::clamp}(i, n){(core::num, core::num) → core::num};
  core::num d_d_n = d.{core::num::clamp}(d, n){(core::num, core::num) → core::num};
  core::num d_x_n = d.{core::num::clamp}(x, n){(core::num, core::num) → core::num};
  core::num d_y_n = d.{core::num::clamp}(y, n){(core::num, core::num) → core::num};
  core::num d_z_n = d.{core::num::clamp}(z, n){(core::num, core::num) → core::num};
  core::num d_n_i = d.{core::num::clamp}(n, i){(core::num, core::num) → core::num};
  core::num d_i_i = d.{core::num::clamp}(i, i){(core::num, core::num) → core::num};
  core::num d_d_i = d.{core::num::clamp}(d, i){(core::num, core::num) → core::num};
  core::num d_x_i = d.{core::num::clamp}(x, i){(core::num, core::num) → core::num};
  core::num d_y_i = d.{core::num::clamp}(y, i){(core::num, core::num) → core::num};
  core::num d_z_i = d.{core::num::clamp}(z, i){(core::num, core::num) → core::num};
  core::num d_n_d = d.{core::num::clamp}(n, d){(core::num, core::num) → core::num};
  core::num d_i_d = d.{core::num::clamp}(i, d){(core::num, core::num) → core::num};
  core::double d_d_d = d.{core::num::clamp}(d, d){(core::num, core::num) → core::double};
  core::num d_x_d = d.{core::num::clamp}(x, d){(core::num, core::num) → core::num};
  core::num d_y_d = d.{core::num::clamp}(y, d){(core::num, core::num) → core::num};
  core::double d_z_d = d.{core::num::clamp}(z, d){(core::num, core::num) → core::double};
  core::num d_n_x = d.{core::num::clamp}(n, x){(core::num, core::num) → core::num};
  core::num d_i_x = d.{core::num::clamp}(i, x){(core::num, core::num) → core::num};
  core::num d_d_x = d.{core::num::clamp}(d, x){(core::num, core::num) → core::num};
  core::num d_x_x = d.{core::num::clamp}(x, x){(core::num, core::num) → core::num};
  core::num d_y_x = d.{core::num::clamp}(y, x){(core::num, core::num) → core::num};
  core::num d_z_x = d.{core::num::clamp}(z, x){(core::num, core::num) → core::num};
  core::num d_n_y = d.{core::num::clamp}(n, y){(core::num, core::num) → core::num};
  core::num d_i_y = d.{core::num::clamp}(i, y){(core::num, core::num) → core::num};
  core::num d_d_y = d.{core::num::clamp}(d, y){(core::num, core::num) → core::num};
  core::num d_x_y = d.{core::num::clamp}(x, y){(core::num, core::num) → core::num};
  core::num d_y_y = d.{core::num::clamp}(y, y){(core::num, core::num) → core::num};
  core::num d_z_y = d.{core::num::clamp}(z, y){(core::num, core::num) → core::num};
  core::num d_n_z = d.{core::num::clamp}(n, z){(core::num, core::num) → core::num};
  core::num d_i_z = d.{core::num::clamp}(i, z){(core::num, core::num) → core::num};
  core::double d_d_z = d.{core::num::clamp}(d, z){(core::num, core::num) → core::double};
  core::num d_x_z = d.{core::num::clamp}(x, z){(core::num, core::num) → core::num};
  core::num d_y_z = d.{core::num::clamp}(y, z){(core::num, core::num) → core::num};
  core::double d_z_z = d.{core::num::clamp}(z, z){(core::num, core::num) → core::double};
  core::num x_n_n = x.{core::num::clamp}(n, n){(core::num, core::num) → core::num};
  core::num x_i_n = x.{core::num::clamp}(i, n){(core::num, core::num) → core::num};
  core::num x_d_n = x.{core::num::clamp}(d, n){(core::num, core::num) → core::num};
  core::num x_x_n = x.{core::num::clamp}(x, n){(core::num, core::num) → core::num};
  core::num x_y_n = x.{core::num::clamp}(y, n){(core::num, core::num) → core::num};
  core::num x_z_n = x.{core::num::clamp}(z, n){(core::num, core::num) → core::num};
  core::num x_n_i = x.{core::num::clamp}(n, i){(core::num, core::num) → core::num};
  core::num x_i_i = x.{core::num::clamp}(i, i){(core::num, core::num) → core::num};
  core::num x_d_i = x.{core::num::clamp}(d, i){(core::num, core::num) → core::num};
  core::num x_x_i = x.{core::num::clamp}(x, i){(core::num, core::num) → core::num};
  core::num x_y_i = x.{core::num::clamp}(y, i){(core::num, core::num) → core::num};
  core::num x_z_i = x.{core::num::clamp}(z, i){(core::num, core::num) → core::num};
  core::num x_n_d = x.{core::num::clamp}(n, d){(core::num, core::num) → core::num};
  core::num x_i_d = x.{core::num::clamp}(i, d){(core::num, core::num) → core::num};
  core::num x_d_d = x.{core::num::clamp}(d, d){(core::num, core::num) → core::num};
  core::num x_x_d = x.{core::num::clamp}(x, d){(core::num, core::num) → core::num};
  core::num x_y_d = x.{core::num::clamp}(y, d){(core::num, core::num) → core::num};
  core::num x_z_d = x.{core::num::clamp}(z, d){(core::num, core::num) → core::num};
  core::num x_n_x = x.{core::num::clamp}(n, x){(core::num, core::num) → core::num};
  core::num x_i_x = x.{core::num::clamp}(i, x){(core::num, core::num) → core::num};
  core::num x_d_x = x.{core::num::clamp}(d, x){(core::num, core::num) → core::num};
  core::num x_x_x = x.{core::num::clamp}(x, x){(core::num, core::num) → core::num};
  core::num x_y_x = x.{core::num::clamp}(y, x){(core::num, core::num) → core::num};
  core::num x_z_x = x.{core::num::clamp}(z, x){(core::num, core::num) → core::num};
  core::num x_n_y = x.{core::num::clamp}(n, y){(core::num, core::num) → core::num};
  core::num x_i_y = x.{core::num::clamp}(i, y){(core::num, core::num) → core::num};
  core::num x_d_y = x.{core::num::clamp}(d, y){(core::num, core::num) → core::num};
  core::num x_x_y = x.{core::num::clamp}(x, y){(core::num, core::num) → core::num};
  core::num x_y_y = x.{core::num::clamp}(y, y){(core::num, core::num) → core::num};
  core::num x_z_y = x.{core::num::clamp}(z, y){(core::num, core::num) → core::num};
  core::num x_n_z = x.{core::num::clamp}(n, z){(core::num, core::num) → core::num};
  core::num x_i_z = x.{core::num::clamp}(i, z){(core::num, core::num) → core::num};
  core::num x_d_z = x.{core::num::clamp}(d, z){(core::num, core::num) → core::num};
  core::num x_x_z = x.{core::num::clamp}(x, z){(core::num, core::num) → core::num};
  core::num x_y_z = x.{core::num::clamp}(y, z){(core::num, core::num) → core::num};
  core::num x_z_z = x.{core::num::clamp}(z, z){(core::num, core::num) → core::num};
  core::num y_n_n = y.{core::num::clamp}(n, n){(core::num, core::num) → core::num};
  core::num y_i_n = y.{core::num::clamp}(i, n){(core::num, core::num) → core::num};
  core::num y_d_n = y.{core::num::clamp}(d, n){(core::num, core::num) → core::num};
  core::num y_x_n = y.{core::num::clamp}(x, n){(core::num, core::num) → core::num};
  core::num y_y_n = y.{core::num::clamp}(y, n){(core::num, core::num) → core::num};
  core::num y_z_n = y.{core::num::clamp}(z, n){(core::num, core::num) → core::num};
  core::num y_n_i = y.{core::num::clamp}(n, i){(core::num, core::num) → core::num};
  core::int y_i_i = y.{core::num::clamp}(i, i){(core::num, core::num) → core::int};
  core::num y_d_i = y.{core::num::clamp}(d, i){(core::num, core::num) → core::num};
  core::num y_x_i = y.{core::num::clamp}(x, i){(core::num, core::num) → core::num};
  core::int y_y_i = y.{core::num::clamp}(y, i){(core::num, core::num) → core::int};
  core::num y_z_i = y.{core::num::clamp}(z, i){(core::num, core::num) → core::num};
  core::num y_n_d = y.{core::num::clamp}(n, d){(core::num, core::num) → core::num};
  core::num y_i_d = y.{core::num::clamp}(i, d){(core::num, core::num) → core::num};
  core::num y_d_d = y.{core::num::clamp}(d, d){(core::num, core::num) → core::num};
  core::num y_x_d = y.{core::num::clamp}(x, d){(core::num, core::num) → core::num};
  core::num y_y_d = y.{core::num::clamp}(y, d){(core::num, core::num) → core::num};
  core::num y_z_d = y.{core::num::clamp}(z, d){(core::num, core::num) → core::num};
  core::num y_n_x = y.{core::num::clamp}(n, x){(core::num, core::num) → core::num};
  core::num y_i_x = y.{core::num::clamp}(i, x){(core::num, core::num) → core::num};
  core::num y_d_x = y.{core::num::clamp}(d, x){(core::num, core::num) → core::num};
  core::num y_x_x = y.{core::num::clamp}(x, x){(core::num, core::num) → core::num};
  core::num y_y_x = y.{core::num::clamp}(y, x){(core::num, core::num) → core::num};
  core::num y_z_x = y.{core::num::clamp}(z, x){(core::num, core::num) → core::num};
  core::num y_n_y = y.{core::num::clamp}(n, y){(core::num, core::num) → core::num};
  core::int y_i_y = y.{core::num::clamp}(i, y){(core::num, core::num) → core::int};
  core::num y_d_y = y.{core::num::clamp}(d, y){(core::num, core::num) → core::num};
  core::num y_x_y = y.{core::num::clamp}(x, y){(core::num, core::num) → core::num};
  core::int y_y_y = y.{core::num::clamp}(y, y){(core::num, core::num) → core::int};
  core::num y_z_y = y.{core::num::clamp}(z, y){(core::num, core::num) → core::num};
  core::num y_n_z = y.{core::num::clamp}(n, z){(core::num, core::num) → core::num};
  core::num y_i_z = y.{core::num::clamp}(i, z){(core::num, core::num) → core::num};
  core::num y_d_z = y.{core::num::clamp}(d, z){(core::num, core::num) → core::num};
  core::num y_x_z = y.{core::num::clamp}(x, z){(core::num, core::num) → core::num};
  core::num y_y_z = y.{core::num::clamp}(y, z){(core::num, core::num) → core::num};
  core::num y_z_z = y.{core::num::clamp}(z, z){(core::num, core::num) → core::num};
  core::num z_n_n = z.{core::num::clamp}(n, n){(core::num, core::num) → core::num};
  core::num z_i_n = z.{core::num::clamp}(i, n){(core::num, core::num) → core::num};
  core::num z_d_n = z.{core::num::clamp}(d, n){(core::num, core::num) → core::num};
  core::num z_x_n = z.{core::num::clamp}(x, n){(core::num, core::num) → core::num};
  core::num z_y_n = z.{core::num::clamp}(y, n){(core::num, core::num) → core::num};
  core::num z_z_n = z.{core::num::clamp}(z, n){(core::num, core::num) → core::num};
  core::num z_n_i = z.{core::num::clamp}(n, i){(core::num, core::num) → core::num};
  core::num z_i_i = z.{core::num::clamp}(i, i){(core::num, core::num) → core::num};
  core::num z_d_i = z.{core::num::clamp}(d, i){(core::num, core::num) → core::num};
  core::num z_x_i = z.{core::num::clamp}(x, i){(core::num, core::num) → core::num};
  core::num z_y_i = z.{core::num::clamp}(y, i){(core::num, core::num) → core::num};
  core::num z_z_i = z.{core::num::clamp}(z, i){(core::num, core::num) → core::num};
  core::num z_n_d = z.{core::num::clamp}(n, d){(core::num, core::num) → core::num};
  core::num z_i_d = z.{core::num::clamp}(i, d){(core::num, core::num) → core::num};
  core::double z_d_d = z.{core::num::clamp}(d, d){(core::num, core::num) → core::double};
  core::num z_x_d = z.{core::num::clamp}(x, d){(core::num, core::num) → core::num};
  core::num z_y_d = z.{core::num::clamp}(y, d){(core::num, core::num) → core::num};
  core::double z_z_d = z.{core::num::clamp}(z, d){(core::num, core::num) → core::double};
  core::num z_n_x = z.{core::num::clamp}(n, x){(core::num, core::num) → core::num};
  core::num z_i_x = z.{core::num::clamp}(i, x){(core::num, core::num) → core::num};
  core::num z_d_x = z.{core::num::clamp}(d, x){(core::num, core::num) → core::num};
  core::num z_x_x = z.{core::num::clamp}(x, x){(core::num, core::num) → core::num};
  core::num z_y_x = z.{core::num::clamp}(y, x){(core::num, core::num) → core::num};
  core::num z_z_x = z.{core::num::clamp}(z, x){(core::num, core::num) → core::num};
  core::num z_n_y = z.{core::num::clamp}(n, y){(core::num, core::num) → core::num};
  core::num z_i_y = z.{core::num::clamp}(i, y){(core::num, core::num) → core::num};
  core::num z_d_y = z.{core::num::clamp}(d, y){(core::num, core::num) → core::num};
  core::num z_x_y = z.{core::num::clamp}(x, y){(core::num, core::num) → core::num};
  core::num z_y_y = z.{core::num::clamp}(y, y){(core::num, core::num) → core::num};
  core::num z_z_y = z.{core::num::clamp}(z, y){(core::num, core::num) → core::num};
  core::num z_n_z = z.{core::num::clamp}(n, z){(core::num, core::num) → core::num};
  core::num z_i_z = z.{core::num::clamp}(i, z){(core::num, core::num) → core::num};
  core::double z_d_z = z.{core::num::clamp}(d, z){(core::num, core::num) → core::double};
  core::num z_x_z = z.{core::num::clamp}(x, z){(core::num, core::num) → core::num};
  core::num z_y_z = z.{core::num::clamp}(y, z){(core::num, core::num) → core::num};
  core::double z_z_z = z.{core::num::clamp}(z, z){(core::num, core::num) → core::double};
}
static method main() → dynamic {}
