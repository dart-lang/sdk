library;
import self as self;
import "nsm_from_opt_in_lib.dart" as nsm;
import "dart:core" as core;

import "org-dartlang-testcase:///nsm_from_opt_in_lib.dart";

abstract class B2 extends nsm::A implements self::C2 {
  synthetic constructor •() → self::B2*
    : super nsm::A::•()
    ;
  @#C1
  method noSuchMethod(core::Invocation* invocation) → dynamic {
    return super.{core::Object::noSuchMethod}(invocation);
  }
  abstract forwarding-stub method method(core::int* i, {dynamic optional = #C2}) → core::int*;
}
abstract class C2 extends core::Object {
  synthetic constructor •() → self::C2*
    : super core::Object::•()
    ;
  abstract method method(core::int* i, {dynamic optional = #C2}) → core::int*;
}
static method main() → dynamic {}

library /*isNonNullableByDefault*/;
import self as nsm;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → nsm::A
    : super core::Object::•()
    ;
  method method(core::int? i) → core::int
    return let final core::int? #t1 = i in #t1.{core::num::==}(null) ?{core::int} 0 : #t1{core::int};
}
abstract class B1 extends nsm::A implements nsm::C1 {
  synthetic constructor •() → nsm::B1
    : super nsm::A::•()
    ;
  @#C1
  method noSuchMethod(core::Invocation invocation) → dynamic {
    return super.{core::Object::noSuchMethod}(invocation);
  }
  abstract forwarding-stub method method(core::int? i, {dynamic optional = #C2}) → core::int;
}
abstract class C1 extends core::Object {
  synthetic constructor •() → nsm::C1
    : super core::Object::•()
    ;
  abstract method method(core::int? i, {dynamic optional = #C2}) → core::int;
}

constants  {
  #C1 = core::_Override {}
  #C2 = null
}
