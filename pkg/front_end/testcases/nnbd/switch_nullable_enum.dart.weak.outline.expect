library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class Enum extends core::_Enum /*isEnum*/  {
  static const field core::List<self::Enum> values = const <self::Enum>[self::Enum::e1, self::Enum::e2];
  enum-element static const field self::Enum e1 = const self::Enum::•(0, "e1");
  enum-element static const field self::Enum e2 = const self::Enum::•(1, "e2");
  const constructor •(core::int #index, core::String #name) → self::Enum
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "Enum.${this.{core::_Enum::_name}{core::String}}";
}
static method method1(self::Enum? e) → core::int
  ;
static method method2(self::Enum? e) → core::int
  ;
static method method3(self::Enum? e) → core::int
  ;
static method method4(self::Enum? e) → core::int
  ;
static method test() → dynamic
  ;
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;


Extra constant evaluation status:
Evaluated: ListLiteral @ org-dartlang-testcase:///switch_nullable_enum.dart:7:6 -> ListConstant(const <Enum*>[const Enum{_Enum.index: 0, _Enum._name: "e1"}, const Enum{_Enum.index: 1, _Enum._name: "e2"}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///switch_nullable_enum.dart:7:13 -> InstanceConstant(const Enum{_Enum.index: 0, _Enum._name: "e1"})
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///switch_nullable_enum.dart:7:17 -> InstanceConstant(const Enum{_Enum.index: 1, _Enum._name: "e2"})
Extra constant evaluation: evaluated: 8, effectively constant: 3
