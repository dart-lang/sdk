library;
import self as self;
import "dart:core" as core;

abstract class C extends core::Object {
  final field core::int? _privateFinalField;
  final field core::int? publicFinalField;
  field core::int? _privateField = null;
  field core::int? publicField = null;
  constructor •(core::int? i) → self::C
    : self::C::_privateFinalField = i, self::C::publicFinalField = i, super core::Object::•()
    ;
  abstract get _privateAbstractGetter() → core::int?;
  abstract get publicAbstractGetter() → core::int?;
  get _privateConcreteGetter() → core::int?
    return 0;
  get publicConcreteGetter() → core::int?
    return 0;
}
static method acceptsInt(core::int x) → void {}
static method testPrivateFinalField(self::C c) → void {
  if(!(c.{self::C::_privateFinalField}{core::int?} == null)) {
    core::int x = c.{self::C::_privateFinalField}{core::int?};
    self::acceptsInt(x);
  }
}
static method testPublicFinalField(self::C c) → void {
  if(!(c.{self::C::publicFinalField}{core::int?} == null)) {
    core::int? x = c.{self::C::publicFinalField}{core::int?};
    x = null;
  }
}
static method testPrivateField(self::C c) → void {
  if(!(c.{self::C::_privateField}{core::int?} == null)) {
    core::int? x = c.{self::C::_privateField}{core::int?};
    x = null;
  }
}
static method testPublicField(self::C c) → void {
  if(!(c.{self::C::publicField}{core::int?} == null)) {
    core::int? x = c.{self::C::publicField}{core::int?};
    x = null;
  }
}
static method testPrivateAbstractGetter(self::C c) → void {
  if(!(c.{self::C::_privateAbstractGetter}{core::int?} == null)) {
    core::int x = c.{self::C::_privateAbstractGetter}{core::int?};
    self::acceptsInt(x);
  }
}
static method testPublicAbstractGetter(self::C c) → void {
  if(!(c.{self::C::publicAbstractGetter}{core::int?} == null)) {
    core::int? x = c.{self::C::publicAbstractGetter}{core::int?};
    x = null;
  }
}
static method testPrivateConcreteGetter(self::C c) → void {
  if(!(c.{self::C::_privateConcreteGetter}{core::int?} == null)) {
    core::int? x = c.{self::C::_privateConcreteGetter}{core::int?};
    x = null;
  }
}
static method testPublicConcreteGetter(self::C c) → void {
  if(!(c.{self::C::publicConcreteGetter}{core::int?} == null)) {
    core::int? x = c.{self::C::publicConcreteGetter}{core::int?};
    x = null;
  }
}
static method main() → dynamic {}
