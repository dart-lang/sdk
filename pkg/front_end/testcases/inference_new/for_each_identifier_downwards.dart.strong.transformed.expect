library test /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class C extends core::Object {
  field self::A aField = throw "";
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
  set aSetter(self::A value) → void {}
  method test() → void {
    self::A aLocal;
    {
      synthesized core::Iterator<self::A> :sync-for-iterator = self::f<core::Iterable<self::A>>().{core::Iterable::iterator}{core::Iterator<self::A>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final self::A #t1 = :sync-for-iterator.{core::Iterator::current}{self::A};
        {
          aLocal = #t1;
        }
      }
    }
    {
      synthesized core::Iterator<self::A> :sync-for-iterator = self::f<core::Iterable<self::A>>().{core::Iterable::iterator}{core::Iterator<self::A>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final self::A #t2 = :sync-for-iterator.{core::Iterator::current}{self::A};
        {
          this.{self::C::aField} = #t2;
        }
      }
    }
    {
      synthesized core::Iterator<self::A> :sync-for-iterator = self::f<core::Iterable<self::A>>().{core::Iterable::iterator}{core::Iterator<self::A>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final self::A #t3 = :sync-for-iterator.{core::Iterator::current}{self::A};
        {
          this.{self::C::aSetter} = #t3;
        }
      }
    }
    {
      synthesized core::Iterator<self::A> :sync-for-iterator = self::f<core::Iterable<self::A>>().{core::Iterable::iterator}{core::Iterator<self::A>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final self::A #t4 = :sync-for-iterator.{core::Iterator::current}{self::A};
        {
          self::aTopLevel = #t4;
        }
      }
    }
    {
      synthesized core::Iterator<self::A> :sync-for-iterator = self::f<core::Iterable<self::A>>().{core::Iterable::iterator}{core::Iterator<self::A>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final self::A #t5 = :sync-for-iterator.{core::Iterator::current}{self::A};
        {
          self::aTopLevelSetter = #t5;
        }
      }
    }
  }
}
static field self::A aTopLevel = throw "";
static method f<T extends core::Object? = dynamic>() → self::f::T%
  return throw "";
static set aTopLevelSetter(self::A value) → void {}
static method main() → dynamic {}
