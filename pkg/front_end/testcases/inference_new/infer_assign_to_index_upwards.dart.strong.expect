library test;
import self as self;
import "dart:core" as core;

abstract class Test<T extends core::Object, U extends core::Object> extends core::Object {
  default constructor •() → void
    : super core::Object::•()
    ;
  abstract operator [](core::String s) → self::Test::T;
  abstract operator []=(core::String s, generic-covariant-impl generic-covariant-interface self::Test::U v) → void;
}
static method getInt() → core::int
  return 0;
static method getNum() → core::num
  return 0;
static method getDouble() → core::double
  return 0.0;
static method test1(self::Test<core::int, core::int> t) → void {
  core::int v1 = let final self::Test<core::int, core::int> #t1 = t in let final core::String #t2 = "x" in let final core::int #t3 = self::getInt() in let final void #t4 = #t1.{self::Test::[]=}(#t2, #t3) in #t3;
  core::num v2 = let final self::Test<core::int, core::int> #t5 = t in let final core::String #t6 = "x" in let final core::num #t7 = self::getNum() as{TypeError} core::int in let final void #t8 = #t5.{self::Test::[]=}(#t6, #t7) in #t7;
  core::int v4 = let final self::Test<core::int, core::int> #t9 = t in let final core::String #t10 = "x" in let final core::int #t11 = #t9.{self::Test::[]}(#t10) in #t11.{core::num::==}(null) ?{core::int} let final core::int #t12 = self::getInt() in let final void #t13 = #t9.{self::Test::[]=}(#t10, #t12) in #t12 : #t11;
  core::num v5 = let final self::Test<core::int, core::int> #t14 = t in let final core::String #t15 = "x" in let final core::int #t16 = #t14.{self::Test::[]}(#t15) in #t16.{core::num::==}(null) ?{core::num} let final core::num #t17 = self::getNum() as{TypeError} core::int in let final void #t18 = #t14.{self::Test::[]=}(#t15, #t17) in #t17 : #t16;
  core::int v7 = let final self::Test<core::int, core::int> #t19 = t in let final core::String #t20 = "x" in let final core::int #t21 = #t19.{self::Test::[]}(#t20).{core::num::+}(self::getInt()) in let final void #t22 = #t19.{self::Test::[]=}(#t20, #t21) in #t21;
  core::num v8 = let final self::Test<core::int, core::int> #t23 = t in let final core::String #t24 = "x" in let final core::num #t25 = #t23.{self::Test::[]}(#t24).{core::num::+}(self::getNum()) as{TypeError} core::int in let final void #t26 = #t23.{self::Test::[]=}(#t24, #t25) in #t25;
  core::int v10 = let final self::Test<core::int, core::int> #t27 = t in let final core::String #t28 = "x" in let final core::int #t29 = #t27.{self::Test::[]}(#t28).{core::num::+}(1) in let final void #t30 = #t27.{self::Test::[]=}(#t28, #t29) in #t29;
  core::int v11 = let final self::Test<core::int, core::int> #t31 = t in let final core::String #t32 = "x" in let final core::int #t33 = #t31.{self::Test::[]}(#t32) in let final void #t34 = #t31.{self::Test::[]=}(#t32, #t33.{core::num::+}(1)) in #t33;
}
static method test2(self::Test<core::int, core::num> t) → void {
  core::int v1 = let final self::Test<core::int, core::num> #t35 = t in let final core::String #t36 = "x" in let final core::int #t37 = self::getInt() in let final void #t38 = #t35.{self::Test::[]=}(#t36, #t37) in #t37;
  core::num v2 = let final self::Test<core::int, core::num> #t39 = t in let final core::String #t40 = "x" in let final core::num #t41 = self::getNum() in let final void #t42 = #t39.{self::Test::[]=}(#t40, #t41) in #t41;
  core::double v3 = let final self::Test<core::int, core::num> #t43 = t in let final core::String #t44 = "x" in let final core::double #t45 = self::getDouble() in let final void #t46 = #t43.{self::Test::[]=}(#t44, #t45) in #t45;
  core::int v4 = let final self::Test<core::int, core::num> #t47 = t in let final core::String #t48 = "x" in let final core::int #t49 = #t47.{self::Test::[]}(#t48) in #t49.{core::num::==}(null) ?{core::int} let final core::int #t50 = self::getInt() in let final void #t51 = #t47.{self::Test::[]=}(#t48, #t50) in #t50 : #t49;
  core::num v5 = let final self::Test<core::int, core::num> #t52 = t in let final core::String #t53 = "x" in let final core::int #t54 = #t52.{self::Test::[]}(#t53) in #t54.{core::num::==}(null) ?{core::num} let final core::num #t55 = self::getNum() in let final void #t56 = #t52.{self::Test::[]=}(#t53, #t55) in #t55 : #t54;
  core::num v6 = let final self::Test<core::int, core::num> #t57 = t in let final core::String #t58 = "x" in let final core::int #t59 = #t57.{self::Test::[]}(#t58) in #t59.{core::num::==}(null) ?{core::num} let final core::double #t60 = self::getDouble() in let final void #t61 = #t57.{self::Test::[]=}(#t58, #t60) in #t60 : #t59;
  core::int v7 = let final self::Test<core::int, core::num> #t62 = t in let final core::String #t63 = "x" in let final core::int #t64 = #t62.{self::Test::[]}(#t63).{core::num::+}(self::getInt()) in let final void #t65 = #t62.{self::Test::[]=}(#t63, #t64) in #t64;
  core::num v8 = let final self::Test<core::int, core::num> #t66 = t in let final core::String #t67 = "x" in let final core::num #t68 = #t66.{self::Test::[]}(#t67).{core::num::+}(self::getNum()) in let final void #t69 = #t66.{self::Test::[]=}(#t67, #t68) in #t68;
  core::double v9 = let final self::Test<core::int, core::num> #t70 = t in let final core::String #t71 = "x" in let final core::double #t72 = #t70.{self::Test::[]}(#t71).{core::num::+}(self::getDouble()) in let final void #t73 = #t70.{self::Test::[]=}(#t71, #t72) in #t72;
  core::int v10 = let final self::Test<core::int, core::num> #t74 = t in let final core::String #t75 = "x" in let final core::int #t76 = #t74.{self::Test::[]}(#t75).{core::num::+}(1) in let final void #t77 = #t74.{self::Test::[]=}(#t75, #t76) in #t76;
  core::int v11 = let final self::Test<core::int, core::num> #t78 = t in let final core::String #t79 = "x" in let final core::int #t80 = #t78.{self::Test::[]}(#t79) in let final void #t81 = #t78.{self::Test::[]=}(#t79, #t80.{core::num::+}(1)) in #t80;
}
static method test3(self::Test<core::int, core::double> t) → void {
  core::num v2 = let final self::Test<core::int, core::double> #t82 = t in let final core::String #t83 = "x" in let final core::num #t84 = self::getNum() as{TypeError} core::double in let final void #t85 = #t82.{self::Test::[]=}(#t83, #t84) in #t84;
  core::double v3 = let final self::Test<core::int, core::double> #t86 = t in let final core::String #t87 = "x" in let final core::double #t88 = self::getDouble() in let final void #t89 = #t86.{self::Test::[]=}(#t87, #t88) in #t88;
  core::num v5 = let final self::Test<core::int, core::double> #t90 = t in let final core::String #t91 = "x" in let final core::int #t92 = #t90.{self::Test::[]}(#t91) in #t92.{core::num::==}(null) ?{core::num} let final core::num #t93 = self::getNum() as{TypeError} core::double in let final void #t94 = #t90.{self::Test::[]=}(#t91, #t93) in #t93 : #t92;
  core::num v6 = let final self::Test<core::int, core::double> #t95 = t in let final core::String #t96 = "x" in let final core::int #t97 = #t95.{self::Test::[]}(#t96) in #t97.{core::num::==}(null) ?{core::num} let final core::double #t98 = self::getDouble() in let final void #t99 = #t95.{self::Test::[]=}(#t96, #t98) in #t98 : #t97;
  core::int v7 = let final self::Test<core::int, core::double> #t100 = t in let final core::String #t101 = "x" in let final core::int #t102 = #t100.{self::Test::[]}(#t101).{core::num::+}(self::getInt()) as{TypeError} core::double in let final void #t103 = #t100.{self::Test::[]=}(#t101, #t102) in #t102;
  core::num v8 = let final self::Test<core::int, core::double> #t104 = t in let final core::String #t105 = "x" in let final core::num #t106 = #t104.{self::Test::[]}(#t105).{core::num::+}(self::getNum()) as{TypeError} core::double in let final void #t107 = #t104.{self::Test::[]=}(#t105, #t106) in #t106;
  core::double v9 = let final self::Test<core::int, core::double> #t108 = t in let final core::String #t109 = "x" in let final core::double #t110 = #t108.{self::Test::[]}(#t109).{core::num::+}(self::getDouble()) in let final void #t111 = #t108.{self::Test::[]=}(#t109, #t110) in #t110;
  core::int v10 = let final self::Test<core::int, core::double> #t112 = t in let final core::String #t113 = "x" in let final core::int #t114 = #t112.{self::Test::[]}(#t113).{core::num::+}(1) as{TypeError} core::double in let final void #t115 = #t112.{self::Test::[]=}(#t113, #t114) in #t114;
  core::int v11 = let final self::Test<core::int, core::double> #t116 = t in let final core::String #t117 = "x" in let final core::int #t118 = #t116.{self::Test::[]}(#t117) in let final void #t119 = #t116.{self::Test::[]=}(#t117, #t118.{core::num::+}(1) as{TypeError} core::double) in #t118;
}
static method test4(self::Test<core::num, core::int> t) → void {
  core::int v1 = let final self::Test<core::num, core::int> #t120 = t in let final core::String #t121 = "x" in let final core::int #t122 = self::getInt() in let final void #t123 = #t120.{self::Test::[]=}(#t121, #t122) in #t122;
  core::num v2 = let final self::Test<core::num, core::int> #t124 = t in let final core::String #t125 = "x" in let final core::num #t126 = self::getNum() as{TypeError} core::int in let final void #t127 = #t124.{self::Test::[]=}(#t125, #t126) in #t126;
  core::num v4 = let final self::Test<core::num, core::int> #t128 = t in let final core::String #t129 = "x" in let final core::num #t130 = #t128.{self::Test::[]}(#t129) in #t130.{core::num::==}(null) ?{core::num} let final core::int #t131 = self::getInt() in let final void #t132 = #t128.{self::Test::[]=}(#t129, #t131) in #t131 : #t130;
  core::num v5 = let final self::Test<core::num, core::int> #t133 = t in let final core::String #t134 = "x" in let final core::num #t135 = #t133.{self::Test::[]}(#t134) in #t135.{core::num::==}(null) ?{core::num} let final core::num #t136 = self::getNum() as{TypeError} core::int in let final void #t137 = #t133.{self::Test::[]=}(#t134, #t136) in #t136 : #t135;
  core::num v7 = let final self::Test<core::num, core::int> #t138 = t in let final core::String #t139 = "x" in let final core::num #t140 = #t138.{self::Test::[]}(#t139).{core::num::+}(self::getInt()) as{TypeError} core::int in let final void #t141 = #t138.{self::Test::[]=}(#t139, #t140) in #t140;
  core::num v8 = let final self::Test<core::num, core::int> #t142 = t in let final core::String #t143 = "x" in let final core::num #t144 = #t142.{self::Test::[]}(#t143).{core::num::+}(self::getNum()) as{TypeError} core::int in let final void #t145 = #t142.{self::Test::[]=}(#t143, #t144) in #t144;
  core::num v10 = let final self::Test<core::num, core::int> #t146 = t in let final core::String #t147 = "x" in let final core::num #t148 = #t146.{self::Test::[]}(#t147).{core::num::+}(1) as{TypeError} core::int in let final void #t149 = #t146.{self::Test::[]=}(#t147, #t148) in #t148;
  core::num v11 = let final self::Test<core::num, core::int> #t150 = t in let final core::String #t151 = "x" in let final core::num #t152 = #t150.{self::Test::[]}(#t151) in let final void #t153 = #t150.{self::Test::[]=}(#t151, #t152.{core::num::+}(1) as{TypeError} core::int) in #t152;
}
static method test5(self::Test<core::num, core::num> t) → void {
  core::int v1 = let final self::Test<core::num, core::num> #t154 = t in let final core::String #t155 = "x" in let final core::int #t156 = self::getInt() in let final void #t157 = #t154.{self::Test::[]=}(#t155, #t156) in #t156;
  core::num v2 = let final self::Test<core::num, core::num> #t158 = t in let final core::String #t159 = "x" in let final core::num #t160 = self::getNum() in let final void #t161 = #t158.{self::Test::[]=}(#t159, #t160) in #t160;
  core::double v3 = let final self::Test<core::num, core::num> #t162 = t in let final core::String #t163 = "x" in let final core::double #t164 = self::getDouble() in let final void #t165 = #t162.{self::Test::[]=}(#t163, #t164) in #t164;
  core::num v4 = let final self::Test<core::num, core::num> #t166 = t in let final core::String #t167 = "x" in let final core::num #t168 = #t166.{self::Test::[]}(#t167) in #t168.{core::num::==}(null) ?{core::num} let final core::int #t169 = self::getInt() in let final void #t170 = #t166.{self::Test::[]=}(#t167, #t169) in #t169 : #t168;
  core::num v5 = let final self::Test<core::num, core::num> #t171 = t in let final core::String #t172 = "x" in let final core::num #t173 = #t171.{self::Test::[]}(#t172) in #t173.{core::num::==}(null) ?{core::num} let final core::num #t174 = self::getNum() in let final void #t175 = #t171.{self::Test::[]=}(#t172, #t174) in #t174 : #t173;
  core::num v6 = let final self::Test<core::num, core::num> #t176 = t in let final core::String #t177 = "x" in let final core::num #t178 = #t176.{self::Test::[]}(#t177) in #t178.{core::num::==}(null) ?{core::num} let final core::double #t179 = self::getDouble() in let final void #t180 = #t176.{self::Test::[]=}(#t177, #t179) in #t179 : #t178;
  core::num v7 = let final self::Test<core::num, core::num> #t181 = t in let final core::String #t182 = "x" in let final core::num #t183 = #t181.{self::Test::[]}(#t182).{core::num::+}(self::getInt()) in let final void #t184 = #t181.{self::Test::[]=}(#t182, #t183) in #t183;
  core::num v8 = let final self::Test<core::num, core::num> #t185 = t in let final core::String #t186 = "x" in let final core::num #t187 = #t185.{self::Test::[]}(#t186).{core::num::+}(self::getNum()) in let final void #t188 = #t185.{self::Test::[]=}(#t186, #t187) in #t187;
  core::num v9 = let final self::Test<core::num, core::num> #t189 = t in let final core::String #t190 = "x" in let final core::num #t191 = #t189.{self::Test::[]}(#t190).{core::num::+}(self::getDouble()) in let final void #t192 = #t189.{self::Test::[]=}(#t190, #t191) in #t191;
  core::num v10 = let final self::Test<core::num, core::num> #t193 = t in let final core::String #t194 = "x" in let final core::num #t195 = #t193.{self::Test::[]}(#t194).{core::num::+}(1) in let final void #t196 = #t193.{self::Test::[]=}(#t194, #t195) in #t195;
  core::num v11 = let final self::Test<core::num, core::num> #t197 = t in let final core::String #t198 = "x" in let final core::num #t199 = #t197.{self::Test::[]}(#t198) in let final void #t200 = #t197.{self::Test::[]=}(#t198, #t199.{core::num::+}(1)) in #t199;
}
static method test6(self::Test<core::num, core::double> t) → void {
  core::num v2 = let final self::Test<core::num, core::double> #t201 = t in let final core::String #t202 = "x" in let final core::num #t203 = self::getNum() as{TypeError} core::double in let final void #t204 = #t201.{self::Test::[]=}(#t202, #t203) in #t203;
  core::double v3 = let final self::Test<core::num, core::double> #t205 = t in let final core::String #t206 = "x" in let final core::double #t207 = self::getDouble() in let final void #t208 = #t205.{self::Test::[]=}(#t206, #t207) in #t207;
  core::num v5 = let final self::Test<core::num, core::double> #t209 = t in let final core::String #t210 = "x" in let final core::num #t211 = #t209.{self::Test::[]}(#t210) in #t211.{core::num::==}(null) ?{core::num} let final core::num #t212 = self::getNum() as{TypeError} core::double in let final void #t213 = #t209.{self::Test::[]=}(#t210, #t212) in #t212 : #t211;
  core::num v6 = let final self::Test<core::num, core::double> #t214 = t in let final core::String #t215 = "x" in let final core::num #t216 = #t214.{self::Test::[]}(#t215) in #t216.{core::num::==}(null) ?{core::num} let final core::double #t217 = self::getDouble() in let final void #t218 = #t214.{self::Test::[]=}(#t215, #t217) in #t217 : #t216;
  core::num v7 = let final self::Test<core::num, core::double> #t219 = t in let final core::String #t220 = "x" in let final core::num #t221 = #t219.{self::Test::[]}(#t220).{core::num::+}(self::getInt()) as{TypeError} core::double in let final void #t222 = #t219.{self::Test::[]=}(#t220, #t221) in #t221;
  core::num v8 = let final self::Test<core::num, core::double> #t223 = t in let final core::String #t224 = "x" in let final core::num #t225 = #t223.{self::Test::[]}(#t224).{core::num::+}(self::getNum()) as{TypeError} core::double in let final void #t226 = #t223.{self::Test::[]=}(#t224, #t225) in #t225;
  core::num v9 = let final self::Test<core::num, core::double> #t227 = t in let final core::String #t228 = "x" in let final core::num #t229 = #t227.{self::Test::[]}(#t228).{core::num::+}(self::getDouble()) as{TypeError} core::double in let final void #t230 = #t227.{self::Test::[]=}(#t228, #t229) in #t229;
  core::num v10 = let final self::Test<core::num, core::double> #t231 = t in let final core::String #t232 = "x" in let final core::num #t233 = #t231.{self::Test::[]}(#t232).{core::num::+}(1) as{TypeError} core::double in let final void #t234 = #t231.{self::Test::[]=}(#t232, #t233) in #t233;
  core::num v11 = let final self::Test<core::num, core::double> #t235 = t in let final core::String #t236 = "x" in let final core::num #t237 = #t235.{self::Test::[]}(#t236) in let final void #t238 = #t235.{self::Test::[]=}(#t236, #t237.{core::num::+}(1) as{TypeError} core::double) in #t237;
}
static method test7(self::Test<core::double, core::int> t) → void {
  core::int v1 = let final self::Test<core::double, core::int> #t239 = t in let final core::String #t240 = "x" in let final core::int #t241 = self::getInt() in let final void #t242 = #t239.{self::Test::[]=}(#t240, #t241) in #t241;
  core::num v2 = let final self::Test<core::double, core::int> #t243 = t in let final core::String #t244 = "x" in let final core::num #t245 = self::getNum() as{TypeError} core::int in let final void #t246 = #t243.{self::Test::[]=}(#t244, #t245) in #t245;
  core::num v4 = let final self::Test<core::double, core::int> #t247 = t in let final core::String #t248 = "x" in let final core::double #t249 = #t247.{self::Test::[]}(#t248) in #t249.{core::num::==}(null) ?{core::num} let final core::int #t250 = self::getInt() in let final void #t251 = #t247.{self::Test::[]=}(#t248, #t250) in #t250 : #t249;
  core::num v5 = let final self::Test<core::double, core::int> #t252 = t in let final core::String #t253 = "x" in let final core::double #t254 = #t252.{self::Test::[]}(#t253) in #t254.{core::num::==}(null) ?{core::num} let final core::num #t255 = self::getNum() as{TypeError} core::int in let final void #t256 = #t252.{self::Test::[]=}(#t253, #t255) in #t255 : #t254;
  core::double v7 = let final self::Test<core::double, core::int> #t257 = t in let final core::String #t258 = "x" in let final core::double #t259 = #t257.{self::Test::[]}(#t258).{core::double::+}(self::getInt()) as{TypeError} core::int in let final void #t260 = #t257.{self::Test::[]=}(#t258, #t259) in #t259;
  core::double v8 = let final self::Test<core::double, core::int> #t261 = t in let final core::String #t262 = "x" in let final core::double #t263 = #t261.{self::Test::[]}(#t262).{core::double::+}(self::getNum()) as{TypeError} core::int in let final void #t264 = #t261.{self::Test::[]=}(#t262, #t263) in #t263;
  core::double v10 = let final self::Test<core::double, core::int> #t265 = t in let final core::String #t266 = "x" in let final core::double #t267 = #t265.{self::Test::[]}(#t266).{core::double::+}(1) as{TypeError} core::int in let final void #t268 = #t265.{self::Test::[]=}(#t266, #t267) in #t267;
  core::double v11 = let final self::Test<core::double, core::int> #t269 = t in let final core::String #t270 = "x" in let final core::double #t271 = #t269.{self::Test::[]}(#t270) in let final void #t272 = #t269.{self::Test::[]=}(#t270, #t271.{core::double::+}(1) as{TypeError} core::int) in #t271;
}
static method test8(self::Test<core::double, core::num> t) → void {
  core::int v1 = let final self::Test<core::double, core::num> #t273 = t in let final core::String #t274 = "x" in let final core::int #t275 = self::getInt() in let final void #t276 = #t273.{self::Test::[]=}(#t274, #t275) in #t275;
  core::num v2 = let final self::Test<core::double, core::num> #t277 = t in let final core::String #t278 = "x" in let final core::num #t279 = self::getNum() in let final void #t280 = #t277.{self::Test::[]=}(#t278, #t279) in #t279;
  core::double v3 = let final self::Test<core::double, core::num> #t281 = t in let final core::String #t282 = "x" in let final core::double #t283 = self::getDouble() in let final void #t284 = #t281.{self::Test::[]=}(#t282, #t283) in #t283;
  core::num v4 = let final self::Test<core::double, core::num> #t285 = t in let final core::String #t286 = "x" in let final core::double #t287 = #t285.{self::Test::[]}(#t286) in #t287.{core::num::==}(null) ?{core::num} let final core::int #t288 = self::getInt() in let final void #t289 = #t285.{self::Test::[]=}(#t286, #t288) in #t288 : #t287;
  core::num v5 = let final self::Test<core::double, core::num> #t290 = t in let final core::String #t291 = "x" in let final core::double #t292 = #t290.{self::Test::[]}(#t291) in #t292.{core::num::==}(null) ?{core::num} let final core::num #t293 = self::getNum() in let final void #t294 = #t290.{self::Test::[]=}(#t291, #t293) in #t293 : #t292;
  core::double v6 = let final self::Test<core::double, core::num> #t295 = t in let final core::String #t296 = "x" in let final core::double #t297 = #t295.{self::Test::[]}(#t296) in #t297.{core::num::==}(null) ?{core::double} let final core::double #t298 = self::getDouble() in let final void #t299 = #t295.{self::Test::[]=}(#t296, #t298) in #t298 : #t297;
  core::double v7 = let final self::Test<core::double, core::num> #t300 = t in let final core::String #t301 = "x" in let final core::double #t302 = #t300.{self::Test::[]}(#t301).{core::double::+}(self::getInt()) in let final void #t303 = #t300.{self::Test::[]=}(#t301, #t302) in #t302;
  core::double v8 = let final self::Test<core::double, core::num> #t304 = t in let final core::String #t305 = "x" in let final core::double #t306 = #t304.{self::Test::[]}(#t305).{core::double::+}(self::getNum()) in let final void #t307 = #t304.{self::Test::[]=}(#t305, #t306) in #t306;
  core::double v9 = let final self::Test<core::double, core::num> #t308 = t in let final core::String #t309 = "x" in let final core::double #t310 = #t308.{self::Test::[]}(#t309).{core::double::+}(self::getDouble()) in let final void #t311 = #t308.{self::Test::[]=}(#t309, #t310) in #t310;
  core::double v10 = let final self::Test<core::double, core::num> #t312 = t in let final core::String #t313 = "x" in let final core::double #t314 = #t312.{self::Test::[]}(#t313).{core::double::+}(1) in let final void #t315 = #t312.{self::Test::[]=}(#t313, #t314) in #t314;
  core::double v11 = let final self::Test<core::double, core::num> #t316 = t in let final core::String #t317 = "x" in let final core::double #t318 = #t316.{self::Test::[]}(#t317) in let final void #t319 = #t316.{self::Test::[]=}(#t317, #t318.{core::double::+}(1)) in #t318;
}
static method test9(self::Test<core::double, core::double> t) → void {
  core::num v2 = let final self::Test<core::double, core::double> #t320 = t in let final core::String #t321 = "x" in let final core::num #t322 = self::getNum() as{TypeError} core::double in let final void #t323 = #t320.{self::Test::[]=}(#t321, #t322) in #t322;
  core::double v3 = let final self::Test<core::double, core::double> #t324 = t in let final core::String #t325 = "x" in let final core::double #t326 = self::getDouble() in let final void #t327 = #t324.{self::Test::[]=}(#t325, #t326) in #t326;
  core::num v5 = let final self::Test<core::double, core::double> #t328 = t in let final core::String #t329 = "x" in let final core::double #t330 = #t328.{self::Test::[]}(#t329) in #t330.{core::num::==}(null) ?{core::num} let final core::num #t331 = self::getNum() as{TypeError} core::double in let final void #t332 = #t328.{self::Test::[]=}(#t329, #t331) in #t331 : #t330;
  core::double v6 = let final self::Test<core::double, core::double> #t333 = t in let final core::String #t334 = "x" in let final core::double #t335 = #t333.{self::Test::[]}(#t334) in #t335.{core::num::==}(null) ?{core::double} let final core::double #t336 = self::getDouble() in let final void #t337 = #t333.{self::Test::[]=}(#t334, #t336) in #t336 : #t335;
  core::double v7 = let final self::Test<core::double, core::double> #t338 = t in let final core::String #t339 = "x" in let final core::double #t340 = #t338.{self::Test::[]}(#t339).{core::double::+}(self::getInt()) in let final void #t341 = #t338.{self::Test::[]=}(#t339, #t340) in #t340;
  core::double v8 = let final self::Test<core::double, core::double> #t342 = t in let final core::String #t343 = "x" in let final core::double #t344 = #t342.{self::Test::[]}(#t343).{core::double::+}(self::getNum()) in let final void #t345 = #t342.{self::Test::[]=}(#t343, #t344) in #t344;
  core::double v9 = let final self::Test<core::double, core::double> #t346 = t in let final core::String #t347 = "x" in let final core::double #t348 = #t346.{self::Test::[]}(#t347).{core::double::+}(self::getDouble()) in let final void #t349 = #t346.{self::Test::[]=}(#t347, #t348) in #t348;
  core::double v10 = let final self::Test<core::double, core::double> #t350 = t in let final core::String #t351 = "x" in let final core::double #t352 = #t350.{self::Test::[]}(#t351).{core::double::+}(1) in let final void #t353 = #t350.{self::Test::[]=}(#t351, #t352) in #t352;
  core::double v11 = let final self::Test<core::double, core::double> #t354 = t in let final core::String #t355 = "x" in let final core::double #t356 = #t354.{self::Test::[]}(#t355) in let final void #t357 = #t354.{self::Test::[]=}(#t355, #t356.{core::double::+}(1)) in #t356;
}
static method main() → dynamic {}
