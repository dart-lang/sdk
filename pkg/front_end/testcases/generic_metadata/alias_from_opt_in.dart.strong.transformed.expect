library;
//
// Problems in library:
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:11:3: Error: A generic function type can't be used as a type argument.
// Try using a non-generic function type.
//   List<T1> t1b, // Error
//   ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:13:17: Error: A generic function type can't be used as a type argument.
// Try using a non-generic function type.
//   void Function(List<T1>) t1d, // Error
//                 ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:22:3: Error: Generic function type 'void Function<T>(T)' inferred as a type argument.
// Try providing a non-generic function type explicitly.
//   T4 t4a, // Error,
//   ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:23:8: Error: Generic function type 'void Function<T>(T)' inferred as a type argument.
// Try providing a non-generic function type explicitly.
//   List<T4> t4b, // Error,
//        ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:24:17: Error: Generic function type 'void Function<T>(T)' inferred as a type argument.
// Try providing a non-generic function type explicitly.
//   void Function(T4) t4c, // Error
//                 ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:25:22: Error: Generic function type 'void Function<T>(T)' inferred as a type argument.
// Try providing a non-generic function type explicitly.
//   void Function(List<T4>) t4d, // Error
//                      ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:39:3: Error: A generic function type can't be used as a type argument.
// Try using a non-generic function type.
//   List<T8> t8b, // Error,
//   ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:41:17: Error: A generic function type can't be used as a type argument.
// Try using a non-generic function type.
//   void Function(List<T8>) t8d, // Error
//                 ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:18:3: Error: Generic function type 'List<void Function<T>(T)>' used as a type argument through typedef 'T3'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   T3 t3a, // Error
//   ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:19:8: Error: Generic function type 'List<void Function<T>(T)>' used as a type argument through typedef 'T3'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   List<T3> t3b, // Error
//        ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:20:17: Error: Generic function type 'List<void Function<T>(T)>' used as a type argument through typedef 'T3'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   void Function(T3) t3c, // Error
//                 ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:21:22: Error: Generic function type 'List<void Function<T>(T)>' used as a type argument through typedef 'T3'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   void Function(List<T3>) t3d, // Error
//                      ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:34:3: Error: Generic function type 'ExtensionType<void Function<T>(T)>' used as a type argument through typedef 'T7'.
// Try providing a non-generic function type explicitly.
//   T7 t7a, // Error,
//   ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:35:8: Error: Generic function type 'ExtensionType<void Function<T>(T)>' used as a type argument through typedef 'T7'.
// Try providing a non-generic function type explicitly.
//   List<T7> t7b, // Error,
//        ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:36:17: Error: Generic function type 'ExtensionType<void Function<T>(T)>' used as a type argument through typedef 'T7'.
// Try providing a non-generic function type explicitly.
//   void Function(T7) t7c, // Error
//                 ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:37:22: Error: Generic function type 'ExtensionType<void Function<T>(T)>' used as a type argument through typedef 'T7'.
// Try providing a non-generic function type explicitly.
//   void Function(List<T7>) t7d, // Error
//                      ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:42:3: Error: Generic function type '(List<void Function<T>(T)>, int)' used as a type argument through typedef 'T9'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   T9 t9a, // Error,
//   ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:43:8: Error: Generic function type '(List<void Function<T>(T)>, int)' used as a type argument through typedef 'T9'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   List<T9> t9b, // Error,
//        ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:44:17: Error: Generic function type '(List<void Function<T>(T)>, int)' used as a type argument through typedef 'T9'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   void Function(T9) t9c, // Error
//                 ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:45:22: Error: Generic function type '(List<void Function<T>(T)>, int)' used as a type argument through typedef 'T9'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   void Function(List<T9>) t9d, // Error
//                      ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:46:3: Error: Generic function type '({List<void Function<T>(T)> a, int b})' used as a type argument through typedef 'T10'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   T10 t10a, // Error,
//   ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:47:8: Error: Generic function type '({List<void Function<T>(T)> a, int b})' used as a type argument through typedef 'T10'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   List<T10> t10b, // Error,
//        ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:48:17: Error: Generic function type '({List<void Function<T>(T)> a, int b})' used as a type argument through typedef 'T10'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   void Function(T10) t10c, // Error
//                 ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:49:22: Error: Generic function type '({List<void Function<T>(T)> a, int b})' used as a type argument through typedef 'T10'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   void Function(List<T10>) t10d, // Error
//                      ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:54:3: Error: Generic function type 'FutureOr<List<void Function<T>(T)>>' used as a type argument through typedef 'T12'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   T12 t12a, // Error,
//   ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:55:8: Error: Generic function type 'FutureOr<List<void Function<T>(T)>>' used as a type argument through typedef 'T12'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   List<T12> t12b, // Error,
//        ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:56:17: Error: Generic function type 'FutureOr<List<void Function<T>(T)>>' used as a type argument through typedef 'T12'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   void Function(T12) t12c, // Error
//                 ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:57:22: Error: Generic function type 'FutureOr<List<void Function<T>(T)>>' used as a type argument through typedef 'T12'.
//  - 'List' is from 'dart:core'.
// Try providing a non-generic function type explicitly.
//   void Function(List<T12>) t12d, // Error
//                      ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:63:7: Error: A generic function type can't be used as a type argument.
// Try using a non-generic function type.
//   new T7(0); // Error
//       ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:63:10: Error: The argument type 'int' can't be assigned to the parameter type 'List<void Function<T>(T)>'.
//  - 'List' is from 'dart:core'.
//   new T7(0); // Error
//          ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:59:7: Error: Generic function type 'void Function<T>(T)' inferred as a type argument.
// Try providing a non-generic function type explicitly.
//   new T4(); // Error
//       ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:60:4: Error: Generic function type 'void Function<T>(T)' inferred as a type argument.
// Try providing a non-generic function type explicitly.
//   <T4>[]; // Error
//    ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:61:18: Error: Generic function type 'void Function<T>(T)' inferred as a type argument.
// Try providing a non-generic function type explicitly.
//   <void Function(T4)>[]; // Error
//                  ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:62:23: Error: Generic function type 'void Function<T>(T)' inferred as a type argument.
// Try providing a non-generic function type explicitly.
//   <void Function(List<T4>)>[]; // Error
//                       ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:64:4: Error: Generic function type 'ExtensionType<void Function<T>(T)>' used as a type argument through typedef 'T7'.
// Try providing a non-generic function type explicitly.
//   <T7>[]; // Error
//    ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:65:18: Error: Generic function type 'ExtensionType<void Function<T>(T)>' used as a type argument through typedef 'T7'.
// Try providing a non-generic function type explicitly.
//   <void Function(T7)>[]; // Error
//                  ^
//
// pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:66:23: Error: Generic function type 'ExtensionType<void Function<T>(T)>' used as a type argument through typedef 'T7'.
// Try providing a non-generic function type explicitly.
//   <void Function(List<T7>)>[]; // Error
//                       ^
//
import self as self;
import "dart:core" as core;
import "alias_from_opt_in_lib.dart" as ali;

import "org-dartlang-testcase:///alias_from_opt_in_lib.dart";

static method test(<T extends core::Object? = dynamic>(T%) → void t1a, core::List<<T extends core::Object? = dynamic>(T%) → void> t1b, (<T extends core::Object? = dynamic>(T%) → void) → void t1c, (core::List<<T extends core::Object? = dynamic>(T%) → void>) → void t1d, (<T extends core::Object? = dynamic>(T%) → void) → void t2a, core::List<(<T extends core::Object? = dynamic>(T%) → void) → void> t2b, ((<T extends core::Object? = dynamic>(T%) → void) → void) → void t2c, (core::List<(<T extends core::Object? = dynamic>(T%) → void) → void>) → void t2d, core::List<<T extends core::Object? = dynamic>(T%) → void> t3a, core::List<core::List<<T extends core::Object? = dynamic>(T%) → void>> t3b, (core::List<<T extends core::Object? = dynamic>(T%) → void>) → void t3c, (core::List<core::List<<T extends core::Object? = dynamic>(T%) → void>>) → void t3d, ali::Class<<T extends core::Object? = dynamic>(T%) → void> t4a, core::List<ali::Class<<T extends core::Object? = dynamic>(T%) → void>> t4b, (ali::Class<<T extends core::Object? = dynamic>(T%) → void>) → void t4c, (core::List<ali::Class<<T extends core::Object? = dynamic>(T%) → void>>) → void t4d, (<T extends core::Object? = dynamic>(T%) → void, core::int) t5a, core::List<(<T extends core::Object? = dynamic>(T%) → void, core::int)> t5b, ((<T extends core::Object? = dynamic>(T%) → void, core::int)) → void t5c, (core::List<(<T extends core::Object? = dynamic>(T%) → void, core::int)>) → void t5d, ({required a: <T extends core::Object? = dynamic>(T%) → void, required b: core::int}) t6a, core::List<({required a: <T extends core::Object? = dynamic>(T%) → void, required b: core::int})> t6b, (({required a: <T extends core::Object? = dynamic>(T%) → void, required b: core::int})) → void t6c, (core::List<({required a: <T extends core::Object? = dynamic>(T%) → void, required b: core::int})>) → void t6d, ali::ExtensionType<<T extends core::Object? = dynamic>(T%) → void>% /* = core::List<<T extends core::Object? = dynamic>(T%) → void> */ t7a, core::List<ali::ExtensionType<<T extends core::Object? = dynamic>(T%) → void>% /* = core::List<<T extends core::Object? = dynamic>(T%) → void> */> t7b, (ali::ExtensionType<<T extends core::Object? = dynamic>(T%) → void>% /* = core::List<<T extends core::Object? = dynamic>(T%) → void> */) → void t7c, (core::List<ali::ExtensionType<<T extends core::Object? = dynamic>(T%) → void>% /* = core::List<<T extends core::Object? = dynamic>(T%) → void> */>) → void t7d, <S extends <T extends core::Object? = dynamic>(T%) → void = dynamic>(S) → void t8a, core::List<<S extends <T extends core::Object? = dynamic>(T%) → void = dynamic>(S) → void> t8b, (<S extends <T extends core::Object? = dynamic>(T%) → void = dynamic>(S) → void) → void t8c, (core::List<<S extends <T extends core::Object? = dynamic>(T%) → void = dynamic>(S) → void>) → void t8d, (core::List<<T extends core::Object? = dynamic>(T%) → void>, core::int) t9a, core::List<(core::List<<T extends core::Object? = dynamic>(T%) → void>, core::int)> t9b, ((core::List<<T extends core::Object? = dynamic>(T%) → void>, core::int)) → void t9c, (core::List<(core::List<<T extends core::Object? = dynamic>(T%) → void>, core::int)>) → void t9d, ({required a: core::List<<T extends core::Object? = dynamic>(T%) → void>, required b: core::int}) t10a, core::List<({required a: core::List<<T extends core::Object? = dynamic>(T%) → void>, required b: core::int})> t10b, (({required a: core::List<<T extends core::Object? = dynamic>(T%) → void>, required b: core::int})) → void t10c, (core::List<({required a: core::List<<T extends core::Object? = dynamic>(T%) → void>, required b: core::int})>) → void t10d, FutureOr<<T extends core::Object? = dynamic>(T%) → void>t11a, core::List<FutureOr<<T extends core::Object? = dynamic>(T%) → void>> t11b, (FutureOr<<T extends core::Object? = dynamic>(T%) → void>) → void t11c, (core::List<FutureOr<<T extends core::Object? = dynamic>(T%) → void>>) → void t11d, FutureOr<core::List<<T extends core::Object? = dynamic>(T%) → void>>t12a, core::List<FutureOr<core::List<<T extends core::Object? = dynamic>(T%) → void>>> t12b, (FutureOr<core::List<<T extends core::Object? = dynamic>(T%) → void>>) → void t12c, (core::List<FutureOr<core::List<<T extends core::Object? = dynamic>(T%) → void>>>) → void t12d) → dynamic {
  new ali::Class::•<<T extends core::Object? = dynamic>(T%) → void>();
  core::_GrowableList::•<ali::Class<<T extends core::Object? = dynamic>(T%) → void>>(0);
  core::_GrowableList::•<(ali::Class<<T extends core::Object? = dynamic>(T%) → void>) → void>(0);
  core::_GrowableList::•<(core::List<ali::Class<<T extends core::Object? = dynamic>(T%) → void>>) → void>(0);
  ali::ExtensionType|constructor#<<T extends core::Object? = dynamic>(T%) → void>(invalid-expression "pkg/front_end/testcases/generic_metadata/alias_from_opt_in.dart:63:10: Error: The argument type 'int' can't be assigned to the parameter type 'List<void Function<T>(T)>'.
 - 'List' is from 'dart:core'.
  new T7(0); // Error
         ^" in 0 as{TypeError} Never);
  core::_GrowableList::•<ali::ExtensionType<<T extends core::Object? = dynamic>(T%) → void>% /* = core::List<<T extends core::Object? = dynamic>(T%) → void> */>(0);
  core::_GrowableList::•<(ali::ExtensionType<<T extends core::Object? = dynamic>(T%) → void>% /* = core::List<<T extends core::Object? = dynamic>(T%) → void> */) → void>(0);
  core::_GrowableList::•<(core::List<ali::ExtensionType<<T extends core::Object? = dynamic>(T%) → void>% /* = core::List<<T extends core::Object? = dynamic>(T%) → void> */>) → void>(0);
}
static method main() → dynamic {}

library;
import self as ali;
import "dart:core" as core;

import "dart:async";

typedef T1 = <T extends core::Object? = dynamic>(T%) → void;
typedef T2 = (<T extends core::Object? = dynamic>(T%) → void) → void;
typedef T3 = core::List<<T extends core::Object? = dynamic>(T%) → void>;
typedef T4<X extends <T extends core::Object? = dynamic>(T%) → void> = ali::Class<X>;
typedef T5 = (<T extends core::Object? = dynamic>(T%) → void, core::int);
typedef T6 = ({required a: <T extends core::Object? = dynamic>(T%) → void, required b: core::int});
typedef T7 = ali::ExtensionType<<T extends core::Object? = dynamic>(T%) → void> /* = core::List<<T extends core::Object? = dynamic>(T%) → void> */;
typedef T8 = <S extends <T extends core::Object? = dynamic>(T%) → void = dynamic>(S) → void;
typedef T9 = (core::List<<T extends core::Object? = dynamic>(T%) → void>, core::int);
typedef T10 = ({required a: core::List<<T extends core::Object? = dynamic>(T%) → void>, required b: core::int});
typedef T11 = FutureOr<<T extends core::Object? = dynamic>(T%) → void>;
typedef T12 = FutureOr<core::List<<T extends core::Object? = dynamic>(T%) → void>>;
class Class<T extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → ali::Class<ali::Class::T%>
    : super core::Object::•()
    ;
}
extension type ExtensionType<T extends core::Object? = dynamic>(core::List<T%> it) {
  abstract extension-type-member representation-field get it() → core::List<T%>;
  constructor • = ali::ExtensionType|constructor#;
  constructor tearoff • = ali::ExtensionType|constructor#_#new#tearOff;
}
static extension-type-member method ExtensionType|constructor#<T extends core::Object? = dynamic>(core::List<ali::ExtensionType|constructor#::T%> it) → ali::ExtensionType<ali::ExtensionType|constructor#::T%> /* = core::List<ali::ExtensionType|constructor#::T%> */ {
  lowered final ali::ExtensionType<ali::ExtensionType|constructor#::T%> /* = core::List<ali::ExtensionType|constructor#::T%> */ #this = it;
  return #this;
}
static extension-type-member method ExtensionType|constructor#_#new#tearOff<T extends core::Object? = dynamic>(core::List<ali::ExtensionType|constructor#_#new#tearOff::T%> it) → ali::ExtensionType<ali::ExtensionType|constructor#_#new#tearOff::T%>% /* = core::List<ali::ExtensionType|constructor#_#new#tearOff::T%> */
  return ali::ExtensionType|constructor#<ali::ExtensionType|constructor#_#new#tearOff::T%>(it);
static method test(<T extends core::Object? = dynamic>(T%) → void t1, <T extends core::Object? = dynamic>(T%) → void t2, core::List<<T extends core::Object? = dynamic>(T%) → void> t3, (<T extends core::Object? = dynamic>(T%) → void, core::int) t5, ({required a: <T extends core::Object? = dynamic>(T%) → void, required b: core::int}) t6, <S extends <T extends core::Object? = dynamic>(T%) → void = dynamic>(S) → void t8, (core::List<<T extends core::Object? = dynamic>(T%) → void>, core::int) t9, ({required a: core::List<<T extends core::Object? = dynamic>(T%) → void>, required b: core::int}) t10, FutureOr<<T extends core::Object? = dynamic>(T%) → void>t11, FutureOr<core::List<<T extends core::Object? = dynamic>(T%) → void>>t12) → dynamic {
  new ali::Class::•<<T extends core::Object? = dynamic>(T%) → void>();
  ali::ExtensionType|constructor#<<T extends core::Object? = dynamic>(T%) → void>(core::_GrowableList::•<<T extends core::Object? = dynamic>(T%) → void>(0));
}
static method _#T4#new#tearOff<X extends <T extends core::Object? = dynamic>(T%) → void>() → ali::Class<ali::_#T4#new#tearOff::X>
  return new ali::Class::•<ali::_#T4#new#tearOff::X>();
