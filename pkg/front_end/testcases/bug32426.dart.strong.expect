library;
import self as self;
import "dart:core" as core;

abstract class I extends core::Object {
  synthetic constructor •() → self::I
    : super core::Object::•()
    ;
  abstract method call() → void;
}
class C extends core::Object implements self::I {
  synthetic constructor •() → self::C
    : super core::Object::•()
    ;
  method call([core::int x = null]) → void {}
}
static method main() → dynamic {
  self::I i = new self::C::•();
  ([core::int]) → void f = (let final self::I #t1 = i in #t1.==(null) ?{() → void} null : #t1.{self::I::call}) as{TypeError} ([core::int]) → void;
}
