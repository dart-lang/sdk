library;
//
// Problems in library:
//
// pkg/front_end/testcases/getter_setter_error/pre_feature/setter_getter_type_check.dart:8:3: Error: The type 'E<int>' of the getter 'E.element2' is not a subtype of the type 'E<String>' of the setter 'E.element2'.
//  - 'E' is from 'pkg/front_end/testcases/getter_setter_error/pre_feature/setter_getter_type_check.dart'.
//   element2<int>();
//   ^^^^^^^^
// pkg/front_end/testcases/getter_setter_error/pre_feature/setter_getter_type_check.dart:10:19: Context: This is the declaration of the setter 'E.element2'.
//   static void set element2(E<String> val) {} // Error.
//                   ^^^^^^^^
//
import self as self;
import "dart:core" as core;

class E<T extends core::Object? = dynamic> extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E<core::int> element2 = #C3;
  static const field core::List<self::E<dynamic>> values = #C4;
  const synthetic constructor •(core::int #index, core::String #name) → self::E<self::E::T%>
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E.${this.{core::_Enum::_name}{core::String}}";
  static set element2(self::E<core::String> val) → void {}
}

constants  {
  #C1 = 0
  #C2 = "element2"
  #C3 = self::E<core::int> {index:#C1, _name:#C2}
  #C4 = <self::E<dynamic>>[#C3]
}


Constructor coverage from constants:
org-dartlang-testcase:///setter_getter_type_check.dart:
- E. (from org-dartlang-testcase:///setter_getter_type_check.dart:7:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
