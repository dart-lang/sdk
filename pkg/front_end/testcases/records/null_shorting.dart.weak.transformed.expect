library;
//
// Problems in library:
//
// pkg/front_end/testcases/records/null_shorting.dart:7:10: Error: Property '$1' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try accessing using ?. instead.
//   record.$1; // Error
//          ^^
//
// pkg/front_end/testcases/records/null_shorting.dart:8:10: Error: Property '$2' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try accessing using ?. instead.
//   record.$2; // Error
//          ^^
//
// pkg/front_end/testcases/records/null_shorting.dart:9:10: Error: Property 'd' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try accessing using ?. instead.
//   record.d; // Error
//          ^
//
// pkg/front_end/testcases/records/null_shorting.dart:10:10: Error: Property 'f' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try accessing using ?. instead.
//   record.f; // Error
//          ^
//
// pkg/front_end/testcases/records/null_shorting.dart:11:10: Error: Property 'c' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try accessing using ?. instead.
//   record.c; // Error
//          ^
//
// pkg/front_end/testcases/records/null_shorting.dart:12:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try calling using ?.call instead.
//   record.$1(); // Error
//          ^
//
// pkg/front_end/testcases/records/null_shorting.dart:13:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try calling using ?.call instead.
//   record.$2(); // Error
//          ^
//
// pkg/front_end/testcases/records/null_shorting.dart:14:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try calling using ?.call instead.
//   record.d(); // Error
//          ^
//
// pkg/front_end/testcases/records/null_shorting.dart:15:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try calling using ?.call instead.
//   record.f(); // Error
//          ^
//
// pkg/front_end/testcases/records/null_shorting.dart:16:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
//  - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
// Try calling using ?.call instead.
//   record.c(); // Error
//          ^
//
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  synthetic constructor •() → self::Class
    : super core::Object::•()
    ;
  method call() → void {}
}
extension /* unnamed */ _extension#0 on core::int {
  method call = self::_extension#0|call;
  method tearoff call = self::_extension#0|get#call;
}
extension /* unnamed */ _extension#1 on core::String {
  method call = self::_extension#1|call;
  method tearoff call = self::_extension#1|get#call;
}
extension /* unnamed */ _extension#2 on core::double {
  method call = self::_extension#2|call;
  method tearoff call = self::_extension#2|get#call;
}
static method test((core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? record, core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? list) → dynamic {
  invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:7:10: Error: Property '\$1' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try accessing using ?. instead.
  record.\$1; // Error
         ^^" in record.$1{core::int};
  invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:8:10: Error: Property '\$2' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try accessing using ?. instead.
  record.\$2; // Error
         ^^" in record.$2{core::String};
  invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:9:10: Error: Property 'd' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try accessing using ?. instead.
  record.d; // Error
         ^" in record.d{core::double};
  invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:10:10: Error: Property 'f' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try accessing using ?. instead.
  record.f; // Error
         ^" in record.f{() → void};
  invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:11:10: Error: Property 'c' cannot be accessed on '(int, String, {Class c, double d, void Function() f})?' because it is potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try accessing using ?. instead.
  record.c; // Error
         ^" in record.c{self::Class};
  self::_extension#0|call(invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:12:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try calling using ?.call instead.
  record.\$1(); // Error
         ^" in record.$1{core::int});
  self::_extension#1|call(invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:13:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try calling using ?.call instead.
  record.\$2(); // Error
         ^" in record.$2{core::String});
  self::_extension#2|call(invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:14:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try calling using ?.call instead.
  record.d(); // Error
         ^" in record.d{core::double});
  invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:15:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try calling using ?.call instead.
  record.f(); // Error
         ^" in record.f{() → void}(){() → void};
  invalid-expression "pkg/front_end/testcases/records/null_shorting.dart:16:10: Error: Can't use an expression of type '(int, String, {Class c, double d, void Function() f})?' as a function because it's potentially null.
 - 'Class' is from 'pkg/front_end/testcases/records/null_shorting.dart'.
Try calling using ?.call instead.
  record.c(); // Error
         ^" in record.c{self::Class}.{self::Class::call}(){() → void};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t1 = record in #t1 == null ?{core::int?} null : #t1{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$1{core::int};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t2 = record in #t2 == null ?{core::String?} null : #t2{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$2{core::String};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t3 = record in #t3 == null ?{core::double?} null : #t3{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.d{core::double};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t4 = record in #t4 == null ?{() →? void} null : #t4{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.f{() → void};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t5 = record in #t5 == null ?{self::Class?} null : #t5{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.c{self::Class};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t6 = record in #t6 == null ?{void} null : self::_extension#0|call(#t6{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$1{core::int});
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t7 = record in #t7 == null ?{void} null : self::_extension#1|call(#t7{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$2{core::String});
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t8 = record in #t8 == null ?{void} null : self::_extension#2|call(#t8{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.d{core::double});
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t9 = record in #t9 == null ?{void} null : #t9{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.f{() → void}(){() → void};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t10 = record in #t10 == null ?{void} null : #t10{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.c{self::Class}.{self::Class::call}(){() → void};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t11 = record in #t11 == null ?{core::bool?} null : #t11{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$1{core::int}.{core::int::isEven}{core::bool};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t12 = record in #t12 == null ?{core::int?} null : #t12{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$2{core::String}.{core::String::length}{core::int};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t13 = record in #t13 == null ?{core::bool?} null : #t13{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.d{core::double}.{core::num::isNaN}{core::bool};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t14 = record in #t14 == null ?{() →? void} null : #t14{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.f{() → void};
  let final(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})? #t15 = record in #t15 == null ?{() →? void} null : #t15{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.c{self::Class}.{self::Class::call}{() → void};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t16 = list in #t16 == null ?{core::int?} null : #t16{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$1{core::int};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t17 = list in #t17 == null ?{core::String?} null : #t17{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$2{core::String};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t18 = list in #t18 == null ?{core::double?} null : #t18{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.d{core::double};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t19 = list in #t19 == null ?{() →? void} null : #t19{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.f{() → void};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t20 = list in #t20 == null ?{self::Class?} null : #t20{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.c{self::Class};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t21 = list in #t21 == null ?{void} null : self::_extension#0|call(#t21{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$1{core::int});
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t22 = list in #t22 == null ?{void} null : self::_extension#1|call(#t22{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$2{core::String});
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t23 = list in #t23 == null ?{void} null : self::_extension#2|call(#t23{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.d{core::double});
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t24 = list in #t24 == null ?{void} null : #t24{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.f{() → void}(){() → void};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t25 = list in #t25 == null ?{void} null : #t25{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.c{self::Class}.{self::Class::call}(){() → void};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t26 = list in #t26 == null ?{core::bool?} null : #t26{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$1{core::int}.{core::int::isEven}{core::bool};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t27 = list in #t27 == null ?{core::int?} null : #t27{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.$2{core::String}.{core::String::length}{core::int};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t28 = list in #t28 == null ?{core::bool?} null : #t28{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.d{core::double}.{core::num::isNaN}{core::bool};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t29 = list in #t29 == null ?{() →? void} null : #t29{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.f{() → void};
  let final core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>? #t30 = list in #t30 == null ?{() →? void} null : #t30{core::List<(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})>}.{core::Iterable::first}{(core::int, core::String, {required c: self::Class, required d: core::double, required f: () → void})}.c{self::Class}.{self::Class::call}{() → void};
}
static extension-member method _extension#0|call(lowered final core::int #this) → void {}
static extension-member method _extension#0|get#call(lowered final core::int #this) → () → void
  return () → void => self::_extension#0|call(#this);
static extension-member method _extension#1|call(lowered final core::String #this) → void {}
static extension-member method _extension#1|get#call(lowered final core::String #this) → () → void
  return () → void => self::_extension#1|call(#this);
static extension-member method _extension#2|call(lowered final core::double #this) → void {}
static extension-member method _extension#2|get#call(lowered final core::double #this) → () → void
  return () → void => self::_extension#2|call(#this);
