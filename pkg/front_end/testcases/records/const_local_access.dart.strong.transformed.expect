library;
import self as self;
import "dart:core" as core;

class C extends core::Object /*hasConstConstructor*/  {
  final field (core::num, {required name: core::String}) r;
  const constructor •(core::int i, core::String s) → self::C
    : self::C::r = (i.{core::num::+}(1){(core::num) → core::int}, {name: s.{core::String::+}("!"){(core::String) → core::String}}), super core::Object::•()
    ;
}
static method main() → dynamic {
  const self::C c = #C4;
  self::expect(43, #C4.{self::C::r}{(core::num, {required name: core::String})}.$1{core::num});
  self::expect("Hi!", #C4.{self::C::r}{(core::num, {required name: core::String})}.name{core::String});
}
static method expect(dynamic expected, dynamic actual) → dynamic {
  if(!(expected =={core::Object::==}{(core::Object) → core::bool} actual))
    throw "Expected ${expected}, actual ${actual}";
}

constants  {
  #C1 = 43
  #C2 = "Hi!"
  #C3 = (#C1, {name:#C2})
  #C4 = self::C {r:#C3}
}


Constructor coverage from constants:
org-dartlang-testcase:///const_local_access.dart:
- C. (from org-dartlang-testcase:///const_local_access.dart:7:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
