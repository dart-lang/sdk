library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method main() → void {
  self::left<core::int, core::int>(<(core::int, core::int)>[(1, 2), (3, 4)]);
}
static method left<A extends core::Object? = dynamic, B extends core::Object? = dynamic>(core::List<(self::left::A%, self::left::B%)> pairs) → core::List<self::left::A%>
  return block {
    final core::List<self::left::A%> #t1 = <self::left::A%>[];
    for (final(self::left::A%, self::left::B%) #t2 in pairs) {
      hoisted self::left::A% a;
      {
        final synthesized dynamic #0#0 = #t2;
        if(!(let final dynamic #t3 = a = #0#0{(self::left::A%, self::left::B%)}.$1{self::left::A%} in true))
          throw new core::StateError::•("Pattern matching error");
      }
      #t1.{core::List::add}{Invariant}(a){(self::left::A%) → void};
    }
  } =>#t1;
