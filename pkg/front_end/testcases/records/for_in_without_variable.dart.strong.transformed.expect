library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

static method main() → void {
  self::left<core::int, core::int>(core::_GrowableList::_literal2<(core::int, core::int)>((1, 2), (3, 4)));
}
static method left<A extends core::Object? = dynamic, B extends core::Object? = dynamic>(core::List<(self::left::A%, self::left::B%)> pairs) → core::List<self::left::A%>
  return block {
    final core::List<self::left::A%> #t1 = core::_GrowableList::•<self::left::A%>(0);
    {
      synthesized core::Iterator<(self::left::A%, self::left::B%)> :sync-for-iterator = pairs.{core::Iterable::iterator}{core::Iterator<(self::left::A%, self::left::B%)>};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
        final(self::left::A%, self::left::B%) #t2 = :sync-for-iterator.{core::Iterator::current}{(self::left::A%, self::left::B%)};
        {
          hoisted self::left::A% a;
          {
            final synthesized dynamic #0#0 = #t2;
            if(!(let final self::left::A% #t3 = a = #0#0{(self::left::A%, self::left::B%)}.$1{self::left::A%} in true))
              throw new core::StateError::•("Pattern matching error");
          }
          #t1.{core::List::add}{Invariant}(a){(self::left::A%) → void};
        }
      }
    }
  } =>#t1;


Extra constant evaluation status:
Evaluated: RecordLiteral @ org-dartlang-testcase:///for_in_without_variable.dart:6:9 -> RecordConstant(const (1, 2))
Evaluated: RecordLiteral @ org-dartlang-testcase:///for_in_without_variable.dart:6:16 -> RecordConstant(const (3, 4))
Extra constant evaluation: evaluated: 24, effectively constant: 2
