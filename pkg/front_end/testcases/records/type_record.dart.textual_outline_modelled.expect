AR foo10() => throw '';
List<Record> foo7() => throw '';
R foo9() => throw '';
RR foo11() => throw '';
Record foo1() => throw '';

abstract class A1 extends A<Record> {}

abstract class A2 implements A<Record> {}

abstract class A3 with A<Record> {}

abstract class A4 extends AR {}

abstract class A5 extends AR2 {}

abstract class A6 extends AR3 {}

abstract class A7 extends AR4 {}

abstract mixin class A<X> {}

bar(Record record) {}
dynamic foo12(R r) => null;
dynamic foo13(AR l) => null;
dynamic foo14(RR l) => null;
dynamic foo2() => <Record>[];
dynamic foo3() => Record;
dynamic foo4() => List<Record>;
dynamic foo5(Record r) => null;
dynamic foo6({required Record r}) => null;
dynamic foo8(List<Record> l) => null;
foo((int, String) record) {}
main() {}
typedef AR = A<Record>;
typedef AR2 = A<R>;
typedef AR3 = A<RR>;
typedef AR4 = A<AR>;
typedef R = Record;
typedef RR = R;
