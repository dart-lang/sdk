library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

static method main() → void {
  for ((core::Iterable<core::int>, core::Iterable<core::int>) _ in self::split<core::int>(<core::int>[1, 2, 3])) {
  }
}
static method split<A extends core::Object? = dynamic>(core::Iterable<self::split::A%> it) → core::Iterable<(core::Iterable<self::split::A%>, core::Iterable<self::split::A%>)>
  return block {
    core::Iterable<(core::Iterable<self::split::A%>, core::Iterable<self::split::A%>)> #t1;
    final synthesized core::Iterable<self::split::A%> #1#0 = it;
    #L1:
    {
      {
        if(#C1 =={core::Object::==}{(core::Object) → core::bool} #1#0.{core::Iterable::isEmpty}{core::bool}) {
          #t1 = <(core::Iterable<self::split::A%>, core::Iterable<self::split::A%>)>[(new _in::EmptyIterable::•<self::split::A%>(), new _in::EmptyIterable::•<self::split::A%>())];
          break #L1;
        }
      }
      {
        hoisted self::split::A% x;
        if(let final dynamic #t2 = x = #1#0.{core::Iterable::first}{self::split::A%} in true) {
          #t1 = (() → core::Iterable<(core::Iterable<self::split::A%>, core::Iterable<self::split::A%>)> sync* {
            yield(new _in::EmptyIterable::•<self::split::A%>(), it);
            for (final(core::Iterable<self::split::A%>, core::Iterable<self::split::A%>) #t3 in self::split<self::split::A%>(it.{core::Iterable::skip}(1){(core::int) → core::Iterable<self::split::A%>})) {
              hoisted core::Iterable<self::split::A%> ls;
              hoisted core::Iterable<self::split::A%> rs;
              {
                final synthesized dynamic #0#0 = #t3;
                if(!((let final dynamic #t4 = ls = #0#0{(core::Iterable<self::split::A%>, core::Iterable<self::split::A%>)}.$1{core::Iterable<self::split::A%>} in true) && (let final dynamic #t5 = rs = #0#0{(core::Iterable<self::split::A%>, core::Iterable<self::split::A%>)}.$2{core::Iterable<self::split::A%>} in true)))
                  throw new core::StateError::•("Pattern matching error");
              }
              yield( block {
                final core::List<self::split::A%> #t6 = <self::split::A%>[x];
                #t6.{core::List::addAll}{Invariant}(ls){(core::Iterable<self::split::A%>) → void};
              } =>#t6, rs);
            }
          })(){() → core::Iterable<(core::Iterable<self::split::A%>, core::Iterable<self::split::A%>)>};
          break #L1;
        }
      }
      throw new _in::ReachabilityError::•("`null` encountered as case in a switch expression with a non-nullable type.");
    }
  } =>#t1;

constants  {
  #C1 = true
}
