library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:13:7: Error: The type 'Extends' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Extends extends FinalClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:15:7: Error: The type 'Implements' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Implements implements FinalClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:17:7: Error: The type 'On' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// mixin On on FinalClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:22:7: Error: The type 'Multiple' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Multiple extends RegularClass implements FinalClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:24:7: Error: The type 'IndirectSubtype' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class IndirectSubtype extends SubtypeOfFinal {} /* Error */
//       ^
//
import self as self;
import "dart:core" as core;

final class FinalClass extends core::Object {
  synthetic constructor •() → self::FinalClass
    ;
}
base class BaseClass extends self::FinalClass {
  synthetic constructor •() → self::BaseClass
    ;
}
abstract sealed class SubtypeOfFinal extends self::FinalClass {
  synthetic constructor •() → self::SubtypeOfFinal
    ;
}
class RegularClass extends core::Object {
  synthetic constructor •() → self::RegularClass
    ;
}
class Extends extends self::FinalClass {
  synthetic constructor •() → self::Extends
    ;
}
class Implements extends core::Object implements self::FinalClass {
  synthetic constructor •() → self::Implements
    ;
}
abstract class On extends self::FinalClass /*isMixinDeclaration*/  {
}
class ExtendsExtends extends self::Extends {
  synthetic constructor •() → self::ExtendsExtends
    ;
}
class Multiple extends self::RegularClass implements self::FinalClass {
  synthetic constructor •() → self::Multiple
    ;
}
class IndirectSubtype extends self::SubtypeOfFinal {
  synthetic constructor •() → self::IndirectSubtype
    ;
}
