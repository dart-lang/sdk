library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:12:7: Error: The type 'Extends' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Extends extends FinalClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:14:7: Error: The type 'Implements' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Implements implements FinalClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:16:7: Error: The type 'MixinImplements' must be 'base', 'final' or 'sealed' because the supertype 'FinalMixin' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// mixin MixinImplements implements FinalMixin {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:18:7: Error: The type 'With' must be 'base', 'final' or 'sealed' because the supertype 'FinalMixin' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class With with FinalMixin {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:20:7: Error: The type 'With2' must be 'base', 'final' or 'sealed' because the supertype 'FinalMixin' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class With2 with FinalMixin, FinalMixin2 {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:22:7: Error: The type 'On' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// mixin On on FinalClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:24:7: Error: The type 'ExtendsExtends' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class ExtendsExtends extends Extends {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:26:7: Error: The type 'Multiple' must be 'base', 'final' or 'sealed' because the supertype 'BaseClass' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Multiple extends BaseClass implements FinalMixin {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:28:7: Error: The type 'Multiple2' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Multiple2 extends RegularClass implements FinalClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/final/final_subtype_not_base_final_sealed.dart:30:7: Error: The type 'IndirectSubtype' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class IndirectSubtype extends SubtypeOfFinal {} /* Error */
//       ^
//
import self as self;
import "dart:core" as core;

final class FinalClass extends core::Object {
  synthetic constructor •() → self::FinalClass
    ;
}
abstract final class FinalMixin extends core::Object /*isMixinDeclaration*/  {
}
base class BaseClass extends self::FinalClass {
  synthetic constructor •() → self::BaseClass
    ;
}
abstract sealed class SubtypeOfFinal extends self::FinalClass {
  synthetic constructor •() → self::SubtypeOfFinal
    ;
}
class RegularClass extends core::Object {
  synthetic constructor •() → self::RegularClass
    ;
}
abstract final class FinalMixin2 extends core::Object /*isMixinDeclaration*/  {
}
class Extends extends self::FinalClass {
  synthetic constructor •() → self::Extends
    ;
}
class Implements extends core::Object implements self::FinalClass {
  synthetic constructor •() → self::Implements
    ;
}
abstract class MixinImplements extends core::Object implements self::FinalMixin /*isMixinDeclaration*/  {
}
abstract final class _With&Object&FinalMixin = core::Object with self::FinalMixin /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_With&Object&FinalMixin
    : super core::Object::•()
    ;
}
class With extends self::_With&Object&FinalMixin {
  synthetic constructor •() → self::With
    ;
}
abstract final class _With2&Object&FinalMixin = core::Object with self::FinalMixin /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_With2&Object&FinalMixin
    : super core::Object::•()
    ;
}
abstract final class _With2&Object&FinalMixin&FinalMixin2 = self::_With2&Object&FinalMixin with self::FinalMixin2 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_With2&Object&FinalMixin&FinalMixin2
    : super self::_With2&Object&FinalMixin::•()
    ;
}
class With2 extends self::_With2&Object&FinalMixin&FinalMixin2 {
  synthetic constructor •() → self::With2
    ;
}
abstract class On extends self::FinalClass /*isMixinDeclaration*/  {
}
class ExtendsExtends extends self::Extends {
  synthetic constructor •() → self::ExtendsExtends
    ;
}
class Multiple extends self::BaseClass implements self::FinalMixin {
  synthetic constructor •() → self::Multiple
    ;
}
class Multiple2 extends self::RegularClass implements self::FinalClass {
  synthetic constructor •() → self::Multiple2
    ;
}
class IndirectSubtype extends self::SubtypeOfFinal {
  synthetic constructor •() → self::IndirectSubtype
    ;
}
