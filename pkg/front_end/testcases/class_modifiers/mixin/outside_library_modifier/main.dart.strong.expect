library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/mixin/outside_library_modifier/main.dart:7:21: Error: The class 'BaseClass' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class BaseWith with BaseClass {}
//                     ^
//
// pkg/front_end/testcases/class_modifiers/mixin/outside_library_modifier/main.dart:7:7: Error: The type 'BaseWith' must be 'base', 'final' or 'sealed' because the supertype 'BaseClass' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class BaseWith with BaseClass {}
//       ^
//
// pkg/front_end/testcases/class_modifiers/mixin/outside_library_modifier/main.dart:9:26: Error: The class 'InterfaceClass' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class InterfaceWith with InterfaceClass {}
//                          ^
//
// pkg/front_end/testcases/class_modifiers/mixin/outside_library_modifier/main.dart:11:22: Error: The class 'FinalClass' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class FinalWith with FinalClass {}
//                      ^
//
// pkg/front_end/testcases/class_modifiers/mixin/outside_library_modifier/main.dart:13:23: Error: The class 'SealedClass' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class SealedWith with SealedClass {}
//                       ^
//
// pkg/front_end/testcases/class_modifiers/mixin/outside_library_modifier/main.dart:13:23: Error: The class 'SealedClass' can't be extended, implemented, or mixed in outside of its library because it's a sealed class.
// class SealedWith with SealedClass {}
//                       ^
//
import self as self;
import "dart:core" as core;
import "main_lib.dart" as mai;

import "org-dartlang-testcase:///main_lib.dart";

abstract final class _BaseWith&Object&BaseClass = core::Object with mai::BaseClass /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_BaseWith&Object&BaseClass
    : super core::Object::•()
    ;
}
class BaseWith extends self::_BaseWith&Object&BaseClass {
  synthetic constructor •() → self::BaseWith
    : super self::_BaseWith&Object&BaseClass::•()
    ;
}
abstract class _InterfaceWith&Object&InterfaceClass = core::Object with mai::InterfaceClass /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_InterfaceWith&Object&InterfaceClass
    : super core::Object::•()
    ;
}
class InterfaceWith extends self::_InterfaceWith&Object&InterfaceClass {
  synthetic constructor •() → self::InterfaceWith
    : super self::_InterfaceWith&Object&InterfaceClass::•()
    ;
}
abstract final class _FinalWith&Object&FinalClass = core::Object with mai::FinalClass /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_FinalWith&Object&FinalClass
    : super core::Object::•()
    ;
}
class FinalWith extends self::_FinalWith&Object&FinalClass {
  synthetic constructor •() → self::FinalWith
    : super self::_FinalWith&Object&FinalClass::•()
    ;
}
abstract sealed class _SealedWith&Object&SealedClass = core::Object with mai::SealedClass /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_SealedWith&Object&SealedClass
    : super core::Object::•()
    ;
}
class SealedWith extends self::_SealedWith&Object&SealedClass {
  synthetic constructor •() → self::SealedWith
    : super self::_SealedWith&Object&SealedClass::•()
    ;
}

library /*isNonNullableByDefault*/;
import self as mai;
import "dart:core" as core;

base class BaseClass extends core::Object {
  synthetic constructor •() → mai::BaseClass
    : super core::Object::•()
    ;
}
interface class InterfaceClass extends core::Object {
  synthetic constructor •() → mai::InterfaceClass
    : super core::Object::•()
    ;
}
final class FinalClass extends core::Object {
  synthetic constructor •() → mai::FinalClass
    : super core::Object::•()
    ;
}
abstract sealed class SealedClass extends core::Object {
  synthetic constructor •() → mai::SealedClass
    : super core::Object::•()
    ;
}
