library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/mixin/mixin_class_core_libraries.dart:7:14: Error: The class 'Comparable' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class A with Comparable<int> {
//              ^
//
// pkg/front_end/testcases/class_modifiers/mixin/mixin_class_core_libraries.dart:11:7: Error: Can't use 'Error' as a mixin because it has constructors.
// class B with Error {} /* Error */
//       ^
// sdk/lib/core/errors.dart:73:3: Context: This constructor prevents using 'Error' as a mixin.
//   Error(); // Prevent use as mixin.
//   ^
//
// pkg/front_end/testcases/class_modifiers/mixin/mixin_class_core_libraries.dart:11:14: Error: The class 'Error' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class B with Error {} /* Error */
//              ^
//
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;
import "dart:convert" as con;

abstract class _A&Object&Comparable extends core::Object implements core::Comparable<core::int> /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_A&Object&Comparable
    : super core::Object::•()
    ;
  abstract method /* from org-dartlang-sdk:///sdk/lib/core/comparable.dart */ compareTo(covariant-by-class core::int other) → core::int;
  static method /* from org-dartlang-sdk:///sdk/lib/core/comparable.dart */ compare(core::Comparable<dynamic> a, core::Comparable<dynamic> b) → core::int
    return a.{core::Comparable::compareTo}(b){(dynamic) → core::int};
}
class A extends self::_A&Object&Comparable {
  synthetic constructor •() → self::A
    : super self::_A&Object&Comparable::•()
    ;
  method compareTo(covariant-by-class core::int x) → core::int
    return 0;
}
abstract class _B&Object&Error extends core::Object implements core::Error /*isAnonymousMixin,isEliminatedMixin*/  {
  @#C3
  field core::StackTrace? _stackTrace = null /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/errors_patch.dart */;
  synthetic constructor •() → self::_B&Object&Error
    : super core::Object::•()
    ;
  @#C4
  get /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/errors_patch.dart */ stackTrace() → core::StackTrace?
    return this.{core::Error::_stackTrace}{core::StackTrace?};
  static method /* from org-dartlang-sdk:///sdk/lib/core/errors.dart */ safeToString(core::Object? object) → core::String {
    if(object is{ForNonNullableByDefault} core::num || object is{ForNonNullableByDefault} core::bool || object == null) {
      return object.{core::Object::toString}(){() → core::String};
    }
    if(object{core::Object} is{ForNonNullableByDefault} core::String) {
      return core::Error::_stringToSafeString(object{core::String});
    }
    return core::Error::_objectToString(object{core::Object});
  }
  @#C4
  static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/errors_patch.dart */ _stringToSafeString(core::String string) → core::String {
    return #C5.{con::JsonCodec::encode}(string){(core::Object?, {toEncodable: (dynamic) →? core::Object?}) → core::String};
  }
  @#C4
  static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/errors_patch.dart */ _objectToString(core::Object object) → core::String {
    return core::Object::_toString(object);
  }
  @#C7
  static method /* from org-dartlang-sdk:///sdk/lib/core/errors.dart */ throwWithStackTrace(core::Object error, core::StackTrace stackTrace) → Never {
    _in::checkNotNullable<core::Object>(error, "error");
    _in::checkNotNullable<core::StackTrace>(stackTrace, "stackTrace");
    let final Never #t1 = core::Error::_throw(error, stackTrace) in throw new _in::ReachabilityError::•("`null` encountered as the result from expression with type `Never`.");
  }
  @#C4
  @#C10
  external static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/errors_patch.dart */ _throw(core::Object error, core::StackTrace stackTrace) → Never;
}
class B extends self::_B&Object&Error {
  synthetic constructor •() → self::B
    : super self::_B&Object&Error::•()
    ;
}

constants  {
  #C1 = "vm:entry-point"
  #C2 = null
  #C3 = core::pragma {name:#C1, options:#C2}
  #C4 = _in::_Patch {}
  #C5 = con::JsonCodec {_reviver:#C2, _toEncodable:#C2}
  #C6 = "2.16"
  #C7 = _in::Since {version:#C6}
  #C8 = "vm:external-name"
  #C9 = "Error_throwWithStackTrace"
  #C10 = core::pragma {name:#C8, options:#C9}
}
