library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/mixin/no_modifier_outside_library_legacy/main.dart:12:18: Error: The class 'A' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class AWith with A {}
//                  ^
//
// pkg/front_end/testcases/class_modifiers/mixin/no_modifier_outside_library_legacy/main.dart:14:18: Error: The class 'B' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class BWith with B {}
//                  ^
//
// pkg/front_end/testcases/class_modifiers/mixin/no_modifier_outside_library_legacy/main.dart:16:18: Error: The class 'C' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class CWith with C {}
//                  ^
//
// pkg/front_end/testcases/class_modifiers/mixin/no_modifier_outside_library_legacy/main.dart:18:30: Error: The class 'A' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class MultipleWithMixin with A, M {}
//                              ^
//
// pkg/front_end/testcases/class_modifiers/mixin/no_modifier_outside_library_legacy/main.dart:20:37: Error: The class 'A' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class MultipleWithAnotherClass with A, B {}
//                                     ^
//
// pkg/front_end/testcases/class_modifiers/mixin/no_modifier_outside_library_legacy/main.dart:20:40: Error: The class 'B' can't be used as a mixin because it isn't a mixin class nor a mixin.
// class MultipleWithAnotherClass with A, B {}
//                                        ^
//
import self as self;
import "dart:core" as core;
import "main_lib.dart" as mai;

import "org-dartlang-testcase:///main_lib.dart";

abstract class _AWith&Object&A = core::Object with mai::A /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_AWith&Object&A
    : super core::Object::•()
    ;
}
class AWith extends self::_AWith&Object&A {
  synthetic constructor •() → self::AWith
    ;
}
abstract class _BWith&Object&B = core::Object with mai::B /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_BWith&Object&B
    : super core::Object::•()
    ;
}
class BWith extends self::_BWith&Object&B {
  synthetic constructor •() → self::BWith
    ;
}
abstract class _CWith&Object&C = core::Object with mai::C /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_CWith&Object&C
    : super core::Object::•()
    ;
}
class CWith extends self::_CWith&Object&C {
  synthetic constructor •() → self::CWith
    ;
}
abstract class _MultipleWithMixin&Object&A = core::Object with mai::A /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MultipleWithMixin&Object&A
    : super core::Object::•()
    ;
}
abstract class _MultipleWithMixin&Object&A&M = self::_MultipleWithMixin&Object&A with mai::M /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MultipleWithMixin&Object&A&M
    : super self::_MultipleWithMixin&Object&A::•()
    ;
}
class MultipleWithMixin extends self::_MultipleWithMixin&Object&A&M {
  synthetic constructor •() → self::MultipleWithMixin
    ;
}
abstract class _MultipleWithAnotherClass&Object&A = core::Object with mai::A /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MultipleWithAnotherClass&Object&A
    : super core::Object::•()
    ;
}
abstract class _MultipleWithAnotherClass&Object&A&B = self::_MultipleWithAnotherClass&Object&A with mai::B /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_MultipleWithAnotherClass&Object&A&B
    : super self::_MultipleWithAnotherClass&Object&A::•()
    ;
}
class MultipleWithAnotherClass extends self::_MultipleWithAnotherClass&Object&A&B {
  synthetic constructor •() → self::MultipleWithAnotherClass
    ;
}

library /*isNonNullableByDefault*/;
import self as mai;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → mai::A
    ;
}
abstract class B extends core::Object {
  synthetic constructor •() → mai::B
    ;
}
abstract class M extends core::Object /*isMixinDeclaration*/  {
}
class C extends core::Object implements mai::M /*isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → mai::C
    : super core::Object::•()
    ;
}
