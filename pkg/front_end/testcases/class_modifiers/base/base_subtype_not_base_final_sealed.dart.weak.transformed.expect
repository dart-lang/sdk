library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:17:7: Error: The type 'Extends' must be 'base', 'final' or 'sealed' because the supertype 'BaseClass' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Extends extends BaseClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:19:7: Error: The type 'Implements' must be 'base', 'final' or 'sealed' because the supertype 'BaseClass' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Implements implements BaseClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:21:7: Error: The type 'MixinImplements' must be 'base', 'final' or 'sealed' because the supertype 'BaseMixin' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// mixin MixinImplements implements BaseMixin {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:23:7: Error: The type 'With' must be 'base', 'final' or 'sealed' because the supertype 'BaseMixin' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class With with BaseMixin {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:25:7: Error: The type 'With2' must be 'base', 'final' or 'sealed' because the supertype 'BaseMixin' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class With2 with BaseMixin, BaseMixin2 {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:27:7: Error: The type 'On' must be 'base', 'final' or 'sealed' because the supertype 'BaseClass' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// mixin On on BaseClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:32:7: Error: The type 'Multiple' must be 'base', 'final' or 'sealed' because the supertype 'FinalClass' is 'final'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Multiple extends FinalClass implements BaseMixin {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:34:7: Error: The type 'Multiple2' must be 'base', 'final' or 'sealed' because the supertype 'BaseClass' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class Multiple2 extends RegularClass implements BaseClass {} /* Error */
//       ^
//
// pkg/front_end/testcases/class_modifiers/base/base_subtype_not_base_final_sealed.dart:36:7: Error: The type 'IndirectSubtype' must be 'base', 'final' or 'sealed' because the supertype 'BaseClass' is 'base'.
// Try adding 'base', 'final', or 'sealed' to the type.
// class IndirectSubtype extends SubtypeOfBase {} /* Error */
//       ^
//
import self as self;
import "dart:core" as core;

base class BaseClass extends core::Object {
  synthetic constructor •() → self::BaseClass
    : super core::Object::•()
    ;
}
abstract base class BaseMixin extends core::Object /*isMixinDeclaration*/  {
}
final class FinalClass extends self::BaseClass {
  synthetic constructor •() → self::FinalClass
    : super self::BaseClass::•()
    ;
}
abstract sealed class SubtypeOfBase extends self::BaseClass {
  synthetic constructor •() → self::SubtypeOfBase
    : super self::BaseClass::•()
    ;
}
class RegularClass extends core::Object {
  synthetic constructor •() → self::RegularClass
    : super core::Object::•()
    ;
}
abstract base class BaseMixin2 extends core::Object /*isMixinDeclaration*/  {
}
class Extends extends self::BaseClass {
  synthetic constructor •() → self::Extends
    : super self::BaseClass::•()
    ;
}
class Implements extends core::Object implements self::BaseClass {
  synthetic constructor •() → self::Implements
    : super core::Object::•()
    ;
}
abstract class MixinImplements extends core::Object implements self::BaseMixin /*isMixinDeclaration*/  {
}
abstract final class _With&Object&BaseMixin extends core::Object implements self::BaseMixin /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_With&Object&BaseMixin
    : super core::Object::•()
    ;
}
class With extends self::_With&Object&BaseMixin {
  synthetic constructor •() → self::With
    : super self::_With&Object&BaseMixin::•()
    ;
}
abstract final class _With2&Object&BaseMixin extends core::Object implements self::BaseMixin /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_With2&Object&BaseMixin
    : super core::Object::•()
    ;
}
abstract final class _With2&Object&BaseMixin&BaseMixin2 extends self::_With2&Object&BaseMixin implements self::BaseMixin2 /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_With2&Object&BaseMixin&BaseMixin2
    : super self::_With2&Object&BaseMixin::•()
    ;
}
class With2 extends self::_With2&Object&BaseMixin&BaseMixin2 {
  synthetic constructor •() → self::With2
    : super self::_With2&Object&BaseMixin&BaseMixin2::•()
    ;
}
abstract class On extends self::BaseClass /*isMixinDeclaration*/  {
}
class ExtendsExtends extends self::Extends {
  synthetic constructor •() → self::ExtendsExtends
    : super self::Extends::•()
    ;
}
class Multiple extends self::FinalClass implements self::BaseMixin {
  synthetic constructor •() → self::Multiple
    : super self::FinalClass::•()
    ;
}
class Multiple2 extends self::RegularClass implements self::BaseClass {
  synthetic constructor •() → self::Multiple2
    : super self::RegularClass::•()
    ;
}
class IndirectSubtype extends self::SubtypeOfBase {
  synthetic constructor •() → self::IndirectSubtype
    : super self::SubtypeOfBase::•()
    ;
}
