library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/class_modifiers/base/outside_library/main.dart:7:43: Error: The class 'A' can't be implemented outside of its library because it's a base class.
// base class ImplementsBaseClass implements A {} /* Error */
//                                           ^
//
// pkg/front_end/testcases/class_modifiers/base/outside_library/main.dart:9:43: Error: The mixin 'M' can't be implemented outside of its library because it's a base mixin.
// base class ImplementsBaseMixin implements M {} /* Error */
//                                           ^
//
// pkg/front_end/testcases/class_modifiers/base/outside_library/main.dart:11:41: Error: The mixin 'M' can't be implemented outside of its library because it's a base mixin.
// enum EnumImplementsBaseMixin implements M { x } /* Error */
//                                         ^
//
import self as self;
import "dart:core" as core;
import "main_lib.dart" as mai;

import "org-dartlang-testcase:///main_lib.dart";

base class ImplementsBaseClass extends core::Object implements mai::A {
  synthetic constructor •() → self::ImplementsBaseClass
    : super core::Object::•()
    ;
}
base class ImplementsBaseMixin extends core::Object implements mai::M {
  synthetic constructor •() → self::ImplementsBaseMixin
    : super core::Object::•()
    ;
}
class EnumImplementsBaseMixin extends core::_Enum implements mai::M /*isEnum*/  {
  static const field core::List<self::EnumImplementsBaseMixin> values = #C4;
  enum-element static const field self::EnumImplementsBaseMixin x = #C3;
  const constructor •(core::int #index, core::String #name) → self::EnumImplementsBaseMixin
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "EnumImplementsBaseMixin.${this.{core::_Enum::_name}{core::String}}";
}
abstract base class MixinOnA extends mai::A /*isMixinDeclaration*/  {
}
abstract base class MixinOnM extends mai::M /*isMixinDeclaration*/  {
}
abstract class _MixinOnAM&A&M extends core::Object implements mai::A, mai::M /*isAnonymousMixin*/  {
  synthetic constructor •() → self::_MixinOnAM&A&M
    : super core::Object::•()
    ;
}
abstract base class MixinOnAM extends self::_MixinOnAM&A&M /*isMixinDeclaration*/  {
}

library /*isNonNullableByDefault*/;
import self as mai;
import "dart:core" as core;

base class A extends core::Object {
  synthetic constructor •() → mai::A
    : super core::Object::•()
    ;
}
abstract base class M extends core::Object /*isMixinDeclaration*/  {
}

constants  {
  #C1 = 0
  #C2 = "x"
  #C3 = self::EnumImplementsBaseMixin {index:#C1, _name:#C2}
  #C4 = <self::EnumImplementsBaseMixin>[#C3]
}


Constructor coverage from constants:
org-dartlang-testcase:///main.dart:
- EnumImplementsBaseMixin. (from org-dartlang-testcase:///main.dart:11:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
