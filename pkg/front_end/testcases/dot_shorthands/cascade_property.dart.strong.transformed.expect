library;
import self as self;
import "dart:core" as core;

class Color extends core::_Enum /*isEnum*/  {
  enum-element static const field self::Color red = #C3;
  enum-element static const field self::Color blue = #C6;
  enum-element static const field self::Color green = #C9;
  static const field core::List<self::Color> values = #C10;
  const synthetic constructor •(core::int #index, core::String #name) → self::Color
    : super core::_Enum::•(#index, #name)
    ;
  method core::_enumToString() → core::String
    return "Color.${this.{core::_Enum::_name}{core::String}}";
}
static method main() → void {
  self::Color color = let final self::Color #t1 = #C6 in block {
    #t1.{core::_Enum::toString}(){() → core::String};
  } =>#t1;
}

constants  {
  #C1 = 0
  #C2 = "red"
  #C3 = self::Color {index:#C1, _name:#C2}
  #C4 = 1
  #C5 = "blue"
  #C6 = self::Color {index:#C4, _name:#C5}
  #C7 = 2
  #C8 = "green"
  #C9 = self::Color {index:#C7, _name:#C8}
  #C10 = <self::Color>[#C3, #C6, #C9]
}

Extra constant evaluation status:
Evaluated: VariableGet @ org-dartlang-testcase:///cascade_property.dart:8:17 -> InstanceConstant(const Color{_Enum.index: 1, _Enum._name: "blue"})
Evaluated: VariableGet @ org-dartlang-testcase:///cascade_property.dart:8:17 -> InstanceConstant(const Color{_Enum.index: 1, _Enum._name: "blue"})
Extra constant evaluation: evaluated: 10, effectively constant: 2


Constructor coverage from constants:
org-dartlang-testcase:///cascade_property.dart:
- Color. (from org-dartlang-testcase:///cascade_property.dart:5:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
