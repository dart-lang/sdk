library;
import self as self;
import "dart:core" as core;
import "dart:async" as asy;

import "dart:async";

class Color extends core::_Enum /*isEnum*/  {
  enum-element static const field self::Color red = #C3;
  enum-element static const field self::Color blue = #C6;
  enum-element static const field self::Color green = #C9;
  static const field core::List<self::Color> values = #C10;
  const synthetic constructor •(core::int #index, core::String #name) → self::Color
    : super core::_Enum::•(#index, #name)
    ;
  method core::_enumToString() → core::String
    return "Color.${this.{core::_Enum::_name}{core::String}}";
}
class E extends core::Object {
  final field core::int x;
  constructor •(core::int x) → self::E
    : self::E::x = x, super core::Object::•()
    ;
  static method y(core::int x) → self::E
    return new self::E::•(x);
}
static method main() → void {
  FutureOr<self::Color>color = #C6;
  FutureOr<FutureOr<self::Color>>recursiveColor = #C6;
  const FutureOr<self::Color>constColor = #C6;
  #L1:
  {
    final synthesized FutureOr<self::Color>#0#0 = color;
    final const synthesized self::Color #0#1 = #C6;
    final const synthesized self::Color #0#3 = #C3;
    final const synthesized self::Color #0#5 = #C9;
    {
      if(#C6 =={core::Object::==}{(core::Object) → core::bool} #0#0) {
        {
          core::print("blue");
          break #L1;
        }
      }
    }
    {
      if(#C3 =={core::Object::==}{(core::Object) → core::bool} #0#0) {
        {
          core::print("red");
          break #L1;
        }
      }
    }
    {
      if(#C9 =={core::Object::==}{(core::Object) → core::bool} #0#0) {
        {
          core::print("green");
          break #L1;
        }
      }
    }
    {
      if(#0#0 is asy::Future<self::Color>) {
        {
          core::print("Future in switch");
        }
      }
    }
  }
  core::List<FutureOr<self::Color>> colorList = core::_GrowableList::_literal3<FutureOr<self::Color>>(#C6, #C9, #C3);
  FutureOr<self::E>e = self::E::y(1);
  FutureOr<FutureOr<self::E>>recursiveE = self::E::y(1);
}

constants  {
  #C1 = 0
  #C2 = "red"
  #C3 = self::Color {index:#C1, _name:#C2}
  #C4 = 1
  #C5 = "blue"
  #C6 = self::Color {index:#C4, _name:#C5}
  #C7 = 2
  #C8 = "green"
  #C9 = self::Color {index:#C7, _name:#C8}
  #C10 = <self::Color>[#C3, #C6, #C9]
}


Constructor coverage from constants:
org-dartlang-testcase:///futureor.dart:
- Color. (from org-dartlang-testcase:///futureor.dart:7:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
