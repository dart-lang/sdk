class A extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class C<T extends mix::A> extends core::Object {
  field mix::C::T _field = null;
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method foo(mix::C::T x) → dynamic {
    this.{mix::C::_field} = x;
  }
}
class D extends mix::C<mix::B> {
  synthetic constructor •() → void
    : super mix::C::•()
    ;
}
abstract class _Foo&Object&C extends core::Object implements mix::C<mix::B> {
  field mix::B _field = null;
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method foo(mix::B x) → dynamic {
    this.{mix::C::_field} = x;
  }
}
class Foo extends mix::_Foo&Object&C {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class B extends mix::A {
  synthetic constructor •() → void
    : super mix::A::•()
    ;
}
static method main() → dynamic {
  dynamic foo = new mix::Foo::•();
  foo.foo(new mix::B::•());
}
