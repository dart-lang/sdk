library;
import self as self;
import "dart:core" as core;
import "dart:collection" as col;

[5]static method main([23] core::List<core::String> args) → void {
[45]  [45] core::Set<core::String> fooSet = [54] [54] block {
[54]    [54] final core::Set<core::String> #t1 = [54] [54] col::LinkedHashSet::of [54]<core::String>([63] args);
[73]    [73] [73] [-1] [-1] #t1.{core::Set::add}{Invariant}[-1]([73] "hello"){(core::String) → core::bool};
[100]    [100] [100] [-1] [-1] #t1.{core::Set::addAll}{Invariant}[-1]([100] [89] [89]<core::String, core::String>{[93] [90] [90] "x": [95] [95] "y"}.{core::Map::keys}{core::Iterable<core::String>}){(core::Iterable<core::String>) → void};
[110]    for ([122] core::String s in [127] [127] args)
[136]      [136] [136] [-1] [-1] #t1.{core::Set::addAll}{Invariant}[-1]([136]<core::String>{[148] "${[146] [146] s}", [164] "${[159] [159] s}_2"}){(core::Iterable<core::String>) → void};
[177]    if([193] [193] [186] [186] [181] [181] args.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} [196] [196] 42)
[203]      [203] [203] [-1] [-1] #t1.{core::Set::addAll}{Invariant}[-1]([203]<core::String>{[211] "length", [227] "is", [239] "42"}){(core::Iterable<core::String>) → void};
  } =>[54] [54] #t1;
[259]  [259] [259] core::print [264]([265] fooSet);
[290]  [290] core::List<core::String> fooList = [300] [300] block {
[300]    [300] final core::List<core::String> #t2 = [300] [300] core::List::of [300]<core::String>([309] args);
[319]    [319] [319] [-1] [-1] #t2.{core::List::add}{Invariant}[-1]([319] "hello"){(core::String) → void};
[346]    [346] [346] [-1] [-1] #t2.{core::List::addAll}{Invariant}[-1]([346] [335] [335]<core::String, core::String>{[339] [336] [336] "x": [341] [341] "y"}.{core::Map::keys}{core::Iterable<core::String>}){(core::Iterable<core::String>) → void};
[356]    for ([368] core::String s in [373] [373] args)
[382]      [382] [382] [-1] [-1] #t2.{core::List::addAll}{Invariant}[-1]([382]<core::String>[[394] "${[392] [392] s}", [410] "${[405] [405] s}_2"]){(core::Iterable<core::String>) → void};
[423]    if([439] [439] [432] [432] [427] [427] args.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} [442] [442] 42)
[449]      [449] [449] [-1] [-1] #t2.{core::List::addAll}{Invariant}[-1]([449]<core::String>[[457] "length", [473] "is", [485] "42"]){(core::Iterable<core::String>) → void};
  } =>[300] [300] #t2;
[505]  [505] [505] core::print [510]([511] fooList);
[544]  [544] core::Map<core::String, core::String> fooMap = [553] [553] block {
[553]    [553] final core::Map<core::String, core::String> #t3 = [553] [553]<core::String, core::String>{};
[566]    [566] [566] [-1] [-1] #t3.{core::Map::[]=}{Invariant}[-1]([559] "hello", [568] "world"){(core::String, core::String) → void};
[581]    for ([593] core::String s in [598] [598] args)
[607]      [607] [607] [-1] [-1] #t3.{core::Map::addAll}{Invariant}[-1]([607]<core::String, core::String>{[619] [619] [619] "${[617] [617] s}": [629] [629] "${[624] [624] s}_2"}){(core::Map<core::String, core::String>) → void};
[642]    if([658] [658] [651] [651] [646] [646] args.{core::List::length}{core::int} =={core::num::==}{(core::Object) → core::bool} [661] [661] 42)
[668]      [668] [668] [-1] [-1] #t3.{core::Map::addAll}{Invariant}[-1]([668]<core::String, core::String>{[684] [676] [676] "length": [686] [686] "42", [702] [698] [698] "is": [704] [704] "42", [720] [716] [716] "42": [722] [722] "!"}){(core::Map<core::String, core::String>) → void};
  } =>[553] [553] #t3;
[741]  [741] [741] core::print [746]([747] fooMap);
}
