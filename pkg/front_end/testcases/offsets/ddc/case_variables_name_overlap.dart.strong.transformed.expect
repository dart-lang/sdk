library;
import self as self;
import "dart:core" as core;

[261]class X1 extends core::Object {
[276]  field core::String? s = [-1] [-1] null;
[286]  field core::int? i = [-1] [-1] null;
[299]  field core::double? d = [-1] [-1] null;
[261]  synthetic constructor •() → self::X1
    : [-1] super core::Object::• [-1]()
[-1]    ;
[261]  static method _#new#tearOff() → self::X1
[261]    return [261] [261] new self::X1::• [261]();
}
[311]class X2 extends core::Object {
[326]  field core::String? s2 = [-1] [-1] null;
[337]  field core::int? i = [-1] [-1] null;
[350]  field core::double? d = [-1] [-1] null;
[311]  synthetic constructor •() → self::X2
    : [-1] super core::Object::• [-1]()
[-1]    ;
[311]  static method _#new#tearOff() → self::X2
[311]    return [311] [311] new self::X2::• [311]();
}
[5]static method method([12] dynamic o) → void {
[19]  #L1:
[19]  {
[27]    [27] final synthesized dynamic #0#0 = [27] [27] o;
[-1]    [-1] synthesized core::int? #0#3;
[-1]    [-1] synthesized core::bool #0#3#isSet = [69] [69] false;
[-1]    [-1] synthesized core::double? #0#4;
[-1]    [-1] synthesized core::bool #0#4#isSet = [85] [85] false;
[36]    {
[58]      [58] hoisted core::String? s;
[74]      [74] hoisted core::int? i;
[90]      [90] hoisted core::double? d;
[36]      if([41] [41] [41] [41] [41] [41] [41] [41] [-1] [-1] #0#0 is self::X1 && [58]([58] let [58] final core::String? #t1 = [58] [58] s = [53] [53] [-1] [-1] #0#0{self::X1}.{self::X1::s}{core::String?} in [-1] [-1] true) && [74]([74] let [74] final core::int? #t2 = [74] [74] i = [69] [69] [-1] [-1] #0#3#isSet ?{core::int?} [-1] [-1] #0#3{core::int?} : [69] [69] let [69] final core::bool* #t3 = [69] [69] #0#3#isSet = [69] [69] true in [69] [69] #0#3 = [69] [69] [-1] [-1] #0#0{self::X1}.{self::X1::i}{core::int?} in [-1] [-1] true) && [90]([90] let [90] final core::double? #t4 = [90] [90] d = [85] [85] [-1] [-1] #0#4#isSet ?{core::double?} [-1] [-1] #0#4{core::double?} : [85] [85] let [85] final core::bool* #t5 = [85] [85] #0#4#isSet = [85] [85] true in [85] [85] #0#4 = [85] [85] [-1] [-1] #0#0{self::X1}.{self::X1::d}{core::double?} in [-1] [-1] true)) {
[36]        {
[108]          [108] [108] core::print [113]([136] "hello X1(${[125] [125] s}, ${[129] [129] i}, ${[133] [133] d})");
[-1]          break #L1;
        }
      }
    }
[143]    {
[165]      [165] hoisted core::String? s2;
[182]      [182] hoisted core::int? i;
[198]      [198] hoisted core::double? d;
[143]      if([148] [148] [148] [148] [148] [148] [148] [148] [-1] [-1] #0#0 is self::X2 && [165]([165] let [165] final core::String? #t6 = [165] [165] s2 = [160] [160] [-1] [-1] #0#0{self::X2}.{self::X2::s2}{core::String?} in [-1] [-1] true) && [182]([182] let [182] final core::int? #t7 = [182] [182] i = [69] [69] [-1] [-1] #0#3#isSet ?{core::int?} [-1] [-1] #0#3{core::int?} : [69] [69] let [69] final core::bool* #t8 = [69] [69] #0#3#isSet = [69] [69] true in [69] [69] #0#3 = [177] [177] [-1] [-1] #0#0{self::X2}.{self::X2::i}{core::int?} in [-1] [-1] true) && [198]([198] let [198] final core::double? #t9 = [198] [198] d = [85] [85] [-1] [-1] #0#4#isSet ?{core::double?} [-1] [-1] #0#4{core::double?} : [85] [85] let [85] final core::bool* #t10 = [85] [85] #0#4#isSet = [85] [85] true in [85] [85] #0#4 = [193] [193] [-1] [-1] #0#0{self::X2}.{self::X2::d}{core::double?} in [-1] [-1] true)) {
[143]        {
[216]          [216] [216] core::print [221]([245] "hello X2(${[233] [233] s2}, ${[238] [238] i}, ${[242] [242] d})");
        }
      }
    }
  }
}
