library;
import self as self;
import "dart:core" as core;

[217]static method method([224] dynamic o) → dynamic {
[231]  #L1:
[231]  {
[239]    [239] final synthesized dynamic #0#0 = [239] [239] o;
[-1]    [-1] synthesized core::bool #0#4;
[-1]    [-1] synthesized core::bool #0#4#isSet = [253] [253] false;
[-1]    [-1] synthesized core::int #0#2;
[-1]    [-1] synthesized core::bool #0#2#isSet = [253] [253] false;
[-1]    [-1] synthesized dynamic #0#6;
[-1]    [-1] synthesized core::bool #0#6#isSet = [253] [253] false;
[-1]    [-1] synthesized core::bool #0#8;
[-1]    [-1] synthesized core::bool #0#8#isSet = [282] [282] false;
[-1]    [-1] synthesized dynamic #0#10;
[-1]    [-1] synthesized core::bool #0#10#isSet = [282] [282] false;
[-1]    [-1] dynamic #t1;
[248]    {
[258]      [258] lowered hoisted dynamic a#case#0;
[290]      [290] lowered hoisted dynamic a#case#1;
[248]      if([231] [231] [-1] [-1] [253] [253] [253] [253] [253] [253] [-1] [-1] #0#0 is core::List<dynamic> && [253]([253] [-1] [-1] #0#4#isSet ?{core::bool} [-1] [-1] #0#4{core::bool} : [253] [253] let [253] final dynamic #t2 = [253] [253] #0#4#isSet = [253] [253] true in [253] [253] #0#4 = [253] [253] [253]([253] [-1] [-1] #0#2#isSet ?{core::int} [-1] [-1] #0#2{core::int} : [253] [253] let [253] final dynamic #t3 = [253] [253] #0#2#isSet = [253] [253] true in [253] [253] #0#2 = [253] [253] [-1] [-1] #0#0{core::List<dynamic>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} [-1] [-1] #C1) && [258]([258] let [258] final dynamic #t4 = [258] [258] a#case#0 = [253] [253] [-1] [-1] #0#6#isSet ?{dynamic} [-1] [-1] #0#6{dynamic} : [253] [253] let [253] final dynamic #t5 = [253] [253] #0#6#isSet = [253] [253] true in [253] [253] #0#6 = [253] [253] [-1] [-1] #0#0{core::List<dynamic>}.{core::List::[]}[253]([253] 0){(core::int) → dynamic} in [-1] [-1] true) && [268] [268] [268] [268] [266] [266] a#case#0{dynamic}.< [268]([270] 5) as{TypeError} core::bool || [-1] [-1] [282] [282] [282] [282] [282] [282] [-1] [-1] #0#0 is core::List<dynamic> && [282]([282] [-1] [-1] #0#8#isSet ?{core::bool} [-1] [-1] #0#8{core::bool} : [282] [282] let [282] final dynamic #t6 = [282] [282] #0#8#isSet = [282] [282] true in [282] [282] #0#8 = [282] [282] [253]([253] [-1] [-1] #0#2#isSet ?{core::int} [-1] [-1] #0#2{core::int} : [253] [253] let [253] final dynamic #t7 = [253] [253] #0#2#isSet = [253] [253] true in [253] [253] #0#2 = [253] [253] [-1] [-1] #0#0{core::List<dynamic>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} [-1] [-1] #C2) && [290]([290] let [290] final dynamic #t8 = [290] [290] a#case#1 = [282] [282] [-1] [-1] #0#10#isSet ?{dynamic} [-1] [-1] #0#10{dynamic} : [282] [282] let [282] final dynamic #t9 = [282] [282] #0#10#isSet = [282] [282] true in [282] [282] #0#10 = [282] [282] [-1] [-1] #0#0{core::List<dynamic>}.{core::List::[]}[282]([282] 1){(core::int) → dynamic} in [-1] [-1] true) && [300] [300] [300] [300] [298] [298] a#case#1{dynamic}.> [300]([302] 5) as{TypeError} core::bool) {
[248]        {
[311]          [311] [311] core::print [316]([317] "1");
[-1]          break #L1;
        }
      }
    }
[327]    {
[337]      [337] lowered hoisted dynamic b#case#0;
[369]      [369] lowered hoisted dynamic b#case#1;
[327]      if([231] [231] [337] [337] [-1] [-1] [332] [332] [332] [332] [332] [332] [-1] [-1] #0#0 is core::List<dynamic> && [253]([253] [-1] [-1] #0#4#isSet ?{core::bool} [-1] [-1] #0#4{core::bool} : [253] [253] let [253] final dynamic #t10 = [253] [253] #0#4#isSet = [253] [253] true in [253] [253] #0#4 = [253] [253] [253]([253] [-1] [-1] #0#2#isSet ?{core::int} [-1] [-1] #0#2{core::int} : [253] [253] let [253] final dynamic #t11 = [253] [253] #0#2#isSet = [253] [253] true in [253] [253] #0#2 = [253] [253] [-1] [-1] #0#0{core::List<dynamic>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} [-1] [-1] #C1) && [337]([337] let [337] final dynamic #t12 = [337] [337] b#case#0 = [253] [253] [-1] [-1] #0#6#isSet ?{dynamic} [-1] [-1] #0#6{dynamic} : [253] [253] let [253] final dynamic #t13 = [253] [253] #0#6#isSet = [253] [253] true in [253] [253] #0#6 = [253] [253] [-1] [-1] #0#0{core::List<dynamic>}.{core::List::[]}[253]([253] 0){(core::int) → dynamic} in [-1] [-1] true) && [347] [347] [347] [347] [345] [345] b#case#0{dynamic}.< [347]([349] 5) as{TypeError} core::bool && [231]([231] let [231] final dynamic #t14 = [231] [231] #t1 = [337] [337] b#case#0 in [337] [337] true) || [369] [369] [-1] [-1] [361] [361] [361] [361] [361] [361] [-1] [-1] #0#0 is core::List<dynamic> && [282]([282] [-1] [-1] #0#8#isSet ?{core::bool} [-1] [-1] #0#8{core::bool} : [282] [282] let [282] final dynamic #t15 = [282] [282] #0#8#isSet = [282] [282] true in [282] [282] #0#8 = [282] [282] [253]([253] [-1] [-1] #0#2#isSet ?{core::int} [-1] [-1] #0#2{core::int} : [253] [253] let [253] final dynamic #t16 = [253] [253] #0#2#isSet = [253] [253] true in [253] [253] #0#2 = [253] [253] [-1] [-1] #0#0{core::List<dynamic>}.{core::List::length}{core::int}) =={core::num::==}{(core::Object) → core::bool} [-1] [-1] #C2) && [369]([369] let [369] final dynamic #t17 = [369] [369] b#case#1 = [282] [282] [-1] [-1] #0#10#isSet ?{dynamic} [-1] [-1] #0#10{dynamic} : [282] [282] let [282] final dynamic #t18 = [282] [282] #0#10#isSet = [282] [282] true in [282] [282] #0#10 = [282] [282] [-1] [-1] #0#0{core::List<dynamic>}.{core::List::[]}[282]([282] 1){(core::int) → dynamic} in [-1] [-1] true) && [379] [379] [379] [379] [377] [377] b#case#1{dynamic}.> [379]([381] 5) as{TypeError} core::bool && [231]([231] let [231] final dynamic #t19 = [231] [231] #t1 = [369] [369] b#case#1 in [369] [369] true)) {
[337]        [337] dynamic b = [-1] [-1] #t1{dynamic};
[327]        {
[390]          [390] [390] core::print [395]([396] b);
        }
      }
    }
  }
}

constants  {
  #C1 = 1
  #C2 = 2
}
