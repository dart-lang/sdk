library;
//
// Problems in library:
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:8:13: Error: 'element' is already declared in this scope.
//   final int element = 42; // Error.
//             ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:6:3: Context: Previous declaration of 'element'.
//   element;
//   ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:13:3: Error: 'element' is already declared in this scope.
//   element; // Error.
//   ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:12:3: Context: Previous declaration of 'element'.
//   element,
//   ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:19:8: Error: 'element' is already declared in this scope.
//   void element() {} // Error.
//        ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:17:3: Context: Previous declaration of 'element'.
//   element;
//   ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:25:15: Error: 'element' is already declared in this scope.
//   static void element() {} // Error.
//               ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:23:3: Context: Previous declaration of 'element'.
//   element;
//   ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:31:14: Error: 'element' is already declared in this scope.
//   static int element = 42; // Error.
//              ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:29:3: Context: Previous declaration of 'element'.
//   element;
//   ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:37:12: Error: Instance property 'element' conflicts with static property of the same name.
//   void set element(E6 value) {}
//            ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:35:3: Context: Conflicting static property 'element'.
//   element; // Error.
//   ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:35:3: Error: This static member conflicts with an instance member.
//   element; // Error.
//   ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:37:12: Context: This is the instance member.
//   void set element(E6 value) {}
//            ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:51:3: Error: Can't declare a member that conflicts with an inherited one.
//   element // Error.
//   ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:47:12: Context: This is the inherited member.
//   void set element(dynamic value) {}
//            ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:59:3: Error: Can't declare a member that conflicts with an inherited one.
//   element // Error.
//   ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:55:7: Context: This is the inherited member.
//   int element = 42;
//       ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:67:3: Error: Can't declare a member that conflicts with an inherited one.
//   element // Error.
//   ^^^^^^^
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:63:8: Context: This is the inherited member.
//   void element() {}
//        ^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/conflicting_elements.dart:58:6: Error: A constant constructor can't call a non-constant super constructor.
// enum E9 with A9 {
//      ^
//
import self as self;
import "dart:core" as core;

class E1 extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E1 element = #C3;
  static const field core::List<self::E1> values = #C4;
  const synthetic constructor •(core::int #index, core::String #name) → self::E1
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E1.${this.{core::_Enum::_name}{core::String}}";
}
class E2 extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E2 element = #C5;
  static const field core::List<self::E2> values = #C6;
  const synthetic constructor •(core::int #index, core::String #name) → self::E2
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E2.${this.{core::_Enum::_name}{core::String}}";
}
class E3 extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E3 element = #C7;
  static const field core::List<self::E3> values = #C8;
  const synthetic constructor •(core::int #index, core::String #name) → self::E3
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E3.${this.{core::_Enum::_name}{core::String}}";
}
class E4 extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E4 element = #C9;
  static const field core::List<self::E4> values = #C10;
  const synthetic constructor •(core::int #index, core::String #name) → self::E4
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E4.${this.{core::_Enum::_name}{core::String}}";
}
class E5 extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E5 element = #C11;
  static const field core::List<self::E5> values = #C12;
  const synthetic constructor •(core::int #index, core::String #name) → self::E5
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E5.${this.{core::_Enum::_name}{core::String}}";
}
class E6 extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E6 element = #C13;
  static const field core::List<self::E6> values = #C14;
  const synthetic constructor •(core::int #index, core::String #name) → self::E6
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E6.${this.{core::_Enum::_name}{core::String}}";
  set element(self::E6 value) → void {}
}
class E7 extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E7 element = #C15;
  static const field core::List<self::E7> values = #C16;
  const synthetic constructor •(core::int #index, core::String #name) → self::E7
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E7.${this.{core::_Enum::_name}{core::String}}";
  static set element(self::E7 value) → void {}
}
abstract class A8 extends core::Object /*isMixinDeclaration*/  {
  set element(dynamic value) → void {}
}
abstract class _E8&_Enum&A8 = core::_Enum with self::A8 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E8&_Enum&A8
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub set element(dynamic value) → void
    return super.{self::A8::element} = value;
}
class E8 extends self::_E8&_Enum&A8 /*isEnum*/  {
  enum-element static const field self::E8 element = #C17;
  static const field core::List<self::E8> values = #C18;
  const synthetic constructor •(core::int #index, core::String #name) → self::E8
    : super self::_E8&_Enum&A8::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E8.${this.{core::_Enum::_name}{core::String}}";
}
abstract class A9 extends core::Object /*isMixinDeclaration*/  {
  field core::int element = 42;
}
abstract class _E9&_Enum&A9 = core::_Enum with self::A9 /*isAnonymousMixin*/  {
  synthetic constructor •(core::int index, core::String _name) → self::_E9&_Enum&A9
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub set element(core::int value) → void
    return super.{self::A9::element} = value;
  mixin-super-stub get element() → core::int
    return super.{self::A9::element};
}
class E9 extends self::_E9&_Enum&A9 /*isEnum*/  {
  enum-element static const field self::E9 element = invalid-expression "A constant constructor can't call a non-constant super constructor.";
  static const field core::List<self::E9> values = invalid-expression "A constant constructor can't call a non-constant super constructor.";
  const synthetic constructor •(core::int #index, core::String #name) → self::E9
    : super self::_E9&_Enum&A9::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E9.${this.{core::_Enum::_name}{core::String}}";
}
abstract class A10 extends core::Object /*isMixinDeclaration*/  {
  method element() → void {}
}
abstract class _E10&_Enum&A10 = core::_Enum with self::A10 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E10&_Enum&A10
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub method element() → void
    return super.{self::A10::element}();
}
class E10 extends self::_E10&_Enum&A10 /*isEnum*/  {
  enum-element static const field self::E10 element = #C19;
  static const field core::List<self::E10> values = #C20;
  const synthetic constructor •(core::int #index, core::String #name) → self::E10
    : super self::_E10&_Enum&A10::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E10.${this.{core::_Enum::_name}{core::String}}";
}
static method main() → dynamic {}

constants  {
  #C1 = 0
  #C2 = "element"
  #C3 = self::E1 {index:#C1, _name:#C2}
  #C4 = <self::E1>[#C3]
  #C5 = self::E2 {index:#C1, _name:#C2}
  #C6 = <self::E2>[#C5]
  #C7 = self::E3 {index:#C1, _name:#C2}
  #C8 = <self::E3>[#C7]
  #C9 = self::E4 {index:#C1, _name:#C2}
  #C10 = <self::E4>[#C9]
  #C11 = self::E5 {index:#C1, _name:#C2}
  #C12 = <self::E5>[#C11]
  #C13 = self::E6 {index:#C1, _name:#C2}
  #C14 = <self::E6>[#C13]
  #C15 = self::E7 {index:#C1, _name:#C2}
  #C16 = <self::E7>[#C15]
  #C17 = self::E8 {index:#C1, _name:#C2}
  #C18 = <self::E8>[#C17]
  #C19 = self::E10 {index:#C1, _name:#C2}
  #C20 = <self::E10>[#C19]
}


Constructor coverage from constants:
org-dartlang-testcase:///conflicting_elements.dart:
- E1. (from org-dartlang-testcase:///conflicting_elements.dart:5:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
- E2. (from org-dartlang-testcase:///conflicting_elements.dart:11:6)
- E3. (from org-dartlang-testcase:///conflicting_elements.dart:16:6)
- E4. (from org-dartlang-testcase:///conflicting_elements.dart:22:6)
- E5. (from org-dartlang-testcase:///conflicting_elements.dart:28:6)
- E6. (from org-dartlang-testcase:///conflicting_elements.dart:34:6)
- E7. (from org-dartlang-testcase:///conflicting_elements.dart:40:6)
- E8. (from org-dartlang-testcase:///conflicting_elements.dart:50:6)
- _E8&_Enum&A8. (from org-dartlang-testcase:///conflicting_elements.dart:50:6)
- E9. (from org-dartlang-testcase:///conflicting_elements.dart:58:6)
- E10. (from org-dartlang-testcase:///conflicting_elements.dart:66:6)
- _E10&_Enum&A10. (from org-dartlang-testcase:///conflicting_elements.dart:66:6)
