library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class E<X extends self::A> extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E<self::A> element = #C3;
  static const field core::List<self::E<self::A>> values = #C4;
  const synthetic constructor •(core::int #index, core::String #name) → self::E<self::E::X>
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E.${this.{core::_Enum::_name}{core::String}}";
}
static method main() → dynamic {
  self::expectEquals("${#C4.{core::Object::runtimeType}{core::Type}}", "List<E<A>>");
}
static method expectEquals(dynamic x, dynamic y) → dynamic {
  if(!(x =={core::Object::==}{(core::Object) → core::bool} y)) {
    throw "Expected '${x}' to be equals to '${y}'.";
  }
}

constants  {
  #C1 = 0
  #C2 = "element"
  #C3 = self::E<self::A> {index:#C1, _name:#C2}
  #C4 = <self::E<self::A>>[#C3]
}


Constructor coverage from constants:
org-dartlang-testcase:///issue51189.dart:
- E. (from org-dartlang-testcase:///issue51189.dart:7:6)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
