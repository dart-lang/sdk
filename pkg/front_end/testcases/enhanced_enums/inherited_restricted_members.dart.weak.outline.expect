library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:17:6: Error: Can't declare a member that conflicts with an inherited one.
// enum E2 with A2 { // Error.
//      ^^^^^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:14:11: Context: This is the inherited member.
//   int get values => 42;
//           ^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:49:6: Error: Can't declare a member that conflicts with an inherited one.
// enum E6 with M6 { // Error.
//      ^^^^^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:46:11: Context: This is the inherited member.
//   int get values => 42;
//           ^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:9:6: Error: An enum can't inherit a member named 'hashCode'.
// enum E1 with A1 { // Error.
//      ^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:6:11: Context: This is the inherited member
//   int get hashCode => 42;
//           ^^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:17:6: Error: An enum can't inherit a member named 'values'.
// enum E2 with A2 { // Error.
//      ^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:14:11: Context: This is the inherited member
//   int get values => 42;
//           ^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:25:6: Error: An enum can't inherit a member named 'index'.
// enum E3 with A3 { // Error.
//      ^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:22:11: Context: This is the inherited member
//   int get index => 42;
//           ^^^^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:33:6: Error: An enum can't inherit a member named '=='.
// enum E4 with A4 { // Error.
//      ^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:30:16: Context: This is the inherited member
//   bool operator==(Object other) => true;
//                ^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:41:6: Error: An enum can't inherit a member named 'hashCode'.
// enum E5 with M5 { // Error.
//      ^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:38:11: Context: This is the inherited member
//   int get hashCode => 42;
//           ^^^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:49:6: Error: An enum can't inherit a member named 'values'.
// enum E6 with M6 { // Error.
//      ^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:46:11: Context: This is the inherited member
//   int get values => 42;
//           ^^^^^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:57:6: Error: An enum can't inherit a member named 'index'.
// enum E7 with M7 { // Error.
//      ^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:54:11: Context: This is the inherited member
//   int get index => 42;
//           ^^^^^
//
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:65:6: Error: An enum can't inherit a member named '=='.
// enum E8 with M8 { // Error.
//      ^^
// pkg/front_end/testcases/enhanced_enums/inherited_restricted_members.dart:62:16: Context: This is the inherited member
//   bool operator==(Object other) => true;
//                ^^
//
import self as self;
import "dart:core" as core;

mixin class A1 extends core::Object {
  synthetic constructor •() → self::A1
    ;
  get hashCode() → core::int
    ;
}
abstract class _E1&_Enum&A1 = core::_Enum with self::A1 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E1&_Enum&A1
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub get hashCode() → core::int
    return super.{self::A1::hashCode};
}
class E1 extends self::_E1&_Enum&A1 /*isEnum*/  {
  static const field core::List<self::E1> values = const <self::E1>[self::E1::element];
  enum-element static const field self::E1 element = const self::E1::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E1
    ;
  method _enumToString() → core::String
    return "E1.${this.{core::_Enum::_name}{core::String}}";
}
mixin class A2 extends core::Object {
  synthetic constructor •() → self::A2
    ;
  get values() → core::int
    ;
}
abstract class _E2&_Enum&A2 = core::_Enum with self::A2 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E2&_Enum&A2
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub get values() → core::int
    return super.{self::A2::values};
}
class E2 extends self::_E2&_Enum&A2 /*isEnum*/  {
  static const field core::List<self::E2> values = const <self::E2>[self::E2::element];
  enum-element static const field self::E2 element = const self::E2::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E2
    ;
  method _enumToString() → core::String
    return "E2.${this.{core::_Enum::_name}{core::String}}";
}
mixin class A3 extends core::Object {
  synthetic constructor •() → self::A3
    ;
  get index() → core::int
    ;
}
abstract class _E3&_Enum&A3 = core::_Enum with self::A3 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E3&_Enum&A3
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub get index() → core::int
    return super.{self::A3::index};
}
class E3 extends self::_E3&_Enum&A3 /*isEnum*/  {
  static const field core::List<self::E3> values = const <self::E3>[self::E3::element];
  enum-element static const field self::E3 element = const self::E3::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E3
    ;
  method _enumToString() → core::String
    return "E3.${this.{core::_Enum::_name}{core::String}}";
}
mixin class A4 extends core::Object {
  synthetic constructor •() → self::A4
    ;
  operator ==(core::Object other) → core::bool
    ;
}
abstract class _E4&_Enum&A4 = core::_Enum with self::A4 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E4&_Enum&A4
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub operator ==(core::Object other) → core::bool
    return super.{self::A4::==}(other);
}
class E4 extends self::_E4&_Enum&A4 /*isEnum*/  {
  static const field core::List<self::E4> values = const <self::E4>[self::E4::element];
  enum-element static const field self::E4 element = const self::E4::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E4
    ;
  method _enumToString() → core::String
    return "E4.${this.{core::_Enum::_name}{core::String}}";
}
abstract class M5 extends core::Object /*isMixinDeclaration*/  {
  get hashCode() → core::int
    ;
}
abstract class _E5&_Enum&M5 = core::_Enum with self::M5 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E5&_Enum&M5
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub get hashCode() → core::int
    return super.{self::M5::hashCode};
}
class E5 extends self::_E5&_Enum&M5 /*isEnum*/  {
  static const field core::List<self::E5> values = const <self::E5>[self::E5::element];
  enum-element static const field self::E5 element = const self::E5::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E5
    ;
  method _enumToString() → core::String
    return "E5.${this.{core::_Enum::_name}{core::String}}";
}
abstract class M6 extends core::Object /*isMixinDeclaration*/  {
  get values() → core::int
    ;
}
abstract class _E6&_Enum&M6 = core::_Enum with self::M6 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E6&_Enum&M6
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub get values() → core::int
    return super.{self::M6::values};
}
class E6 extends self::_E6&_Enum&M6 /*isEnum*/  {
  static const field core::List<self::E6> values = const <self::E6>[self::E6::element];
  enum-element static const field self::E6 element = const self::E6::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E6
    ;
  method _enumToString() → core::String
    return "E6.${this.{core::_Enum::_name}{core::String}}";
}
abstract class M7 extends core::Object /*isMixinDeclaration*/  {
  get index() → core::int
    ;
}
abstract class _E7&_Enum&M7 = core::_Enum with self::M7 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E7&_Enum&M7
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub get index() → core::int
    return super.{self::M7::index};
}
class E7 extends self::_E7&_Enum&M7 /*isEnum*/  {
  static const field core::List<self::E7> values = const <self::E7>[self::E7::element];
  enum-element static const field self::E7 element = const self::E7::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E7
    ;
  method _enumToString() → core::String
    return "E7.${this.{core::_Enum::_name}{core::String}}";
}
abstract class M8 extends core::Object /*isMixinDeclaration*/  {
  operator ==(core::Object other) → core::bool
    ;
}
abstract class _E8&_Enum&M8 = core::_Enum with self::M8 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E8&_Enum&M8
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub operator ==(core::Object other) → core::bool
    return super.{self::M8::==}(other);
}
class E8 extends self::_E8&_Enum&M8 /*isEnum*/  {
  static const field core::List<self::E8> values = const <self::E8>[self::E8::element];
  enum-element static const field self::E8 element = const self::E8::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E8
    ;
  method _enumToString() → core::String
    return "E8.${this.{core::_Enum::_name}{core::String}}";
}
abstract mixin class A9 extends core::Object {
  synthetic constructor •() → self::A9
    ;
  abstract get index() → core::int;
  abstract get hashCode() → core::int;
  abstract operator ==(core::Object other) → core::bool;
}
abstract class _E9&_Enum&A9 = core::_Enum with self::A9 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E9&_Enum&A9
    : super core::_Enum::•(index, _name)
    ;
  abstract mixin-stub get index() → core::int; -> self::A9::index
  abstract mixin-stub get hashCode() → core::int; -> self::A9::hashCode
  abstract mixin-stub operator ==(core::Object other) → core::bool; -> self::A9::==
}
class E9 extends self::_E9&_Enum&A9 /*isEnum*/  {
  static const field core::List<self::E9> values = const <self::E9>[self::E9::element];
  enum-element static const field self::E9 element = const self::E9::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E9
    ;
  method _enumToString() → core::String
    return "E9.${this.{core::_Enum::_name}{core::String}}";
}
abstract class M10 extends core::Object /*isMixinDeclaration*/  {
  abstract get index() → core::int;
  abstract get hashCode() → core::int;
  abstract operator ==(core::Object other) → core::bool;
}
abstract class _E10&_Enum&M10 = core::_Enum with self::M10 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E10&_Enum&M10
    : super core::_Enum::•(index, _name)
    ;
  abstract mixin-stub get index() → core::int; -> self::M10::index
  abstract mixin-stub get hashCode() → core::int; -> self::M10::hashCode
  abstract mixin-stub operator ==(core::Object other) → core::bool; -> self::M10::==
}
class E10 extends self::_E10&_Enum&M10 /*isEnum*/  {
  static const field core::List<self::E10> values = const <self::E10>[self::E10::element];
  enum-element static const field self::E10 element = const self::E10::•(0, "element");
  const constructor •(core::int #index, core::String #name) → self::E10
    ;
  method _enumToString() → core::String
    return "E10.${this.{core::_Enum::_name}{core::String}}";
}
static method main() → dynamic
  ;


Extra constant evaluation status:
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:9:6 -> ListConstant(const <E1*>[const E1{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:10:3 -> InstanceConstant(const E1{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:17:6 -> ListConstant(const <E2*>[const E2{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:18:3 -> InstanceConstant(const E2{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:25:6 -> ListConstant(const <E3*>[const E3{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:26:3 -> InstanceConstant(const E3{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:33:6 -> ListConstant(const <E4*>[const E4{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:34:3 -> InstanceConstant(const E4{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:41:6 -> ListConstant(const <E5*>[const E5{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:42:3 -> InstanceConstant(const E5{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:49:6 -> ListConstant(const <E6*>[const E6{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:50:3 -> InstanceConstant(const E6{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:57:6 -> ListConstant(const <E7*>[const E7{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:58:3 -> InstanceConstant(const E7{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:65:6 -> ListConstant(const <E8*>[const E8{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:66:3 -> InstanceConstant(const E8{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:75:6 -> ListConstant(const <E9*>[const E9{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:76:3 -> InstanceConstant(const E9{})
Evaluated: ListLiteral @ org-dartlang-testcase:///inherited_restricted_members.dart:85:6 -> ListConstant(const <E10*>[const E10{}])
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///inherited_restricted_members.dart:86:3 -> InstanceConstant(const E10{})
Extra constant evaluation: evaluated: 80, effectively constant: 20
