library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    ;
}
class E<X extends self::A> extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E<self::A> element = const self::E::•<self::A>(0, "element");
  static const field core::List<self::E<self::A>> values = const <self::E<self::A>>[self::E::element];
  const synthetic constructor •(core::int #index, core::String #name) → self::E<self::E::X>
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E.${this.{core::_Enum::_name}{core::String}}";
}
static method main() → dynamic
  ;
static method expectEquals(dynamic x, dynamic y) → dynamic
  ;


Extra constant evaluation status:
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///issue51189.dart:8:3 -> InstanceConstant(const E<A>{_Enum.index: 0, _Enum._name: "element"})
Evaluated: ListLiteral @ org-dartlang-testcase:///issue51189.dart:7:6 -> ListConstant(const <E<A>>[const E<A>{_Enum.index: 0, _Enum._name: "element"}])
Extra constant evaluation: evaluated: 7, effectively constant: 2
