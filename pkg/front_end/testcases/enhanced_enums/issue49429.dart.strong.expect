library;
import self as self;
import "dart:core" as core;

class A extends core::Object /*hasConstConstructor*/  {
  const constructor •() → self::A
    : super core::Object::•()
    ;
  static factory redir() → self::A /* redirection-target: self::A::• */
    return new self::A::•();
}
class E extends core::_Enum /*isEnum*/  {
  enum-element static const field self::E element = #C3;
  static const field core::List<self::E> values = #C4;
  const constructor •(core::int #index, core::String #name, self::A a) → self::E
    : super core::_Enum::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E.${this.{core::_Enum::_name}{core::String}}";
}
static method main() → dynamic {}

constants  {
  #C1 = 0
  #C2 = "element"
  #C3 = self::E {index:#C1, _name:#C2}
  #C4 = <self::E>[#C3]
}


Constructor coverage from constants:
org-dartlang-testcase:///issue49429.dart:
- A. (from org-dartlang-testcase:///issue49429.dart:2:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
- E. (from org-dartlang-testcase:///issue49429.dart:9:9)
- _Enum. (from org-dartlang-sdk:///sdk/lib/core/enum.dart)
