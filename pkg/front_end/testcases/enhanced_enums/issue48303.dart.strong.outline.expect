library;
import self as self;
import "dart:core" as core;

abstract class M1 extends core::Enum /*isMixinDeclaration*/  {
  method mixedInMethod1(core::int v) → core::int
    ;
}
abstract class _E&_Enum&M1 = core::_Enum with self::M1 /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •(core::int index, core::String _name) → self::_E&_Enum&M1
    : super core::_Enum::•(index, _name)
    ;
  mixin-super-stub method mixedInMethod1(core::int v) → core::int
    return super.{self::M1::mixedInMethod1}(v);
}
class E extends self::_E&_Enum&M1 /*isEnum*/  {
  enum-element static const field self::E e1 = const self::E::•(0, "e1");
  enum-element static const field self::E e2 = const self::E::•(1, "e2");
  enum-element static const field self::E e3 = const self::E::•(2, "e3");
  static const field core::List<self::E> values = const <self::E>[self::E::e1, self::E::e2, self::E::e3];
  const synthetic constructor •(core::int #index, core::String #name) → self::E
    : super self::_E&_Enum&M1::•(#index, #name)
    ;
  method _enumToString() → core::String
    return "E.${this.{core::_Enum::_name}{core::String}}";
}
static method expectEquals(dynamic x, dynamic y) → dynamic
  ;
static method main() → dynamic
  ;


Extra constant evaluation status:
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///issue48303.dart:10:3 -> InstanceConstant(const E{_Enum.index: 0, _Enum._name: "e1"})
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///issue48303.dart:11:3 -> InstanceConstant(const E{_Enum.index: 1, _Enum._name: "e2"})
Evaluated: ConstructorInvocation @ org-dartlang-testcase:///issue48303.dart:12:3 -> InstanceConstant(const E{_Enum.index: 2, _Enum._name: "e3"})
Evaluated: ListLiteral @ org-dartlang-testcase:///issue48303.dart:9:6 -> ListConstant(const <E>[const E{_Enum.index: 0, _Enum._name: "e1"}, const E{_Enum.index: 1, _Enum._name: "e2"}, const E{_Enum.index: 2, _Enum._name: "e3"}])
Extra constant evaluation: evaluated: 13, effectively constant: 4
