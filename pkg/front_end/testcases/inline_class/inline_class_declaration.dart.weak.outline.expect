library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

abstract class Mixin extends core::Object /*isMixinDeclaration*/  {
}
class Class2 = core::Object with self::Mixin /*hasConstConstructor*/  {
  const synthetic constructor •() → self::Class2
    : super core::Object::•()
    ;
}
inline class Class1 /* declaredRepresentationType = core::int */ {
  constructor • = self::Class1|;
}
inline class Class3<T extends core::Object? = dynamic> /* declaredRepresentationType = core::List<T%> */ {
  constructor • = self::Class3|;
}
static method Class1|(core::int it) → self::Class1
  ;
static method Class3|<T extends core::Object? = dynamic>(core::List<self::Class3|::T%> it) → self::Class3<self::Class3|::T%>
  ;
static method method(self::Class1 c1, self::Class3<core::int> c3) → dynamic
  ;
