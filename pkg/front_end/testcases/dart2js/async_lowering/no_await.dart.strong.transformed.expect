library;
import self as self;
import "dart:async" as asy;
import "dart:core" as core;

static method foo1() → asy::Future<core::int> /* emittedValueType= core::int */ /* originally async */ 
  return asy::Future::sync<core::int>(() → FutureOr<core::int> {
    final core::int c = 3;
    return asy::Future::value<core::int>(c);
  });
static method foo2() → asy::Future<void> /* emittedValueType= void */ /* originally async */ 
  return asy::Future::sync<void>(() → FutureOr<void>? {
    final core::int c = 3;
  });
static method foo3() → dynamic /* emittedValueType= dynamic */ /* originally async */ 
  return asy::Future::sync<dynamic>(() → FutureOr<dynamic>? {
    return asy::Future::value<dynamic>(234);
  });
static method bar(() → asy::Future<core::int> func) → void {
  func(){() → asy::Future<core::int>};
}
static method foo4() → asy::Future<core::bool> async /* emittedValueType= core::bool */ {
  await asy::Future::value<core::int>(2);
  self::bar(() → asy::Future<core::int> /* emittedValueType= core::int */ /* originally async */ => asy::Future::sync<core::int>(() → FutureOr<core::int> => asy::Future::value<core::int>(3)));
  return true;
}
static method foo5(core::bool x) → asy::Future<core::int> /* emittedValueType= core::int */ /* originally async */ 
  return asy::Future::sync<core::int>(() → FutureOr<core::int> {
    if(x)
      return asy::Future::value<core::int>(123);
    return asy::Future::value<core::int>(234);
  });
static method main() → void {
  self::foo1();
  self::foo2();
  self::foo3();
  self::foo4();
  self::foo5(true);
}
