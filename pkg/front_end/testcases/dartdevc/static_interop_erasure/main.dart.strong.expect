library;
import self as self;
import "main_lib.dart" as sta;

import "org-dartlang-testcase:///main_lib.dart";

static method main() → void {
  sta::setUp();
  sta::StaticJSClass staticJs = sta::StaticJSClass::factory();
}

@#C2
library static_interop;
import self as sta;
import "dart:_js_annotations" as _js;
import "dart:js_interop" as js_;
import "dart:core" as core;
import "dart:js_util" as js_2;
import "dart:_js_helper" as _js2;

import "package:js/js.dart";

@#C4
@#C5
class StaticJSClass extends core::Object {
  external static factory •() → sta::StaticJSClass;
  static synthetic method _#new#tearOff() → sta::StaticJSClass
    return js_2::_callConstructorUnchecked0<sta::StaticJSClass>(js_2::_getPropertyTrustType<core::Object>(_js2::staticInteropGlobalContext, "JSClass"));
  static factory factory() → sta::StaticJSClass {
    return js_2::_callConstructorUnchecked0<sta::StaticJSClass>(js_2::_getPropertyTrustType<core::Object>(_js2::staticInteropGlobalContext, "JSClass"));
  }
  static synthetic method _#factory#tearOff() → sta::StaticJSClass
    return sta::StaticJSClass::factory();
}
@#C2
external static method eval(core::String code) → void;
static method setUp() → void {
  sta::eval("function JSClass() {}");
}

constants  {
  #C1 = null
  #C2 = _js::JS {name:#C1}
  #C3 = "JSClass"
  #C4 = _js::JS {name:#C3}
  #C5 = js_::_StaticInterop {}
}


Constructor coverage from constants:
org-dartlang-testcase:///main_lib.dart:
- JS. (from org-dartlang-sdk:///lib/js/_js_annotations.dart)
- Object. (from org-dartlang-sdk:///lib/core/object.dart)
