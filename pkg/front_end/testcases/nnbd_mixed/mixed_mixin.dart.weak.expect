library;
import self as self;
import "dart:core" as core;
import "mixed_mixin_lib.dart" as mix;

import "org-dartlang-testcase:///mixed_mixin_lib.dart";

abstract class _C1&Object&B = core::Object with mix::B /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_C1&Object&B*
    : super core::Object::•()
    ;
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
class C1 extends self::_C1&Object&B {
  synthetic constructor •() → self::C1*
    : super self::_C1&Object&B::•()
    ;
  abstract member-signature get a() → core::List<(core::int*) →* core::int*>*; -> mix::B::a
  abstract member-signature set a(core::List<(core::int*) →* core::int*>* _) → void; -> mix::B::a
  abstract member-signature method m((core::int*) →* core::int* x) → (core::int*) →* core::int*; -> mix::B::m
}
static method main() → dynamic {}

library /*isNonNullableByDefault*/;
import self as mix;
import "dart:core" as core;
import "mixed_mixin.dart" as self;

import "org-dartlang-testcase:///mixed_mixin.dart";

class B extends core::Object {
  synthetic constructor •() → mix::B
    : super core::Object::•()
    ;
  get a() → core::List<(core::int) → core::int>
    return <(core::int) → core::int>[];
  set a(core::List<(core::int) → core::int> _) → void {}
  method m((core::int) → core::int x) → (core::int) → core::int
    return x;
}
class Bq extends core::Object {
  synthetic constructor •() → mix::Bq
    : super core::Object::•()
    ;
  get a() → core::List<(core::int?) → core::int?>
    return <(core::int?) → core::int?>[];
  set a(core::List<(core::int?) → core::int?> _) → void {}
  method m((core::int?) → core::int? x) → (core::int?) → core::int?
    return x;
}
class DiBq1 extends self::C1 implements mix::Bq {
  synthetic constructor •() → mix::DiBq1
    : super self::C1::•()
    ;
  abstract member-signature get a() → core::List<(core::int?) → core::int?>; -> mix::B::a
  abstract member-signature set a(core::List<(core::int?) → core::int?> _) → void; -> mix::B::a
  abstract member-signature method m((core::int?) → core::int? x) → (core::int?) → core::int?; -> mix::B::m
  abstract member-signature get _identityHashCode() → core::int; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature get hashCode() → core::int; -> core::Object::hashCode
  abstract member-signature method toString() → core::String; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type; -> core::Object::runtimeType
}
