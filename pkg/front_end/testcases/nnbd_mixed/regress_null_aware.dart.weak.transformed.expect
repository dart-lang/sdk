library;
import self as self;
import "dart:core" as core;
import "dart:collection" as col;

class Class extends core::Object {
  field core::Map<core::String*, core::Set<core::String*>*>* map = null;
  synthetic constructor •() → self::Class*
    : super core::Object::•()
    ;
  method method(core::String* node, core::Set<core::String*>* set) → core::List<core::String*>*
    return set.{core::Set::add}(node) ?{core::List<core::String*>*} block {
      final core::List<core::String*>* #t1 = <core::String*>[];
      #t1.{core::List::add}(node);
      final core::Iterable<core::String*>* #t2 = let final core::Iterable<core::String*>* #t3 = let final core::Set<core::String*>* #t4 = this.{self::Class::map}.{core::Map::[]}(node) in #t4.{core::Object::==}(null) ?{core::Iterable<core::String*>*} null : #t4.{core::Iterable::expand}<core::String*>((core::String* node) → core::List<core::String*>* => this.{self::Class::method}(node, set)) in #t3.{core::Object::==}(null) ?{core::List<core::String*>*} null : #t3.{core::Iterable::toList}();
      if(!#t2.{core::Object::==}(null)) {
        core::Iterator<core::String*>* :sync-for-iterator = #t2.{core::Iterable::iterator};
        for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
          final core::String* #t5 = :sync-for-iterator.{core::Iterator::current};
          #t1.{core::List::add}(#t5);
        }
      }
    } =>#t1 : <core::String*>[];
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static method main(dynamic args) → dynamic {
  if(false)
    new self::Class::•().{self::Class::method}("", let final core::Set<core::String*>* #t6 = new col::_CompactLinkedHashSet::•<core::String*>() in #t6);
}
