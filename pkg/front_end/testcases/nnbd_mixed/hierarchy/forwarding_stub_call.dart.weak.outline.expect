library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class Super<T extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::Super<self::Super::T%>
    ;
  method method(covariant-by-class self::Super::T% t) → void
    ;
}
abstract class Mixin extends core::Object /*isMixinDeclaration*/  {
  method method(core::int t) → void
    ;
}
class Class = self::Super<core::int> with self::Mixin {
  synthetic constructor •() → self::Class
    : super self::Super::•()
    ;
  forwarding-stub method method(covariant-by-class core::int t) → void
    return super.{self::Mixin::method}(t);
}
class Subclass extends self::Class {
  synthetic constructor •() → self::Subclass
    ;
  method test() → void
    ;
}
static method main() → dynamic
  ;
