library;
import self as self;
import "dart:core" as core;
import "mixin_from_opt_in_lib.dart" as mix;

import "org-dartlang-testcase:///mixin_from_opt_in_lib.dart";

abstract class _Class&Object&Mixin = core::Object with mix::Mixin /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_Class&Object&Mixin*
    : super core::Object::•()
    ;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  mixin-super-stub method method(core::int* i) → core::int*
    return super.{mix::Mixin::method}(i);
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
class Class extends self::_Class&Object&Mixin {
  synthetic constructor •() → self::Class*
    ;
}
static method main() → dynamic
  ;

library /*isNonNullableByDefault*/;
import self as mix;
import "dart:core" as core;

abstract class Mixin extends core::Object /*isMixinDeclaration*/  {
  method method(core::int? i) → core::int
    ;
}
