library;
import self as self;
import "dart:core" as core;
import "dart:collection" as col;

static method main() → dynamic {
  core::List<core::int*>* list1 = <core::int*>[0];
  core::List<core::num*>* list2 = <core::num*>[0];
  dynamic list3 = <core::int*>[0];
  core::List<core::int*>* list = block {
    final core::List<core::int*>* #t1 = <core::int*>[];
    #t1.{core::List::add}{Invariant}(0);
    {
      core::Iterator<core::int*>* :sync-for-iterator = list1.{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final core::int* #t2 = :sync-for-iterator.{core::Iterator::current};
        #t1.{core::List::add}{Invariant}(#t2);
      }
    }
    {
      core::Iterator<core::num*>* :sync-for-iterator = list2.{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t3 = :sync-for-iterator.{core::Iterator::current};
        {
          final core::int* #t4 = #t3 as{TypeError} core::int*;
          #t1.{core::List::add}{Invariant}(#t4);
        }
      }
    }
    {
      core::Iterator<dynamic>* :sync-for-iterator = (list3 as{TypeError,ForDynamic} core::Iterable<dynamic>*).{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t5 = :sync-for-iterator.{core::Iterator::current};
        {
          final core::int* #t6 = #t5 as{TypeError} core::int*;
          #t1.{core::List::add}{Invariant}(#t6);
        }
      }
    }
    if(true)
      #t1.{core::List::add}{Invariant}(2);
  } =>#t1;
  core::Set<core::int*>* set1 = block {
    final core::Set<core::int*>* #t7 = new col::_CompactLinkedHashSet::•<core::int*>();
    #t7.{core::Set::add}{Invariant}(0);
  } =>#t7;
  core::Set<core::num*>* set2 = block {
    final core::Set<core::num*>* #t8 = new col::_CompactLinkedHashSet::•<core::num*>();
    #t8.{core::Set::add}{Invariant}(0);
  } =>#t8;
  dynamic set3 = block {
    final core::Set<core::int*>* #t9 = new col::_CompactLinkedHashSet::•<core::int*>();
    #t9.{core::Set::add}{Invariant}(0);
  } =>#t9;
  core::Set<core::int*>* set = block {
    final core::Set<core::int*>* #t10 = new col::_CompactLinkedHashSet::•<core::int*>();
    #t10.{core::Set::add}{Invariant}(0);
    {
      core::Iterator<core::int*>* :sync-for-iterator = set1.{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final core::int* #t11 = :sync-for-iterator.{core::Iterator::current};
        #t10.{core::Set::add}{Invariant}(#t11);
      }
    }
    {
      core::Iterator<core::num*>* :sync-for-iterator = set2.{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t12 = :sync-for-iterator.{core::Iterator::current};
        {
          final core::int* #t13 = #t12 as{TypeError} core::int*;
          #t10.{core::Set::add}{Invariant}(#t13);
        }
      }
    }
    {
      core::Iterator<dynamic>* :sync-for-iterator = (set3 as{TypeError,ForDynamic} core::Iterable<dynamic>*).{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final dynamic #t14 = :sync-for-iterator.{core::Iterator::current};
        {
          final core::int* #t15 = #t14 as{TypeError} core::int*;
          #t10.{core::Set::add}{Invariant}(#t15);
        }
      }
    }
    if(true)
      #t10.{core::Set::add}{Invariant}(2);
  } =>#t10;
  core::Map<core::int*, core::String*>* map1 = <core::int*, core::String*>{0: "foo"};
  core::Map<core::num*, core::Object*>* map2 = <core::num*, core::Object*>{0: "bar"};
  dynamic map3 = <core::int*, core::String*>{0: "baz"};
  core::Map<core::int*, core::String*>* map = block {
    final core::Map<core::int*, core::String*>* #t16 = <core::int*, core::String*>{};
    #t16.{core::Map::[]=}{Invariant}(0, "foo");
    {
      core::Iterator<core::MapEntry<core::int*, core::String*>>* :sync-for-iterator = map1.{core::Map::entries}.{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final core::MapEntry<core::int*, core::String*>* #t17 = :sync-for-iterator.{core::Iterator::current};
        #t16.{core::Map::[]=}{Invariant}(#t17.{core::MapEntry::key}, #t17.{core::MapEntry::value});
      }
    }
    {
      core::Iterator<core::MapEntry<core::num*, core::Object*>>* :sync-for-iterator = map2.{core::Map::entries}.{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final core::MapEntry<dynamic, dynamic>* #t18 = :sync-for-iterator.{core::Iterator::current};
        {
          final core::int* #t19 = #t18.{core::MapEntry::key} as{TypeError} core::int*;
          final core::String* #t20 = #t18.{core::MapEntry::value} as{TypeError} core::String*;
          #t16.{core::Map::[]=}{Invariant}(#t19, #t20);
        }
      }
    }
    {
      core::Iterator<core::MapEntry<dynamic, dynamic>>* :sync-for-iterator = (map3 as{TypeError,ForDynamic} core::Map<dynamic, dynamic>*).{core::Map::entries}.{core::Iterable::iterator};
      for (; :sync-for-iterator.{core::Iterator::moveNext}(); ) {
        final core::MapEntry<dynamic, dynamic>* #t21 = :sync-for-iterator.{core::Iterator::current};
        {
          final core::int* #t22 = #t21.{core::MapEntry::key} as{TypeError} core::int*;
          final core::String* #t23 = #t21.{core::MapEntry::value} as{TypeError} core::String*;
          #t16.{core::Map::[]=}{Invariant}(#t22, #t23);
        }
      }
    }
    if(true)
      #t16.{core::Map::[]=}{Invariant}(2, "baz");
  } =>#t16;
}
