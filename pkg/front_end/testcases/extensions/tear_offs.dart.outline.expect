library;
import self as self;
import "dart:core" as core;

class Class extends core::Object {
  synthetic constructor •() → self::Class*
    ;
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
extension Extension on self::Class* {
  method id = self::Extension|id;
  tearoff id = self::Extension|get#id;
  get getter = self::Extension|get#getter;
  method method = self::Extension|method;
  tearoff method = self::Extension|get#method;
  method errors = self::Extension|errors;
  tearoff errors = self::Extension|get#errors;
}
static method Extension|id<T extends core::Object* = dynamic>(final self::Class* #this, self::Extension|id::T* t) → self::Extension|id::T*
  ;
static method Extension|get#id(final self::Class* #this) → <T extends core::Object* = dynamic>(T*) →* T*
  return <T extends core::Object* = dynamic>(T* t) → T* => self::Extension|id<T*>(#this, t);
static method Extension|get#getter(final self::Class* #this) → <T extends core::Object* = dynamic>(T*) →* T*
  ;
static method Extension|method(final self::Class* #this) → dynamic
  ;
static method Extension|get#method(final self::Class* #this) → () →* dynamic
  return () → dynamic => self::Extension|method(#this);
static method Extension|errors(final self::Class* #this) → dynamic
  ;
static method Extension|get#errors(final self::Class* #this) → () →* dynamic
  return () → dynamic => self::Extension|errors(#this);
static method main() → dynamic
  ;
static method errors() → dynamic
  ;
