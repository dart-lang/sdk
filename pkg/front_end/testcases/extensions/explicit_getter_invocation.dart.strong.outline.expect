library;
import self as self;
import "dart:core" as core;

extension E on core::int {
  get f = self::E|get#f;
  method m = self::E|m;
  method tearoff m = self::E|get#m;
}
static extension-member method E|get#f(lowered final core::int #this) → (core::int) → core::int
  ;
static extension-member method E|m(lowered final core::int #this) → dynamic
  ;
static extension-member method E|get#m(lowered final core::int #this) → () → dynamic
  return () → dynamic => self::E|m(#this);
static method test(core::int i1, core::int? i2, core::int? i3) → dynamic
  ;
static method main() → dynamic
  ;
static method expect(dynamic expected, dynamic actual) → dynamic
  ;
