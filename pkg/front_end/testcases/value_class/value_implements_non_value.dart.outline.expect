library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "value_class_support_lib.dart" as val;

import "org-dartlang-testcase-sdk:///pkg/front_end/testcases/nnbd_mixed/nnbd_opt_out_language_version.dart";
import "org-dartlang-testcase:///value_class_support_lib.dart";

class Animal extends core::Object {
  final field core::int numberOfLegs;
  synthetic constructor •() → self::Animal
    ;
}
@val::valueClass
class Cat extends core::Object implements self::Animal {
  final field core::int numberOfLegs;
  final field core::int numberOfWhiskers;
  synthetic constructor •() → self::Cat
    ;
}
abstract class Animal2 extends core::Object {
  synthetic constructor •() → self::Animal2
    ;
  abstract get numberOfLegs() → core::int;
}
@val::valueClass
class Cat2 extends core::Object implements self::Animal2 {
  final field core::int numberOfLegs;
  final field core::int numberOfWhiskers;
  synthetic constructor •() → self::Cat2
    ;
}
static method main() → dynamic
  ;
static method expect(core::Object? expected, core::Object? actual) → dynamic
  ;

library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/nnbd_mixed/nnbd_opt_out_language_version.dart:1:1: Error: A library can't opt out of null safety by default, when using sound null safety.
// // @dart=2.4
// ^^^^^^^^^^^^
//
import self as self2;
import "dart:core" as core;

class late extends core::Object {
  synthetic constructor •() → self2::late
    ;
  get g() → core::int
    ;
}
class required extends core::Object {
  synthetic constructor •() → self2::required
    ;
  get g() → core::int
    ;
}
class C extends core::Object {
  field self2::late l;
  field self2::required r;
  synthetic constructor •() → self2::C
    ;
}
static method main() → dynamic
  ;

library /*isNonNullableByDefault*/;
import self as val;
import "dart:core" as core;

class JenkinsSmiHash extends core::Object {
  synthetic constructor •() → val::JenkinsSmiHash
    ;
  static method combine(core::int hash, core::int value) → core::int
    ;
  static method finish(core::int hash) → core::int
    ;
}
static const field core::String valueClass = "valueClass";
