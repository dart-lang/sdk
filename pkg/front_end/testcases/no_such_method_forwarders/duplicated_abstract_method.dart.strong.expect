library;
import self as self;
import "dart:core" as core;

abstract class I1 extends core::Object {
  synthetic constructor •() → self::I1*
    : super core::Object::•()
    ;
  abstract method foo() → void;
}
abstract class I2 extends core::Object {
  synthetic constructor •() → self::I2*
    : super core::Object::•()
    ;
  abstract method foo() → void;
}
class M extends core::Object implements self::I1, self::I2 {
  synthetic constructor •() → self::M*
    : super core::Object::•()
    ;
  method noSuchMethod(core::Invocation* i) → dynamic
    return null;
  no-such-method-forwarder method foo() → void
    return this.{self::M::noSuchMethod}(new core::_InvocationMirror::_withType(#C1, 0, #C2, #C3, core::Map::unmodifiable<core::Symbol*, dynamic>(#C4)));
}
static method main() → dynamic {}

constants  {
  #C1 = #foo
  #C2 = <core::Type*>[]
  #C3 = <dynamic>[]
  #C4 = core::_ImmutableMap<core::Symbol*, dynamic> {_kvPairs:#C3}
}
