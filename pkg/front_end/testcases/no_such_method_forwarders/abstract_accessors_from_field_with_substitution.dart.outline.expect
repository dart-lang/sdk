library;
import self as self;
import "dart:core" as core;

abstract class A<X extends core::Object = dynamic> extends core::Object {
  field core::List<self::A::X> foo;
  synthetic constructor •() → self::A<self::A::X>
    ;
}
class B extends core::Object implements self::A<core::int> {
  synthetic constructor •() → self::B
    ;
  method noSuchMethod(dynamic i) → dynamic
    ;
  no-such-method-forwarder get foo() → core::List<core::int>
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withType(#foo, 1, const <core::Type>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{}))) as{TypeError} core::List<core::int>;
  no-such-method-forwarder set foo(core::List<core::int> value) → void
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withType(#foo=, 2, const <core::Type>[], core::List::unmodifiable<dynamic>(<dynamic>[value]), core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{})));
}
static method expectTypeError(() → dynamic callback) → void
  ;
static method main() → dynamic
  ;
