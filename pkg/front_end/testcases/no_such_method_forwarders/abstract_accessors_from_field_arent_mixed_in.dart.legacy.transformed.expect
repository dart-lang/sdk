library;
import self as self;
import "dart:core" as core;

abstract class A extends core::Object {
  field core::int foo = null;
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B extends core::Object implements self::A {
  synthetic constructor •() → self::B
    : super core::Object::•()
    ;
  method noSuchMethod(dynamic i) → dynamic {
    self::count = self::count.+(1);
    return null;
  }
  no-such-method-forwarder get foo() → core::int
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withType(#foo, 1, const <core::Type>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{}))) as{TypeError} core::int;
  no-such-method-forwarder set foo(core::int value) → void
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withType(#foo=, 2, const <core::Type>[], core::List::unmodifiable<dynamic>(<dynamic>[value]), core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{})));
}
abstract class _C&Object&B extends core::Object implements self::B {
  const synthetic constructor •() → self::_C&Object&B
    : super core::Object::•()
    ;
  method noSuchMethod(dynamic i) → dynamic {
    self::count = self::count.+(1);
    return null;
  }
}
class C extends self::_C&Object&B {
  synthetic constructor •() → self::C
    : super self::_C&Object&B::•()
    ;
  get foo() → core::int
    return 42;
  set foo(core::int value) → void {}
}
static field core::int count = 0;
static method main() → dynamic {
  dynamic c = new self::C::•();
  if(!c.foo.==(42)) {
    throw "Value mismatch: c.foo != 42.";
  }
  c.foo = 43;
  if(!self::count.==(0)) {
    throw "Value mismatch: count != 0";
  }
}
