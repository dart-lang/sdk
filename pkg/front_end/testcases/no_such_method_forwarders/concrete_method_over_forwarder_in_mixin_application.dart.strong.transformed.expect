library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

abstract class I extends core::Object {
  synthetic constructor •() → self::I
    : super core::Object::•()
    ;
  abstract method foo() → dynamic;
}
class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
  method foo() → dynamic {}
}
mixin class B extends core::Object implements self::I {
  synthetic constructor •() → self::B
    : super core::Object::•()
    ;
  method noSuchMethod(core::Invocation _) → dynamic
    return null;
  no-such-method-forwarder method foo() → dynamic
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withType(#C1, 0, #C2, #C3, core::Map::unmodifiable<core::Symbol*, dynamic>(#C4))){(core::Invocation) → dynamic} as{TypeError,ForDynamic,ForNonNullableByDefault} dynamic;
}
abstract class _C&A&B extends self::A implements self::B /*isAnonymousMixin,isEliminatedMixin*/  {
  synthetic constructor •() → self::_C&A&B
    : super self::A::•()
    ;
  method noSuchMethod(core::Invocation _) → dynamic
    return null;
}
class C extends self::_C&A&B {
  synthetic constructor •() → self::C
    : super self::_C&A&B::•()
    ;
}
static method main() → dynamic {}

constants  {
  #C1 = #foo
  #C2 = <core::Type*>[]
  #C3 = <dynamic>[]
  #C4 = <core::Symbol*, dynamic>{}
}
