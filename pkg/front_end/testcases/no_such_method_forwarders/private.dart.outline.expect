library private;
import self as self;
import "dart:core" as core;
import "private_module.dart" as pri;

import "org-dartlang-testcase:///private_module.dart";

abstract class Foo extends core::Object {
  synthetic constructor •() → self::Foo*
    ;
  method noSuchMethod(core::Invocation* invocation) → dynamic
    ;
}
class Bar extends self::Foo implements pri::Fisk {
  synthetic constructor •() → self::Bar*
    ;
  no-such-method-forwarder method /* from org-dartlang-testcase:///private_module.dart */ _hest() → void
    return this.{self::Foo::noSuchMethod}(new core::_InvocationMirror::_withType(#_hest, 0, const <core::Type*>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol*, dynamic>(const <core::Symbol*, dynamic>{})));
}
class Baz extends self::Foo implements pri::Fisk {
  synthetic constructor •() → self::Baz*
    ;
  method _hest() → dynamic
    ;
  no-such-method-forwarder method /* from org-dartlang-testcase:///private_module.dart */ _hest() → void
    return this.{self::Foo::noSuchMethod}(new core::_InvocationMirror::_withType(#_hest, 0, const <core::Type*>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol*, dynamic>(const <core::Symbol*, dynamic>{})));
}
static method main() → dynamic
  ;

library private_module;
import self as pri;
import "dart:core" as core;

abstract class Fisk extends core::Object {
  synthetic constructor •() → pri::Fisk*
    ;
  abstract method _hest() → void;
}
static method main() → dynamic
  ;
