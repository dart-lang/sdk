library private;
import self as self;
import "dart:core" as core;
import "./private_module.dart" as pri;

abstract class Foo extends core::Object {
  synthetic constructor •() → void
    ;
  method noSuchMethod(core::Invocation invocation) → dynamic
    ;
}
class Bar extends self::Foo implements pri::Fisk {
  synthetic constructor •() → void
    ;
  no-such-method-forwarder method /* from org-dartlang-testcase:///private_module.dart */ _hest() → void
    return this.{self::Foo::noSuchMethod}(new core::_InvocationMirror::_withoutType("_hest", const <core::Type>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{}), false));
}
class Baz extends self::Foo implements pri::Fisk {
  synthetic constructor •() → void
    ;
  method _hest() → dynamic
    ;
  no-such-method-forwarder method /* from org-dartlang-testcase:///private_module.dart */ _hest() → void
    return this.{self::Foo::noSuchMethod}(new core::_InvocationMirror::_withoutType("_hest", const <core::Type>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{}), false));
}
static method main() → dynamic
  ;
