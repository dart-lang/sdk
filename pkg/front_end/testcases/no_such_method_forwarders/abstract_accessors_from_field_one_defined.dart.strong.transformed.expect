library;
import self as self;
import "dart:core" as core;

abstract class A extends core::Object {
  field core::int foo = null;
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
abstract class B extends core::Object implements self::A {
  synthetic constructor •() → self::B
    : super core::Object::•()
    ;
  get foo() → core::int
    return 42;
  method noSuchMethod(core::Invocation i) → dynamic
    return "bar";
}
class C extends self::B {
  synthetic constructor •() → self::C
    : super self::B::•()
    ;
  no-such-method-forwarder set foo(core::int value) → void
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withType(#foo=, 2, const <core::Type>[], core::List::unmodifiable<dynamic>(<dynamic>[value]), core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{})));
}
abstract class D extends core::Object implements self::A {
  synthetic constructor •() → self::D
    : super core::Object::•()
    ;
  set foo(core::int value) → void {}
  method noSuchMethod(core::Invocation i) → dynamic
    return "bar";
}
class E extends self::D {
  synthetic constructor •() → self::E
    : super self::D::•()
    ;
  no-such-method-forwarder get foo() → core::int
    return this.{self::D::noSuchMethod}(new core::_InvocationMirror::_withType(#foo, 1, const <core::Type>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol, dynamic>(const <core::Symbol, dynamic>{}))) as{TypeError} core::int;
}
static method expectTypeError(() → dynamic callback) → void {
  try {
    callback.call();
    throw "Expected TypeError, did not occur";
  }
  on core::TypeError catch(no-exception-var) {
  }
}
static method main() → dynamic {
  self::C c = new self::C::•();
  self::expectTypeError(() → core::String => (c as dynamic).foo = "bar");
  self::E e = new self::E::•();
  self::expectTypeError(() → core::int => e.{self::E::foo});
}
