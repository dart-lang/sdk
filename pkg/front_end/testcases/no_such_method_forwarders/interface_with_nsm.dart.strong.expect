library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class I extends core::Object {
  synthetic constructor •() → self::I
    : super core::Object::•()
    ;
  method noSuchMethod(core::Invocation i) → dynamic
    return null;
  no-such-method-forwarder method foo() → void
    return this.{self::I::noSuchMethod}(new core::_InvocationMirror::_withType(#C1, 0, #C2, #C3, core::Map::unmodifiable<core::Symbol*, dynamic>(#C4))){(core::Invocation) → dynamic};
}
mixin class M extends core::Object {
  synthetic constructor •() → self::M
    : super core::Object::•()
    ;
  method noSuchMethod(core::Invocation i) → dynamic
    return null;
}
abstract class _A&Object&M = core::Object with self::M /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_A&Object&M
    : super core::Object::•()
    ;
  mixin-super-stub method noSuchMethod(core::Invocation i) → dynamic
    return super.{self::M::noSuchMethod}(i);
}
class A extends self::_A&Object&M implements self::I {
  synthetic constructor •() → self::A
    : super self::_A&Object&M::•()
    ;
  no-such-method-forwarder method foo() → void
    return this.{self::_A&Object&M::noSuchMethod}(new core::_InvocationMirror::_withType(#C1, 0, #C2, #C3, core::Map::unmodifiable<core::Symbol*, dynamic>(#C4))){(core::Invocation) → dynamic};
}
abstract class _B&Object&M = core::Object with self::M /*isAnonymousMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_B&Object&M
    : super core::Object::•()
    ;
  mixin-super-stub method noSuchMethod(core::Invocation i) → dynamic
    return super.{self::M::noSuchMethod}(i);
}
class B extends self::_B&Object&M implements self::I {
  synthetic constructor •() → self::B
    : super self::_B&Object&M::•()
    ;
  no-such-method-forwarder method foo() → void
    return this.{self::_B&Object&M::noSuchMethod}(new core::_InvocationMirror::_withType(#C1, 0, #C2, #C3, core::Map::unmodifiable<core::Symbol*, dynamic>(#C4))){(core::Invocation) → dynamic};
}
static method main() → dynamic {}

constants  {
  #C1 = #foo
  #C2 = <core::Type*>[]
  #C3 = <dynamic>[]
  #C4 = <core::Symbol*, dynamic>{}
}
