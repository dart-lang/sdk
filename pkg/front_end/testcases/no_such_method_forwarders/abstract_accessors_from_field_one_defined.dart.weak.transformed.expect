library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

abstract class A extends core::Object {
  field core::int? foo = null;
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
abstract class B extends core::Object implements self::A {
  synthetic constructor •() → self::B
    : super core::Object::•()
    ;
  get foo() → core::int?
    return 42;
  method noSuchMethod(core::Invocation i) → dynamic
    return "bar";
}
class C extends self::B {
  synthetic constructor •() → self::C
    : super self::B::•()
    ;
  no-such-method-forwarder set foo(core::int? value) → void
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withType(#C1, 2, #C2, core::List::unmodifiable<dynamic>(core::_GrowableList::_literal1<dynamic>(value)), core::Map::unmodifiable<core::Symbol*, dynamic>(#C3))){(core::Invocation) → dynamic};
}
abstract class D extends core::Object implements self::A {
  synthetic constructor •() → self::D
    : super core::Object::•()
    ;
  set foo(core::int? value) → void {}
  method noSuchMethod(core::Invocation i) → dynamic
    return "bar";
}
class E extends self::D {
  synthetic constructor •() → self::E
    : super self::D::•()
    ;
  no-such-method-forwarder get foo() → core::int?
    return this.{self::D::noSuchMethod}(new core::_InvocationMirror::_withType(#C4, 1, #C2, #C5, core::Map::unmodifiable<core::Symbol*, dynamic>(#C3))){(core::Invocation) → dynamic} as{TypeError,ForDynamic,ForNonNullableByDefault} core::int?;
}
static method expectTypeError(() → dynamic callback) → void {
  try {
    callback(){() → dynamic};
    throw "Expected TypeError, did not occur";
  }
  on core::TypeError catch(no-exception-var) {
  }
}
static method main() → dynamic {
  self::C c = new self::C::•();
  self::expectTypeError(() → core::String => (c as{ForNonNullableByDefault} dynamic){dynamic}.foo = "bar");
  self::E e = new self::E::•();
  self::expectTypeError(() → core::int? => e.{self::E::foo}{core::int?});
}

constants  {
  #C1 = #foo=
  #C2 = <core::Type*>[]
  #C3 = <core::Symbol*, dynamic>{}
  #C4 = #foo
  #C5 = <dynamic>[]
}
