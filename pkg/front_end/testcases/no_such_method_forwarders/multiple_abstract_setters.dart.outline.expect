library;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A*
    ;
  set foo(core::int* value) → void
    ;
  get bar() → core::int*
    ;
}
class B extends core::Object {
  synthetic constructor •() → self::B*
    ;
  set foo(core::double* value) → void
    ;
  get bar() → core::double*
    ;
}
class C extends core::Object {
  synthetic constructor •() → self::C*
    ;
  set foo(core::num* value) → void
    ;
  get bar() → core::Null?
    ;
}
class D extends core::Object implements self::C, self::A, self::B {
  synthetic constructor •() → self::D*
    ;
  method noSuchMethod(core::Invocation* _) → dynamic
    ;
  no-such-method-forwarder get bar() → core::Null?
    return this.{self::D::noSuchMethod}(new core::_InvocationMirror::_withType(#bar, 1, const <core::Type*>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol*, dynamic>(const <core::Symbol*, dynamic>{}))) as{TypeError,ForDynamic} core::Null?;
  no-such-method-forwarder set foo(core::num* value) → void
    return this.{self::D::noSuchMethod}(new core::_InvocationMirror::_withType(#foo=, 2, const <core::Type*>[], core::List::unmodifiable<dynamic>(<dynamic>[value]), core::Map::unmodifiable<core::Symbol*, dynamic>(const <core::Symbol*, dynamic>{})));
}
static method main() → dynamic
  ;
