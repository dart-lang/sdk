library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

abstract class I extends core::Object {
  synthetic constructor •() → self::I
    ;
  abstract method foo() → dynamic;
}
class A extends core::Object {
  synthetic constructor •() → self::A
    ;
  method foo() → dynamic
    ;
}
mixin class B extends core::Object implements self::I {
  synthetic constructor •() → self::B
    ;
  method noSuchMethod(core::Invocation _) → dynamic
    ;
  no-such-method-forwarder method foo() → dynamic
    return this.{self::B::noSuchMethod}(new core::_InvocationMirror::_withType(#foo, 0, const <core::Type*>[], const <dynamic>[], core::Map::unmodifiable<core::Symbol*, dynamic>(const <core::Symbol*, dynamic>{}))){(core::Invocation) → dynamic} as{TypeError,ForDynamic,ForNonNullableByDefault} dynamic;
}
abstract class _C&A&B = self::A with self::B /*isAnonymousMixin*/  {
  synthetic constructor •() → self::_C&A&B
    : super self::A::•()
    ;
  mixin-super-stub method noSuchMethod(core::Invocation _) → dynamic
    return super.{self::B::noSuchMethod}(_);
}
class C extends self::_C&A&B {
  synthetic constructor •() → self::C
    ;
}
static method main() → dynamic
  ;


Extra constant evaluation status:
Evaluated: SymbolLiteral @ org-dartlang-testcase:///concrete_method_over_forwarder_in_mixin_application.dart:17:13 -> SymbolConstant(#foo)
Evaluated: ListLiteral @ org-dartlang-testcase:///concrete_method_over_forwarder_in_mixin_application.dart:17:13 -> ListConstant(const <Type*>[])
Evaluated: ListLiteral @ org-dartlang-testcase:///concrete_method_over_forwarder_in_mixin_application.dart:17:13 -> ListConstant(const <dynamic>[])
Evaluated: MapLiteral @ org-dartlang-testcase:///concrete_method_over_forwarder_in_mixin_application.dart:17:13 -> MapConstant(const <Symbol*, dynamic>{})
Extra constant evaluation: evaluated: 11, effectively constant: 4
