library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

abstract class I<T extends core::Object? = dynamic> extends core::Object {
  synthetic constructor •() → self::I<self::I::T%>
    : super core::Object::•()
    ;
  abstract method foo() → self::I::T%;
}
mixin class M extends core::Object {
  synthetic constructor •() → self::M
    : super core::Object::•()
    ;
  method noSuchMethod(core::Invocation i) → dynamic {
    return null;
  }
}
abstract class _A&Object&M extends core::Object implements self::M /*isAnonymousMixin,isEliminatedMixin,hasConstConstructor*/  {
  const synthetic constructor •() → self::_A&Object&M
    : super core::Object::•()
    ;
  method noSuchMethod(core::Invocation i) → dynamic {
    return null;
  }
}
class A extends self::_A&Object&M implements self::I<core::int> {
  synthetic constructor •() → self::A
    : super self::_A&Object&M::•()
    ;
  no-such-method-forwarder method foo() → core::int
    return this.{self::_A&Object&M::noSuchMethod}(new core::_InvocationMirror::_withType(#C1, 0, #C2, #C3, core::Map::unmodifiable<core::Symbol*, dynamic>(#C4))){(core::Invocation) → dynamic} as{TypeError,ForDynamic,ForNonNullableByDefault} core::int;
}
static method main() → dynamic {}

constants  {
  #C1 = #foo
  #C2 = <core::Type*>[]
  #C3 = <dynamic>[]
  #C4 = <core::Symbol*, dynamic>{}
}
