parseUnit(extension)
  skipErrorTokens(extension)
  listener: beginCompilationUnit(extension)
  syntheticPreviousToken(extension)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, , extension, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: handleNoTypeVariables({)
          listener: beginExtensionTypeDeclaration(extension, ET1)
          reportRecoverableError(ET1, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, ET1, ET1)
          listener: handleNoPrimaryConstructor(ET1, null)
          parseClassOrMixinOrEnumImplementsOpt(ET1)
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(ET1, DeclarationKind.ExtensionType, ET1)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: handleNoTypeVariables(implements)
          listener: beginExtensionTypeDeclaration(extension, ET2)
          reportRecoverableError(ET2, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, ET2, ET2)
          listener: handleNoPrimaryConstructor(ET2, null)
          parseClassOrMixinOrEnumImplementsOpt(ET2)
            listener: handleIdentifier(Foo, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(Foo, null)
            listener: handleImplements(implements, 1)
          parseClassOrMixinOrExtensionBody(Foo, DeclarationKind.ExtensionType, ET2)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: handleNoTypeVariables(implements)
          listener: beginExtensionTypeDeclaration(extension, ET3)
          reportRecoverableError(ET3, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, ET3, ET3)
          listener: handleNoPrimaryConstructor(ET3, null)
          parseClassOrMixinOrEnumImplementsOpt(ET3)
            listener: handleIdentifier(Foo, typeReference)
            listener: handleNoTypeArguments(,)
            listener: handleType(Foo, null)
            listener: handleIdentifier(Bar, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(Bar, null)
            listener: handleImplements(implements, 2)
          parseClassOrMixinOrExtensionBody(Bar, DeclarationKind.ExtensionType, ET3)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: beginTypeVariables(<)
          listener: beginMetadataStar(T)
          listener: endMetadataStar(0)
          listener: handleIdentifier(T, typeVariableDeclaration)
          listener: beginTypeVariable(T)
          listener: handleTypeVariablesDefined(T, 1)
          listener: handleNoType(T)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
          listener: beginExtensionTypeDeclaration(extension, ET4)
          reportRecoverableError(>, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, >, >)
          listener: handleNoPrimaryConstructor(>, null)
          parseClassOrMixinOrEnumImplementsOpt(>)
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(>, DeclarationKind.ExtensionType, ET4)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: beginTypeVariables(<)
          listener: beginMetadataStar(T)
          listener: endMetadataStar(0)
          listener: handleIdentifier(T, typeVariableDeclaration)
          listener: beginTypeVariable(T)
          listener: handleTypeVariablesDefined(T, 1)
          listener: handleNoType(T)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
          listener: beginExtensionTypeDeclaration(extension, ET5)
          reportRecoverableError(>, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, >, >)
          listener: handleNoPrimaryConstructor(>, null)
          parseClassOrMixinOrEnumImplementsOpt(>)
            listener: handleIdentifier(Foo, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(Foo, null)
            listener: handleImplements(implements, 1)
          parseClassOrMixinOrExtensionBody(Foo, DeclarationKind.ExtensionType, ET5)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: beginTypeVariables(<)
          listener: beginMetadataStar(T)
          listener: endMetadataStar(0)
          listener: handleIdentifier(T, typeVariableDeclaration)
          listener: beginTypeVariable(T)
          listener: handleTypeVariablesDefined(T, 1)
          listener: handleNoType(T)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
          listener: beginExtensionTypeDeclaration(extension, ET6)
          reportRecoverableError(>, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, >, >)
          listener: handleNoPrimaryConstructor(>, null)
          parseClassOrMixinOrEnumImplementsOpt(>)
            listener: handleIdentifier(Foo, typeReference)
            listener: handleNoTypeArguments(,)
            listener: handleType(Foo, null)
            listener: handleIdentifier(Bar, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(Bar, null)
            listener: handleImplements(implements, 2)
          parseClassOrMixinOrExtensionBody(Bar, DeclarationKind.ExtensionType, ET6)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: beginTypeVariables(<)
          listener: beginMetadataStar(T)
          listener: endMetadataStar(0)
          listener: handleIdentifier(T, typeVariableDeclaration)
          listener: beginTypeVariable(T)
          listener: handleTypeVariablesDefined(T, 1)
          listener: handleNoType(T)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
          listener: beginExtensionTypeDeclaration(extension, ET7)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            listener: handleIdentifier(name, primaryConstructorDeclaration)
          reportRecoverableError(name, MissingPrimaryConstructorParameters)
            listener: handleRecoverableError(MissingPrimaryConstructorParameters, name, name)
          listener: handleNoFormalParameters(name, MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true)
          parseClassOrMixinOrEnumImplementsOpt(name)
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(name, DeclarationKind.ExtensionType, ET7)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: beginTypeVariables(<)
          listener: beginMetadataStar(T)
          listener: endMetadataStar(0)
          listener: handleIdentifier(T, typeVariableDeclaration)
          listener: beginTypeVariable(T)
          listener: handleTypeVariablesDefined(T, 1)
          listener: handleNoType(T)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
          listener: beginExtensionTypeDeclaration(extension, ET8)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            listener: handleIdentifier(name, primaryConstructorDeclaration)
          reportRecoverableError(name, MissingPrimaryConstructorParameters)
            listener: handleRecoverableError(MissingPrimaryConstructorParameters, name, name)
          listener: handleNoFormalParameters(name, MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true)
          parseClassOrMixinOrEnumImplementsOpt(name)
            listener: handleIdentifier(Foo, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(Foo, null)
            listener: handleImplements(implements, 1)
          parseClassOrMixinOrExtensionBody(Foo, DeclarationKind.ExtensionType, ET8)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: beginTypeVariables(<)
          listener: beginMetadataStar(T)
          listener: endMetadataStar(0)
          listener: handleIdentifier(T, typeVariableDeclaration)
          listener: beginTypeVariable(T)
          listener: handleTypeVariablesDefined(T, 1)
          listener: handleNoType(T)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
          listener: beginExtensionTypeDeclaration(extension, ET9)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            listener: handleIdentifier(name, primaryConstructorDeclaration)
          reportRecoverableError(name, MissingPrimaryConstructorParameters)
            listener: handleRecoverableError(MissingPrimaryConstructorParameters, name, name)
          listener: handleNoFormalParameters(name, MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true)
          parseClassOrMixinOrEnumImplementsOpt(name)
            listener: handleIdentifier(Foo, typeReference)
            listener: handleNoTypeArguments(,)
            listener: handleType(Foo, null)
            listener: handleIdentifier(Bar, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(Bar, null)
            listener: handleImplements(implements, 2)
          parseClassOrMixinOrExtensionBody(Bar, DeclarationKind.ExtensionType, ET9)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(extension)
  listener: endCompilationUnit(9, )
