parseUnit(main)
  skipErrorTokens(main)
  listener: beginCompilationUnit(main)
  syntheticPreviousToken(main)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(main)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(main)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, print)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                looksLikeLocalFunction(print)
                parseExpressionStatement({)
                  parseExpression({)
                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression({, true, ConstantPatternContext.none)
                        parsePrimary({, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend({, expression, ConstantPatternContext.none)
                              ensureIdentifier({, expression)
                                listener: handleIdentifier(print, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(print)
                                parseArguments(print)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    allowedToShortcutParseExpression()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseLiteralSymbol(()
                                              listener: beginLiteralSymbol(#)
                                              listener: handleOperator(>>)
                                              listener: endLiteralSymbol(#, 1)
                                        listener: beginBinaryExpression(>)
                                        parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                          parseUnaryExpression(>, true, ConstantPatternContext.none)
                                            parsePrimary(>, expression, ConstantPatternContext.none)
                                              parseSend(>, expression, ConstantPatternContext.none)
                                                ensureIdentifier(>, expression)
                                                  reportRecoverableErrorWithToken(), Template(ExpectedIdentifier))
                                                    listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ')'., Try inserting an identifier before ')'., {lexeme: )}], ), ))
                                                  rewriter()
                                                  listener: handleIdentifier(, expression)
                                                listener: handleNoTypeArguments())
                                                parseArgumentsOpt()
                                                  listener: handleNoArguments())
                                                listener: handleSend(, )
                                        listener: endBinaryExpression(>, )
                                    listener: endArguments(1, (, ))
                              listener: handleSend(print, ))
                  ensureSemicolon())
                  listener: handleExpressionStatement(print, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(main, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(main)
  listener: endCompilationUnit(1, )
