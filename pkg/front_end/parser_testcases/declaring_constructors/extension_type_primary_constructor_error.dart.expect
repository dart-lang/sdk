Problems reported:

parser/declaring_constructors/extension_type_primary_constructor_error:1:20: Named parameter lists cannot be empty.
extension type E( {}
                   ^

parser/declaring_constructors/extension_type_primary_constructor_error:2:1: Expected ')' before this.
extension type E) {}
^^^^^^^^^

parser/declaring_constructors/extension_type_primary_constructor_error:3:19: Expected an identifier, but got '{'.
extension type E. {}
                  ^

parser/declaring_constructors/extension_type_primary_constructor_error:3:19: A primary constructor declaration must have formal parameters.
extension type E. {}
                  ^

parser/declaring_constructors/extension_type_primary_constructor_error:4:18: Expected an identifier, but got '('.
extension type E.() {}
                 ^

parser/declaring_constructors/extension_type_primary_constructor_error:5:22: An extension type declaration must have a primary constructor declaration.
extension type const E {}
                     ^

parser/declaring_constructors/extension_type_primary_constructor_error:6:23: Named parameter lists cannot be empty.
extension type E<T>( {}
                      ^

parser/declaring_constructors/extension_type_primary_constructor_error:7:1: Expected ')' before this.
extension type E<T>) {}
^^^^^^^^^

parser/declaring_constructors/extension_type_primary_constructor_error:8:25: An extension type declaration must have a primary constructor declaration.
extension type const E<T> {}
                        ^

parser/declaring_constructors/extension_type_primary_constructor_error:9:22: Expected an identifier, but got '{'.
extension type E<T>. {}
                     ^

parser/declaring_constructors/extension_type_primary_constructor_error:9:22: A primary constructor declaration must have formal parameters.
extension type E<T>. {}
                     ^

parser/declaring_constructors/extension_type_primary_constructor_error:10:21: Expected an identifier, but got '('.
extension type E<T>.() {}
                    ^

parser/declaring_constructors/extension_type_primary_constructor_error:11:28: Expected an identifier, but got '{'.
extension type const E<T>. {}
                           ^

parser/declaring_constructors/extension_type_primary_constructor_error:11:28: A primary constructor declaration must have formal parameters.
extension type const E<T>. {}
                           ^

parser/declaring_constructors/extension_type_primary_constructor_error:12:27: Expected an identifier, but got '('.
extension type const E<T>.() {}
                          ^

parser/declaring_constructors/extension_type_primary_constructor_error:13:21: A primary constructor declaration must have formal parameters.
extension type E<T>.named {}
                    ^^^^^

parser/declaring_constructors/extension_type_primary_constructor_error:15:27: A primary constructor declaration must have formal parameters.
extension type const E<T>.named {}
                          ^^^^^

beginCompilationUnit(extension)
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(()
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginOptionalFormalParameters({)
            handleRecoverableError(EmptyNamedParameterList, }, })
            beginMetadataStar()
            endMetadataStar(0)
            beginFormalParameter(, MemberKind.PrimaryConstructor, null, null, null)
              handleNoType({)
              handleIdentifier(, formalParameterDeclaration)
              handleFormalParameterWithoutValue(})
            endFormalParameter(null, null, null, null, , null, null, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
          endOptionalFormalParameters(1, {, }, MemberKind.PrimaryConstructor)
          handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], extension, extension)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(.)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
        handleIdentifier(, primaryConstructorDeclaration)
        handleRecoverableError(MissingPrimaryConstructorParameters, {, {)
        handleNoFormalParameters(, MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., null, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables(.)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
        handleIdentifier(, primaryConstructorDeclaration)
        beginFormalParameters((, MemberKind.PrimaryConstructor)
        endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., null, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    handleNoTypeVariables({)
    beginExtensionTypeDeclaration(null, extension, E)
      handleRecoverableError(MissingPrimaryConstructor, E, E)
      handleNoPrimaryConstructor(E, const, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(()
        beginFormalParameters((, MemberKind.PrimaryConstructor)
          beginOptionalFormalParameters({)
            handleRecoverableError(EmptyNamedParameterList, }, })
            beginMetadataStar()
            endMetadataStar(0)
            beginFormalParameter(, MemberKind.PrimaryConstructor, null, null, null)
              handleNoType({)
              handleIdentifier(, formalParameterDeclaration)
              handleFormalParameterWithoutValue(})
            endFormalParameter(null, null, null, null, , null, null, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
          endOptionalFormalParameters(1, {, }, MemberKind.PrimaryConstructor)
          handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], extension, extension)
        endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor((, null, false, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      handleRecoverableError(MissingPrimaryConstructor, >, >)
      handleNoPrimaryConstructor(>, const, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
        handleIdentifier(, primaryConstructorDeclaration)
        handleRecoverableError(MissingPrimaryConstructorParameters, {, {)
        handleNoFormalParameters(, MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., null, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
        handleIdentifier(, primaryConstructorDeclaration)
        beginFormalParameters((, MemberKind.PrimaryConstructor)
        endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., null, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
        handleIdentifier(, primaryConstructorDeclaration)
        handleRecoverableError(MissingPrimaryConstructorParameters, {, {)
        handleNoFormalParameters(, MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., const, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
        handleIdentifier(, primaryConstructorDeclaration)
        beginFormalParameters((, MemberKind.PrimaryConstructor)
        endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., const, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleIdentifier(named, primaryConstructorDeclaration)
        handleRecoverableError(MissingPrimaryConstructorParameters, named, named)
        handleNoFormalParameters(named, MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., null, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleIdentifier(named, primaryConstructorDeclaration)
        beginFormalParameters((, MemberKind.PrimaryConstructor)
        endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., null, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
  beginMetadataStar(extension)
  endMetadataStar(0)
  beginExtensionDeclarationPrelude(extension)
    beginTypeVariables(<)
      beginMetadataStar(T)
      endMetadataStar(0)
      handleIdentifier(T, typeVariableDeclaration)
      beginTypeVariable(T)
        handleTypeVariablesDefined(T, 1)
        handleNoType(T)
      endTypeVariable(>, 0, null, null)
    endTypeVariables(<, >)
    beginExtensionTypeDeclaration(null, extension, E)
      beginPrimaryConstructor(.)
        handleIdentifier(named, primaryConstructorDeclaration)
        handleRecoverableError(MissingPrimaryConstructorParameters, named, named)
        handleNoFormalParameters(named, MemberKind.PrimaryConstructor)
      endPrimaryConstructor(., const, true, true)
      handleImplements(null, 0)
      beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
      endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
    endExtensionTypeDeclaration(extension, null, extension, type, })
  endTopLevelDeclaration(})
endCompilationUnit(13, )
