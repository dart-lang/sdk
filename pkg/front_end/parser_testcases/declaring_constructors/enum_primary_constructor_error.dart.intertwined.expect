parseUnit(enum)
  skipErrorTokens(enum)
  listener: beginCompilationUnit(enum)
  syntheticPreviousToken(enum)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, , enum, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseOptionalNamedParameters((, MemberKind.PrimaryConstructor)
                listener: beginOptionalFormalParameters({)
                rewriteAndRecover({, EmptyNamedParameterList, )
                  reportRecoverableError(}, EmptyNamedParameterList)
                    listener: handleRecoverableError(EmptyNamedParameterList, }, })
                  rewriter()
                parseFormalParameter({, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
                  parseMetadataStar({)
                    listener: beginMetadataStar()
                    listener: endMetadataStar(0)
                  listener: beginFormalParameter(, MemberKind.PrimaryConstructor, null, null, null)
                  listener: handleNoType({)
                  ensureIdentifier({, formalParameterDeclaration)
                    listener: handleIdentifier(, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue(})
                  listener: endFormalParameter(null, null, null, , null, null, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
                listener: endOptionalFormalParameters(1, {, }, MemberKind.PrimaryConstructor)
              ensureCloseParen(}, ()
                reportRecoverableError(enum, Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}])
                  listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], enum, enum)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(.)
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
              reportRecoverableError({, Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}])
                listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
              rewriter()
            listener: handleIdentifier(, primaryConstructorDeclaration)
          listener: handleNoFormalParameters(, MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true, false)
        parseEnumHeaderOpt(, enum)
          parseEnumWithClauseOpt()
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt()
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(.)
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
              reportRecoverableError((, Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}])
                listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
              rewriter()
            listener: handleIdentifier(, primaryConstructorDeclaration)
          parseFormalParameters(, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(const, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables({)
        parsePrimaryConstructorOpt(E, const, false)
          reportRecoverableError(const, ConstWithoutPrimaryConstructor)
            listener: handleRecoverableError(ConstWithoutPrimaryConstructor, const, const)
          listener: handleNoPrimaryConstructor(E, const, false)
        parseEnumHeaderOpt(E, enum)
          parseEnumWithClauseOpt(E)
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt(E)
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(>, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseOptionalNamedParameters((, MemberKind.PrimaryConstructor)
                listener: beginOptionalFormalParameters({)
                rewriteAndRecover({, EmptyNamedParameterList, )
                  reportRecoverableError(}, EmptyNamedParameterList)
                    listener: handleRecoverableError(EmptyNamedParameterList, }, })
                  rewriter()
                parseFormalParameter({, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
                  parseMetadataStar({)
                    listener: beginMetadataStar()
                    listener: endMetadataStar(0)
                  listener: beginFormalParameter(, MemberKind.PrimaryConstructor, null, null, null)
                  listener: handleNoType({)
                  ensureIdentifier({, formalParameterDeclaration)
                    listener: handleIdentifier(, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue(})
                  listener: endFormalParameter(null, null, null, , null, null, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
                listener: endOptionalFormalParameters(1, {, }, MemberKind.PrimaryConstructor)
              ensureCloseParen(}, ()
                reportRecoverableError(enum, Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}])
                  listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], enum, enum)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(const, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, const, false)
          reportRecoverableError(const, ConstWithoutPrimaryConstructor)
            listener: handleRecoverableError(ConstWithoutPrimaryConstructor, const, const)
          listener: handleNoPrimaryConstructor(>, const, false)
        parseEnumHeaderOpt(>, enum)
          parseEnumWithClauseOpt(>)
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt(>)
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, null, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
              reportRecoverableError({, Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}])
                listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
              rewriter()
            listener: handleIdentifier(, primaryConstructorDeclaration)
          listener: handleNoFormalParameters(, MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true, false)
        parseEnumHeaderOpt(, enum)
          parseEnumWithClauseOpt()
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt()
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, null, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
              reportRecoverableError((, Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}])
                listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
              rewriter()
            listener: handleIdentifier(, primaryConstructorDeclaration)
          parseFormalParameters(, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(const, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, const, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
              reportRecoverableError({, Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}])
                listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
              rewriter()
            listener: handleIdentifier(, primaryConstructorDeclaration)
          listener: handleNoFormalParameters(, MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., const, true, false)
        parseEnumHeaderOpt(, enum)
          parseEnumWithClauseOpt()
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt()
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(const, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, const, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
              reportRecoverableError((, Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}])
                listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
              rewriter()
            listener: handleIdentifier(, primaryConstructorDeclaration)
          parseFormalParameters(, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., const, true, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, null, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            listener: handleIdentifier(named, primaryConstructorDeclaration)
          listener: handleNoFormalParameters(named, MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true, false)
        parseEnumHeaderOpt(named, enum)
          parseEnumWithClauseOpt(named)
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt(named)
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, null, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            listener: handleIdentifier(named, primaryConstructorDeclaration)
          parseFormalParameters(named, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., null, true, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(const, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        parsePrimaryConstructorOpt(>, const, false)
          listener: beginPrimaryConstructor(.)
          ensureIdentifier(., primaryConstructorDeclaration)
            listener: handleIdentifier(named, primaryConstructorDeclaration)
          listener: handleNoFormalParameters(named, MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor(., const, true, false)
        parseEnumHeaderOpt(named, enum)
          parseEnumWithClauseOpt(named)
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt(named)
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(enum)
  listener: endCompilationUnit(13, )
