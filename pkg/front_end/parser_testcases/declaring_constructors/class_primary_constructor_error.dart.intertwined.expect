parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, , class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseOptionalNamedParameters((, MemberKind.PrimaryConstructor)
                  listener: beginOptionalFormalParameters({)
                  rewriteAndRecover({, EmptyNamedParameterList, )
                    reportRecoverableError(}, EmptyNamedParameterList)
                      listener: handleRecoverableError(EmptyNamedParameterList, }, })
                    rewriter()
                  parseFormalParameter({, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
                    parseMetadataStar({)
                      listener: beginMetadataStar()
                      listener: endMetadataStar(0)
                    listener: beginFormalParameter(, MemberKind.PrimaryConstructor, null, null, null)
                    listener: handleNoType({)
                    ensureIdentifier({, formalParameterDeclaration)
                      listener: handleIdentifier(, formalParameterDeclaration)
                    listener: handleFormalParameterWithoutValue(})
                    listener: endFormalParameter(null, null, null, null, , null, null, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
                  listener: endOptionalFormalParameters(1, {, }, MemberKind.PrimaryConstructor)
                ensureCloseParen(}, ()
                  reportRecoverableError(class, Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}])
                    listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], class, class)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(.)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
                reportRecoverableError({, Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}])
                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
                rewriter()
              listener: handleIdentifier(, primaryConstructorDeclaration)
            listener: handleNoFormalParameters(, MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., null, true, false)
          parseClassHeaderOpt(, class, class)
            parseClassExtendsOpt(, DeclarationHeaderKind.Class)
              listener: handleNoType()
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt()
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt()
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(.)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
                reportRecoverableError((, Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}])
                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
                rewriter()
              listener: handleIdentifier(, primaryConstructorDeclaration)
            parseFormalParameters(, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., null, true, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(const, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, const, C)
          parsePrimaryConstructorOpt(C, const, false)
            reportRecoverableError(const, ConstWithoutPrimaryConstructor)
              listener: handleRecoverableError(ConstWithoutPrimaryConstructor, const, const)
            listener: handleNoPrimaryConstructor(C, const, false)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, null, C)
          parsePrimaryConstructorOpt(>, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(>, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseOptionalNamedParameters((, MemberKind.PrimaryConstructor)
                  listener: beginOptionalFormalParameters({)
                  rewriteAndRecover({, EmptyNamedParameterList, )
                    reportRecoverableError(}, EmptyNamedParameterList)
                      listener: handleRecoverableError(EmptyNamedParameterList, }, })
                    rewriter()
                  parseFormalParameter({, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
                    parseMetadataStar({)
                      listener: beginMetadataStar()
                      listener: endMetadataStar(0)
                    listener: beginFormalParameter(, MemberKind.PrimaryConstructor, null, null, null)
                    listener: handleNoType({)
                    ensureIdentifier({, formalParameterDeclaration)
                      listener: handleIdentifier(, formalParameterDeclaration)
                    listener: handleFormalParameterWithoutValue(})
                    listener: endFormalParameter(null, null, null, null, , null, null, FormalParameterKind.optionalNamed, MemberKind.PrimaryConstructor)
                  listener: endOptionalFormalParameters(1, {, }, MemberKind.PrimaryConstructor)
                ensureCloseParen(}, ()
                  reportRecoverableError(class, Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}])
                    listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], class, class)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(const, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, const, C)
          parsePrimaryConstructorOpt(>, const, false)
            reportRecoverableError(const, ConstWithoutPrimaryConstructor)
              listener: handleRecoverableError(ConstWithoutPrimaryConstructor, const, const)
            listener: handleNoPrimaryConstructor(>, const, false)
          parseClassHeaderOpt(>, class, class)
            parseClassExtendsOpt(>, DeclarationHeaderKind.Class)
              listener: handleNoType(>)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(>)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(>)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(>, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, null, C)
          parsePrimaryConstructorOpt(>, null, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
                reportRecoverableError({, Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}])
                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
                rewriter()
              listener: handleIdentifier(, primaryConstructorDeclaration)
            listener: handleNoFormalParameters(, MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., null, true, false)
          parseClassHeaderOpt(, class, class)
            parseClassExtendsOpt(, DeclarationHeaderKind.Class)
              listener: handleNoType()
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt()
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt()
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, null, C)
          parsePrimaryConstructorOpt(>, null, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
                reportRecoverableError((, Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}])
                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
                rewriter()
              listener: handleIdentifier(, primaryConstructorDeclaration)
            parseFormalParameters(, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., null, true, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(const, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, const, C)
          parsePrimaryConstructorOpt(>, const, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
                reportRecoverableError({, Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}])
                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '{'., Try inserting an identifier before '{'., {lexeme: {}], {, {)
                rewriter()
              listener: handleIdentifier(, primaryConstructorDeclaration)
            listener: handleNoFormalParameters(, MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., const, true, false)
          parseClassHeaderOpt(, class, class)
            parseClassExtendsOpt(, DeclarationHeaderKind.Class)
              listener: handleNoType()
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt()
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt()
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(const, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, const, C)
          parsePrimaryConstructorOpt(>, const, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              insertSyntheticIdentifier(., primaryConstructorDeclaration, message: null, messageOnToken: null)
                reportRecoverableError((, Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}])
                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
                rewriter()
              listener: handleIdentifier(, primaryConstructorDeclaration)
            parseFormalParameters(, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., const, true, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, null, C)
          parsePrimaryConstructorOpt(>, null, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              listener: handleIdentifier(named, primaryConstructorDeclaration)
            listener: handleNoFormalParameters(named, MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., null, true, false)
          parseClassHeaderOpt(named, class, class)
            parseClassExtendsOpt(named, DeclarationHeaderKind.Class)
              listener: handleNoType(named)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(named)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(named)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(named, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, null, C)
          parsePrimaryConstructorOpt(>, null, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              listener: handleIdentifier(named, primaryConstructorDeclaration)
            parseFormalParameters(named, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(0, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., null, true, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(const, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, const, C)
          parsePrimaryConstructorOpt(>, const, false)
            listener: beginPrimaryConstructor(.)
            ensureIdentifier(., primaryConstructorDeclaration)
              listener: handleIdentifier(named, primaryConstructorDeclaration)
            listener: handleNoFormalParameters(named, MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor(., const, true, false)
          parseClassHeaderOpt(named, class, class)
            parseClassExtendsOpt(named, DeclarationHeaderKind.Class)
              listener: handleNoType(named)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(named)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(named)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(named, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(const, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(=)
        reportRecoverableError(const, ConstWithoutPrimaryConstructor)
          listener: handleRecoverableError(ConstWithoutPrimaryConstructor, const, const)
        listener: beginNamedMixinApplication(class, null, null, null, null, null, null, null, null, C)
        parseNamedMixinApplication(C, class, class)
          listener: handleIdentifier(O, typeReference)
          listener: handleNoTypeArguments(with)
          listener: handleType(O, null)
          parseMixinApplicationRest(O)
            parseTypeList(with)
              listener: beginTypeList(M)
              listener: handleIdentifier(M, typeReference)
              listener: handleNoTypeArguments(;)
              listener: handleType(M, null)
              listener: endTypeList(1)
            listener: handleNamedMixinApplicationWithClause(with)
          ensureSemicolon(M)
          listener: endNamedMixinApplication(class, class, =, null, ;)
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(;, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(;)
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, ;, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(const, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        reportRecoverableError(const, ConstWithoutPrimaryConstructor)
          listener: handleRecoverableError(ConstWithoutPrimaryConstructor, const, const)
        listener: beginNamedMixinApplication(class, null, null, null, null, null, null, null, null, C)
        parseNamedMixinApplication(>, class, class)
          listener: handleIdentifier(O, typeReference)
          listener: handleNoTypeArguments(with)
          listener: handleType(O, null)
          parseMixinApplicationRest(O)
            parseTypeList(with)
              listener: beginTypeList(M)
              listener: handleIdentifier(M, typeReference)
              listener: handleNoTypeArguments(;)
              listener: handleType(M, null)
              listener: endTypeList(1)
            listener: handleNamedMixinApplicationWithClause(with)
          ensureSemicolon(M)
          listener: endNamedMixinApplication(class, class, =, null, ;)
  listener: endTopLevelDeclaration(;)
  reportAllErrorTokens(class)
  listener: endCompilationUnit(15, )
