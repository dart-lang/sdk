parseUnit(m)
  skipErrorTokens(m)
  listener: beginCompilationUnit(m)
  syntheticPreviousToken(m)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(m)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(m)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, m, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(m, topLevelFunctionDeclaration)
        parseMethodTypeVar(m)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(m, m, false, MemberKind.TopLevelMethod)
          parseFormalParameters(m, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(var)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(var, MemberKind.TopLevelMethod, null, null, var)
                reportRecoverableError(var, TypeAfterVar)
                  listener: handleRecoverableError(TypeAfterVar, var, var)
                listener: handleIdentifier(a, typeReference)
                listener: handleNoTypeArguments(b)
                listener: handleType(a, null)
                ensureIdentifier(a, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(var, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(0, {, })
        listener: endTopLevelMethod(m, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: handleNoPrimaryConstructor(C, null, false)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, C)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, C)
              parseMetadataStar({)
                listener: beginMetadataStar(C)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, C, DeclarationKind.Class, C, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, C, C)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(C, methodDeclaration)
                parseQualifiedRestOpt(C, methodDeclarationContinuation)
                parseMethodTypeVar(C)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(C, C, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(C, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(var)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(var, MemberKind.NonStaticMethod, null, null, var)
                        reportRecoverableError(var, TypeAfterVar)
                          listener: handleRecoverableError(TypeAfterVar, var, var)
                        listener: handleIdentifier(a, typeReference)
                        listener: handleNoTypeArguments(b)
                        listener: handleType(a, null)
                        ensureIdentifier(a, formalParameterDeclaration)
                          listener: handleIdentifier(b, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(var, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassConstructor(null, C, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, null)
                  listener: handleNoType(covariant)
                  ensureIdentifier(covariant, formalParameterDeclaration)
                    listener: handleIdentifier(a, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, null)
                  listener: handleIdentifier(a, typeReference)
                  listener: handleNoTypeArguments(b)
                  listener: handleType(a, null)
                  ensureIdentifier(a, formalParameterDeclaration)
                    listener: handleIdentifier(b, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, var)
                  listener: handleNoType(var)
                  ensureIdentifier(var, formalParameterDeclaration)
                    listener: handleIdentifier(a, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(var, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, final)
                  listener: handleNoType(final)
                  ensureIdentifier(final, formalParameterDeclaration)
                    listener: handleIdentifier(a, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(final, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, var)
                  listener: handleIdentifier(a, typeReference)
                  listener: handleNoTypeArguments(b)
                  listener: handleType(a, null)
                  ensureIdentifier(a, formalParameterDeclaration)
                    listener: handleIdentifier(b, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(var, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, final)
                  listener: handleIdentifier(a, typeReference)
                  listener: handleNoTypeArguments(b)
                  listener: handleType(a, null)
                  ensureIdentifier(a, formalParameterDeclaration)
                    listener: handleIdentifier(b, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(final, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(const)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                  listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                  listener: handleNoTypeVariables(()
                  listener: beginFunctionTypedFormalParameter(()
                  listener: handleNoType(const)
                  parseFormalParametersRequiredOpt(f, MemberKind.FunctionTypedParameter)
                    parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                      listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                      listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                  listener: endFunctionTypedFormalParameter(f, null)
                  ensureIdentifier(const, formalParameterDeclaration)
                    listener: handleIdentifier(f, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(const)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                  listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                  listener: beginTypeVariables(<)
                  listener: beginMetadataStar(T)
                  listener: endMetadataStar(0)
                  listener: handleIdentifier(T, typeVariableDeclaration)
                  listener: beginTypeVariable(T)
                  listener: handleTypeVariablesDefined(T, 1)
                  listener: handleNoType(T)
                  listener: endTypeVariable(>, 0, null, null)
                  listener: endTypeVariables(<, >)
                  listener: beginFunctionTypedFormalParameter(<)
                  listener: handleNoType(const)
                  parseFormalParametersRequiredOpt(>, MemberKind.FunctionTypedParameter)
                    parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                      listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                      listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                  listener: endFunctionTypedFormalParameter(f, null)
                  ensureIdentifier(const, formalParameterDeclaration)
                    listener: handleIdentifier(f, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(const)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                  listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                  listener: handleNoTypeVariables(()
                  listener: beginFunctionTypedFormalParameter(()
                  listener: handleVoidKeyword(void)
                  parseFormalParametersRequiredOpt(f, MemberKind.FunctionTypedParameter)
                    parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                      listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                      listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                  listener: endFunctionTypedFormalParameter(f, null)
                  ensureIdentifier(void, formalParameterDeclaration)
                    listener: handleIdentifier(f, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(()
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(C, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(const)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                  listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                  listener: beginTypeVariables(<)
                  listener: beginMetadataStar(T)
                  listener: endMetadataStar(0)
                  listener: handleIdentifier(T, typeVariableDeclaration)
                  listener: beginTypeVariable(T)
                  listener: handleTypeVariablesDefined(T, 1)
                  listener: handleNoType(T)
                  listener: endTypeVariable(>, 0, null, null)
                  listener: endTypeVariables(<, >)
                  listener: beginFunctionTypedFormalParameter(<)
                  listener: handleVoidKeyword(void)
                  parseFormalParametersRequiredOpt(>, MemberKind.FunctionTypedParameter)
                    parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                      listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                      listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                  listener: endFunctionTypedFormalParameter(f, null)
                  ensureIdentifier(void, formalParameterDeclaration)
                    listener: handleIdentifier(f, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, false)
          parseClassHeaderOpt(), class, class)
            parseClassExtendsOpt(), DeclarationHeaderKind.Class)
              listener: handleNoType())
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt())
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(covariant)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, null)
                listener: handleNoType(covariant)
                ensureIdentifier(covariant, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(covariant)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, null)
                listener: handleIdentifier(a, typeReference)
                listener: handleNoTypeArguments(b)
                listener: handleType(a, null)
                ensureIdentifier(a, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(covariant)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, var)
                listener: handleNoType(var)
                ensureIdentifier(var, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(var, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(covariant)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, final)
                listener: handleNoType(final)
                ensureIdentifier(final, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(final, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(covariant)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, var)
                listener: handleIdentifier(a, typeReference)
                listener: handleNoTypeArguments(b)
                listener: handleType(a, null)
                ensureIdentifier(a, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(var, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(covariant)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, final)
                listener: handleIdentifier(a, typeReference)
                listener: handleNoTypeArguments(b)
                listener: handleType(a, null)
                ensureIdentifier(a, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(final, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(const)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                listener: handleNoTypeVariables(()
                listener: beginFunctionTypedFormalParameter(()
                listener: handleNoType(const)
                parseFormalParametersRequiredOpt(f, MemberKind.FunctionTypedParameter)
                  parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                    listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                    listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                listener: endFunctionTypedFormalParameter(f, null)
                ensureIdentifier(const, formalParameterDeclaration)
                  listener: handleIdentifier(f, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(const)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                listener: beginTypeVariables(<)
                listener: beginMetadataStar(T)
                listener: endMetadataStar(0)
                listener: handleIdentifier(T, typeVariableDeclaration)
                listener: beginTypeVariable(T)
                listener: handleTypeVariablesDefined(T, 1)
                listener: handleNoType(T)
                listener: endTypeVariable(>, 0, null, null)
                listener: endTypeVariables(<, >)
                listener: beginFunctionTypedFormalParameter(<)
                listener: handleNoType(const)
                parseFormalParametersRequiredOpt(>, MemberKind.FunctionTypedParameter)
                  parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                    listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                    listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                listener: endFunctionTypedFormalParameter(f, null)
                ensureIdentifier(const, formalParameterDeclaration)
                  listener: handleIdentifier(f, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(const)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                listener: handleNoTypeVariables(()
                listener: beginFunctionTypedFormalParameter(()
                listener: handleVoidKeyword(void)
                parseFormalParametersRequiredOpt(f, MemberKind.FunctionTypedParameter)
                  parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                    listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                    listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                listener: endFunctionTypedFormalParameter(f, null)
                ensureIdentifier(void, formalParameterDeclaration)
                  listener: handleIdentifier(f, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(enum)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(enum, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseEnum(enum, null, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(E, enumDeclaration)
        listener: beginEnum(enum)
        listener: handleNoTypeVariables(()
        parsePrimaryConstructorOpt(E, null, false)
          listener: beginPrimaryConstructor(()
          parseFormalParameters(E, MemberKind.PrimaryConstructor)
            parseFormalParametersRest((, MemberKind.PrimaryConstructor)
              listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                parseMetadataStar(()
                  listener: beginMetadataStar(const)
                  listener: endMetadataStar(0)
                reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                  listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                listener: beginTypeVariables(<)
                listener: beginMetadataStar(T)
                listener: endMetadataStar(0)
                listener: handleIdentifier(T, typeVariableDeclaration)
                listener: beginTypeVariable(T)
                listener: handleTypeVariablesDefined(T, 1)
                listener: handleNoType(T)
                listener: endTypeVariable(>, 0, null, null)
                listener: endTypeVariables(<, >)
                listener: beginFunctionTypedFormalParameter(<)
                listener: handleVoidKeyword(void)
                parseFormalParametersRequiredOpt(>, MemberKind.FunctionTypedParameter)
                  parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                    listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                    listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                listener: endFunctionTypedFormalParameter(f, null)
                ensureIdentifier(void, formalParameterDeclaration)
                  listener: handleIdentifier(f, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
              listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
          listener: endPrimaryConstructor((, null, false, false)
        parseEnumHeaderOpt(), enum)
          parseEnumWithClauseOpt())
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(null, enum, {)
        listener: beginEnumBody({)
        listener: handleEnumElements(}, 0)
        listener: endEnumBody({, })
        listener: endEnum(enum, enum, {, 0, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(int)
                    listener: endMetadataStar(0)
                  listener: beginFormalParameter(int, MemberKind.PrimaryConstructor, null, null, null)
                  listener: handleIdentifier(int, typeReference)
                  listener: handleNoTypeArguments(i)
                  listener: handleType(int, null)
                  ensureIdentifier(int, formalParameterDeclaration)
                    listener: handleIdentifier(i, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, ET)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.ExtensionType, ET)
              parseMetadataStar({)
                listener: beginMetadataStar(ET)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, ET, DeclarationKind.ExtensionType, ET, false)
                listener: beginMethod(DeclarationKind.ExtensionType, null, null, null, null, null, null, ET, ET)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(ET, methodDeclaration)
                parseQualifiedRestOpt(ET, methodDeclarationContinuation)
                parseMethodTypeVar(ET)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(ET, ET, false, MemberKind.ExtensionTypeNonStaticMethod)
                  parseFormalParameters(ET, MemberKind.ExtensionTypeNonStaticMethod)
                    parseFormalParametersRest((, MemberKind.ExtensionTypeNonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.ExtensionTypeNonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.ExtensionTypeNonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(var)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(var, MemberKind.ExtensionTypeNonStaticMethod, null, null, var)
                        reportRecoverableError(var, TypeAfterVar)
                          listener: handleRecoverableError(TypeAfterVar, var, var)
                        listener: handleIdentifier(a, typeReference)
                        listener: handleNoTypeArguments(b)
                        listener: handleType(a, null)
                        ensureIdentifier(a, formalParameterDeclaration)
                          listener: handleIdentifier(b, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(var, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.ExtensionTypeNonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.ExtensionTypeNonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endExtensionTypeConstructor(null, ET, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 1, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, null)
                  listener: handleNoType(covariant)
                  ensureIdentifier(covariant, formalParameterDeclaration)
                    listener: handleIdentifier(a, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, null)
                  listener: handleIdentifier(a, typeReference)
                  listener: handleNoTypeArguments(b)
                  listener: handleType(a, null)
                  ensureIdentifier(a, formalParameterDeclaration)
                    listener: handleIdentifier(b, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, var)
                  listener: handleNoType(var)
                  ensureIdentifier(var, formalParameterDeclaration)
                    listener: handleIdentifier(a, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(var, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, final)
                  listener: handleNoType(final)
                  ensureIdentifier(final, formalParameterDeclaration)
                    listener: handleIdentifier(a, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(final, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, var)
                  listener: handleIdentifier(a, typeReference)
                  listener: handleNoTypeArguments(b)
                  listener: handleType(a, null)
                  ensureIdentifier(a, formalParameterDeclaration)
                    listener: handleIdentifier(b, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(var, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(covariant)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(covariant, Template(ExtraneousModifierInPrimaryConstructor))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifierInPrimaryConstructor), Can't have modifier 'covariant' in a primary constructor., Try removing 'covariant'., {lexeme: covariant}], covariant, covariant)
                  listener: beginFormalParameter(covariant, MemberKind.PrimaryConstructor, null, covariant, final)
                  listener: handleIdentifier(a, typeReference)
                  listener: handleNoTypeArguments(b)
                  listener: handleType(a, null)
                  ensureIdentifier(a, formalParameterDeclaration)
                    listener: handleIdentifier(b, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(final, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(const)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                  listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                  listener: handleNoTypeVariables(()
                  listener: beginFunctionTypedFormalParameter(()
                  listener: handleNoType(const)
                  parseFormalParametersRequiredOpt(f, MemberKind.FunctionTypedParameter)
                    parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                      listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                      listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                  listener: endFunctionTypedFormalParameter(f, null)
                  ensureIdentifier(const, formalParameterDeclaration)
                    listener: handleIdentifier(f, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(const)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                  listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                  listener: beginTypeVariables(<)
                  listener: beginMetadataStar(T)
                  listener: endMetadataStar(0)
                  listener: handleIdentifier(T, typeVariableDeclaration)
                  listener: beginTypeVariable(T)
                  listener: handleTypeVariablesDefined(T, 1)
                  listener: handleNoType(T)
                  listener: endTypeVariable(>, 0, null, null)
                  listener: endTypeVariables(<, >)
                  listener: beginFunctionTypedFormalParameter(<)
                  listener: handleNoType(const)
                  parseFormalParametersRequiredOpt(>, MemberKind.FunctionTypedParameter)
                    parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                      listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                      listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                  listener: endFunctionTypedFormalParameter(f, null)
                  ensureIdentifier(const, formalParameterDeclaration)
                    listener: handleIdentifier(f, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(const)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                  listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                  listener: handleNoTypeVariables(()
                  listener: beginFunctionTypedFormalParameter(()
                  listener: handleVoidKeyword(void)
                  parseFormalParametersRequiredOpt(f, MemberKind.FunctionTypedParameter)
                    parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                      listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                      listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                  listener: endFunctionTypedFormalParameter(f, null)
                  ensureIdentifier(void, formalParameterDeclaration)
                    listener: handleIdentifier(f, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, null, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, null, extension, type)
          listener: handleNoTypeVariables(()
          listener: beginExtensionTypeDeclaration(null, extension, ET)
          parsePrimaryConstructorOpt(ET, null, true)
            listener: beginPrimaryConstructor(()
            parseFormalParameters(ET, MemberKind.PrimaryConstructor)
              parseFormalParametersRest((, MemberKind.PrimaryConstructor)
                listener: beginFormalParameters((, MemberKind.PrimaryConstructor)
                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                  parseMetadataStar(()
                    listener: beginMetadataStar(const)
                    listener: endMetadataStar(0)
                  reportRecoverableErrorWithToken(const, Template(ExtraneousModifier))
                    listener: handleRecoverableError(Message[Template(ExtraneousModifier), Can't have modifier 'const' here., Try removing 'const'., {lexeme: const}], const, const)
                  listener: beginFormalParameter(const, MemberKind.PrimaryConstructor, null, null, const)
                  listener: beginTypeVariables(<)
                  listener: beginMetadataStar(T)
                  listener: endMetadataStar(0)
                  listener: handleIdentifier(T, typeVariableDeclaration)
                  listener: beginTypeVariable(T)
                  listener: handleTypeVariablesDefined(T, 1)
                  listener: handleNoType(T)
                  listener: endTypeVariable(>, 0, null, null)
                  listener: endTypeVariables(<, >)
                  listener: beginFunctionTypedFormalParameter(<)
                  listener: handleVoidKeyword(void)
                  parseFormalParametersRequiredOpt(>, MemberKind.FunctionTypedParameter)
                    parseFormalParametersRest((, MemberKind.FunctionTypedParameter)
                      listener: beginFormalParameters((, MemberKind.FunctionTypedParameter)
                      listener: endFormalParameters(0, (, ), MemberKind.FunctionTypedParameter)
                  listener: endFunctionTypedFormalParameter(f, null)
                  ensureIdentifier(void, formalParameterDeclaration)
                    listener: handleIdentifier(f, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue())
                  listener: endFormalParameter(null, null, null, null, f, null, null, FormalParameterKind.requiredPositional, MemberKind.PrimaryConstructor)
                listener: endFormalParameters(1, (, ), MemberKind.PrimaryConstructor)
            listener: endPrimaryConstructor((, null, false, true)
          parseClassOrMixinOrEnumImplementsOpt())
            listener: handleImplements(null, 0)
          parseClassOrMixinOrExtensionBody(), DeclarationKind.ExtensionType, ET)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, null, extension, type, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(m)
  listener: endCompilationUnit(33, )
