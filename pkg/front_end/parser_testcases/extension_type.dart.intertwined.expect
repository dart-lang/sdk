parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, , class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, A)
        parseClass(A, class, class, A)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A, DeclarationHeaderKind.Class)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: handleNoTypeVariables(on)
          listener: beginExtensionTypeDeclaration(extension, E)
          reportRecoverableError(E, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, E, E)
          listener: handleNoPrimaryConstructor(E, null)
          parseClassOrMixinOrEnumImplementsOpt(E)
            listener: handleImplements(null, 0)
          parseExtensionTypeHeaderRecovery(E, extension)
            parseDeclarationHeaderRecoveryInternal(E, extension, extension, DeclarationHeaderKind.ExtensionType)
              parseClassOrMixinOrEnumImplementsOpt(E)
              skipUnexpectedTokenOpt(E, [extends, with, implements, {])
              reportRecoverableError(on, Message[ExpectedInstead, Expected 'extends' instead of this., null, {string: extends}])
                listener: handleRecoverableError(Message[ExpectedInstead, Expected 'extends' instead of this., null, {string: extends}], on, on)
              parseClassExtendsSeenExtendsClause(on, E, DeclarationHeaderKind.ExtensionType)
                listener: handleIdentifier(A, typeReference)
                listener: handleNoTypeArguments({)
                listener: handleType(A, null)
                listener: handleClassExtends(on, 1)
              reportRecoverableError(on, ExtensionTypeExtends)
                listener: handleRecoverableError(ExtensionTypeExtends, on, on)
              parseClassWithClauseOpt(A)
                listener: handleClassNoWithClause()
              parseClassOrMixinOrEnumImplementsOpt(A)
                listener: handleImplements(null, 0)
              listener: handleRecoverDeclarationHeader(DeclarationHeaderKind.ExtensionType)
          ensureBlock(A, BlockKind(extension type declaration))
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.ExtensionType, E)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 0, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(2, )
