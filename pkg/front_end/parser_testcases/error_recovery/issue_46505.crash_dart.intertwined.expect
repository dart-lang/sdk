parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, A)
        parseClass(A, class, class, A)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, Stream)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, A)
              parseMetadataStar({)
                listener: beginMetadataStar(Stream)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(>, {, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', null, DeclarationKind.Class, A)
                parseFields({, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', }, DeclarationKind.Class, A, false)
                  listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, {)
                  ensureIdentifier({, typeReference)
                    listener: handleIdentifier(Stream, typeReference)
                  listener: beginTypeArguments(<)
                  ensureIdentifier(<, typeReference)
                    listener: handleIdentifier(List, typeReference)
                  listener: beginTypeArguments(<)
                  reportRecoverableErrorWithToken(>>, Instance of 'Template<(Token) => Message>')
                    listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '>>'., null, {lexeme: >>}], >>, >>)
                  rewriter()
                  listener: handleIdentifier(, typeReference)
                  listener: handleNoTypeArguments(>>)
                  listener: handleType(, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(List, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(Stream, null)
                  ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                    insertSyntheticIdentifier(>, fieldDeclaration, message: null, messageOnToken: null)
                      reportRecoverableError(}, Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}])
                        listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}], }, })
                      rewriter()
                    listener: handleIdentifier(, fieldDeclaration)
                  parseFieldInitializerOpt(, , null, null, null, null, null, DeclarationKind.Class, A)
                    listener: handleNoFieldInitializer(})
                  ensureSemicolon()
                    reportRecoverableError(>, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], >, >)
                    rewriter()
                  listener: endClassFields(null, null, null, null, null, null, null, 1, Stream, ;)
                listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, null, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(B, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, B)
        parseClass(B, class, class, B)
          parseClassHeaderOpt(B, class, class)
            parseClassExtendsOpt(B)
              listener: handleNoType(B)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(B)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, B)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, List)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, B)
              parseMetadataStar({)
                listener: beginMetadataStar(List)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(>, {, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', null, DeclarationKind.Class, B)
                parseFields({, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', }, DeclarationKind.Class, B, false)
                  listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, {)
                  ensureIdentifier({, typeReference)
                    listener: handleIdentifier(List, typeReference)
                  listener: beginTypeArguments(<)
                  reportRecoverableErrorWithToken(>, Instance of 'Template<(Token) => Message>')
                    listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '>'., null, {lexeme: >}], >, >)
                  rewriter()
                  listener: handleIdentifier(, typeReference)
                  listener: handleNoTypeArguments(>)
                  listener: handleType(, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(List, null)
                  ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                    insertSyntheticIdentifier(>, fieldDeclaration, message: null, messageOnToken: null)
                      reportRecoverableError(}, Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}])
                        listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}], }, })
                      rewriter()
                    listener: handleIdentifier(, fieldDeclaration)
                  parseFieldInitializerOpt(, , null, null, null, null, null, DeclarationKind.Class, B)
                    listener: handleNoFieldInitializer(})
                  ensureSemicolon()
                    reportRecoverableError(>, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], >, >)
                    rewriter()
                  listener: endClassFields(null, null, null, null, null, null, null, 1, List, ;)
                listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(2, )
