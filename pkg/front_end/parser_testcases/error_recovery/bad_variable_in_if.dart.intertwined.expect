parseUnit(foo)
  skipErrorTokens(foo)
  listener: beginCompilationUnit(foo)
  syntheticPreviousToken(foo)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(foo)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(foo)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, foo, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseLiteralBool(()
                              listener: handleLiteralBool(true)
                    ensureCloseParen(true, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(final)
                parseStatement())
                  parseStatementX())
                    parseExpressionStatementOrDeclarationAfterModifiers(final, ), null, final, null, null)
                      looksLikeLocalFunction(<)
                      listener: beginMetadataStar(final)
                      listener: endMetadataStar(0)
                      insertSyntheticIdentifier(final, localVariableDeclaration, message: Message[Template(ExpectedIdentifier), Expected an identifier, but got '<'., Try inserting an identifier before '<'., {lexeme: <}], messageOnToken: null)
                        reportRecoverableError(<, Message[Template(ExpectedIdentifier), Expected an identifier, but got '<'., Try inserting an identifier before '<'., {lexeme: <}])
                          listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '<'., Try inserting an identifier before '<'., {lexeme: <}], <, <)
                        rewriter()
                      listener: handleIdentifier(, typeReference)
                      listener: beginTypeArguments(<)
                      listener: handleIdentifier(int, typeReference)
                      listener: handleNoTypeArguments(>)
                      listener: handleType(int, null)
                      listener: endTypeArguments(1, <, >)
                      listener: handleType(, null)
                      listener: beginVariablesDeclaration(f, null, final)
                      parseVariablesDeclarationRest(>, true)
                        parseOptionallyInitializedIdentifier(>)
                          ensureIdentifier(>, localVariableDeclaration)
                            listener: handleIdentifier(f, localVariableDeclaration)
                          listener: beginInitializedIdentifier(f)
                          parseVariableInitializerOpt(f)
                            listener: beginVariableInitializer(=)
                            parseExpression(=)
                              parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(=, true, ConstantPatternContext.none)
                                  parsePrimary(=, expression, ConstantPatternContext.none)
                                    listener: handleNoTypeArguments([)
                                    parseLiteralListSuffix(=, null)
                                      parseExpression([)
                                        parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                          parseUnaryExpression([, true, ConstantPatternContext.none)
                                            parsePrimary([, expression, ConstantPatternContext.none)
                                              parseLiteralInt([)
                                                listener: handleLiteralInt(42)
                                      listener: handleLiteralList(1, [, null, ])
                            listener: endVariableInitializer(=)
                          listener: endInitializedIdentifier(f)
                        ensureSemicolon(])
                        listener: endVariablesDeclaration(1, ;)
                listener: endThenStatement(final, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(foo, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(foo)
  listener: endCompilationUnit(1, )
