parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, A)
        parseClass(A, class, class, A)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, List)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, A)
              parseMetadataStar({)
                listener: beginMetadataStar(List)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseFields({, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', p, DeclarationKind.Class, A, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, {)
                ensureIdentifier({, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, prefixedTypeReference)
                  listener: handleIdentifier(int, prefixedTypeReference)
                parseQualifiedRest(int, typeReferenceContinuation)
                  ensureIdentifier(., typeReferenceContinuation)
                    reportRecoverableErrorWithToken(>, Instance of 'Template<(Token) => Message>')
                      listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '>'., null, {lexeme: >}], >, >)
                    rewriter()
                    listener: handleIdentifier(, typeReferenceContinuation)
                  listener: handleQualified(.)
                listener: handleNoTypeArguments(>)
                listener: handleType(int, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(p, fieldDeclaration)
                parseFieldInitializerOpt(p, p, null, null, null, null, null, DeclarationKind.Class, A)
                  listener: handleNoFieldInitializer(;)
                listener: endClassFields(null, null, null, null, null, null, null, 1, List, ;)
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(1, )
