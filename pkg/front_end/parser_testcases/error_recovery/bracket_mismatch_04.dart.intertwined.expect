parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, foo, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, foo)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                looksLikeLocalFunction(foo)
                parseExpressionStatement({)
                  parseExpression({)
                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression({, true, ConstantPatternContext.none)
                        parsePrimary({, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend({, expression, ConstantPatternContext.none)
                              ensureIdentifier({, expression)
                                listener: handleIdentifier(foo, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(foo)
                                parseArguments(foo)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    allowedToShortcutParseExpression()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                              listener: handleNoTypeVariables(()
                                              parseFunctionExpression(()
                                                listener: beginFunctionExpression(()
                                                parseFormalParametersRequiredOpt((, MemberKind.Local)
                                                  parseFormalParametersRest((, MemberKind.Local)
                                                    listener: beginFormalParameters((, MemberKind.Local)
                                                    listener: endFormalParameters(0, (, ), MemberKind.Local)
                                                parseAsyncOptBody(), true, false)
                                                  parseAsyncModifierOpt())
                                                    listener: handleAsyncModifier(null, null)
                                                    inPlainSync()
                                                  parseFunctionBody(), true, false)
                                                    listener: beginBlockFunctionBody({)
                                                    notEofOrType(CLOSE_CURLY_BRACKET, bar)
                                                    parseStatement({)
                                                      parseStatementX({)
                                                        parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                                                          looksLikeLocalFunction(bar)
                                                          parseExpressionStatement({)
                                                            parseExpression({)
                                                              parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                                                parseUnaryExpression({, true, ConstantPatternContext.none)
                                                                  parsePrimary({, expression, ConstantPatternContext.none)
                                                                    parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                                                      looksLikeFunctionBody())
                                                                      parseSend({, expression, ConstantPatternContext.none)
                                                                        ensureIdentifier({, expression)
                                                                          listener: handleIdentifier(bar, expression)
                                                                        listener: handleNoTypeArguments(()
                                                                        parseArgumentsOpt(bar)
                                                                          parseArguments(bar)
                                                                            parseArgumentsRest(()
                                                                              listener: beginArguments(()
                                                                              listener: endArguments(0, (, ))
                                                                        listener: handleSend(bar, ))
                                                            ensureSemicolon())
                                                              reportRecoverableError(), Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                                                listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], ), ))
                                                              rewriter()
                                                            listener: handleExpressionStatement(bar, ;)
                                                    notEofOrType(CLOSE_CURLY_BRACKET, ))
                                                    parseStatement(;)
                                                      parseStatementX(;)
                                                        parseExpressionStatementOrDeclaration(;, null)
                                                          parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                                                            looksLikeLocalFunction())
                                                            parseExpressionStatement(;)
                                                              parseExpression(;)
                                                                parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                                                                  parseUnaryExpression(;, true, ConstantPatternContext.none)
                                                                    parsePrimary(;, expression, ConstantPatternContext.none)
                                                                      parseSend(;, expression, ConstantPatternContext.none)
                                                                        ensureIdentifier(;, expression)
                                                                          reportRecoverableErrorWithToken(), Template(ExpectedIdentifier))
                                                                            listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ')'., Try inserting an identifier before ')'., {lexeme: )}], ), ))
                                                                          rewriter()
                                                                          listener: handleIdentifier(, expression)
                                                                        listener: handleNoTypeArguments())
                                                                        parseArgumentsOpt()
                                                                          listener: handleNoArguments())
                                                                        listener: handleSend(, )
                                                              ensureSemicolon()
                                                                reportRecoverableError(), Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                                                  listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], ), ))
                                                                rewriter()
                                                              listener: handleExpressionStatement(), ;)
                                                    reportRecoverableError(;, Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}])
                                                      listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}], ), ))
                                                    notEofOrType(CLOSE_CURLY_BRACKET, ;)
                                                    parseStatement())
                                                      parseStatementX())
                                                        parseEmptyStatement())
                                                          listener: handleEmptyStatement(;)
                                                    notEofOrType(CLOSE_CURLY_BRACKET, })
                                                    listener: endBlockFunctionBody(3, {, })
                                                listener: endFunctionExpression((, })
                                    listener: endArguments(1, (, ))
                              listener: handleSend(foo, ))
                  ensureSemicolon())
                  listener: handleExpressionStatement(foo, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
