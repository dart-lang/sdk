parseUnit(UnmatchedToken(())
  skipErrorTokens(UnmatchedToken(())
  listener: beginCompilationUnit(main)
  syntheticPreviousToken(main)
  parseTopLevelDeclarationImpl(UnmatchedToken((), Instance of 'DirectiveContext')
    parseMetadataStar(UnmatchedToken(())
      listener: beginMetadataStar(main)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(UnmatchedToken(())
      listener: beginTopLevelMember(main)
      isReservedKeyword(()
      parseTopLevelMethod(UnmatchedToken((), null, UnmatchedToken((), Instance of 'NoType', null, main, false)
        listener: beginTopLevelMethod(UnmatchedToken((), null)
        listener: handleNoType(UnmatchedToken(())
        ensureIdentifierPotentiallyRecovered(UnmatchedToken((), topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, new)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, false)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, false)
                  looksLikeLocalFunction(new)
                  parseExpressionStatement({)
                    parseExpression({)
                      parsePrecedenceExpression({, 1, true)
                        parseUnaryExpression({, true)
                          parsePrimary({, expression)
                            parseNewExpression({)
                              listener: beginNewExpression(new)
                              parseConstructorReference(new, null)
                                ensureIdentifier(new, constructorReference)
                                  listener: handleIdentifier(C, constructorReference)
                                listener: beginConstructorReference(C)
                                parseQualifiedRestOpt(C, constructorReferenceContinuation)
                                listener: handleNoTypeArguments(()
                                listener: handleNoConstructorReferenceContinuationAfterTypeArguments(()
                                listener: endConstructorReference(C, null, ()
                              parseConstructorInvocationArguments(C)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true)
                                      parseUnaryExpression((, true)
                                        parsePrimary((, expression)
                                          parseSend((, expression)
                                            ensureIdentifier((, expression)
                                              reportRecoverableErrorWithToken(;, Instance of 'Template<(Token) => Message>')
                                                listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ';'., Try inserting an identifier before ';'., {token: ;}], ;, ;)
                                              rewriter()
                                              listener: handleIdentifier(, expression)
                                            listener: handleNoTypeArguments(;)
                                            parseArgumentsOpt()
                                              listener: handleNoArguments(;)
                                            listener: handleSend(, ;)
                                  ensureCloseParen(, ()
                                    rewriter()
                                  listener: endArguments(1, (, ))
                              listener: endNewExpression(new)
                    ensureSemicolon())
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(main, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(UnmatchedToken(())
    listener: handleErrorToken(UnmatchedToken(())
    listener: handleRecoverableError(Message[UnmatchedToken, Can't find ')' to match '('., null, {string: ), token: (}], UnmatchedToken((), UnmatchedToken(())
  listener: endCompilationUnit(1, )
