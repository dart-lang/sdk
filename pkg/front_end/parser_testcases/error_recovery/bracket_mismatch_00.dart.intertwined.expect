parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, good, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(good, topLevelFunctionDeclaration)
        parseMethodTypeVar(good)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(good, good, false, MemberKind.TopLevelMethod)
          parseFormalParameters(good, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, [)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction([)
                  parseExpressionStatement({)
                    parseExpression({)
                      parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression({, true, ConstantPatternContext.none)
                          parsePrimary({, expression, ConstantPatternContext.none)
                            listener: handleNoTypeArguments([)
                            parseLiteralListSuffix({, null)
                              parseExpression([)
                                parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression([, true, ConstantPatternContext.none)
                                    parsePrimary([, expression, ConstantPatternContext.none)
                                      parseParenthesizedExpressionFunctionLiteralOrRecordLiteral([, ConstantPatternContext.none)
                                        parseParenthesizedExpressionOrRecordLiteral([, null, ConstantPatternContext.none)
                                          listener: beginParenthesizedExpressionOrRecordLiteral(()
                                          parseExpression(()
                                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                                parsePrimary((, expression, ConstantPatternContext.none)
                                                  listener: handleNoTypeArguments([)
                                                  parseLiteralListSuffix((, null)
                                                    listener: handleLiteralList(0, [, null, ])
                                          ensureCloseParen(], ()
                                          listener: endParenthesizedExpression(()
                              listener: handleLiteralList(1, [, null, ])
                    ensureSemicolon(])
                    listener: handleExpressionStatement([, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(}, null, null, }, VoidType(), null, bad, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(bad, topLevelFunctionDeclaration)
        parseMethodTypeVar(bad)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(bad, bad, false, MemberKind.TopLevelMethod)
          parseFormalParameters(bad, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, [)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction([)
                  parseExpressionStatement({)
                    parseExpression({)
                      parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression({, true, ConstantPatternContext.none)
                          parsePrimary({, expression, ConstantPatternContext.none)
                            listener: handleNoTypeArguments([)
                            parseLiteralListSuffix({, null)
                              parseExpression([)
                                parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression([, true, ConstantPatternContext.none)
                                    parsePrimary([, expression, ConstantPatternContext.none)
                                      parseParenthesizedExpressionFunctionLiteralOrRecordLiteral([, ConstantPatternContext.none)
                                        parseParenthesizedExpressionOrRecordLiteral([, null, ConstantPatternContext.none)
                                          listener: beginParenthesizedExpressionOrRecordLiteral(()
                                          parseExpression(()
                                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                                parsePrimary((, expression, ConstantPatternContext.none)
                                                  parseSend((, expression, ConstantPatternContext.none)
                                                    ensureIdentifier((, expression)
                                                      reportRecoverableErrorWithToken(], Template(ExpectedIdentifier))
                                                        listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ']'., Try inserting an identifier before ']'., {lexeme: ]}], ], ])
                                                      rewriter()
                                                      listener: handleIdentifier(, expression)
                                                    listener: handleNoTypeArguments(])
                                                    parseArgumentsOpt()
                                                      listener: handleNoArguments(])
                                                    listener: handleSend(, )
                                          ensureCloseParen(, ()
                                            reportRecoverableError(], Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}])
                                              listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], ], ])
                                          listener: endParenthesizedExpression(()
                              listener: handleLiteralList(1, [, null, ])
                    ensureSemicolon(])
                    listener: handleExpressionStatement([, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(2, )
