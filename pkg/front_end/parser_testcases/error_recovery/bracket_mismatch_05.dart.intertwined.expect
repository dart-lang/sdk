parseUnit(UnmatchedToken([))
  skipErrorTokens(UnmatchedToken([))
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(UnmatchedToken([), DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar(UnmatchedToken([))
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(UnmatchedToken([))
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(UnmatchedToken([), null, null, UnmatchedToken([), VoidType(), null, foo, false)
        listener: beginTopLevelMethod(UnmatchedToken([), null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, {)
          parseStatement({)
            parseStatementX({)
              parseBlock({, BlockKind(statement))
                ensureBlock({, BlockKind(statement))
                listener: beginBlock({, BlockKind(statement))
                notEofOrType(CLOSE_CURLY_BRACKET, [)
                parseStatement({)
                  parseStatementX({)
                    parseExpressionStatementOrDeclaration({, null)
                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                        looksLikeLocalFunction([)
                        parseExpressionStatement({)
                          parseExpression({)
                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                parsePrimary({, expression, ConstantPatternContext.none)
                                  listener: handleNoTypeArguments([)
                                  parseLiteralListSuffix({, null)
                                    parseExpression([)
                                      parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression([, true, ConstantPatternContext.none)
                                          parsePrimary([, expression, ConstantPatternContext.none)
                                            parseLiteralInt([)
                                              listener: handleLiteralInt(1)
                                    listener: handleLiteralList(1, [, null, ])
                          ensureSemicolon(])
                            reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                              listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                            rewriter()
                          listener: handleExpressionStatement([, ;)
                notEofOrType(CLOSE_CURLY_BRACKET, })
                listener: endBlock(1, {, }, BlockKind(statement))
          notEofOrType(CLOSE_CURLY_BRACKET, ;)
          parseStatement(})
            parseStatementX(})
              parseEmptyStatement(})
                listener: handleEmptyStatement(;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(UnmatchedToken([))
    listener: handleErrorToken(UnmatchedToken([))
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find ']' to match '['., null, {string: ], lexeme: [}], UnmatchedToken([), UnmatchedToken([))
  listener: endCompilationUnit(1, )
