parseUnit(const)
  skipErrorTokens(const)
  listener: beginCompilationUnit(const)
  syntheticPreviousToken(const)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(const)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(const)
      skipOuterPattern(const)
        skipObjectPatternRest(foo)
      parseFields(, null, null, null, null, null, null, const, const, Instance of 'NoType', foo, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, const, )
        listener: handleNoType(const)
        ensureIdentifierPotentiallyRecovered(const, topLevelVariableDeclaration, false)
          listener: handleIdentifier(foo, topLevelVariableDeclaration)
        parseFieldInitializerOpt(foo, foo, null, null, null, null, const, DeclarationKind.TopLevel, null)
          reportRecoverableError(foo, Message[ConstFieldWithoutInitializer, The const variable 'foo' must be initialized., Try adding an initializer ('= expression') to the declaration., {name: foo}])
            listener: handleRecoverableError(Message[ConstFieldWithoutInitializer, The const variable 'foo' must be initialized., Try adding an initializer ('= expression') to the declaration., {name: foo}], foo, foo)
          listener: handleNoFieldInitializer()
        ensureSemicolon(foo)
          reportRecoverableError(foo, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], foo, foo)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, const, 1, const, ;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(const)
  listener: endCompilationUnit(1, )
