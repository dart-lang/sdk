parseUnit(typedef)
  skipErrorTokens(typedef)
  listener: beginCompilationUnit(typedef)
  syntheticPreviousToken(typedef)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(typedef)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(typedef, , typedef, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseTypedef(null, typedef)
        listener: beginUncategorizedTopLevelDeclaration(typedef)
        listener: beginTypedef(typedef)
        ensureIdentifierPotentiallyRecovered(typedef, typedefDeclaration, false)
          insertSyntheticIdentifier(typedef, typedefDeclaration, message: Message[Template(ExpectedIdentifier), Expected an identifier, but got '='., Try inserting an identifier before '='., {lexeme: =}], messageOnToken: null)
            reportRecoverableError(=, Message[Template(ExpectedIdentifier), Expected an identifier, but got '='., Try inserting an identifier before '='., {lexeme: =}])
              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '='., Try inserting an identifier before '='., {lexeme: =}], =, =)
            rewriter()
          listener: handleIdentifier(, typedefDeclaration)
        listener: handleNoTypeVariables(=)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(;)
        listener: handleType(int, null)
        ensureSemicolon(int)
        listener: endTypedef(null, typedef, =, ;)
  listener: endTopLevelDeclaration(;)
  reportAllErrorTokens(typedef)
  listener: endCompilationUnit(1, )
