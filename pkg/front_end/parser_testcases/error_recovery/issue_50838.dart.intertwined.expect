parseUnit(mixin)
  skipErrorTokens(mixin)
  listener: beginCompilationUnit(mixin)
  syntheticPreviousToken(mixin)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(mixin)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, mixin, null, null, null, null, null, Instance of 'DirectiveContext')
      parseMixin(null, null, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          listener: handleIdentifier(M, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginMixinDeclaration(null, null, mixin, M)
        parseMixinHeaderOpt(M, mixin)
          parseMixinOnOpt(M)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(M)
            listener: handleImplements(null, 0)
          listener: handleMixinHeader(mixin)
        parseClassOrMixinOrExtensionBody(M, DeclarationKind.Mixin, M)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(mixin, })
  listener: endTopLevelDeclaration(mixin)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(mixin)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, mixin, null, null, null, null, null, Instance of 'DirectiveContext')
      parseMixin(null, null, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          listener: handleIdentifier(N, classOrMixinDeclaration)
        listener: handleNoTypeVariables(with)
        listener: beginMixinDeclaration(null, null, mixin, N)
        parseMixinHeaderOpt(N, mixin)
          parseMixinOnOpt(N)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(N)
            listener: handleImplements(null, 0)
          listener: handleMixinHeader(mixin)
        parseMixinHeaderRecovery(N, mixin, N)
          parseMixinHeaderOpt(N, mixin)
            parseMixinOnOpt(N)
            parseClassOrMixinOrEnumImplementsOpt(N)
          skipUnexpectedTokenOpt(N, [on, implements, {])
          parseMixinOnOpt(N)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(N)
            listener: handleImplements(null, 0)
          reportRecoverableError(with, MixinWithClause)
            listener: handleRecoverableError(MixinWithClause, with, with)
          parseTypeList(with)
            listener: beginTypeList(M)
            listener: handleIdentifier(M, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(M, null)
            listener: endTypeList(1)
          listener: handleMixinWithClause(with)
          listener: handleRecoverMixinHeader()
        ensureBlock(M, null, mixin declaration)
        parseClassOrMixinOrExtensionBody(M, DeclarationKind.Mixin, N)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(mixin, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(mixin)
  listener: endCompilationUnit(2, )
