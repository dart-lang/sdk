parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, Instance of 'DirectiveContext')
      parseClassDeclarationModifiers(, class)
      parseClassOrNamedMixinApplication(null, class)
        listener: beginClassOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, A)
        parseClass(A, class, class, A)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt(A)
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, Instance of 'DirectiveContext')
      parseClassDeclarationModifiers(}, class)
      parseClassOrNamedMixinApplication(null, class)
        listener: beginClassOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(B, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, B)
        parseClass(B, class, class, B)
          parseClassHeaderOpt(B, class, class)
            parseClassExtendsOpt(B)
              listener: handleNoType(B)
              listener: handleClassExtends(null, 1)
            parseWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt(B)
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, B)
            listener: beginClassOrMixinBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, Instance of 'DirectiveContext')
      parseClassDeclarationModifiers(}, class)
      parseClassOrNamedMixinApplication(null, class)
        listener: beginClassOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(Foo, classOrMixinDeclaration)
        listener: handleNoTypeVariables(extends)
        listener: beginClassDeclaration(class, null, Foo)
        parseClass(Foo, class, class, Foo)
          parseClassHeaderOpt(Foo, class, class)
            parseClassExtendsOpt(Foo)
              listener: handleIdentifier(A, typeReference)
              listener: handleNoTypeArguments(,)
              listener: handleType(A, null)
              reportRecoverableError(,, MultipleExtends)
                listener: handleRecoverableError(MultipleExtends, ,, ,)
              listener: handleIdentifier(B, typeReference)
              listener: handleNoTypeArguments({)
              listener: handleType(B, null)
              listener: handleClassExtends(extends, 2)
            parseWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt(B)
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, Foo)
            listener: beginClassOrMixinBody(DeclarationKind.Class, {)
            notEofOrValue(}, Foo)
            parseClassOrMixinOrExtensionMemberImpl({, DeclarationKind.Class, Foo)
              parseMetadataStar({)
                listener: beginMetadataStar(Foo)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, {, Instance of 'NoType', null, Foo, DeclarationKind.Class, Foo, false)
                listener: beginMethod(null, null, null, null, null, Foo)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(Foo, methodDeclaration)
                parseQualifiedRestOpt(Foo, methodDeclarationContinuation)
                parseMethodTypeVar(Foo)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(Foo, Foo, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(Foo, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassConstructor(null, Foo, (, null, })
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, Instance of 'DirectiveContext')
      parseClassDeclarationModifiers(}, class)
      parseClassOrNamedMixinApplication(null, class)
        listener: beginClassOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(Bar, classOrMixinDeclaration)
        listener: handleNoTypeVariables(extend)
        listener: beginClassDeclaration(class, null, Bar)
        parseClass(Bar, class, class, Bar)
          parseClassHeaderOpt(Bar, class, class)
            parseClassExtendsOpt(Bar)
              listener: handleNoType(Bar)
              listener: handleClassExtends(null, 1)
            parseWithClauseOpt(Bar)
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt(Bar)
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassHeaderRecovery(Bar, class, class)
            parseClassHeaderOpt(Bar, class, class)
              parseClassExtendsOpt(Bar)
              parseWithClauseOpt(Bar)
              parseClassOrMixinImplementsOpt(Bar)
            skipUnexpectedTokenOpt(Bar, [extends, with, implements, {])
            reportRecoverableError(extend, Message[ExpectedInstead, Expected 'extends' instead of this., null, {string: extends}])
              listener: handleRecoverableError(Message[ExpectedInstead, Expected 'extends' instead of this., null, {string: extends}], extend, extend)
            listener: handleIdentifier(A, typeReference)
            listener: handleNoTypeArguments(,)
            listener: handleType(A, null)
            reportRecoverableError(,, MultipleExtends)
              listener: handleRecoverableError(MultipleExtends, ,, ,)
            listener: handleIdentifier(B, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(B, null)
            listener: handleClassExtends(extend, 2)
            parseWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt(B)
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleRecoverClassHeader()
          ensureBlock(B, null, class declaration)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, Bar)
            listener: beginClassOrMixinBody(DeclarationKind.Class, {)
            notEofOrValue(}, Bar)
            parseClassOrMixinOrExtensionMemberImpl({, DeclarationKind.Class, Bar)
              parseMetadataStar({)
                listener: beginMetadataStar(Bar)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, {, Instance of 'NoType', null, Bar, DeclarationKind.Class, Bar, false)
                listener: beginMethod(null, null, null, null, null, Bar)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(Bar, methodDeclaration)
                parseQualifiedRestOpt(Bar, methodDeclarationContinuation)
                parseMethodTypeVar(Bar)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(Bar, Bar, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(Bar, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassConstructor(null, Bar, (, null, })
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, Instance of 'DirectiveContext')
      parseClassDeclarationModifiers(}, class)
      parseClassOrNamedMixinApplication(null, class)
        listener: beginClassOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(Baz, classOrMixinDeclaration)
        listener: handleNoTypeVariables(on)
        listener: beginClassDeclaration(class, null, Baz)
        parseClass(Baz, class, class, Baz)
          parseClassHeaderOpt(Baz, class, class)
            parseClassExtendsOpt(Baz)
              listener: handleNoType(Baz)
              listener: handleClassExtends(null, 1)
            parseWithClauseOpt(Baz)
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt(Baz)
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassHeaderRecovery(Baz, class, class)
            parseClassHeaderOpt(Baz, class, class)
              parseClassExtendsOpt(Baz)
              parseWithClauseOpt(Baz)
              parseClassOrMixinImplementsOpt(Baz)
            skipUnexpectedTokenOpt(Baz, [extends, with, implements, {])
            reportRecoverableError(on, Message[ExpectedInstead, Expected 'extends' instead of this., null, {string: extends}])
              listener: handleRecoverableError(Message[ExpectedInstead, Expected 'extends' instead of this., null, {string: extends}], on, on)
            listener: handleIdentifier(A, typeReference)
            listener: handleNoTypeArguments(,)
            listener: handleType(A, null)
            reportRecoverableError(,, MultipleExtends)
              listener: handleRecoverableError(MultipleExtends, ,, ,)
            listener: handleIdentifier(B, typeReference)
            listener: handleNoTypeArguments({)
            listener: handleType(B, null)
            listener: handleClassExtends(on, 2)
            parseWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinImplementsOpt(B)
              listener: handleClassOrMixinImplements(null, 0)
            listener: handleRecoverClassHeader()
          ensureBlock(B, null, class declaration)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, Baz)
            listener: beginClassOrMixinBody(DeclarationKind.Class, {)
            notEofOrValue(}, Baz)
            parseClassOrMixinOrExtensionMemberImpl({, DeclarationKind.Class, Baz)
              parseMetadataStar({)
                listener: beginMetadataStar(Baz)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, {, Instance of 'NoType', null, Baz, DeclarationKind.Class, Baz, false)
                listener: beginMethod(null, null, null, null, null, Baz)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(Baz, methodDeclaration)
                parseQualifiedRestOpt(Baz, methodDeclarationContinuation)
                parseMethodTypeVar(Baz)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(Baz, Baz, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(Baz, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassConstructor(null, Baz, (, null, })
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(5, )
