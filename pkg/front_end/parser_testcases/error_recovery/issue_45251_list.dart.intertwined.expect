parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(F, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, F)
        parseClass(F, class, class, F)
          parseClassHeaderOpt(F, class, class)
            parseClassExtendsOpt(F)
              listener: handleNoType(F)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(F)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(F)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(F, DeclarationKind.Class, F)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, F)
              parseMetadataStar({)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields({, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo1, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, {)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo1, fieldDeclaration)
                parseFieldInitializerOpt(foo1, foo1, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                            parseSend(=, expression, ConstantPatternContext.none)
                              isNextIdentifier(=)
                              reportRecoverableError(List, Message[LiteralWithClass, A list literal can't be prefixed by 'List'., Try removing 'List', {string: list, lexeme: List}])
                                listener: handleRecoverableError(Message[LiteralWithClass, A list literal can't be prefixed by 'List'., Try removing 'List', {string: list, lexeme: List}], List, List)
                              parsePrimary(List, expression, ConstantPatternContext.none)
                                parseLiteralListSetMapOrFunction(List, null)
                                  listener: beginTypeArguments(<)
                                  listener: handleIdentifier(List, typeReference)
                                  listener: beginTypeArguments(<)
                                  listener: handleIdentifier(int, typeReference)
                                  listener: handleNoTypeArguments(>)
                                  listener: handleType(int, null)
                                  listener: endTypeArguments(1, <, >)
                                  listener: handleType(List, null)
                                  listener: endTypeArguments(1, <, >)
                                  parseLiteralListSuffix(>, null)
                                    rewriteSquareBrackets(>)
                                      link([, ])
                                      rewriter()
                                    listener: handleLiteralList(0, [, null, ])
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, F)
              parseMetadataStar(;)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields(;, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo2, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, ;)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo2, fieldDeclaration)
                parseFieldInitializerOpt(foo2, foo2, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseLiteralListSetMapOrFunction(=, null)
                            listener: beginTypeArguments(<)
                            listener: handleIdentifier(List, typeReference)
                            listener: beginTypeArguments(<)
                            listener: handleIdentifier(int, typeReference)
                            listener: handleNoTypeArguments(>)
                            listener: handleType(int, null)
                            listener: endTypeArguments(1, <, >)
                            listener: handleType(List, null)
                            listener: endTypeArguments(1, <, >)
                            parseLiteralListSuffix(>, null)
                              rewriteSquareBrackets(>)
                                link([, ])
                                rewriter()
                              listener: handleLiteralList(0, [, null, ])
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, F)
              parseMetadataStar(;)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields(;, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo3, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, ;)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo3, fieldDeclaration)
                parseFieldInitializerOpt(foo3, foo3, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                            parseSend(=, expression, ConstantPatternContext.none)
                              isNextIdentifier(=)
                              reportRecoverableError(List, Message[LiteralWithClass, A list literal can't be prefixed by 'List'., Try removing 'List', {string: list, lexeme: List}])
                                listener: handleRecoverableError(Message[LiteralWithClass, A list literal can't be prefixed by 'List'., Try removing 'List', {string: list, lexeme: List}], List, List)
                              parsePrimary(List, expression, ConstantPatternContext.none)
                                listener: handleNoTypeArguments([])
                                parseLiteralListSuffix(List, null)
                                  rewriteSquareBrackets(List)
                                    link([, ])
                                    rewriter()
                                  listener: handleLiteralList(0, [, null, ])
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, F)
              parseMetadataStar(;)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields(;, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo4, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, ;)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo4, fieldDeclaration)
                parseFieldInitializerOpt(foo4, foo4, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend(=, expression, ConstantPatternContext.none)
                              isNextIdentifier(=)
                              ensureIdentifier(=, expression)
                                listener: handleIdentifier(List, expression)
                              listener: beginTypeArguments(<)
                              listener: handleIdentifier(List, typeReference)
                              listener: beginTypeArguments(<)
                              listener: handleIdentifier(int, typeReference)
                              listener: handleNoTypeArguments(>)
                              listener: handleType(int, null)
                              listener: endTypeArguments(1, <, >)
                              listener: handleType(List, null)
                              listener: endTypeArguments(1, <, >)
                              parseArgumentsOpt(>)
                                parseArguments(>)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    listener: endArguments(0, (, ))
                              listener: handleSend(List, ;)
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, F)
              parseMetadataStar(;)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields(;, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo5, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, ;)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo5, fieldDeclaration)
                parseFieldInitializerOpt(foo5, foo5, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend(=, expression, ConstantPatternContext.none)
                              isNextIdentifier(=)
                              ensureIdentifier(=, expression)
                                listener: handleIdentifier(List, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(List)
                                parseArguments(List)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    listener: endArguments(0, (, ))
                              listener: handleSend(List, ;)
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, F)
              parseMetadataStar(;)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields(;, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo6, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, ;)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo6, fieldDeclaration)
                parseFieldInitializerOpt(foo6, foo6, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                            parseSend(=, expression, ConstantPatternContext.none)
                              isNextIdentifier(=)
                              reportRecoverableError(List, Message[LiteralWithClass, A list literal can't be prefixed by 'List'., Try removing 'List', {string: list, lexeme: List}])
                                listener: handleRecoverableError(Message[LiteralWithClass, A list literal can't be prefixed by 'List'., Try removing 'List', {string: list, lexeme: List}], List, List)
                              parsePrimary(List, expression, ConstantPatternContext.none)
                                parseLiteralListSetMapOrFunction(List, null)
                                  listener: beginTypeArguments(<)
                                  listener: handleIdentifier(List, typeReference)
                                  listener: beginTypeArguments(<)
                                  listener: handleIdentifier(int, typeReference)
                                  listener: handleNoTypeArguments(>)
                                  listener: handleType(int, null)
                                  listener: endTypeArguments(1, <, >)
                                  listener: handleType(List, null)
                                  listener: endTypeArguments(1, <, >)
                                  parseLiteralListSuffix(>, null)
                                    parseExpression([)
                                      parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression([, true, ConstantPatternContext.none)
                                          parsePrimary([, expression, ConstantPatternContext.none)
                                            parseLiteralNull([)
                                              listener: handleLiteralNull(null)
                                    listener: handleLiteralList(1, [, null, ])
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, F)
              parseMetadataStar(;)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields(;, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo7, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, ;)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo7, fieldDeclaration)
                parseFieldInitializerOpt(foo7, foo7, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                            parseSend(=, expression, ConstantPatternContext.none)
                              isNextIdentifier(=)
                              ensureIdentifier(=, expression)
                                listener: handleIdentifier(List, expression)
                              listener: handleNoTypeArguments([)
                              parseArgumentsOpt(List)
                                listener: handleNoArguments([)
                              listener: handleSend(List, [)
                      parseArgumentOrIndexStar(List, Instance of 'NoTypeParamOrArg', false)
                        parseExpression([)
                          parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression([, true, ConstantPatternContext.none)
                              parsePrimary([, expression, ConstantPatternContext.none)
                                parseLiteralNull([)
                                  listener: handleLiteralNull(null)
                        listener: handleIndexedExpression(null, [, ])
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, F)
              parseMetadataStar(;)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields(;, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo8, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, ;)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo8, fieldDeclaration)
                parseFieldInitializerOpt(foo8, foo8, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseLiteralListSetMapOrFunction(=, null)
                            listener: beginTypeArguments(<)
                            listener: handleIdentifier(List, typeReference)
                            listener: beginTypeArguments(<)
                            listener: handleIdentifier(int, typeReference)
                            listener: handleNoTypeArguments(>)
                            listener: handleType(int, null)
                            listener: endTypeArguments(1, <, >)
                            listener: handleType(List, null)
                            listener: endTypeArguments(1, <, >)
                            parseLiteralListSuffix(>, null)
                              parseExpression([)
                                parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression([, true, ConstantPatternContext.none)
                                    parsePrimary([, expression, ConstantPatternContext.none)
                                      parseLiteralNull([)
                                        listener: handleLiteralNull(null)
                              listener: handleLiteralList(1, [, null, ])
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, final)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, F)
              parseMetadataStar(;)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(final)
                skipObjectPatternRest(List)
              parseFields(;, null, null, null, null, null, null, final, final, Instance of 'SimpleTypeWith1Argument', foo9, DeclarationKind.Class, F, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, final, ;)
                listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(Undefined, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(Undefined, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo9, fieldDeclaration)
                parseFieldInitializerOpt(foo9, foo9, null, null, null, null, final, DeclarationKind.Class, F)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          listener: handleNoTypeArguments([)
                          parseLiteralListSuffix(=, null)
                            parseExpression([)
                              parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression([, true, ConstantPatternContext.none)
                                  parsePrimary([, expression, ConstantPatternContext.none)
                                    parseLiteralNull([)
                                      listener: handleLiteralNull(null)
                            listener: handleLiteralList(1, [, null, ])
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, final, 1, final, ;)
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 9, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(1, )
