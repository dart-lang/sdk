parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, , class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, C)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, C)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, C)
              parseMetadataStar({)
                listener: beginMetadataStar(C)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, C, DeclarationKind.Class, C, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, C)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(C, methodDeclaration)
                parseQualifiedRestOpt(C, methodDeclarationContinuation)
                parseMethodTypeVar(C)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(C, C, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(C, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  parseInitializers(:)
                    listener: beginInitializers(:)
                    parseInitializer(:)
                      listener: beginInitializer(assert)
                      parseAssert(:, Assert.Initializer)
                        listener: beginAssert(assert, Assert.Initializer)
                        reportRecoverableError(=, Message[ExpectedButGot, Expected '(' before this., null, {string: (}])
                          listener: handleRecoverableError(Message[ExpectedButGot, Expected '(' before this., null, {string: (}], =, =)
                        rewriter()
                        parseExpression(()
                          parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression((, true, ConstantPatternContext.none)
                              parsePrimary((, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                  parseSend((, expression, ConstantPatternContext.none)
                                    isNextIdentifier(()
                                    ensureIdentifier((, expression)
                                      listener: handleIdentifier(, expression)
                                    listener: handleNoTypeArguments())
                                    parseArgumentsOpt()
                                      listener: handleNoArguments())
                                    listener: handleSend(, ))
                        listener: endAssert(assert, Assert.Initializer, (, null, =)
                      listener: endInitializer(=)
                    listener: endInitializers(1, :, =)
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                reportRecoverableError(=, RedirectionInNonFactory)
                  listener: handleRecoverableError(RedirectionInNonFactory, =, =)
                parseRedirectingFactoryBody())
                  listener: beginRedirectingFactoryBody(=)
                  parseConstructorReference(=, ConstructorReferenceContext.RedirectingFactory, null)
                    ensureIdentifier(=, constructorReference)
                      insertSyntheticIdentifier(=, constructorReference, message: Message[ExpectedIdentifier, Expected an identifier, but got '0'., Try inserting an identifier before '0'., {lexeme: 0}], messageOnToken: null)
                        reportRecoverableError(0, Message[ExpectedIdentifier, Expected an identifier, but got '0'., Try inserting an identifier before '0'., {lexeme: 0}])
                          listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '0'., Try inserting an identifier before '0'., {lexeme: 0}], 0, 0)
                        rewriter()
                      listener: handleIdentifier(, constructorReference)
                    listener: beginConstructorReference()
                    parseQualifiedRestOpt(, constructorReferenceContinuation)
                    listener: handleNoTypeArguments(0)
                    listener: handleNoConstructorReferenceContinuationAfterTypeArguments(0)
                    listener: endConstructorReference(, null, 0, ConstructorReferenceContext.RedirectingFactory)
                  ensureSemicolon()
                    reportRecoverableError(=, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], =, =)
                    rewriter()
                  listener: endRedirectingFactoryBody(=, ;)
                listener: endClassConstructor(null, C, (, :, ;)
              listener: endMember()
            notEofOrValue(}, 0)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, C)
              parseMetadataStar(;)
                listener: beginMetadataStar(0)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(;, ;, null, null, null, null, null, null, null, ;, NoType(), null, DeclarationKind.Class, C)
                reportRecoverableErrorWithToken(0, Template(ExpectedClassMember))
                  listener: handleRecoverableError(Message[ExpectedClassMember, Expected a class member, but got '0'., null, {lexeme: 0}], 0, 0)
                listener: handleInvalidMember(0)
                listener: endMember()
            notEofOrValue(}, ;)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(0, DeclarationKind.Class, C)
              parseMetadataStar(0)
                listener: beginMetadataStar(;)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(0, 0, null, null, null, null, null, null, null, 0, NoType(), null, DeclarationKind.Class, C)
                reportRecoverableErrorWithToken(;, Template(ExpectedClassMember))
                  listener: handleRecoverableError(Message[ExpectedClassMember, Expected a class member, but got ';'., null, {lexeme: ;}], ;, ;)
                listener: handleInvalidMember(;)
                listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 3, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, C)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, C)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, C)
              parseMetadataStar({)
                listener: beginMetadataStar(C)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, C, DeclarationKind.Class, C, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, C)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(C, methodDeclaration)
                parseQualifiedRestOpt(C, methodDeclarationContinuation)
                parseMethodTypeVar(C)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(C, C, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(C, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  parseInitializers(:)
                    listener: beginInitializers(:)
                    parseInitializer(:)
                      listener: beginInitializer(null)
                      insertSyntheticIdentifier(:, fieldInitializer, message: ExpectedAnInitializer, messageOnToken: :)
                        reportRecoverableError(:, ExpectedAnInitializer)
                          listener: handleRecoverableError(ExpectedAnInitializer, :, :)
                        rewriter()
                      rewriter()
                      rewriter()
                      parseInitializerExpressionRest(:)
                        parseExpression(:)
                          parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(:, true, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                      listener: handleIdentifier(, expression)
                                    listener: handleNoTypeArguments(=)
                                    parseArgumentsOpt()
                                      listener: handleNoArguments(=)
                                    listener: handleSend(, =)
                            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(=, true, ConstantPatternContext.none)
                                parsePrimary(=, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                                    parseSend(=, expression, ConstantPatternContext.none)
                                      isNextIdentifier(=)
                                      ensureIdentifier(=, expression)
                                        listener: handleIdentifier(, expression)
                                      listener: handleNoTypeArguments(null)
                                      parseArgumentsOpt()
                                        listener: handleNoArguments(null)
                                      listener: handleSend(, null)
                            listener: handleAssignmentExpression(=)
                        listener: endInitializer(null)
                    listener: endInitializers(1, :, null)
                parseAsyncModifierOpt()
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(, false, true)
                  ensureBlock(, BlockKind(function body))
                    reportRecoverableError(null, Message[ExpectedFunctionBody, Expected a function body, but got 'null'., null, {lexeme: null}])
                      listener: handleRecoverableError(Message[ExpectedFunctionBody, Expected a function body, but got 'null'., null, {lexeme: null}], null, null)
                    insertBlock()
                      rewriter()
                      rewriter()
                  listener: handleInvalidFunctionBody({)
                listener: endClassConstructor(null, C, (, :, })
              listener: endMember()
            notEofOrValue(}, null)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Class, C)
              parseMetadataStar(})
                listener: beginMetadataStar(null)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(}, }, null, null, null, null, null, null, null, }, NoType(), null, DeclarationKind.Class, C)
                reportRecoverableErrorWithToken(null, Template(ExpectedClassMember))
                  listener: handleRecoverableError(Message[ExpectedClassMember, Expected a class member, but got 'null'., null, {lexeme: null}], null, null)
                listener: handleInvalidMember(null)
                listener: endMember()
            notEofOrValue(}, =)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(null, DeclarationKind.Class, C)
              parseMetadataStar(null)
                listener: beginMetadataStar(=)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(null, null, null, null, null, null, null, null, null, null, NoType(), null, DeclarationKind.Class, C)
                parseInvalidOperatorDeclaration(null, null, null, null, null, null, null, null, null, DeclarationKind.Class, C)
                  reportRecoverableError(=, MissingOperatorKeyword)
                    listener: handleRecoverableError(MissingOperatorKeyword, =, =)
                  rewriter()
                  parseMethod(null, null, null, null, null, null, null, null, null, NoType(), null, operator, DeclarationKind.Class, C, false)
                    listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, operator)
                    listener: handleNoType(null)
                    parseOperatorName(null)
                      isUnaryMinus(=)
                      reportRecoverableErrorWithToken(=, Template(InvalidOperator))
                        listener: handleRecoverableError(Message[InvalidOperator, The string '=' isn't a user-definable operator., null, {lexeme: =}], =, =)
                      listener: handleInvalidOperatorName(operator, =)
                    parseMethodTypeVar(=)
                      listener: handleNoTypeVariables(0)
                    parseGetterOrFormalParameters(=, operator, false, MemberKind.NonStaticMethod)
                      missingParameterMessage(MemberKind.NonStaticMethod)
                      reportRecoverableError(=, MissingMethodParameters)
                        listener: handleRecoverableError(MissingMethodParameters, =, =)
                      rewriter()
                      parseFormalParametersRest((, MemberKind.NonStaticMethod)
                        listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                        listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                    parseInitializersOpt())
                      listener: handleNoInitializers()
                    parseAsyncModifierOpt())
                      listener: handleAsyncModifier(null, null)
                      inPlainSync()
                    inPlainSync()
                    parseFunctionBody(), false, true)
                      ensureBlock(), BlockKind(function body))
                        reportRecoverableError(0, Message[ExpectedFunctionBody, Expected a function body, but got '0'., null, {lexeme: 0}])
                          listener: handleRecoverableError(Message[ExpectedFunctionBody, Expected a function body, but got '0'., null, {lexeme: 0}], 0, 0)
                        insertBlock())
                          rewriter()
                          rewriter()
                      listener: handleInvalidFunctionBody({)
                    listener: endClassMethod(null, operator, (, null, })
                  listener: endMember()
            notEofOrValue(}, 0)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Class, C)
              parseMetadataStar(})
                listener: beginMetadataStar(0)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(}, }, null, null, null, null, null, null, null, }, NoType(), null, DeclarationKind.Class, C)
                reportRecoverableErrorWithToken(0, Template(ExpectedClassMember))
                  listener: handleRecoverableError(Message[ExpectedClassMember, Expected a class member, but got '0'., null, {lexeme: 0}], 0, 0)
                listener: handleInvalidMember(0)
                listener: endMember()
            notEofOrValue(}, ;)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(0, DeclarationKind.Class, C)
              parseMetadataStar(0)
                listener: beginMetadataStar(;)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(0, 0, null, null, null, null, null, null, null, 0, NoType(), null, DeclarationKind.Class, C)
                reportRecoverableErrorWithToken(;, Template(ExpectedClassMember))
                  listener: handleRecoverableError(Message[ExpectedClassMember, Expected a class member, but got ';'., null, {lexeme: ;}], ;, ;)
                listener: handleInvalidMember(;)
                listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 5, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, C)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, C)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, C)
              parseMetadataStar({)
                listener: beginMetadataStar(C)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, C, DeclarationKind.Class, C, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, C)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(C, methodDeclaration)
                parseQualifiedRestOpt(C, methodDeclarationContinuation)
                parseMethodTypeVar(C)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(C, C, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(C, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  parseInitializers(:)
                    listener: beginInitializers(:)
                    parseInitializer(:)
                      listener: beginInitializer(super)
                      parseSuperInitializerExpression(:)
                        parseInitializerExpressionRest(:)
                          parseExpression(:)
                            parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(:, true, ConstantPatternContext.none)
                                parsePrimary(:, expression, ConstantPatternContext.none)
                                  parseSuperExpression(:, expression)
                                    listener: handleSuperExpression(super, expression)
                              parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(=, true, ConstantPatternContext.none)
                                  parsePrimary(=, expression, ConstantPatternContext.none)
                                    parseLiteralInt(=)
                                      listener: handleLiteralInt(0)
                              listener: handleAssignmentExpression(=)
                          listener: endInitializer(;)
                    listener: endInitializers(1, :, ;)
                parseAsyncModifierOpt(0)
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(0, false, true)
                  listener: handleEmptyFunctionBody(;)
                listener: endClassConstructor(null, C, (, :, ;)
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, C)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, C)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, C)
              parseMetadataStar({)
                listener: beginMetadataStar(C)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, C, DeclarationKind.Class, C, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, C)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(C, methodDeclaration)
                parseQualifiedRestOpt(C, methodDeclarationContinuation)
                parseMethodTypeVar(C)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(C, C, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(C, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  parseInitializers(:)
                    listener: beginInitializers(:)
                    parseInitializer(:)
                      listener: beginInitializer(this)
                      reportRecoverableError(=, Message[ExpectedButGot, Expected '.' before this., null, {string: .}])
                        listener: handleRecoverableError(Message[ExpectedButGot, Expected '.' before this., null, {string: .}], =, =)
                      rewriter()
                      rewriter()
                      insertSyntheticIdentifier(:, fieldInitializer, message: MissingAssignmentInInitializer, messageOnToken: null)
                        reportRecoverableError(this, MissingAssignmentInInitializer)
                          listener: handleRecoverableError(MissingAssignmentInInitializer, this, this)
                        rewriter()
                      rewriter()
                      parseInitializerExpressionRest(:)
                        parseExpression(:)
                          parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(:, true, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                      listener: handleIdentifier(, expression)
                                    listener: handleNoTypeArguments(=)
                                    parseArgumentsOpt()
                                      listener: handleNoArguments(=)
                                    listener: handleSend(, =)
                            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(=, true, ConstantPatternContext.none)
                                parsePrimary(=, expression, ConstantPatternContext.none)
                                  parseThisExpression(=, expression)
                                    listener: handleThisExpression(this, expression)
                              parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                  parseSend(., expressionContinuation, ConstantPatternContext.none)
                                    isNextIdentifier(.)
                                    ensureIdentifier(., expressionContinuation)
                                      listener: handleIdentifier(, expressionContinuation)
                                    listener: handleNoTypeArguments(=)
                                    parseArgumentsOpt()
                                      listener: handleNoArguments(=)
                                    listener: handleSend(, =)
                              listener: handleEndingBinaryExpression(.)
                              parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(=, true, ConstantPatternContext.none)
                                  parsePrimary(=, expression, ConstantPatternContext.none)
                                    parseLiteralInt(=)
                                      listener: handleLiteralInt(0)
                              listener: handleAssignmentExpression(=)
                            listener: handleAssignmentExpression(=)
                        listener: endInitializer(;)
                    listener: endInitializers(1, :, ;)
                parseAsyncModifierOpt(0)
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(0, false, true)
                  listener: handleEmptyFunctionBody(;)
                listener: endClassConstructor(null, C, (, :, ;)
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(4, )
