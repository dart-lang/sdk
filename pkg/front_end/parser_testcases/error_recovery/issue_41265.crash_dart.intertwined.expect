parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, , class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, A)
        parseClass(>, class, class, A)
          parseClassHeaderOpt(>, class, class)
            parseClassExtendsOpt(>, DeclarationHeaderKind.Class)
              listener: handleNoType(>)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(>)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(>)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(>, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(mixin)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(mixin)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(mixin, }, mixin, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseMixin(mixin, null, null, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          listener: handleIdentifier(M, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(T)
        listener: endMetadataStar(0)
        listener: handleIdentifier(T, typeVariableDeclaration)
        listener: beginTypeVariable(T)
        listener: handleTypeVariablesDefined(T, 1)
        listener: handleNoType(T)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginMixinDeclaration(mixin, null, null, mixin, M)
        parseMixinHeaderOpt(>, mixin)
          parseMixinOnOpt(>)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(>)
            listener: handleImplements(null, 0)
          listener: handleMixinHeader(mixin)
        parseClassOrMixinOrExtensionBody(>, DeclarationKind.Mixin, M)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(mixin, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(DND1, classOrMixinDeclaration)
        listener: handleNoTypeVariables(extends)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, DND1)
        parseClass(DND1, class, class, DND1)
          parseClassHeaderOpt(DND1, class, class)
            parseClassExtendsOpt(DND1, DeclarationHeaderKind.Class)
              parseClassExtendsSeenExtendsClause(extends, DND1, DeclarationHeaderKind.Class)
                listener: handleIdentifier(Object, typeReference)
                listener: handleNoTypeArguments(with)
                listener: handleType(Object, null)
                listener: handleClassExtends(extends, 1)
            parseClassWithClauseOpt(Object)
              parseTypeList(with)
                listener: beginTypeList(M)
                listener: beginFunctionType(M)
                listener: handleNoTypeVariables(()
                ensureIdentifier(with, typeReference)
                  listener: handleIdentifier(M, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(dynamic, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(dynamic, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(M, null)
                parseFormalParametersRequiredOpt(Function, MemberKind.GeneralizedFunctionType)
                  parseFormalParametersRest((, MemberKind.GeneralizedFunctionType)
                    listener: beginFormalParameters((, MemberKind.GeneralizedFunctionType)
                    listener: endFormalParameters(0, (, ), MemberKind.GeneralizedFunctionType)
                listener: endFunctionType(Function, null)
                listener: endTypeList(1)
              listener: handleClassWithClause(with)
            parseClassOrMixinOrEnumImplementsOpt())
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassHeaderRecovery(DND1, class, class)
            parseDeclarationHeaderRecoveryInternal(DND1, class, class, DeclarationHeaderKind.Class)
              parseClassHeaderOpt(DND1, class, class)
                parseClassExtendsOpt(DND1, DeclarationHeaderKind.Class)
                  parseClassExtendsSeenExtendsClause(extends, DND1, DeclarationHeaderKind.Class)
                parseClassWithClauseOpt(Object)
                  parseTypeList(with)
                    ensureIdentifier(with, typeReference)
                    parseFormalParametersRequiredOpt(Function, MemberKind.GeneralizedFunctionType)
                      parseFormalParametersRest((, MemberKind.GeneralizedFunctionType)
                parseClassOrMixinOrEnumImplementsOpt())
              skipUnexpectedTokenOpt(), [extends, with, implements, {])
                reportRecoverableErrorWithToken(>, Template(UnexpectedToken))
                  listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token '>'., null, {lexeme: >}], >, >)
              parseClassExtendsOpt(>, DeclarationHeaderKind.Class)
                listener: handleNoType(>)
                listener: handleClassExtends(null, 1)
              parseClassWithClauseOpt(>)
                listener: handleClassNoWithClause()
              parseClassOrMixinOrEnumImplementsOpt(>)
                listener: handleImplements(null, 0)
              listener: handleRecoverDeclarationHeader(DeclarationHeaderKind.Class)
          ensureBlock(>, BlockKind(class declaration))
          parseClassOrMixinOrExtensionBody(>, DeclarationKind.Class, DND1)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(3, )
