parseUnit(main)
  skipErrorTokens(main)
  listener: beginCompilationUnit(main)
  syntheticPreviousToken(main)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(main)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(main)
      isReservedKeyword(()
      parseTopLevelMethod(, null, , Instance of 'NoType', null, main, false)
        listener: beginTopLevelMethod(, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, #)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, false)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement({)
                    parseExpression({)
                      parsePrecedenceExpression({, 1, true)
                        parseUnaryExpression({, true)
                          parsePrimary({, expression)
                            parseLiteralSymbol({)
                              listener: beginLiteralSymbol(#)
                              listener: handleSymbolVoid(void)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(void)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              listener: handleSymbolVoid(void)
                              listener: endLiteralSymbol(#, 1)
                        parsePrimary(., expressionContinuation)
                          parseSendOrFunctionLiteral(., expressionContinuation)
                            parseSend(., expressionContinuation)
                              isNextIdentifier(.)
                              ensureIdentifier(., expressionContinuation)
                                listener: handleIdentifier(foo, expressionContinuation)
                              listener: handleNoTypeArguments(;)
                              parseArgumentsOpt(foo)
                                listener: handleNoArguments(;)
                              listener: handleSend(foo, ;)
                        listener: handleEndingBinaryExpression(.)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(void, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'void' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: void}], void, void)
                                listener: handleIdentifier(void, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(void)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(assert, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'assert' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: assert}], assert, assert)
                                listener: handleIdentifier(assert, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(assert)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(break, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'break' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: break}], break, break)
                                listener: handleIdentifier(break, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(break)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(case, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'case' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: case}], case, case)
                                listener: handleIdentifier(case, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(case)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(catch, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'catch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: catch}], catch, catch)
                                listener: handleIdentifier(catch, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(catch)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(class, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'class' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: class}], class, class)
                                listener: handleIdentifier(class, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(class)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(const, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'const' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: const}], const, const)
                                listener: handleIdentifier(const, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(const)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(continue, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'continue' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: continue}], continue, continue)
                                listener: handleIdentifier(continue, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(continue)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(default, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'default' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: default}], default, default)
                                listener: handleIdentifier(default, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(default)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(do, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'do' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: do}], do, do)
                                listener: handleIdentifier(do, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(do)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(else, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'else' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: else}], else, else)
                                listener: handleIdentifier(else, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(else)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(enum, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'enum' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: enum}], enum, enum)
                                listener: handleIdentifier(enum, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(enum)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(extends, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
                                listener: handleIdentifier(extends, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(extends)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(false, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'false' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: false}], false, false)
                                listener: handleIdentifier(false, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(false)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(final, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'final' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: final}], final, final)
                                listener: handleIdentifier(final, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(final)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(finally, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'finally' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: finally}], finally, finally)
                                listener: handleIdentifier(finally, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(finally)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(for, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'for' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: for}], for, for)
                                listener: handleIdentifier(for, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(for)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(if, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'if' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: if}], if, if)
                                listener: handleIdentifier(if, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(if)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(in, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'in' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: in}], in, in)
                                listener: handleIdentifier(in, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(in)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(is, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'is' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: is}], is, is)
                                listener: handleIdentifier(is, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(is)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(new, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'new' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: new}], new, new)
                                listener: handleIdentifier(new, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(new)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(null, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'null' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: null}], null, null)
                                listener: handleIdentifier(null, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(null)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(rethrow, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'rethrow' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: rethrow}], rethrow, rethrow)
                                listener: handleIdentifier(rethrow, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(rethrow)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(return, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'return' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: return}], return, return)
                                listener: handleIdentifier(return, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(return)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(super, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'super' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: super}], super, super)
                                listener: handleIdentifier(super, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(super)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(switch, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'switch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: switch}], switch, switch)
                                listener: handleIdentifier(switch, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(switch)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(this, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'this' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: this}], this, this)
                                listener: handleIdentifier(this, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(this)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(throw, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'throw' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: throw}], throw, throw)
                                listener: handleIdentifier(throw, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(throw)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(true, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'true' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: true}], true, true)
                                listener: handleIdentifier(true, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(true)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(try, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'try' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: try}], try, try)
                                listener: handleIdentifier(try, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(try)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(var, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'var' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: var}], var, var)
                                listener: handleIdentifier(var, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(var)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(while, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'while' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: while}], while, while)
                                listener: handleIdentifier(while, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(while)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(with, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
                                listener: handleIdentifier(with, literalSymbol)
                              listener: endLiteralSymbol(#, 1)
                    ensureSemicolon(with)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(assert, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'assert' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: assert}], assert, assert)
                                listener: handleIdentifier(assert, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(assert)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(break, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'break' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: break}], break, break)
                                listener: handleIdentifier(break, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(break)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(case, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'case' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: case}], case, case)
                                listener: handleIdentifier(case, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(case)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(catch, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'catch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: catch}], catch, catch)
                                listener: handleIdentifier(catch, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(catch)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(class, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'class' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: class}], class, class)
                                listener: handleIdentifier(class, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(class)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(const, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'const' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: const}], const, const)
                                listener: handleIdentifier(const, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(const)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(continue, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'continue' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: continue}], continue, continue)
                                listener: handleIdentifier(continue, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(continue)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(default, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'default' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: default}], default, default)
                                listener: handleIdentifier(default, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(default)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(do, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'do' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: do}], do, do)
                                listener: handleIdentifier(do, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(do)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(else, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'else' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: else}], else, else)
                                listener: handleIdentifier(else, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(else)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(enum, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'enum' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: enum}], enum, enum)
                                listener: handleIdentifier(enum, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(enum)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(extends, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
                                listener: handleIdentifier(extends, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(extends)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(false, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'false' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: false}], false, false)
                                listener: handleIdentifier(false, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(false)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(final, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'final' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: final}], final, final)
                                listener: handleIdentifier(final, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(final)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(finally, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'finally' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: finally}], finally, finally)
                                listener: handleIdentifier(finally, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(finally)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(for, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'for' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: for}], for, for)
                                listener: handleIdentifier(for, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(for)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(if, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'if' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: if}], if, if)
                                listener: handleIdentifier(if, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(if)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(in, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'in' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: in}], in, in)
                                listener: handleIdentifier(in, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(in)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(is, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'is' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: is}], is, is)
                                listener: handleIdentifier(is, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(is)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(new, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'new' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: new}], new, new)
                                listener: handleIdentifier(new, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(new)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(null, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'null' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: null}], null, null)
                                listener: handleIdentifier(null, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(null)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(rethrow, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'rethrow' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: rethrow}], rethrow, rethrow)
                                listener: handleIdentifier(rethrow, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(rethrow)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(return, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'return' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: return}], return, return)
                                listener: handleIdentifier(return, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(return)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(super, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'super' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: super}], super, super)
                                listener: handleIdentifier(super, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(super)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(switch, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'switch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: switch}], switch, switch)
                                listener: handleIdentifier(switch, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(switch)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(this, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'this' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: this}], this, this)
                                listener: handleIdentifier(this, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(this)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(throw, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'throw' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: throw}], throw, throw)
                                listener: handleIdentifier(throw, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(throw)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(true, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'true' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: true}], true, true)
                                listener: handleIdentifier(true, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(true)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(try, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'try' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: try}], try, try)
                                listener: handleIdentifier(try, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(try)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(var, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'var' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: var}], var, var)
                                listener: handleIdentifier(var, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(var)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(while, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'while' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: while}], while, while)
                                listener: handleIdentifier(while, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(while)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                listener: handleIdentifier(foo, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                reportRecoverableErrorWithToken(with, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
                                listener: handleIdentifier(with, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(with)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(assert, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'assert' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: assert}], assert, assert)
                                listener: handleIdentifier(assert, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(break, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'break' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: break}], break, break)
                                listener: handleIdentifier(break, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(case, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'case' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: case}], case, case)
                                listener: handleIdentifier(case, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(catch, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'catch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: catch}], catch, catch)
                                listener: handleIdentifier(catch, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(class, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'class' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: class}], class, class)
                                listener: handleIdentifier(class, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(const, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'const' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: const}], const, const)
                                listener: handleIdentifier(const, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(continue, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'continue' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: continue}], continue, continue)
                                listener: handleIdentifier(continue, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(default, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'default' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: default}], default, default)
                                listener: handleIdentifier(default, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(do, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'do' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: do}], do, do)
                                listener: handleIdentifier(do, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(else, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'else' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: else}], else, else)
                                listener: handleIdentifier(else, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(enum, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'enum' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: enum}], enum, enum)
                                listener: handleIdentifier(enum, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(extends, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
                                listener: handleIdentifier(extends, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(false, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'false' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: false}], false, false)
                                listener: handleIdentifier(false, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(final, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'final' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: final}], final, final)
                                listener: handleIdentifier(final, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(finally, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'finally' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: finally}], finally, finally)
                                listener: handleIdentifier(finally, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(for, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'for' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: for}], for, for)
                                listener: handleIdentifier(for, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(if, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'if' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: if}], if, if)
                                listener: handleIdentifier(if, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(in, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'in' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: in}], in, in)
                                listener: handleIdentifier(in, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(is, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'is' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: is}], is, is)
                                listener: handleIdentifier(is, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(new, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'new' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: new}], new, new)
                                listener: handleIdentifier(new, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(null, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'null' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: null}], null, null)
                                listener: handleIdentifier(null, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(rethrow, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'rethrow' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: rethrow}], rethrow, rethrow)
                                listener: handleIdentifier(rethrow, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(return, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'return' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: return}], return, return)
                                listener: handleIdentifier(return, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(super, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'super' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: super}], super, super)
                                listener: handleIdentifier(super, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(switch, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'switch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: switch}], switch, switch)
                                listener: handleIdentifier(switch, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(this, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'this' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: this}], this, this)
                                listener: handleIdentifier(this, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(throw, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'throw' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: throw}], throw, throw)
                                listener: handleIdentifier(throw, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(true, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'true' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: true}], true, true)
                                listener: handleIdentifier(true, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(try, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'try' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: try}], try, try)
                                listener: handleIdentifier(try, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(var, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'var' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: var}], var, var)
                                listener: handleIdentifier(var, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(while, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'while' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: while}], while, while)
                                listener: handleIdentifier(while, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, #)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, false)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                  looksLikeLocalFunction(#)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true)
                        parseUnaryExpression(;, true)
                          parsePrimary(;, expression)
                            parseLiteralSymbol(;)
                              listener: beginLiteralSymbol(#)
                              ensureIdentifier(#, literalSymbol)
                                reportRecoverableErrorWithToken(with, Instance of 'Template<(Token) => Message>')
                                  listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
                                listener: handleIdentifier(with, literalSymbol)
                              ensureIdentifier(., literalSymbolContinuation)
                                listener: handleIdentifier(foo, literalSymbolContinuation)
                              listener: endLiteralSymbol(#, 2)
                    ensureSemicolon(foo)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(99, {, })
        listener: endTopLevelMethod(main, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(main)
  listener: endCompilationUnit(1, )
