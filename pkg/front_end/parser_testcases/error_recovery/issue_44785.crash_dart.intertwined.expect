parseUnit(foo)
  skipErrorTokens(foo)
  listener: beginCompilationUnit(foo)
  syntheticPreviousToken(foo)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(foo)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(foo)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, foo, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(a)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(b)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(2, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(a, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(a)
                                  listener: handleNoArguments(==)
                                listener: handleSend(a, a)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralNull(==)
                                listener: handleLiteralNull(null)
                          rewriter()
                          parsePrecedenceExpression(|, 10, true, ConstantPatternContext.none)
                            parseUnaryExpression(|, true, ConstantPatternContext.none)
                              parsePrimary(|, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(|, expression, ConstantPatternContext.none)
                                  parseSend(|, expression, ConstantPatternContext.none)
                                    ensureIdentifier(|, expression)
                                    parseArgumentsOpt(b)
                          rewriter()
                        listener: endBinaryExpression(==, null)
                        rewriter()
                        parsePrecedenceExpression(||, 6, true, ConstantPatternContext.none)
                          parseUnaryExpression(||, true, ConstantPatternContext.none)
                            parsePrimary(||, expression, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(||, expression, ConstantPatternContext.none)
                                parseSend(||, expression, ConstantPatternContext.none)
                                  ensureIdentifier(||, expression)
                                  parseArgumentsOpt(b)
                          parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                            parseUnaryExpression(==, true, ConstantPatternContext.none)
                              parsePrimary(==, expression, ConstantPatternContext.none)
                                parseLiteralNull(==)
                        reportRecoverableError(or, Message[Template(BinaryOperatorWrittenOut), Binary operator 'or' is written as '||' instead of the written out word., Try replacing 'or' with '||'., {string: or, string2: ||}])
                          listener: handleRecoverableError(Message[Template(BinaryOperatorWrittenOut), Binary operator 'or' is written as '||' instead of the written out word., Try replacing 'or' with '||'., {string: or, string2: ||}], or, or)
                        rewriter()
                        listener: beginBinaryExpression(||)
                        parsePrecedenceExpression(||, 6, true, ConstantPatternContext.none)
                          parseUnaryExpression(||, true, ConstantPatternContext.none)
                            parsePrimary(||, expression, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(||, expression, ConstantPatternContext.none)
                                parseSend(||, expression, ConstantPatternContext.none)
                                  ensureIdentifier(||, expression)
                                    listener: handleIdentifier(b, expression)
                                  listener: handleNoTypeArguments(==)
                                  parseArgumentsOpt(b)
                                    listener: handleNoArguments(==)
                                  listener: handleSend(b, b)
                          listener: beginBinaryExpression(==)
                          parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                            parseUnaryExpression(==, true, ConstantPatternContext.none)
                              parsePrimary(==, expression, ConstantPatternContext.none)
                                parseLiteralNull(==)
                                  listener: handleLiteralNull(null)
                          listener: endBinaryExpression(==, null)
                        listener: endBinaryExpression(||, null)
                    ensureCloseParen(null, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement({)
                parseStatement())
                  parseStatementX())
                    parseBlock(), BlockKind(statement))
                      ensureBlock(), BlockKind(statement))
                      listener: beginBlock({, BlockKind(statement))
                      notEofOrType(CLOSE_CURLY_BRACKET, return)
                      parseStatement({)
                        parseStatementX({)
                          parseReturnStatement({)
                            listener: beginReturnStatement(return)
                            parseExpression(return)
                              parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(return, true, ConstantPatternContext.none)
                                  parsePrimary(return, expression, ConstantPatternContext.none)
                                    parseLiteralNull(return)
                                      listener: handleLiteralNull(null)
                            ensureSemicolon(null)
                              reportRecoverableError(null, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], null, null)
                              rewriter()
                            listener: endReturnStatement(true, return, ;)
                            inGenerator()
                      notEofOrType(CLOSE_CURLY_BRACKET, })
                      listener: endBlock(1, {, }, BlockKind(statement))
                listener: endThenStatement({, })
                listener: endIfStatement(if, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(foo, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(bar)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(bar)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, bar, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(bar, topLevelFunctionDeclaration)
        parseMethodTypeVar(bar)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(bar, bar, false, MemberKind.TopLevelMethod)
          parseFormalParameters(bar, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(a)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(b)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(2, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(a, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(a)
                                  listener: handleNoArguments(==)
                                listener: handleSend(a, a)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralNull(==)
                                listener: handleLiteralNull(null)
                          rewriter()
                          parsePrecedenceExpression(&, 12, true, ConstantPatternContext.none)
                            parseUnaryExpression(&, true, ConstantPatternContext.none)
                              parsePrimary(&, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(&, expression, ConstantPatternContext.none)
                                  parseSend(&, expression, ConstantPatternContext.none)
                                    ensureIdentifier(&, expression)
                                    parseArgumentsOpt(b)
                          rewriter()
                        listener: endBinaryExpression(==, null)
                        rewriter()
                        parsePrecedenceExpression(&&, 7, true, ConstantPatternContext.none)
                          parseUnaryExpression(&&, true, ConstantPatternContext.none)
                            parsePrimary(&&, expression, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(&&, expression, ConstantPatternContext.none)
                                parseSend(&&, expression, ConstantPatternContext.none)
                                  ensureIdentifier(&&, expression)
                                  parseArgumentsOpt(b)
                          parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                            parseUnaryExpression(==, true, ConstantPatternContext.none)
                              parsePrimary(==, expression, ConstantPatternContext.none)
                                parseLiteralNull(==)
                        reportRecoverableError(and, Message[Template(BinaryOperatorWrittenOut), Binary operator 'and' is written as '&&' instead of the written out word., Try replacing 'and' with '&&'., {string: and, string2: &&}])
                          listener: handleRecoverableError(Message[Template(BinaryOperatorWrittenOut), Binary operator 'and' is written as '&&' instead of the written out word., Try replacing 'and' with '&&'., {string: and, string2: &&}], and, and)
                        rewriter()
                        listener: beginBinaryExpression(&&)
                        parsePrecedenceExpression(&&, 7, true, ConstantPatternContext.none)
                          parseUnaryExpression(&&, true, ConstantPatternContext.none)
                            parsePrimary(&&, expression, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(&&, expression, ConstantPatternContext.none)
                                parseSend(&&, expression, ConstantPatternContext.none)
                                  ensureIdentifier(&&, expression)
                                    listener: handleIdentifier(b, expression)
                                  listener: handleNoTypeArguments(==)
                                  parseArgumentsOpt(b)
                                    listener: handleNoArguments(==)
                                  listener: handleSend(b, b)
                          listener: beginBinaryExpression(==)
                          parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                            parseUnaryExpression(==, true, ConstantPatternContext.none)
                              parsePrimary(==, expression, ConstantPatternContext.none)
                                parseLiteralNull(==)
                                  listener: handleLiteralNull(null)
                          listener: endBinaryExpression(==, null)
                        listener: endBinaryExpression(&&, null)
                    ensureCloseParen(null, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement({)
                parseStatement())
                  parseStatementX())
                    parseBlock(), BlockKind(statement))
                      ensureBlock(), BlockKind(statement))
                      listener: beginBlock({, BlockKind(statement))
                      notEofOrType(CLOSE_CURLY_BRACKET, return)
                      parseStatement({)
                        parseStatementX({)
                          parseReturnStatement({)
                            listener: beginReturnStatement(return)
                            parseExpression(return)
                              parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(return, true, ConstantPatternContext.none)
                                  parsePrimary(return, expression, ConstantPatternContext.none)
                                    parseLiteralNull(return)
                                      listener: handleLiteralNull(null)
                            ensureSemicolon(null)
                              reportRecoverableError(null, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], null, null)
                              rewriter()
                            listener: endReturnStatement(true, return, ;)
                            inGenerator()
                      notEofOrType(CLOSE_CURLY_BRACKET, })
                      listener: endBlock(1, {, }, BlockKind(statement))
                listener: endThenStatement({, })
                listener: endIfStatement(if, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(bar, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(foo)
  listener: endCompilationUnit(2, )
