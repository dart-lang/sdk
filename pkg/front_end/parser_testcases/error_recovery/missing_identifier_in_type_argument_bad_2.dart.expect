Problems reported:

parser/error_recovery/missing_identifier_in_type_argument_bad_2:2:12: Expected a type, but got '>'.
  Map<int, > c = {};
           ^

beginCompilationUnit(foo)
  beginMetadataStar(foo)
  endMetadataStar(0)
  beginTopLevelMember(foo)
    beginTopLevelMethod(, null, null)
      handleNoType()
      handleIdentifier(foo, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
        beginMetadataStar(bar)
        endMetadataStar(0)
        beginFormalParameter(bar, MemberKind.TopLevelMethod, null, null, null)
          handleNoType(()
          handleIdentifier(bar, formalParameterDeclaration)
          handleFormalParameterWithoutValue())
        endFormalParameter(null, null, null, bar, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
      endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
        beginMetadataStar(Map)
        endMetadataStar(0)
        handleIdentifier(Map, typeReference)
        beginTypeArguments(<)
          handleIdentifier(int, typeReference)
          handleNoTypeArguments(,)
          handleType(int, null)
          handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got '>'., null, {lexeme: >}], >, >)
          handleIdentifier(, typeReference)
          handleNoTypeArguments(>)
          handleType(, null)
        endTypeArguments(2, <, >)
        handleType(Map, null)
        beginVariablesDeclaration(c, null, null)
          handleIdentifier(c, localVariableDeclaration)
          beginInitializedIdentifier(c)
            beginVariableInitializer(=)
              handleNoTypeArguments({)
              handleLiteralSetOrMap(0, {, null, }, false)
            endVariableInitializer(=)
          endInitializedIdentifier(c)
        endVariablesDeclaration(1, ;)
      endBlockFunctionBody(1, {, })
    endTopLevelMethod(foo, null, })
  endTopLevelDeclaration(})
endCompilationUnit(1, )
