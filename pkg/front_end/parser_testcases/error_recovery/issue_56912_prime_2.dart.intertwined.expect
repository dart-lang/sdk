parseUnit(typedef)
  skipErrorTokens(typedef)
  listener: beginCompilationUnit(typedef)
  syntheticPreviousToken(typedef)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(typedef)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(typedef, , typedef, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseTypedef(null, typedef)
        listener: beginUncategorizedTopLevelDeclaration(typedef)
        listener: beginTypedef(typedef)
        ensureIdentifierPotentiallyRecovered(typedef, typedefDeclaration, false)
          insertSyntheticIdentifier(typedef, typedefDeclaration, message: Message[Template(ExpectedIdentifier), Expected an identifier, but got '<'., Try inserting an identifier before '<'., {lexeme: <}], messageOnToken: null)
            reportRecoverableError(<, Message[Template(ExpectedIdentifier), Expected an identifier, but got '<'., Try inserting an identifier before '<'., {lexeme: <}])
              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '<'., Try inserting an identifier before '<'., {lexeme: <}], <, <)
            rewriter()
          listener: handleIdentifier(, typedefDeclaration)
        listener: beginTypeVariables(<)
        listener: beginMetadataStar(E)
        listener: endMetadataStar(0)
        listener: handleIdentifier(E, typeVariableDeclaration)
        listener: beginTypeVariable(E)
        listener: handleTypeVariablesDefined(E, 1)
        listener: handleNoType(E)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        ensureIdentifier(=, typeReference)
          listener: handleIdentifier(Map, typeReference)
        listener: beginTypeArguments(<)
        listener: handleIdentifier(E, typeReference)
        listener: handleNoTypeArguments(,)
        listener: handleType(E, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(>)
        listener: handleType(int, null)
        listener: endTypeArguments(2, <, >)
        listener: handleType(Map, null)
        ensureSemicolon(>)
        listener: endTypedef(null, typedef, =, ;)
  listener: endTopLevelDeclaration(;)
  reportAllErrorTokens(typedef)
  listener: endCompilationUnit(1, )
