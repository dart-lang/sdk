Problems reported:

parser/error_recovery/with_outline/typing_09:11:12: Can't find '}' to match '{'.
    } else { // we just typed the begin brace and there's no end brace yet.
           ^

beginCompilationUnit(class)
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(Foo, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, Foo)
      handleNoType(Foo)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(void)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, foo_method1, Foo)
            handleVoidKeyword(void)
            handleIdentifier(foo_method1, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
              beginMetadataStar(dynamic)
              endMetadataStar(0)
              beginFormalParameter(dynamic, MemberKind.NonStaticMethod, null, null, null)
                handleIdentifier(dynamic, typeReference)
                handleNoTypeArguments(input)
                handleType(dynamic, null)
                handleIdentifier(input, formalParameterDeclaration)
                handleFormalParameterWithoutValue())
              endFormalParameter(null, null, null, input, null, null, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
            endFormalParameters(1, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
              beginIfStatement(if)
                handleLiteralInt(1)
                beginBinaryExpression(+)
                  handleLiteralInt(1)
                endBinaryExpression(+, 1)
                beginBinaryExpression(==)
                  handleLiteralInt(2)
                endBinaryExpression(==, 2)
                handleParenthesizedCondition((, null, null)
                beginThenStatement({)
                  beginBlock({, BlockKind(statement))
                    handleIdentifier(print, expression)
                    handleNoTypeArguments(()
                    beginArguments(()
                      beginLiteralString("2!")
                      endLiteralString(0, ))
                    endArguments(1, (, ))
                    handleSend(print, ))
                    handleExpressionStatement(print, ;)
                  endBlock(1, {, }, BlockKind(statement))
                endThenStatement({, })
                beginElseStatement(else)
                  beginBlock({, BlockKind(statement))
                  endBlock(0, {, }, BlockKind(statement))
                endElseStatement(else, })
              endIfStatement(if, else, })
            endBlockFunctionBody(1, {, })
          endClassMethod(null, void, (, null, })
        endMember()
        beginMetadataStar(void)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, foo_method2, Foo)
            handleVoidKeyword(void)
            handleIdentifier(foo_method2, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, void, (, null, })
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(})
  beginMetadataStar(void)
  endMetadataStar(0)
  beginTopLevelMember(void)
    beginTopLevelMethod(}, null, null)
      handleVoidKeyword(void)
      handleIdentifier(toplevel_method1, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(void, null, })
  endTopLevelDeclaration(})
  beginMetadataStar(void)
  endMetadataStar(0)
  beginTopLevelMember(void)
    beginTopLevelMethod(}, null, null)
      handleVoidKeyword(void)
      handleIdentifier(toplevel_method2, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
      endBlockFunctionBody(0, {, })
    endTopLevelMethod(void, null, })
  endTopLevelDeclaration(})
  handleErrorToken(UnmatchedToken({))
  handleRecoverableError(Message[Template(UnmatchedToken), Can't find '}' to match '{'., null, {string: }, lexeme: {}], UnmatchedToken({), UnmatchedToken({))
endCompilationUnit(3, )
