Problems reported:

parser/error_recovery/with_outline/typing_04:12:29: Expected ';' after this.
          var x = {1: 2, 3: 4 /* missing `}` */
                            ^

parser/error_recovery/with_outline/typing_04:12:19: Can't find '}' to match '{'.
          var x = {1: 2, 3: 4 /* missing `}` */
                  ^

beginCompilationUnit(class)
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(Foo, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, Foo)
      handleNoType(Foo)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(void)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, foo_method1, Foo)
            handleVoidKeyword(void)
            handleIdentifier(foo_method1, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
              beginIfStatement(if)
                handleLiteralInt(1)
                beginBinaryExpression(+)
                  handleLiteralInt(1)
                endBinaryExpression(+, 1)
                beginBinaryExpression(==)
                  handleLiteralInt(2)
                endBinaryExpression(==, 2)
                handleParenthesizedCondition((, null, null)
                beginThenStatement({)
                  beginBlock({, BlockKind(statement))
                    beginIfStatement(if)
                      handleLiteralInt(1)
                      beginBinaryExpression(+)
                        handleLiteralInt(1)
                      endBinaryExpression(+, 1)
                      beginBinaryExpression(==)
                        handleLiteralInt(2)
                      endBinaryExpression(==, 2)
                      handleParenthesizedCondition((, null, null)
                      beginThenStatement({)
                        beginBlock({, BlockKind(statement))
                          beginIfStatement(if)
                            handleLiteralInt(1)
                            beginBinaryExpression(+)
                              handleLiteralInt(1)
                            endBinaryExpression(+, 1)
                            beginBinaryExpression(==)
                              handleLiteralInt(2)
                            endBinaryExpression(==, 2)
                            handleParenthesizedCondition((, null, null)
                            beginThenStatement({)
                              beginBlock({, BlockKind(statement))
                                beginMetadataStar(var)
                                endMetadataStar(0)
                                handleNoType(var)
                                beginVariablesDeclaration(x, null, var)
                                  handleIdentifier(x, localVariableDeclaration)
                                  beginInitializedIdentifier(x)
                                    beginVariableInitializer(=)
                                      handleNoTypeArguments({)
                                      handleLiteralInt(1)
                                      handleLiteralInt(2)
                                      handleLiteralMapEntry(:, ,, null, null)
                                      handleLiteralInt(3)
                                      handleLiteralInt(4)
                                      handleLiteralMapEntry(:, }, null, null)
                                      handleLiteralSetOrMap(2, {, null, }, false)
                                    endVariableInitializer(=)
                                  endInitializedIdentifier(x)
                                  handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 4, 4)
                                endVariablesDeclaration(1, ;)
                              endBlock(1, {, }, BlockKind(statement))
                            endThenStatement({, })
                          endIfStatement(if, null, })
                        endBlock(1, {, }, BlockKind(statement))
                      endThenStatement({, })
                    endIfStatement(if, null, })
                  endBlock(1, {, }, BlockKind(statement))
                endThenStatement({, })
              endIfStatement(if, null, })
            endBlockFunctionBody(1, {, })
          endClassMethod(null, void, (, null, })
        endMember()
        beginMetadataStar(void)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, foo_method2, Foo)
            handleVoidKeyword(void)
            handleIdentifier(foo_method2, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, void, (, null, })
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(})
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(Bar, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, Bar)
      handleNoType(Bar)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(void)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, bar_method1, Bar)
            handleVoidKeyword(void)
            handleIdentifier(bar_method1, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, void, (, null, })
        endMember()
        beginMetadataStar(void)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, bar_method2, Bar)
            handleVoidKeyword(void)
            handleIdentifier(bar_method2, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, void, (, null, })
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(})
  handleErrorToken(UnmatchedToken({))
  handleRecoverableError(Message[Template(UnmatchedToken), Can't find '}' to match '{'., null, {string: }, lexeme: {}], UnmatchedToken({), UnmatchedToken({))
endCompilationUnit(2, )
