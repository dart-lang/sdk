parseUnit(UnmatchedToken({))
  skipErrorTokens(UnmatchedToken({))
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(UnmatchedToken({), DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar(UnmatchedToken({))
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, UnmatchedToken({), class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(Foo, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, Foo)
        parseClass(Foo, class, class, Foo)
          parseClassHeaderOpt(Foo, class, class)
            parseClassExtendsOpt(Foo, DeclarationHeaderKind.Class)
              listener: handleNoType(Foo)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(Foo)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(Foo)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(Foo, DeclarationKind.Class, Foo)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, void)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, Foo)
              parseMetadataStar({)
                listener: beginMetadataStar(void)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod({, null, null, null, null, null, null, null, {, VoidType(), null, foo_method1, DeclarationKind.Class, Foo, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, foo_method1, Foo)
                listener: handleVoidKeyword(void)
                ensureIdentifierPotentiallyRecovered(void, methodDeclaration, false)
                  listener: handleIdentifier(foo_method1, methodDeclaration)
                parseQualifiedRestOpt(foo_method1, methodDeclarationContinuation)
                parseMethodTypeVar(foo_method1)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(foo_method1, foo_method1, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(foo_method1, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, if)
                  parseStatement({)
                    parseStatementX({)
                      parseIfStatement({)
                        listener: beginIfStatement(if)
                        ensureParenthesizedCondition(if, allowCase: false)
                          parseExpressionInParenthesisRest((, allowCase: false)
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseLiteralInt(()
                                      listener: handleLiteralInt(1)
                                listener: beginBinaryExpression(+)
                                parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                                  parseUnaryExpression(+, true, ConstantPatternContext.none)
                                    parsePrimary(+, expression, ConstantPatternContext.none)
                                      parseLiteralInt(+)
                                        listener: handleLiteralInt(1)
                                listener: endBinaryExpression(+, 1)
                                listener: beginBinaryExpression(==)
                                parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                                  parseUnaryExpression(==, true, ConstantPatternContext.none)
                                    parsePrimary(==, expression, ConstantPatternContext.none)
                                      parseLiteralInt(==)
                                        listener: handleLiteralInt(2)
                                listener: endBinaryExpression(==, 2)
                            ensureCloseParen(2, ()
                            listener: handleParenthesizedCondition((, null, null)
                        listener: beginThenStatement({)
                        parseStatement())
                          parseStatementX())
                            parseBlock(), BlockKind(statement))
                              ensureBlock(), BlockKind(statement))
                              listener: beginBlock({, BlockKind(statement))
                              notEofOrType(CLOSE_CURLY_BRACKET, if)
                              parseStatement({)
                                parseStatementX({)
                                  parseIfStatement({)
                                    listener: beginIfStatement(if)
                                    ensureParenthesizedCondition(if, allowCase: false)
                                      parseExpressionInParenthesisRest((, allowCase: false)
                                        parseExpression(()
                                          parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression((, true, ConstantPatternContext.none)
                                              parsePrimary((, expression, ConstantPatternContext.none)
                                                parseLiteralInt(()
                                                  listener: handleLiteralInt(1)
                                            listener: beginBinaryExpression(+)
                                            parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                                              parseUnaryExpression(+, true, ConstantPatternContext.none)
                                                parsePrimary(+, expression, ConstantPatternContext.none)
                                                  parseLiteralInt(+)
                                                    listener: handleLiteralInt(1)
                                            listener: endBinaryExpression(+, 1)
                                            listener: beginBinaryExpression(==)
                                            parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                                              parseUnaryExpression(==, true, ConstantPatternContext.none)
                                                parsePrimary(==, expression, ConstantPatternContext.none)
                                                  parseLiteralInt(==)
                                                    listener: handleLiteralInt(2)
                                            listener: endBinaryExpression(==, 2)
                                        ensureCloseParen(2, ()
                                        listener: handleParenthesizedCondition((, null, null)
                                    listener: beginThenStatement({)
                                    parseStatement())
                                      parseStatementX())
                                        parseBlock(), BlockKind(statement))
                                          ensureBlock(), BlockKind(statement))
                                          listener: beginBlock({, BlockKind(statement))
                                          notEofOrType(CLOSE_CURLY_BRACKET, if)
                                          parseStatement({)
                                            parseStatementX({)
                                              parseIfStatement({)
                                                listener: beginIfStatement(if)
                                                ensureParenthesizedCondition(if, allowCase: false)
                                                  parseExpressionInParenthesisRest((, allowCase: false)
                                                    parseExpression(()
                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                            parseLiteralInt(()
                                                              listener: handleLiteralInt(1)
                                                        listener: beginBinaryExpression(+)
                                                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                                                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                                                            parsePrimary(+, expression, ConstantPatternContext.none)
                                                              parseLiteralInt(+)
                                                                listener: handleLiteralInt(1)
                                                        listener: endBinaryExpression(+, 1)
                                                        listener: beginBinaryExpression(==)
                                                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                                                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                                                            parsePrimary(==, expression, ConstantPatternContext.none)
                                                              parseLiteralInt(==)
                                                                listener: handleLiteralInt(2)
                                                        listener: endBinaryExpression(==, 2)
                                                    ensureCloseParen(2, ()
                                                    listener: handleParenthesizedCondition((, null, null)
                                                listener: beginThenStatement({)
                                                parseStatement())
                                                  parseStatementX())
                                                    parseBlock(), BlockKind(statement))
                                                      ensureBlock(), BlockKind(statement))
                                                      listener: beginBlock({, BlockKind(statement))
                                                      notEofOrType(CLOSE_CURLY_BRACKET, var)
                                                      parseStatement({)
                                                        parseStatementX({)
                                                          parseExpressionStatementOrDeclarationAfterModifiers(var, {, null, var, null, null)
                                                            looksLikeLocalFunction(x)
                                                            listener: beginMetadataStar(var)
                                                            listener: endMetadataStar(0)
                                                            listener: handleNoType(var)
                                                            listener: beginVariablesDeclaration(x, null, var)
                                                            parseVariablesDeclarationRest(var, true)
                                                              parseOptionallyInitializedIdentifier(var)
                                                                ensureIdentifier(var, localVariableDeclaration)
                                                                  listener: handleIdentifier(x, localVariableDeclaration)
                                                                listener: beginInitializedIdentifier(x)
                                                                parseVariableInitializerOpt(x)
                                                                  listener: beginVariableInitializer(=)
                                                                  parseExpression(=)
                                                                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                                                                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                                                                        parsePrimary(=, expression, ConstantPatternContext.none)
                                                                          parseConstExpression(=)
                                                                            listener: beginConstLiteral({)
                                                                            listener: handleNoTypeArguments({)
                                                                            parseLiteralSetOrMapSuffix(const, const)
                                                                              parseExpression({)
                                                                                parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                                                                  parseUnaryExpression({, true, ConstantPatternContext.none)
                                                                                    parsePrimary({, expression, ConstantPatternContext.none)
                                                                                      parseLiteralInt({)
                                                                                        listener: handleLiteralInt(1)
                                                                              parseExpression(:)
                                                                                parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                                                                  parseUnaryExpression(:, true, ConstantPatternContext.none)
                                                                                    parsePrimary(:, expression, ConstantPatternContext.none)
                                                                                      parseLiteralInt(:)
                                                                                        listener: handleLiteralInt(2)
                                                                              listener: handleLiteralMapEntry(:, ,, null, null)
                                                                              parseExpression(,)
                                                                                parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                                                                  parseUnaryExpression(,, true, ConstantPatternContext.none)
                                                                                    parsePrimary(,, expression, ConstantPatternContext.none)
                                                                                      parseLiteralInt(,)
                                                                                        listener: handleLiteralInt(3)
                                                                              parseExpression(:)
                                                                                parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                                                                  parseUnaryExpression(:, true, ConstantPatternContext.none)
                                                                                    parsePrimary(:, expression, ConstantPatternContext.none)
                                                                                      parseLiteralInt(:)
                                                                                        listener: handleLiteralInt(4)
                                                                              listener: handleLiteralMapEntry(:, }, null, null)
                                                                              listener: handleLiteralSetOrMap(2, {, const, }, false)
                                                                            listener: endConstLiteral(})
                                                                  listener: endVariableInitializer(=)
                                                                listener: endInitializedIdentifier(x)
                                                              ensureSemicolon(})
                                                                reportRecoverableError(4, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                                                  listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 4, 4)
                                                                rewriter()
                                                              listener: endVariablesDeclaration(1, ;)
                                                      notEofOrType(CLOSE_CURLY_BRACKET, })
                                                      listener: endBlock(1, {, }, BlockKind(statement))
                                                listener: endThenStatement({, })
                                                listener: endIfStatement(if, null, })
                                          notEofOrType(CLOSE_CURLY_BRACKET, })
                                          listener: endBlock(1, {, }, BlockKind(statement))
                                    listener: endThenStatement({, })
                                    listener: endIfStatement(if, null, })
                              notEofOrType(CLOSE_CURLY_BRACKET, })
                              listener: endBlock(1, {, }, BlockKind(statement))
                        listener: endThenStatement({, })
                        listener: endIfStatement(if, null, })
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(1, {, })
                listener: endClassMethod(null, void, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, void)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Class, Foo)
              parseMetadataStar(})
                listener: beginMetadataStar(void)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod(}, null, null, null, null, null, null, null, }, VoidType(), null, foo_method2, DeclarationKind.Class, Foo, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, foo_method2, Foo)
                listener: handleVoidKeyword(void)
                ensureIdentifierPotentiallyRecovered(void, methodDeclaration, false)
                  listener: handleIdentifier(foo_method2, methodDeclaration)
                parseQualifiedRestOpt(foo_method2, methodDeclarationContinuation)
                parseMethodTypeVar(foo_method2)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(foo_method2, foo_method2, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(foo_method2, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassMethod(null, void, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(Bar, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, Bar)
        parseClass(Bar, class, class, Bar)
          parseClassHeaderOpt(Bar, class, class)
            parseClassExtendsOpt(Bar, DeclarationHeaderKind.Class)
              listener: handleNoType(Bar)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(Bar)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(Bar)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(Bar, DeclarationKind.Class, Bar)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, void)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, Bar)
              parseMetadataStar({)
                listener: beginMetadataStar(void)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod({, null, null, null, null, null, null, null, {, VoidType(), null, bar_method1, DeclarationKind.Class, Bar, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, bar_method1, Bar)
                listener: handleVoidKeyword(void)
                ensureIdentifierPotentiallyRecovered(void, methodDeclaration, false)
                  listener: handleIdentifier(bar_method1, methodDeclaration)
                parseQualifiedRestOpt(bar_method1, methodDeclarationContinuation)
                parseMethodTypeVar(bar_method1)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(bar_method1, bar_method1, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(bar_method1, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassMethod(null, void, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, void)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Class, Bar)
              parseMetadataStar(})
                listener: beginMetadataStar(void)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod(}, null, null, null, null, null, null, null, }, VoidType(), null, bar_method2, DeclarationKind.Class, Bar, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, bar_method2, Bar)
                listener: handleVoidKeyword(void)
                ensureIdentifierPotentiallyRecovered(void, methodDeclaration, false)
                  listener: handleIdentifier(bar_method2, methodDeclaration)
                parseQualifiedRestOpt(bar_method2, methodDeclarationContinuation)
                parseMethodTypeVar(bar_method2)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(bar_method2, bar_method2, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(bar_method2, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassMethod(null, void, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(UnmatchedToken({))
    listener: handleErrorToken(UnmatchedToken({))
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find '}' to match '{'., null, {string: }, lexeme: {}], UnmatchedToken({), UnmatchedToken({))
  listener: endCompilationUnit(2, )
