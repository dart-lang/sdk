parseUnit(UnterminatedString("))
  skipErrorTokens(UnterminatedString("))
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(UnmatchedToken((), DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar(UnmatchedToken(())
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, UnmatchedToken((), class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, A)
        parseClass(A, class, class, null, A)
          parsePrimaryConstructorOpt(A, null, false)
            listener: handleNoPrimaryConstructor(A, null, false)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A, DeclarationHeaderKind.Class)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, method1)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, A)
              parseMetadataStar({)
                listener: beginMetadataStar(method1)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, method1, DeclarationKind.Class, A, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method1, A)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(method1, methodDeclaration)
                parseQualifiedRestOpt(method1, methodDeclarationContinuation)
                parseMethodTypeVar(method1)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(method1, method1, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(method1, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassMethod(null, method1, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, method2)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Class, A)
              parseMetadataStar(})
                listener: beginMetadataStar(method2)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod(}, null, null, null, null, null, null, null, }, NoType(), null, method2, DeclarationKind.Class, A, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method2, A)
                listener: handleNoType(})
                ensureIdentifierPotentiallyRecovered(}, methodDeclaration, false)
                  listener: handleIdentifier(method2, methodDeclaration)
                parseQualifiedRestOpt(method2, methodDeclarationContinuation)
                parseMethodTypeVar(method2)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(method2, method2, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(method2, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassMethod(null, method2, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(B, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, B)
        parseClass(B, class, class, null, B)
          parsePrimaryConstructorOpt(B, null, false)
            listener: handleNoPrimaryConstructor(B, null, false)
          parseClassHeaderOpt(B, class, class)
            parseClassExtendsOpt(B, DeclarationHeaderKind.Class)
              listener: handleNoType(B)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(B)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, B)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, method1)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, B)
              parseMetadataStar({)
                listener: beginMetadataStar(method1)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, method1, DeclarationKind.Class, B, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method1, B)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(method1, methodDeclaration)
                parseQualifiedRestOpt(method1, methodDeclarationContinuation)
                parseMethodTypeVar(method1)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(method1, method1, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(method1, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(String)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(String, MemberKind.NonStaticMethod, null, null, null)
                        listener: handleIdentifier(String, typeReference)
                        listener: handleNoTypeArguments(foo)
                        listener: handleType(String, null)
                        ensureIdentifier(String, formalParameterDeclaration)
                          listener: handleIdentifier(foo, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, foo, null, null, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, print)
                  parseStatement({)
                    parseStatementX({)
                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                        looksLikeLocalFunction(print)
                        parseExpressionStatement({)
                          parseExpression({)
                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                parsePrimary({, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                    looksLikeFunctionBody(})
                                    parseSend({, expression, ConstantPatternContext.none)
                                      ensureIdentifier({, expression)
                                        listener: handleIdentifier(print, expression)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(print)
                                        parseArguments(print)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            allowedToShortcutParseExpression()
                                            listener: beginLiteralString("hello world")
                                            listener: endLiteralString(0, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(print, ))
                          ensureSemicolon())
                            reportRecoverableError("hello world", Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                              listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], "hello world", "hello world")
                            rewriter()
                          listener: handleExpressionStatement(print, ;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(1, {, })
                listener: endClassMethod(null, method1, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, method2)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Class, B)
              parseMetadataStar(})
                listener: beginMetadataStar(method2)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod(}, null, null, null, null, null, null, null, }, NoType(), null, method2, DeclarationKind.Class, B, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method2, B)
                listener: handleNoType(})
                ensureIdentifierPotentiallyRecovered(}, methodDeclaration, false)
                  listener: handleIdentifier(method2, methodDeclaration)
                parseQualifiedRestOpt(method2, methodDeclarationContinuation)
                parseMethodTypeVar(method2)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(method2, method2, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(method2, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassMethod(null, method2, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, null, C)
          parsePrimaryConstructorOpt(C, null, false)
            listener: handleNoPrimaryConstructor(C, null, false)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C, DeclarationHeaderKind.Class)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, method1)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, C)
              parseMetadataStar({)
                listener: beginMetadataStar(method1)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, method1, DeclarationKind.Class, C, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method1, C)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(method1, methodDeclaration)
                parseQualifiedRestOpt(method1, methodDeclarationContinuation)
                parseMethodTypeVar(method1)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(method1, method1, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(method1, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassMethod(null, method1, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, method2)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Class, C)
              parseMetadataStar(})
                listener: beginMetadataStar(method2)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod(}, null, null, null, null, null, null, null, }, NoType(), null, method2, DeclarationKind.Class, C, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method2, C)
                listener: handleNoType(})
                ensureIdentifierPotentiallyRecovered(}, methodDeclaration, false)
                  listener: handleIdentifier(method2, methodDeclaration)
                parseQualifiedRestOpt(method2, methodDeclarationContinuation)
                parseMethodTypeVar(method2)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(method2, method2, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(method2, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endClassMethod(null, method2, (, null, })
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(UnterminatedString("))
    listener: handleErrorToken(UnterminatedString("))
    listener: handleRecoverableError(Message[Template(UnterminatedString), String starting with " must end with "., null, {string: ", string2: "}], UnterminatedString("), UnterminatedString("))
    listener: handleErrorToken(UnmatchedToken(())
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find ')' to match '('., null, {string: ), lexeme: (}], UnmatchedToken((), UnmatchedToken(())
  listener: endCompilationUnit(3, )
