Problems reported:

parser/error_recovery/with_outline/typing_string_interpolation_2:11:12: Expected an identifier, but got 'foo."'.
    print("${foo.
           ^^^^

parser/error_recovery/with_outline/typing_string_interpolation_2:12:5: Expected ',' before this.
    length hello world");
    ^^^^^^

parser/error_recovery/with_outline/typing_string_interpolation_2:12:12: Expected ',' before this.
    length hello world");
           ^^^^^

parser/error_recovery/with_outline/typing_string_interpolation_2:12:18: Expected ',' before this.
    length hello world");
                 ^^^^^

parser/error_recovery/with_outline/typing_string_interpolation_2:12:23: Expected ',' before this.
    length hello world");
                      ^^^

parser/error_recovery/with_outline/typing_string_interpolation_2:12:23: Expected ';' after this.
    length hello world");
                      ^^^

parser/error_recovery/with_outline/typing_string_interpolation_2:11:12: Can't find '}' to match '${'.
    print("${foo.
           ^

parser/error_recovery/with_outline/typing_string_interpolation_2:11:12: String starting with " must end with ".
    print("${foo.
           ^^^^^^

parser/error_recovery/with_outline/typing_string_interpolation_2:12:23: String starting with " must end with ".
    length hello world");
                      ^^^

parser/error_recovery/with_outline/typing_string_interpolation_2:11:10: Can't find ')' to match '('.
    print("${foo.
         ^

beginCompilationUnit(class)
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(A, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, A)
      handleNoType(A)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(method1)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method1, A)
            handleNoType({)
            handleIdentifier(method1, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, method1, (, null, })
        endMember()
        beginMetadataStar(method2)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method2, A)
            handleNoType(})
            handleIdentifier(method2, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, method2, (, null, })
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(})
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(B, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, B)
      handleNoType(B)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(method1)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method1, B)
            handleNoType({)
            handleIdentifier(method1, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
              beginMetadataStar(String)
              endMetadataStar(0)
              beginFormalParameter(String, MemberKind.NonStaticMethod, null, null, null)
                handleIdentifier(String, typeReference)
                handleNoTypeArguments(foo)
                handleType(String, null)
                handleIdentifier(foo, formalParameterDeclaration)
                handleFormalParameterWithoutValue())
              endFormalParameter(null, null, null, foo, null, null, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
            endFormalParameters(1, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
              handleIdentifier(print, expression)
              handleNoTypeArguments(()
              beginArguments(()
                beginLiteralString(")
                  handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'foo."'., Try inserting an identifier before 'foo."'., {lexeme: foo."}], foo.", foo.")
                  handleIdentifier(, expression)
                  handleNoTypeArguments(})
                  handleNoArguments(})
                  handleSend(, )
                  handleInterpolationExpression(${, })
                  handleStringPart(foo.")
                endLiteralString(1, length)
                handleRecoverableError(Message[Template(ExpectedButGot), Expected ',' before this., null, {string: ,}], length, length)
                handleIdentifier(length, expression)
                handleNoTypeArguments(hello)
                handleNoArguments(hello)
                handleSend(length, length)
                handleRecoverableError(Message[Template(ExpectedButGot), Expected ',' before this., null, {string: ,}], hello, hello)
                handleIdentifier(hello, expression)
                handleNoTypeArguments(world)
                handleNoArguments(world)
                handleSend(hello, hello)
                handleRecoverableError(Message[Template(ExpectedButGot), Expected ',' before this., null, {string: ,}], world, world)
                handleIdentifier(world, expression)
                handleNoTypeArguments(");")
                handleNoArguments(");")
                handleSend(world, world)
                handleRecoverableError(Message[Template(ExpectedButGot), Expected ',' before this., null, {string: ,}], ");", ");")
                beginLiteralString(");")
                endLiteralString(0, ))
              endArguments(5, (, ))
              handleSend(print, ))
              handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], ");", ");")
              handleExpressionStatement(print, ;)
            endBlockFunctionBody(1, {, })
          endClassMethod(null, method1, (, null, })
        endMember()
        beginMetadataStar(method2)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method2, B)
            handleNoType(})
            handleIdentifier(method2, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, method2, (, null, })
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(})
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(C, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
      handleNoType(C)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(method1)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method1, C)
            handleNoType({)
            handleIdentifier(method1, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, method1, (, null, })
        endMember()
        beginMetadataStar(method2)
        endMetadataStar(0)
        beginMember()
          beginMethod(DeclarationKind.Class, null, null, null, null, null, null, method2, C)
            handleNoType(})
            handleIdentifier(method2, methodDeclaration)
            handleNoTypeVariables(()
            beginFormalParameters((, MemberKind.NonStaticMethod)
            endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
            handleNoInitializers()
            handleAsyncModifier(null, null)
            beginBlockFunctionBody({)
            endBlockFunctionBody(0, {, })
          endClassMethod(null, method2, (, null, })
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(})
  handleErrorToken(UnmatchedToken(${))
  handleRecoverableError(Message[Template(UnmatchedToken), Can't find '}' to match '${'., null, {string: }, lexeme: ${}], UnmatchedToken(${), UnmatchedToken(${))
  handleErrorToken(UnterminatedString("))
  handleRecoverableError(Message[Template(UnterminatedString), String starting with " must end with "., null, {string: ", string2: "}], UnterminatedString("), UnterminatedString("))
  handleErrorToken(UnterminatedString("))
  handleRecoverableError(Message[Template(UnterminatedString), String starting with " must end with "., null, {string: ", string2: "}], UnterminatedString("), UnterminatedString("))
  handleErrorToken(UnmatchedToken(())
  handleRecoverableError(Message[Template(UnmatchedToken), Can't find ')' to match '('., null, {string: ), lexeme: (}], UnmatchedToken((), UnmatchedToken(())
endCompilationUnit(3, )
