parseUnit(base)
  skipErrorTokens(base)
  listener: beginCompilationUnit(base)
  syntheticPreviousToken(base)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(base)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(base, , enum, null, null, base, null, DirectiveContext(DirectiveState.Unknown))
      reportRecoverableError(base, BaseEnum)
        listener: handleRecoverableError(BaseEnum, base, base)
      parseEnum(base, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(Base, enumDeclaration)
        listener: beginEnum(enum)
        parseEnumHeaderOpt(Base, enum)
          listener: handleNoTypeVariables({)
          parseEnumWithClauseOpt(Base)
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt(Base)
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(enum, {)
        parseEnumElement({)
          parseMetadataStar({)
            listener: beginMetadataStar(v)
            listener: endMetadataStar(0)
          ensureIdentifier({, enumValueDeclaration)
            listener: handleIdentifier(v, enumValueDeclaration)
          listener: handleNoTypeNameInConstructorReference(})
          listener: beginConstructorReference(v)
          listener: handleNoTypeArguments(})
          listener: handleNoConstructorReferenceContinuationAfterTypeArguments(})
          listener: endConstructorReference(v, null, }, ConstructorReferenceContext.Const)
          listener: handleNoArguments(v)
          listener: handleEnumElement({)
        listener: handleEnumElements(}, 1)
        listener: endEnum(base, enum, {, 0, })
  listener: endTopLevelDeclaration(final)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(final)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(final, }, enum, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      reportRecoverableError(final, FinalEnum)
        listener: handleRecoverableError(FinalEnum, final, final)
      parseEnum(final, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(Final, enumDeclaration)
        listener: beginEnum(enum)
        parseEnumHeaderOpt(Final, enum)
          listener: handleNoTypeVariables({)
          parseEnumWithClauseOpt(Final)
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt(Final)
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(enum, {)
        parseEnumElement({)
          parseMetadataStar({)
            listener: beginMetadataStar(v)
            listener: endMetadataStar(0)
          ensureIdentifier({, enumValueDeclaration)
            listener: handleIdentifier(v, enumValueDeclaration)
          listener: handleNoTypeNameInConstructorReference(})
          listener: beginConstructorReference(v)
          listener: handleNoTypeArguments(})
          listener: handleNoConstructorReferenceContinuationAfterTypeArguments(})
          listener: endConstructorReference(v, null, }, ConstructorReferenceContext.Const)
          listener: handleNoArguments(v)
          listener: handleEnumElement({)
        listener: handleEnumElements(}, 1)
        listener: endEnum(final, enum, {, 0, })
  listener: endTopLevelDeclaration(interface)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(interface)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(interface, }, enum, null, null, null, interface, DirectiveContext(DirectiveState.Declarations))
      reportRecoverableError(interface, InterfaceEnum)
        listener: handleRecoverableError(InterfaceEnum, interface, interface)
      parseEnum(interface, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(Interface, enumDeclaration)
        listener: beginEnum(enum)
        parseEnumHeaderOpt(Interface, enum)
          listener: handleNoTypeVariables({)
          parseEnumWithClauseOpt(Interface)
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt(Interface)
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(enum, {)
        parseEnumElement({)
          parseMetadataStar({)
            listener: beginMetadataStar(v)
            listener: endMetadataStar(0)
          ensureIdentifier({, enumValueDeclaration)
            listener: handleIdentifier(v, enumValueDeclaration)
          listener: handleNoTypeNameInConstructorReference(})
          listener: beginConstructorReference(v)
          listener: handleNoTypeArguments(})
          listener: handleNoConstructorReferenceContinuationAfterTypeArguments(})
          listener: endConstructorReference(v, null, }, ConstructorReferenceContext.Const)
          listener: handleNoArguments(v)
          listener: handleEnumElement({)
        listener: handleEnumElements(}, 1)
        listener: endEnum(interface, enum, {, 0, })
  listener: endTopLevelDeclaration(sealed)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(sealed)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(sealed, }, enum, null, sealed, null, null, DirectiveContext(DirectiveState.Declarations))
      reportRecoverableError(sealed, SealedEnum)
        listener: handleRecoverableError(SealedEnum, sealed, sealed)
      parseEnum(sealed, enum)
        listener: beginUncategorizedTopLevelDeclaration(enum)
        ensureIdentifier(enum, enumDeclaration)
          listener: handleIdentifier(Sealed, enumDeclaration)
        listener: beginEnum(enum)
        parseEnumHeaderOpt(Sealed, enum)
          listener: handleNoTypeVariables({)
          parseEnumWithClauseOpt(Sealed)
            listener: handleEnumNoWithClause()
          parseClassOrMixinOrEnumImplementsOpt(Sealed)
            listener: handleImplements(null, 0)
        listener: handleEnumHeader(enum, {)
        parseEnumElement({)
          parseMetadataStar({)
            listener: beginMetadataStar(v)
            listener: endMetadataStar(0)
          ensureIdentifier({, enumValueDeclaration)
            listener: handleIdentifier(v, enumValueDeclaration)
          listener: handleNoTypeNameInConstructorReference(})
          listener: beginConstructorReference(v)
          listener: handleNoTypeArguments(})
          listener: handleNoConstructorReferenceContinuationAfterTypeArguments(})
          listener: endConstructorReference(v, null, }, ConstructorReferenceContext.Const)
          listener: handleNoArguments(v)
          listener: handleEnumElement({)
        listener: handleEnumElements(}, 1)
        listener: endEnum(sealed, enum, {, 0, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(base)
  listener: endCompilationUnit(4, )
