parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, A)
        parseClass(A, class, class, A)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, Stream)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, A)
              parseMetadataStar({)
                listener: beginMetadataStar(Stream)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(>, {, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', null, DeclarationKind.Class, A)
                parseFields({, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', }, DeclarationKind.Class, A, false)
                  listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, {)
                  ensureIdentifier({, typeReference)
                    listener: handleIdentifier(Stream, typeReference)
                  listener: beginTypeArguments(<)
                  ensureIdentifier(<, typeReference)
                    listener: handleIdentifier(List, typeReference)
                  listener: beginTypeArguments(<)
                  ensureIdentifier(<, typeReference)
                    listener: handleIdentifier(Set, typeReference)
                  listener: beginTypeArguments(<)
                  ensureIdentifier(<, typeReference)
                    listener: handleIdentifier(List, typeReference)
                  listener: beginTypeArguments(<)
                  reportRecoverableErrorWithToken(>>>, Instance of 'Template<(Token) => Message>')
                    listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '>>>'., null, {lexeme: >>>}], >>>, >>>)
                  rewriter()
                  listener: handleIdentifier(, typeReference)
                  listener: handleNoTypeArguments(>>>)
                  listener: handleType(, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(List, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(Set, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(List, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(Stream, null)
                  ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                    insertSyntheticIdentifier(>, fieldDeclaration, message: null, messageOnToken: null)
                      reportRecoverableError(}, Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}])
                        listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}], }, })
                      rewriter()
                    listener: handleIdentifier(, fieldDeclaration)
                  parseFieldInitializerOpt(, , null, null, null, null, null, DeclarationKind.Class, A)
                    listener: handleNoFieldInitializer(})
                  ensureSemicolon()
                    reportRecoverableError(>, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], >, >)
                    rewriter()
                  listener: endClassFields(null, null, null, null, null, null, null, 1, Stream, ;)
                listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, null, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(B, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, B)
        parseClass(B, class, class, B)
          parseClassHeaderOpt(B, class, class)
            parseClassExtendsOpt(B)
              listener: handleNoType(B)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(B)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, B)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, Stream)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, B)
              parseMetadataStar({)
                listener: beginMetadataStar(Stream)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseFields({, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', foo, DeclarationKind.Class, B, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, {)
                ensureIdentifier({, typeReference)
                  listener: handleIdentifier(Stream, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(Set, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(String, typeReference)
                listener: handleNoTypeArguments(>>>)
                listener: handleType(String, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(Set, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(Stream, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo, fieldDeclaration)
                parseFieldInitializerOpt(foo, foo, null, null, null, null, null, DeclarationKind.Class, B)
                  listener: handleNoFieldInitializer(;)
                listener: endClassFields(null, null, null, null, null, null, null, 1, Stream, ;)
              listener: endMember()
            notEofOrValue(}, Stream)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, B)
              parseMetadataStar(;)
                listener: beginMetadataStar(Stream)
                listener: endMetadataStar(0)
              listener: beginMember()
              recoverFromInvalidMember(>, ;, null, null, null, null, null, null, null, ;, Instance of 'ComplexTypeInfo', null, DeclarationKind.Class, B)
                parseFields(;, null, null, null, null, null, null, null, ;, Instance of 'ComplexTypeInfo', }, DeclarationKind.Class, B, false)
                  listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, ;)
                  ensureIdentifier(;, typeReference)
                    listener: handleIdentifier(Stream, typeReference)
                  listener: beginTypeArguments(<)
                  ensureIdentifier(<, typeReference)
                    listener: handleIdentifier(List, typeReference)
                  listener: beginTypeArguments(<)
                  ensureIdentifier(<, typeReference)
                    listener: handleIdentifier(Set, typeReference)
                  listener: beginTypeArguments(<)
                  ensureIdentifier(<, typeReference)
                    listener: handleIdentifier(List, typeReference)
                  listener: beginTypeArguments(<)
                  reportRecoverableErrorWithToken(>>>, Instance of 'Template<(Token) => Message>')
                    listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '>>>'., null, {lexeme: >>>}], >>>, >>>)
                  rewriter()
                  listener: handleIdentifier(, typeReference)
                  listener: handleNoTypeArguments(>>>)
                  listener: handleType(, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(List, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(Set, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(List, null)
                  listener: endTypeArguments(1, <, >)
                  listener: handleType(Stream, null)
                  ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                    insertSyntheticIdentifier(>, fieldDeclaration, message: null, messageOnToken: null)
                      reportRecoverableError(}, Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}])
                        listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}], }, })
                      rewriter()
                    listener: handleIdentifier(, fieldDeclaration)
                  parseFieldInitializerOpt(, , null, null, null, null, null, DeclarationKind.Class, B)
                    listener: handleNoFieldInitializer(})
                  ensureSemicolon()
                    reportRecoverableError(>, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], >, >)
                    rewriter()
                  listener: endClassFields(null, null, null, null, null, null, null, 1, Stream, ;)
                listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 2, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, null, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, C)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, Stream)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, C)
              parseMetadataStar({)
                listener: beginMetadataStar(Stream)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseFields({, null, null, null, null, null, null, null, {, Instance of 'ComplexTypeInfo', foo, DeclarationKind.Class, C, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, {)
                ensureIdentifier({, typeReference)
                  listener: handleIdentifier(Stream, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(Set, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(String, typeReference)
                listener: handleNoTypeArguments(>>>)
                listener: handleType(String, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(Set, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(Stream, null)
                ensureIdentifierPotentiallyRecovered(>, fieldDeclaration, false)
                  listener: handleIdentifier(foo, fieldDeclaration)
                parseFieldInitializerOpt(foo, foo, null, null, null, null, null, DeclarationKind.Class, C)
                  listener: handleNoFieldInitializer(;)
                listener: endClassFields(null, null, null, null, null, null, null, 1, Stream, ;)
              listener: endMember()
            notEofOrValue(}, Stream)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(;, DeclarationKind.Class, C)
              parseMetadataStar(;)
                listener: beginMetadataStar(Stream)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod(;, null, null, null, null, null, null, null, ;, Instance of 'ComplexTypeInfo', null, Stream, DeclarationKind.Class, C, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, Stream)
                ensureIdentifier(;, typeReference)
                  listener: handleIdentifier(Stream, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(Set, typeReference)
                listener: beginTypeArguments(<)
                ensureIdentifier(<, typeReference)
                  listener: handleIdentifier(List, typeReference)
                listener: beginTypeArguments(<)
                reportRecoverableErrorWithToken(>>>, Instance of 'Template<(Token) => Message>')
                  listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '>>>'., null, {lexeme: >>>}], >>>, >>>)
                rewriter()
                listener: handleIdentifier(, typeReference)
                listener: handleNoTypeArguments(>>>)
                listener: handleType(, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(Set, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(List, null)
                listener: endTypeArguments(1, <, >)
                listener: handleType(Stream, null)
                ensureIdentifierPotentiallyRecovered(>, methodDeclaration, false)
                  listener: handleIdentifier(Stream, methodDeclaration)
                parseQualifiedRestOpt(Stream, methodDeclarationContinuation)
                parseMethodTypeVar(Stream)
                  listener: beginTypeVariables(<)
                  parseMetadataStar(<)
                    listener: beginMetadataStar(List)
                    listener: endMetadataStar(0)
                  ensureIdentifier(<, typeVariableDeclaration)
                    listener: handleIdentifier(List, typeVariableDeclaration)
                  listener: beginTypeVariable(List)
                  listener: handleTypeVariablesDefined(List, 1)
                  listener: handleNoType(List)
                  listener: endTypeVariable(<, 0, null, null)
                  reportRecoverableError(List, Message[ExpectedAfterButGot, Expected '>' after this., null, {string: >}])
                    listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected '>' after this., null, {string: >}], List, List)
                  parseMetadataStar(<)
                  ensureIdentifier(<, typeVariableDeclaration)
                  reportRecoverableError(Set, Message[ExpectedAfterButGot, Expected '>' after this., null, {string: >}])
                  parseMetadataStar(<)
                  ensureIdentifier(<, typeVariableDeclaration)
                  reportRecoverableError(List, Message[ExpectedAfterButGot, Expected '>' after this., null, {string: >}])
                  parseMetadataStar(<)
                  ensureIdentifier(<, typeVariableDeclaration)
                  listener: endTypeVariables(<, >)
                parseGetterOrFormalParameters(>, Stream, false, MemberKind.NonStaticMethod)
                  missingParameterMessage(MemberKind.NonStaticMethod)
                  reportRecoverableError(Stream, MissingMethodParameters)
                    listener: handleRecoverableError(MissingMethodParameters, Stream, Stream)
                  rewriter()
                  parseFormalParametersRest((, MemberKind.NonStaticMethod)
                    listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                    listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  ensureBlock(), Instance of 'Template<(Token) => Message>', null)
                    reportRecoverableError(baz, Message[ExpectedFunctionBody, Expected a function body, but got 'baz'., null, {lexeme: baz}])
                      listener: handleRecoverableError(Message[ExpectedFunctionBody, Expected a function body, but got 'baz'., null, {lexeme: baz}], baz, baz)
                    insertBlock())
                      rewriter()
                      rewriter()
                  listener: handleInvalidFunctionBody({)
                listener: endClassMethod(null, Stream, (, null, })
              listener: endMember()
            notEofOrValue(}, baz)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Class, C)
              parseMetadataStar(})
                listener: beginMetadataStar(baz)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(;)
              parseFields(}, null, null, null, null, null, null, null, }, Instance of 'NoType', baz, DeclarationKind.Class, C, false)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, null, })
                reportRecoverableError(baz, MissingConstFinalVarOrType)
                  listener: handleRecoverableError(MissingConstFinalVarOrType, baz, baz)
                listener: handleNoType(})
                ensureIdentifierPotentiallyRecovered(}, fieldDeclaration, false)
                  listener: handleIdentifier(baz, fieldDeclaration)
                parseFieldInitializerOpt(baz, baz, null, null, null, null, null, DeclarationKind.Class, C)
                  listener: handleNoFieldInitializer(;)
                listener: endClassFields(null, null, null, null, null, null, null, 1, baz, ;)
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 3, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(Stream)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(Stream)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(Stream)
      parseTopLevelMethod(}, null, null, }, Instance of 'ComplexTypeInfo', null, Stream, false)
        listener: beginTopLevelMethod(}, null, null)
        ensureIdentifier(}, typeReference)
          listener: handleIdentifier(Stream, typeReference)
        listener: beginTypeArguments(<)
        ensureIdentifier(<, typeReference)
          listener: handleIdentifier(List, typeReference)
        listener: beginTypeArguments(<)
        ensureIdentifier(<, typeReference)
          listener: handleIdentifier(Set, typeReference)
        listener: beginTypeArguments(<)
        ensureIdentifier(<, typeReference)
          listener: handleIdentifier(List, typeReference)
        listener: beginTypeArguments(<)
        reportRecoverableErrorWithToken(>>>, Instance of 'Template<(Token) => Message>')
          listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '>>>'., null, {lexeme: >>>}], >>>, >>>)
        rewriter()
        listener: handleIdentifier(, typeReference)
        listener: handleNoTypeArguments(>>>)
        listener: handleType(, null)
        listener: endTypeArguments(1, <, >)
        listener: handleType(List, null)
        listener: endTypeArguments(1, <, >)
        listener: handleType(Set, null)
        listener: endTypeArguments(1, <, >)
        listener: handleType(List, null)
        listener: endTypeArguments(1, <, >)
        listener: handleType(Stream, null)
        ensureIdentifierPotentiallyRecovered(>, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(Stream, topLevelFunctionDeclaration)
        parseMethodTypeVar(Stream)
          listener: beginTypeVariables(<)
          parseMetadataStar(<)
            listener: beginMetadataStar(List)
            listener: endMetadataStar(0)
          ensureIdentifier(<, typeVariableDeclaration)
            listener: handleIdentifier(List, typeVariableDeclaration)
          listener: beginTypeVariable(List)
          listener: handleTypeVariablesDefined(List, 1)
          listener: handleNoType(List)
          listener: endTypeVariable(<, 0, null, null)
          reportRecoverableError(List, Message[ExpectedAfterButGot, Expected '>' after this., null, {string: >}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected '>' after this., null, {string: >}], List, List)
          parseMetadataStar(<)
          ensureIdentifier(<, typeVariableDeclaration)
          reportRecoverableError(Set, Message[ExpectedAfterButGot, Expected '>' after this., null, {string: >}])
          parseMetadataStar(<)
          ensureIdentifier(<, typeVariableDeclaration)
          reportRecoverableError(List, Message[ExpectedAfterButGot, Expected '>' after this., null, {string: >}])
          parseMetadataStar(<)
          ensureIdentifier(<, typeVariableDeclaration)
          listener: endTypeVariables(<, >)
        parseGetterOrFormalParameters(>, Stream, false, MemberKind.TopLevelMethod)
          missingParameterMessage(MemberKind.TopLevelMethod)
          reportRecoverableError(Stream, MissingFunctionParameters)
            listener: handleRecoverableError(MissingFunctionParameters, Stream, Stream)
          rewriter()
          parseFormalParametersRest((, MemberKind.TopLevelMethod)
            listener: beginFormalParameters((, MemberKind.TopLevelMethod)
            listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          ensureBlock(), Instance of 'Template<(Token) => Message>', null)
            reportRecoverableError(baz, Message[ExpectedFunctionBody, Expected a function body, but got 'baz'., null, {lexeme: baz}])
              listener: handleRecoverableError(Message[ExpectedFunctionBody, Expected a function body, but got 'baz'., null, {lexeme: baz}], baz, baz)
            insertBlock())
              rewriter()
              rewriter()
          listener: handleInvalidFunctionBody({)
        listener: endTopLevelMethod(Stream, null, })
  listener: endTopLevelDeclaration(baz)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(baz)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(baz)
      isReservedKeyword(;)
      parseFields(}, null, null, null, null, null, null, null, }, Instance of 'NoType', baz, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, })
        reportRecoverableError(baz, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, baz, baz)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelVariableDeclaration, false)
          listener: handleIdentifier(baz, topLevelVariableDeclaration)
        parseFieldInitializerOpt(baz, baz, null, null, null, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer(;)
        listener: endTopLevelFields(null, null, null, null, null, 1, baz, ;)
  listener: endTopLevelDeclaration(Stream)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(Stream)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(Stream)
      insertSyntheticIdentifier(>, methodDeclaration, message: null, messageOnToken: null)
        reportRecoverableError(, Message[ExpectedIdentifier, Expected an identifier, but got ''., Try inserting an identifier before ''., {lexeme: }])
          listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ''., Try inserting an identifier before ''., {lexeme: }], , )
          listener: // WARNING: Reporting at eof for .
        rewriter()
      parseFields(;, null, null, null, null, null, null, null, ;, Instance of 'ComplexTypeInfo', , DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, ;)
        ensureIdentifier(;, typeReference)
          listener: handleIdentifier(Stream, typeReference)
        listener: beginTypeArguments(<)
        ensureIdentifier(<, typeReference)
          listener: handleIdentifier(List, typeReference)
        listener: beginTypeArguments(<)
        ensureIdentifier(<, typeReference)
          listener: handleIdentifier(Set, typeReference)
        listener: beginTypeArguments(<)
        ensureIdentifier(<, typeReference)
          listener: handleIdentifier(List, typeReference)
        listener: beginTypeArguments(<)
        reportRecoverableErrorWithToken(>>>, Instance of 'Template<(Token) => Message>')
          listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got '>>>'., null, {lexeme: >>>}], >>>, >>>)
        rewriter()
        listener: handleIdentifier(, typeReference)
        listener: handleNoTypeArguments(>>>)
        listener: handleType(, null)
        listener: endTypeArguments(1, <, >)
        listener: handleType(List, null)
        listener: endTypeArguments(1, <, >)
        listener: handleType(Set, null)
        listener: endTypeArguments(1, <, >)
        listener: handleType(List, null)
        listener: endTypeArguments(1, <, >)
        listener: handleType(Stream, null)
        ensureIdentifierPotentiallyRecovered(>, topLevelVariableDeclaration, false)
          listener: handleIdentifier(, topLevelVariableDeclaration)
        parseFieldInitializerOpt(, , null, null, null, null, null, DeclarationKind.TopLevel, null)
          listener: handleNoFieldInitializer()
        ensureSemicolon()
          reportRecoverableError(>, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], >, >)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, null, 1, Stream, ;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(6, )
