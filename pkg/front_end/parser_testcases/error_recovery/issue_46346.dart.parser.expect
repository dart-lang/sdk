class abstract {}
class as {}
class assert {}
class async {}
class await {}
class break {}
class case {}
class catch {}
class class {}
class const {}
class continue {}
class covariant {}
class default {}
class deferred {}
class do {}
class dynamic {}
class else {}
class enum {}
class export {}
class extends {}
class extension {}
class external {}
class factory {}
class false {}
class final {}
class finally {}
class for {}
class Function {}
class get {}
class hide {}
class if {}
class implements {}
class import {}
class in {}
class inout {}
class interface {}
class is {}
class late {}
class library {}
class mixin {}
class native {}
class new {}
class null {}
class of {}
class on {}
class operator {}
class out {}
class part {}
class patch {}
class required {}
class rethrow {}
class return {}
class set {}
class show {}
class source {}
class static {}
class super {}
class switch {}
class sync {}
class this {}
class throw {}
class true {}
class try {}
class typedef {}
class var {}
class void {}
class while {}
class with {}
class yield {}


class[KeywordToken] abstract[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] as[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] assert[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] async[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] await[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] break[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] case[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] catch[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] class[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] const[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] continue[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] covariant[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] default[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] deferred[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] do[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] dynamic[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] else[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] enum[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] export[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] extends[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] extension[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] external[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] factory[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] false[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] final[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] finally[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] for[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] Function[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] get[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] hide[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] if[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] implements[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] import[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] in[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] inout[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] interface[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] is[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] late[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] library[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] mixin[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] native[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] new[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] null[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] of[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] on[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] operator[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] out[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] part[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] patch[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] required[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] rethrow[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] return[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] set[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] show[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] source[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] static[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] super[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] switch[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] sync[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] this[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] throw[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] true[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] try[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] typedef[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] var[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] void[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] while[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] with[KeywordToken] {[BeginToken]}[SimpleToken]
class[KeywordToken] yield[KeywordToken] {[BeginToken]}[SimpleToken]
[SimpleToken]
