parseUnit(UnmatchedToken(())
  skipErrorTokens(UnmatchedToken(())
  listener: beginCompilationUnit(n)
  syntheticPreviousToken(n)
  parseTopLevelDeclarationImpl(UnmatchedToken(<), DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar(UnmatchedToken(<))
      listener: beginMetadataStar(n)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(UnmatchedToken(<))
      listener: beginTopLevelMember(n)
      parseTopLevelMethod(UnmatchedToken(<), null, null, UnmatchedToken(<), ComplexTypeInfo(start: n, typeArguments: ComplexTypeParamOrArgInfo(start: <, inDeclaration: true, allowsVariance: false, typeArgumentCount: 1, skipEnd: >, recovered: true), beforeQuestionMark: null, end: >, typeVariableStarters: [], gftHasReturnType: null, isRecordType: false, gftReturnTypeHasRecordType: false, recovered: true), null, e, false)
        listener: beginTopLevelMethod(UnmatchedToken(<), null, null)
        ensureIdentifier(UnmatchedToken(<), typeReference)
          listener: handleIdentifier(n, typeReference)
        listener: beginTypeArguments(<)
        listener: handleIdentifier(S, typeReference)
        listener: handleNoTypeArguments(e)
        listener: handleType(S, null)
        reportRecoverableError(S, Message[Template(ExpectedAfterButGot), Expected '>' after this., null, {string: >}])
          listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected '>' after this., null, {string: >}], S, S)
        listener: endTypeArguments(1, <, >)
        listener: handleType(n, null)
        ensureIdentifierPotentiallyRecovered(>, topLevelFunctionDeclaration, false)
          insertSyntheticIdentifier(>, topLevelFunctionDeclaration, message: Message[Template(ExpectedIdentifier), Expected an identifier, but got ''., Try inserting an identifier before ''., {lexeme: }], messageOnToken: null)
            reportRecoverableError(, Message[Template(ExpectedIdentifier), Expected an identifier, but got ''., Try inserting an identifier before ''., {lexeme: }])
              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ''., Try inserting an identifier before ''., {lexeme: }], , )
              listener: // WARNING: Reporting at eof for .
            rewriter()
          listener: handleIdentifier(, topLevelFunctionDeclaration)
        parseMethodTypeVar()
          listener: handleNoTypeVariables()
        parseGetterOrFormalParameters(, , false, MemberKind.TopLevelMethod)
          missingParameterMessage(MemberKind.TopLevelMethod)
          reportRecoverableError(, MissingFunctionParameters)
            listener: handleRecoverableError(MissingFunctionParameters, , )
            listener: // WARNING: Reporting at eof for .
          rewriter()
          parseFormalParametersRest((, MemberKind.TopLevelMethod)
            listener: beginFormalParameters((, MemberKind.TopLevelMethod)
            listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          ensureBlock(), BlockKind(function body))
            reportRecoverableError(, Message[Template(ExpectedFunctionBody), Expected a function body, but got ''., null, {lexeme: }])
              listener: handleRecoverableError(Message[Template(ExpectedFunctionBody), Expected a function body, but got ''., null, {lexeme: }], , )
              listener: // WARNING: Reporting at eof for .
            insertBlock())
              rewriter()
              rewriter()
          listener: handleInvalidFunctionBody({)
        listener: endTopLevelMethod(n, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(UnmatchedToken(())
    listener: handleErrorToken(UnmatchedToken(())
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find ')' to match '('., null, {string: ), lexeme: (}], UnmatchedToken((), UnmatchedToken(())
    listener: handleErrorToken(UnmatchedToken(<))
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find '>' to match '<'., null, {string: >, lexeme: <}], UnmatchedToken(<), UnmatchedToken(<))
  listener: endCompilationUnit(1, )
