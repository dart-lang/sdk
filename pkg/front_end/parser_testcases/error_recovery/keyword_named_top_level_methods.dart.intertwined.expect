parseUnit(int)
  skipErrorTokens(int)
  listener: beginCompilationUnit(int)
  syntheticPreviousToken(int)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(, null, null, , SimpleType(), null, abstract, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(abstract)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(abstract, topLevelFunctionDeclaration)
        parseMethodTypeVar(abstract)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(abstract, abstract, false, MemberKind.TopLevelMethod)
          parseFormalParameters(abstract, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(abstract, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(abstract)
                              parseArguments(abstract)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(abstract, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, as, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(as)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(as, topLevelFunctionDeclaration)
        parseMethodTypeVar(as)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(as, as, false, MemberKind.TopLevelMethod)
          parseFormalParameters(as, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(as, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(as)
                              parseArguments(as)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(as, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(assert)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, assert, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(assert)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(assert, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'assert' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: assert}], assert, assert)
          listener: handleIdentifier(assert, topLevelFunctionDeclaration)
        parseMethodTypeVar(assert)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(assert, assert, false, MemberKind.TopLevelMethod)
          parseFormalParameters(assert, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseAssert(return, Assert.Expression)
                          listener: beginAssert(assert, Assert.Expression)
                          parseExpression(()
                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                parsePrimary((, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                    parseSend((, expression, ConstantPatternContext.none)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(-)
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(-)
                                      listener: handleSend(x, x)
                              listener: beginBinaryExpression(-)
                              parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                parseUnaryExpression(-, true, ConstantPatternContext.none)
                                  parsePrimary(-, expression, ConstantPatternContext.none)
                                    parseLiteralInt(-)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(-, 1)
                          reportRecoverableError(assert, AssertAsExpression)
                            listener: handleRecoverableError(AssertAsExpression, assert, assert)
                          listener: endAssert(assert, Assert.Expression, (, null, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, async, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(async)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(async, topLevelFunctionDeclaration)
        parseMethodTypeVar(async)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(async, async, false, MemberKind.TopLevelMethod)
          parseFormalParameters(async, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(async, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(async)
                              parseArguments(async)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(async, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, await, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(await)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(await, topLevelFunctionDeclaration)
        parseMethodTypeVar(await)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(await, await, false, MemberKind.TopLevelMethod)
          parseFormalParameters(await, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      inPlainSync()
                      looksLikeAwaitExpression(return, AwaitOrYieldContext.UnaryExpression)
                        looksLikeExpressionAfterAwaitOrYield(await, AwaitOrYieldContext.UnaryExpression)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(await, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(await)
                              parseArguments(await)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(await, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(break)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, break, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(break)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(break, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'break' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: break}], break, break)
          listener: handleIdentifier(break, topLevelFunctionDeclaration)
        parseMethodTypeVar(break)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(break, break, false, MemberKind.TopLevelMethod)
          parseFormalParameters(break, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(break, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'break'., Try inserting an identifier before 'break'., {lexeme: break}], break, break)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(break)
                          parseArgumentsOpt()
                            listener: handleNoArguments(break)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, break)
          parseStatement(;)
            parseStatementX(;)
              parseBreakStatement(;)
                isBreakAllowed()
                reportRecoverableError(break, BreakOutsideOfLoop)
                  listener: handleRecoverableError(BreakOutsideOfLoop, break, break)
                ensureSemicolon(break)
                  reportRecoverableError(break, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], break, break)
                  rewriter()
                listener: handleBreakStatement(false, break, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                ensureCloseParen(1, ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement((, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(case)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, case, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(case)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(case, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'case' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: case}], case, case)
          listener: handleIdentifier(case, topLevelFunctionDeclaration)
        parseMethodTypeVar(case)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(case, case, false, MemberKind.TopLevelMethod)
          parseFormalParameters(case, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(case, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'case' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: case}], case, case)
                            listener: handleIdentifier(case, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(case)
                            parseArguments(case)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(case, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(catch)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, catch, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(catch)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(catch, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'catch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: catch}], catch, catch)
          listener: handleIdentifier(catch, topLevelFunctionDeclaration)
        parseMethodTypeVar(catch)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(catch, catch, false, MemberKind.TopLevelMethod)
          parseFormalParameters(catch, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(catch, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'catch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: catch}], catch, catch)
                            listener: handleIdentifier(catch, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(catch)
                            parseArguments(catch)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(catch, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(class)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, class, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(class)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(class, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'class' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: class}], class, class)
          listener: handleIdentifier(class, topLevelFunctionDeclaration)
        parseMethodTypeVar(class)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(class, class, false, MemberKind.TopLevelMethod)
          parseFormalParameters(class, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(class, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'class' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: class}], class, class)
                            listener: handleIdentifier(class, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(class)
                            parseArguments(class)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(class, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(const)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, const, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(const)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(const, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'const' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: const}], const, const)
          listener: handleIdentifier(const, topLevelFunctionDeclaration)
        parseMethodTypeVar(const)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(const, const, false, MemberKind.TopLevelMethod)
          parseFormalParameters(const, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseConstExpression(return)
                          listener: beginConstLiteral(()
                          parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                            listener: beginParenthesizedExpressionOrRecordLiteral(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(x, expression)
                                        listener: handleNoTypeArguments(-)
                                        parseArgumentsOpt(x)
                                          listener: handleNoArguments(-)
                                        listener: handleSend(x, x)
                                listener: beginBinaryExpression(-)
                                parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                  parseUnaryExpression(-, true, ConstantPatternContext.none)
                                    parsePrimary(-, expression, ConstantPatternContext.none)
                                      parseLiteralInt(-)
                                        listener: handleLiteralInt(1)
                                listener: endBinaryExpression(-, 1)
                            ensureCloseParen(1, ()
                            reportRecoverableError(), RecordLiteralOnePositionalFieldNoTrailingComma)
                              listener: handleRecoverableError(RecordLiteralOnePositionalFieldNoTrailingComma, ), ))
                            listener: endRecordLiteral((, 1, const)
                          listener: endConstLiteral())
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(continue)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, continue, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(continue)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(continue, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'continue' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: continue}], continue, continue)
          listener: handleIdentifier(continue, topLevelFunctionDeclaration)
        parseMethodTypeVar(continue)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(continue, continue, false, MemberKind.TopLevelMethod)
          parseFormalParameters(continue, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(continue, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'continue'., Try inserting an identifier before 'continue'., {lexeme: continue}], continue, continue)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(continue)
                          parseArgumentsOpt()
                            listener: handleNoArguments(continue)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, continue)
          parseStatement(;)
            parseStatementX(;)
              parseContinueStatement(;)
                isContinueAllowed()
                reportRecoverableError(continue, ContinueOutsideOfLoop)
                  listener: handleRecoverableError(ContinueOutsideOfLoop, continue, continue)
                ensureSemicolon(continue)
                  reportRecoverableError(continue, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], continue, continue)
                  rewriter()
                listener: handleContinueStatement(false, continue, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                ensureCloseParen(1, ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement((, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, covariant, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(covariant)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(covariant, topLevelFunctionDeclaration)
        parseMethodTypeVar(covariant)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(covariant, covariant, false, MemberKind.TopLevelMethod)
          parseFormalParameters(covariant, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(covariant, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(covariant)
                              parseArguments(covariant)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(covariant, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(default)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, default, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(default)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(default, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'default' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: default}], default, default)
          listener: handleIdentifier(default, topLevelFunctionDeclaration)
        parseMethodTypeVar(default)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(default, default, false, MemberKind.TopLevelMethod)
          parseFormalParameters(default, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(default, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'default' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: default}], default, default)
                            listener: handleIdentifier(default, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(default)
                            parseArguments(default)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(default, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, deferred, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(deferred)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(deferred, topLevelFunctionDeclaration)
        parseMethodTypeVar(deferred)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(deferred, deferred, false, MemberKind.TopLevelMethod)
          parseFormalParameters(deferred, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(deferred, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(deferred)
                              parseArguments(deferred)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(deferred, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(do)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, do, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(do)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(do, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'do' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: do}], do, do)
          listener: handleIdentifier(do, topLevelFunctionDeclaration)
        parseMethodTypeVar(do)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(do, do, false, MemberKind.TopLevelMethod)
          parseFormalParameters(do, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(do, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'do'., Try inserting an identifier before 'do'., {lexeme: do}], do, do)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(do)
                          parseArgumentsOpt()
                            listener: handleNoArguments(do)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, do)
          parseStatement(;)
            parseStatementX(;)
              parseDoWhileStatement(;)
                listener: beginDoWhileStatement(do)
                listener: beginDoWhileStatementBody(()
                parseStatement(do)
                  parseStatementX(do)
                    parseExpressionStatementOrDeclaration(do, null)
                      parseExpressionStatementOrDeclarationAfterModifiers(do, do, null, null, null, null)
                        looksLikeLocalFunction(()
                        parseExpressionStatement(do)
                          parseExpression(do)
                            parsePrecedenceExpression(do, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(do, true, ConstantPatternContext.none)
                                parsePrimary(do, expression, ConstantPatternContext.none)
                                  parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(do, ConstantPatternContext.none)
                                    parseParenthesizedExpressionOrRecordLiteral(do, null, ConstantPatternContext.none)
                                      listener: beginParenthesizedExpressionOrRecordLiteral(()
                                      parseExpression(()
                                        parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                          parseUnaryExpression((, true, ConstantPatternContext.none)
                                            parsePrimary((, expression, ConstantPatternContext.none)
                                              parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                                parseSend((, expression, ConstantPatternContext.none)
                                                  ensureIdentifier((, expression)
                                                    listener: handleIdentifier(x, expression)
                                                  listener: handleNoTypeArguments(-)
                                                  parseArgumentsOpt(x)
                                                    listener: handleNoArguments(-)
                                                  listener: handleSend(x, x)
                                          listener: beginBinaryExpression(-)
                                          parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                            parseUnaryExpression(-, true, ConstantPatternContext.none)
                                              parsePrimary(-, expression, ConstantPatternContext.none)
                                                parseLiteralInt(-)
                                                  listener: handleLiteralInt(1)
                                          listener: endBinaryExpression(-, 1)
                                      ensureCloseParen(1, ()
                                      listener: endParenthesizedExpression(()
                              listener: beginBinaryExpression(+)
                              parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                                parseUnaryExpression(+, true, ConstantPatternContext.none)
                                  parsePrimary(+, expression, ConstantPatternContext.none)
                                    parseLiteralInt(+)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(+, 1)
                          ensureSemicolon(1)
                          listener: handleExpressionStatement((, ;)
                listener: endDoWhileStatementBody(;)
                reportRecoverableError(}, Message[Template(ExpectedButGot), Expected 'while' before this., null, {string: while}])
                  listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected 'while' before this., null, {string: while}], }, })
                rewriter()
                ensureParenthesizedCondition(while, allowCase: false)
                  reportRecoverableError(}, Message[Template(ExpectedToken), Expected to find '('., null, {string: (}])
                    listener: handleRecoverableError(Message[Template(ExpectedToken), Expected to find '('., null, {string: (}], }, })
                  rewriter()
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSend((, expression, ConstantPatternContext.none)
                              ensureIdentifier((, expression)
                                reportRecoverableErrorWithToken(), Template(ExpectedIdentifier))
                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '}'., Try inserting an identifier before '}'., {lexeme: }}], }, })
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, )
                    ensureCloseParen(, ()
                    listener: handleParenthesizedCondition((, null, null)
                ensureSemicolon())
                  reportRecoverableError(;, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], ;, ;)
                  rewriter()
                listener: endDoWhileStatement(do, while, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, dynamic, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(dynamic)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(dynamic, topLevelFunctionDeclaration)
        parseMethodTypeVar(dynamic)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(dynamic, dynamic, false, MemberKind.TopLevelMethod)
          parseFormalParameters(dynamic, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(dynamic, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(dynamic)
                              parseArguments(dynamic)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(dynamic, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(else)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, else, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(else)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(else, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'else' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: else}], else, else)
          listener: handleIdentifier(else, topLevelFunctionDeclaration)
        parseMethodTypeVar(else)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(else, else, false, MemberKind.TopLevelMethod)
          parseFormalParameters(else, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(else, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'else'., Try inserting an identifier before 'else'., {lexeme: else}], else, else)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(else)
                          parseArgumentsOpt()
                            listener: handleNoArguments(else)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, else)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(else)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            inPlainSync()
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(else, Template(ExpectedIdentifier))
                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'else'., Try inserting an identifier before 'else'., {lexeme: else}], else, else)
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments(else)
                              parseArgumentsOpt()
                                listener: handleNoArguments(else)
                              listener: handleSend(, )
                    ensureSemicolon()
                      reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                      rewriter()
                    listener: handleExpressionStatement(else, ;)
          reportRecoverableError(;, Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}])
            listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}], else, else)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(else)
            parseStatementX(else)
              parseExpressionStatementOrDeclaration(else, null)
                parseExpressionStatementOrDeclarationAfterModifiers(else, else, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(else)
                    parseExpression(else)
                      parsePrecedenceExpression(else, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(else, true, ConstantPatternContext.none)
                          parsePrimary(else, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(else, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(else, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                ensureCloseParen(1, ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement((, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(enum)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, enum, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(enum)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(enum, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'enum' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: enum}], enum, enum)
          listener: handleIdentifier(enum, topLevelFunctionDeclaration)
        parseMethodTypeVar(enum)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(enum, enum, false, MemberKind.TopLevelMethod)
          parseFormalParameters(enum, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(enum, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'enum' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: enum}], enum, enum)
                            listener: handleIdentifier(enum, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(enum)
                            parseArguments(enum)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(enum, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, export, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(export)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(export, topLevelFunctionDeclaration)
        parseMethodTypeVar(export)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(export, export, false, MemberKind.TopLevelMethod)
          parseFormalParameters(export, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(export, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(export)
                              parseArguments(export)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(export, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(extends)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, extends, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(extends)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(extends, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
          listener: handleIdentifier(extends, topLevelFunctionDeclaration)
        parseMethodTypeVar(extends)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(extends, extends, false, MemberKind.TopLevelMethod)
          parseFormalParameters(extends, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(extends, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'extends' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: extends}], extends, extends)
                            listener: handleIdentifier(extends, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(extends)
                            parseArguments(extends)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(extends, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, extension, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(extension)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(extension, topLevelFunctionDeclaration)
        parseMethodTypeVar(extension)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(extension, extension, false, MemberKind.TopLevelMethod)
          parseFormalParameters(extension, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(extension, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(extension)
                              parseArguments(extension)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(extension, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, external, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(external)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(external, topLevelFunctionDeclaration)
        parseMethodTypeVar(external)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(external, external, false, MemberKind.TopLevelMethod)
          parseFormalParameters(external, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(external, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(external)
                              parseArguments(external)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(external, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, factory, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(factory)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(factory, topLevelFunctionDeclaration)
        parseMethodTypeVar(factory)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(factory, factory, false, MemberKind.TopLevelMethod)
          parseFormalParameters(factory, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(factory, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(factory)
                              parseArguments(factory)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(factory, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(false)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, false, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(false)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(false, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'false' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: false}], false, false)
          listener: handleIdentifier(false, topLevelFunctionDeclaration)
        parseMethodTypeVar(false)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(false, false, false, MemberKind.TopLevelMethod)
          parseFormalParameters(false, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralBool(return)
                          listener: handleLiteralBool(false)
                    parseArgumentOrIndexStar(false, NoTypeParamOrArg(), false)
                      listener: handleNoTypeArguments(()
                      parseArguments(false)
                        parseArgumentsRest(()
                          listener: beginArguments(()
                          allowedToShortcutParseExpression()
                          parseExpression(()
                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                parsePrimary((, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                    parseSend((, expression, ConstantPatternContext.none)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(-)
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(-)
                                      listener: handleSend(x, x)
                              listener: beginBinaryExpression(-)
                              parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                parseUnaryExpression(-, true, ConstantPatternContext.none)
                                  parsePrimary(-, expression, ConstantPatternContext.none)
                                    parseLiteralInt(-)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(-, 1)
                          listener: endArguments(1, (, ))
                      listener: handleSend((, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(final)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, final, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(final)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(final, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'final' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: final}], final, final)
          listener: handleIdentifier(final, topLevelFunctionDeclaration)
        parseMethodTypeVar(final)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(final, final, false, MemberKind.TopLevelMethod)
          parseFormalParameters(final, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(final, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'final'., Try inserting an identifier before 'final'., {lexeme: final}], final, final)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(final)
                          parseArgumentsOpt()
                            listener: handleNoArguments(final)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, final)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(final, ;, null, final, null, null)
                looksLikeLocalFunction(()
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
                listener: handleNoType(final)
                listener: beginVariablesDeclaration((, null, final)
                parseVariablesDeclarationRest(final, true)
                  parseOptionallyInitializedIdentifier(final)
                    ensureIdentifier(final, localVariableDeclaration)
                      reportRecoverableErrorWithToken((, Template(ExpectedIdentifier))
                        listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
                      rewriter()
                      listener: handleIdentifier(, localVariableDeclaration)
                    listener: beginInitializedIdentifier()
                    parseVariableInitializerOpt()
                      listener: handleNoVariableInitializer()
                    listener: endInitializedIdentifier()
                  ensureSemicolon()
                    reportRecoverableError((, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], (, ()
                    rewriter()
                  listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, x)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(x)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(-)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(-)
                              listener: handleSend(x, x)
                      listener: beginBinaryExpression(-)
                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                          parsePrimary(-, expression, ConstantPatternContext.none)
                            parseLiteralInt(-)
                              listener: handleLiteralInt(1)
                      listener: endBinaryExpression(-, 1)
                  ensureSemicolon(1)
                    reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                    rewriter()
                  listener: handleExpressionStatement(x, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ))
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction())
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(), Template(ExpectedIdentifier))
                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ')'., Try inserting an identifier before ')'., {lexeme: )}], ), ))
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, )
                    ensureSemicolon()
                      reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                      rewriter()
                    listener: handleExpressionStatement(), ;)
          reportRecoverableError(;, Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}])
            listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}], ), ))
          notEofOrType(CLOSE_CURLY_BRACKET, +)
          parseStatement())
            parseStatementX())
              parseExpressionStatementOrDeclaration(), null)
                parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, null)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement())
                    parseExpression())
                      parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(), true, ConstantPatternContext.none)
                          rewriteAndRecover(), UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(), expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral(), expression, ConstantPatternContext.none)
                              parseSend(), expression, ConstantPatternContext.none)
                                ensureIdentifier(), expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, )
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(+, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(6, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(finally)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, finally, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(finally)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(finally, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'finally' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: finally}], finally, finally)
          listener: handleIdentifier(finally, topLevelFunctionDeclaration)
        parseMethodTypeVar(finally)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(finally, finally, false, MemberKind.TopLevelMethod)
          parseFormalParameters(finally, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(finally, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'finally' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: finally}], finally, finally)
                            listener: handleIdentifier(finally, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(finally)
                            parseArguments(finally)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(finally, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(for)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, for, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(for)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(for, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'for' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: for}], for, for)
          listener: handleIdentifier(for, topLevelFunctionDeclaration)
        parseMethodTypeVar(for)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(for, for, false, MemberKind.TopLevelMethod)
          parseFormalParameters(for, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(for, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'for'., Try inserting an identifier before 'for'., {lexeme: for}], for, for)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(for)
                          parseArgumentsOpt()
                            listener: handleNoArguments(for)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, for)
          parseStatement(;)
            parseStatementX(;)
              parseForStatement(;, null)
                listener: beginForStatement(for)
                parseForLoopPartsStart(null, for, ForPartsContext(null))
                  parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                    parseExpressionStatementOrDeclarationAfterModifiers((, (, null, null, null, ForPartsContext(null))
                parseForLoopPartsMid((, null, for)
                  parseExpression(()
                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression((, true, ConstantPatternContext.none)
                        parsePrimary((, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                            parseSend((, expression, ConstantPatternContext.none)
                              ensureIdentifier((, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(-)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(-)
                              listener: handleSend(x, x)
                      listener: beginBinaryExpression(-)
                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                          parsePrimary(-, expression, ConstantPatternContext.none)
                            parseLiteralInt(-)
                              listener: handleLiteralInt(1)
                      listener: endBinaryExpression(-, 1)
                  listener: handleForInitializerExpressionStatement(1, false)
                parseForRest(null, 1, for)
                  parseForLoopPartsRest(1, for, null)
                    ensureSemicolon(1)
                      reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                      rewriter()
                    parseExpressionStatement(;)
                      parseExpression(;)
                        parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(;, true, ConstantPatternContext.none)
                            parsePrimary(;, expression, ConstantPatternContext.none)
                              parseSend(;, expression, ConstantPatternContext.none)
                                ensureIdentifier(;, expression)
                                  reportRecoverableErrorWithToken(), Template(ExpectedIdentifier))
                                    listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ')'., Try inserting an identifier before ')'., {lexeme: )}], ), ))
                                  rewriter()
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments())
                                parseArgumentsOpt()
                                  listener: handleNoArguments())
                                listener: handleSend(, )
                      ensureSemicolon()
                        reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                          listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                        rewriter()
                      listener: handleExpressionStatement(), ;)
                    listener: handleForLoopParts(for, (, ;, ;, 0)
                  listener: beginForStatementBody(+)
                  parseStatement())
                    parseStatementX())
                      parseExpressionStatementOrDeclaration(), null)
                        parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, null)
                          looksLikeLocalFunction(+)
                          parseExpressionStatement())
                            parseExpression())
                              parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(), true, ConstantPatternContext.none)
                                  rewriteAndRecover(), UnsupportedPrefixPlus, )
                                    reportRecoverableError(+, UnsupportedPrefixPlus)
                                      listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                                    rewriter()
                                  parsePrimary(), expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(), expression, ConstantPatternContext.none)
                                      parseSend(), expression, ConstantPatternContext.none)
                                        ensureIdentifier(), expression)
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(+)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(+)
                                        listener: handleSend(, )
                                listener: beginBinaryExpression(+)
                                parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                                  parseUnaryExpression(+, true, ConstantPatternContext.none)
                                    parsePrimary(+, expression, ConstantPatternContext.none)
                                      parseLiteralInt(+)
                                        listener: handleLiteralInt(1)
                                listener: endBinaryExpression(+, 1)
                            ensureSemicolon(1)
                            listener: handleExpressionStatement(+, ;)
                  listener: endForStatementBody(;)
                  listener: endForStatement(;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, Function, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(Function)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(Function, topLevelFunctionDeclaration)
        parseMethodTypeVar(Function)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(Function, Function, false, MemberKind.TopLevelMethod)
          parseFormalParameters(Function, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(Function, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(Function)
                              parseArguments(Function)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(Function, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, get, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        parseMethodTypeVar(get)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(get, get, false, MemberKind.TopLevelMethod)
          parseFormalParameters(get, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(get, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(get)
                              parseArguments(get)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(get, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, hide, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(hide)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(hide, topLevelFunctionDeclaration)
        parseMethodTypeVar(hide)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(hide, hide, false, MemberKind.TopLevelMethod)
          parseFormalParameters(hide, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(hide, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(hide)
                              parseArguments(hide)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(hide, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(if)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, if, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(if)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(if, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'if' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: if}], if, if)
          listener: handleIdentifier(if, topLevelFunctionDeclaration)
        parseMethodTypeVar(if)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(if, if, false, MemberKind.TopLevelMethod)
          parseFormalParameters(if, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(if, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'if'., Try inserting an identifier before 'if'., {lexeme: if}], if, if)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(if)
                          parseArgumentsOpt()
                            listener: handleNoArguments(if)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement(;)
            parseStatementX(;)
              parseIfStatement(;)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(-)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(-)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(-)
                        parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(-, true, ConstantPatternContext.none)
                            parsePrimary(-, expression, ConstantPatternContext.none)
                              parseLiteralInt(-)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(-, 1)
                    ensureCloseParen(1, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(+)
                parseStatement())
                  parseStatementX())
                    parseExpressionStatementOrDeclaration(), null)
                      parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, null)
                        looksLikeLocalFunction(+)
                        parseExpressionStatement())
                          parseExpression())
                            parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(), true, ConstantPatternContext.none)
                                rewriteAndRecover(), UnsupportedPrefixPlus, )
                                  reportRecoverableError(+, UnsupportedPrefixPlus)
                                    listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                                  rewriter()
                                parsePrimary(), expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(), expression, ConstantPatternContext.none)
                                    parseSend(), expression, ConstantPatternContext.none)
                                      ensureIdentifier(), expression)
                                        listener: handleIdentifier(, expression)
                                      listener: handleNoTypeArguments(+)
                                      parseArgumentsOpt()
                                        listener: handleNoArguments(+)
                                      listener: handleSend(, )
                              listener: beginBinaryExpression(+)
                              parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                                parseUnaryExpression(+, true, ConstantPatternContext.none)
                                  parsePrimary(+, expression, ConstantPatternContext.none)
                                    parseLiteralInt(+)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(+, 1)
                          ensureSemicolon(1)
                          listener: handleExpressionStatement(+, ;)
                listener: endThenStatement(+, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, implements, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(implements)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(implements, topLevelFunctionDeclaration)
        parseMethodTypeVar(implements)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(implements, implements, false, MemberKind.TopLevelMethod)
          parseFormalParameters(implements, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(implements, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(implements)
                              parseArguments(implements)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(implements, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, import, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(import)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(import, topLevelFunctionDeclaration)
        parseMethodTypeVar(import)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(import, import, false, MemberKind.TopLevelMethod)
          parseFormalParameters(import, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(import, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(import)
                              parseArguments(import)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(import, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(in)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, in, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(in)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(in, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'in' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: in}], in, in)
          listener: handleIdentifier(in, topLevelFunctionDeclaration)
        parseMethodTypeVar(in)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(in, in, false, MemberKind.TopLevelMethod)
          parseFormalParameters(in, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(in, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'in' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: in}], in, in)
                            listener: handleIdentifier(in, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(in)
                            parseArguments(in)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(in, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, inout, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(inout)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(inout, topLevelFunctionDeclaration)
        parseMethodTypeVar(inout)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(inout, inout, false, MemberKind.TopLevelMethod)
          parseFormalParameters(inout, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(inout, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(inout)
                              parseArguments(inout)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(inout, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, interface, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(interface)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(interface, topLevelFunctionDeclaration)
        parseMethodTypeVar(interface)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(interface, interface, false, MemberKind.TopLevelMethod)
          parseFormalParameters(interface, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(interface, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(interface)
                              parseArguments(interface)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(interface, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(is)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, is, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(is)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(is, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'is' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: is}], is, is)
          listener: handleIdentifier(is, topLevelFunctionDeclaration)
        parseMethodTypeVar(is)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(is, is, false, MemberKind.TopLevelMethod)
          parseFormalParameters(is, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(is, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'is'., Try inserting an identifier before 'is'., {lexeme: is}], is, is)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(is)
                          parseArgumentsOpt()
                            listener: handleNoArguments(is)
                          listener: handleSend(, )
                    parseIsOperatorRest()
                      listener: beginIsOperatorType(is)
                      computeTypeAfterIsOrAs(is)
                      parseRecordType((, is, false)
                        listener: beginRecordType(()
                        parseRecordTypeField((, identifierIsOptional: true)
                          listener: beginRecordTypeEntry()
                          parseMetadataStar(()
                            listener: beginMetadataStar(x)
                            listener: endMetadataStar(0)
                          listener: handleIdentifier(x, typeReference)
                          listener: handleNoTypeArguments(-)
                          listener: handleType(x, null)
                          listener: handleNoName(-)
                          listener: endRecordTypeEntry()
                        ensureCloseParen(x, ()
                          reportRecoverableError(-, Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}])
                            listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], -, -)
                        reportRecoverableError(), RecordTypeOnePositionalFieldNoTrailingComma)
                          listener: handleRecoverableError(RecordTypeOnePositionalFieldNoTrailingComma, ), ))
                        listener: endRecordType((, null, 1, false)
                      listener: endIsOperatorType(is)
                      listener: handleIsOperator(is, null)
                      skipChainedAsIsOperators())
                ensureSemicolon())
                  reportRecoverableError(), Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], ), ))
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, +)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          rewriteAndRecover(;, UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                              parseSend(;, expression, ConstantPatternContext.none)
                                ensureIdentifier(;, expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, )
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(+, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, late, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(late)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(late, topLevelFunctionDeclaration)
        parseMethodTypeVar(late)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(late, late, false, MemberKind.TopLevelMethod)
          parseFormalParameters(late, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(late, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(late)
                              parseArguments(late)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(late, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, library, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(library)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(library, topLevelFunctionDeclaration)
        parseMethodTypeVar(library)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(library, library, false, MemberKind.TopLevelMethod)
          parseFormalParameters(library, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(library, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(library)
                              parseArguments(library)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(library, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, mixin, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(mixin)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(mixin, topLevelFunctionDeclaration)
        parseMethodTypeVar(mixin)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(mixin, mixin, false, MemberKind.TopLevelMethod)
          parseFormalParameters(mixin, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(mixin, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(mixin)
                              parseArguments(mixin)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(mixin, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, native, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(native)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(native, topLevelFunctionDeclaration)
        parseMethodTypeVar(native)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(native, native, false, MemberKind.TopLevelMethod)
          parseFormalParameters(native, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(native, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(native)
                              parseArguments(native)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(native, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(new)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, new, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(new)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(new, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'new' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: new}], new, new)
          listener: handleIdentifier(new, topLevelFunctionDeclaration)
        parseMethodTypeVar(new)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(new, new, false, MemberKind.TopLevelMethod)
          parseFormalParameters(new, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseNewExpression(return)
                          listener: beginNewExpression(new)
                          parseConstructorReference(new, ConstructorReferenceContext.New, null)
                            ensureIdentifier(new, constructorReference)
                              insertSyntheticIdentifier(new, constructorReference, message: Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], messageOnToken: null)
                                reportRecoverableError((, Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}])
                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
                                rewriter()
                              listener: handleIdentifier(, constructorReference)
                            listener: beginConstructorReference()
                            parseQualifiedRestOpt(, constructorReferenceContinuation)
                            listener: handleNoTypeArguments(()
                            listener: handleNoConstructorReferenceContinuationAfterTypeArguments()
                            listener: endConstructorReference(, null, , ConstructorReferenceContext.New)
                          parseConstructorInvocationArguments()
                            parseArgumentsRest(()
                              listener: beginArguments(()
                              allowedToShortcutParseExpression()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments(-)
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments(-)
                                          listener: handleSend(x, x)
                                  listener: beginBinaryExpression(-)
                                  parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                    parseUnaryExpression(-, true, ConstantPatternContext.none)
                                      parsePrimary(-, expression, ConstantPatternContext.none)
                                        parseLiteralInt(-)
                                          listener: handleLiteralInt(1)
                                  listener: endBinaryExpression(-, 1)
                              listener: endArguments(1, (, ))
                          listener: endNewExpression(new)
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(null)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, null, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(null)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(null, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'null' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: null}], null, null)
          listener: handleIdentifier(null, topLevelFunctionDeclaration)
        parseMethodTypeVar(null)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(null, null, false, MemberKind.TopLevelMethod)
          parseFormalParameters(null, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralNull(return)
                          listener: handleLiteralNull(null)
                    parseArgumentOrIndexStar(null, NoTypeParamOrArg(), false)
                      listener: handleNoTypeArguments(()
                      parseArguments(null)
                        parseArgumentsRest(()
                          listener: beginArguments(()
                          allowedToShortcutParseExpression()
                          parseExpression(()
                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                parsePrimary((, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                    parseSend((, expression, ConstantPatternContext.none)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(-)
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(-)
                                      listener: handleSend(x, x)
                              listener: beginBinaryExpression(-)
                              parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                parseUnaryExpression(-, true, ConstantPatternContext.none)
                                  parsePrimary(-, expression, ConstantPatternContext.none)
                                    parseLiteralInt(-)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(-, 1)
                          listener: endArguments(1, (, ))
                      listener: handleSend((, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, of, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(of)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(of, topLevelFunctionDeclaration)
        parseMethodTypeVar(of)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(of, of, false, MemberKind.TopLevelMethod)
          parseFormalParameters(of, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(of, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(of)
                              parseArguments(of)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(of, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, on, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(on)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(on, topLevelFunctionDeclaration)
        parseMethodTypeVar(on)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(on, on, false, MemberKind.TopLevelMethod)
          parseFormalParameters(on, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(on, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(on)
                              parseArguments(on)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(on, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, operator, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(operator)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(operator, topLevelFunctionDeclaration)
        parseMethodTypeVar(operator)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(operator, operator, false, MemberKind.TopLevelMethod)
          parseFormalParameters(operator, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(operator, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(operator)
                              parseArguments(operator)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(operator, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, out, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(out)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(out, topLevelFunctionDeclaration)
        parseMethodTypeVar(out)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(out, out, false, MemberKind.TopLevelMethod)
          parseFormalParameters(out, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(out, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(out)
                              parseArguments(out)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(out, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, part, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(part)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(part, topLevelFunctionDeclaration)
        parseMethodTypeVar(part)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(part, part, false, MemberKind.TopLevelMethod)
          parseFormalParameters(part, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(part, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(part)
                              parseArguments(part)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(part, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, patch, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(patch)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(patch, topLevelFunctionDeclaration)
        parseMethodTypeVar(patch)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(patch, patch, false, MemberKind.TopLevelMethod)
          parseFormalParameters(patch, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(patch, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(patch)
                              parseArguments(patch)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(patch, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, required, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(required)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(required, topLevelFunctionDeclaration)
        parseMethodTypeVar(required)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(required, required, false, MemberKind.TopLevelMethod)
          parseFormalParameters(required, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(required, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(required)
                              parseArguments(required)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(required, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(rethrow)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, rethrow, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(rethrow)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(rethrow, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'rethrow' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: rethrow}], rethrow, rethrow)
          listener: handleIdentifier(rethrow, topLevelFunctionDeclaration)
        parseMethodTypeVar(rethrow)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(rethrow, rethrow, false, MemberKind.TopLevelMethod)
          parseFormalParameters(rethrow, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(rethrow, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'rethrow' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: rethrow}], rethrow, rethrow)
                            listener: handleIdentifier(rethrow, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(rethrow)
                            parseArguments(rethrow)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(rethrow, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(return)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, return, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(return)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(return, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'return' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: return}], return, return)
          listener: handleIdentifier(return, topLevelFunctionDeclaration)
        parseMethodTypeVar(return)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(return, return, false, MemberKind.TopLevelMethod)
          parseFormalParameters(return, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        reportRecoverableErrorWithToken(return, Template(UnexpectedToken))
                          listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token 'return'., null, {lexeme: return}], return, return)
                        parsePrimary(return, expression, ConstantPatternContext.none)
                          parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(return, ConstantPatternContext.none)
                            parseParenthesizedExpressionOrRecordLiteral(return, null, ConstantPatternContext.none)
                              listener: beginParenthesizedExpressionOrRecordLiteral(()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments(-)
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments(-)
                                          listener: handleSend(x, x)
                                  listener: beginBinaryExpression(-)
                                  parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                    parseUnaryExpression(-, true, ConstantPatternContext.none)
                                      parsePrimary(-, expression, ConstantPatternContext.none)
                                        parseLiteralInt(-)
                                          listener: handleLiteralInt(1)
                                  listener: endBinaryExpression(-, 1)
                              ensureCloseParen(1, ()
                              listener: endParenthesizedExpression(()
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, set, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(set)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(set, topLevelFunctionDeclaration)
        parseMethodTypeVar(set)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(set, set, false, MemberKind.TopLevelMethod)
          parseFormalParameters(set, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(set, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(set)
                              parseArguments(set)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(set, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, show, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(show)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(show, topLevelFunctionDeclaration)
        parseMethodTypeVar(show)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(show, show, false, MemberKind.TopLevelMethod)
          parseFormalParameters(show, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(show, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(show)
                              parseArguments(show)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(show, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, source, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(source)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(source, topLevelFunctionDeclaration)
        parseMethodTypeVar(source)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(source, source, false, MemberKind.TopLevelMethod)
          parseFormalParameters(source, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(source, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(source)
                              parseArguments(source)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(source, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, static, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(static)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(static, topLevelFunctionDeclaration)
        parseMethodTypeVar(static)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(static, static, false, MemberKind.TopLevelMethod)
          parseFormalParameters(static, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(static, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(static)
                              parseArguments(static)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(static, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, super, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(super)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          reportRecoverableErrorWithToken(super, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'super' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: super}], super, super)
          listener: handleIdentifier(super, topLevelFunctionDeclaration)
        parseMethodTypeVar(super)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(super, super, false, MemberKind.TopLevelMethod)
          parseFormalParameters(super, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseSuperExpression(return, expression)
                          listener: handleSuperExpression(super, expression)
                          listener: handleNoTypeArguments(()
                          parseArguments(super)
                            parseArgumentsRest(()
                              listener: beginArguments(()
                              allowedToShortcutParseExpression()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments(-)
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments(-)
                                          listener: handleSend(x, x)
                                  listener: beginBinaryExpression(-)
                                  parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                    parseUnaryExpression(-, true, ConstantPatternContext.none)
                                      parsePrimary(-, expression, ConstantPatternContext.none)
                                        parseLiteralInt(-)
                                          listener: handleLiteralInt(1)
                                  listener: endBinaryExpression(-, 1)
                              listener: endArguments(1, (, ))
                          listener: handleSend(super, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(switch)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, switch, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(switch)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(switch, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'switch' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: switch}], switch, switch)
          listener: handleIdentifier(switch, topLevelFunctionDeclaration)
        parseMethodTypeVar(switch)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(switch, switch, false, MemberKind.TopLevelMethod)
          parseFormalParameters(switch, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(switch, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'switch'., Try inserting an identifier before 'switch'., {lexeme: switch}], switch, switch)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(switch)
                          parseArgumentsOpt()
                            listener: handleNoArguments(switch)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, switch)
          parseStatement(;)
            parseStatementX(;)
              parseSwitchStatement(;)
                listener: beginSwitchStatement(switch)
                ensureParenthesizedCondition(switch, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(-)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(-)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(-)
                        parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(-, true, ConstantPatternContext.none)
                            parsePrimary(-, expression, ConstantPatternContext.none)
                              parseLiteralInt(-)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(-, 1)
                    ensureCloseParen(1, ()
                    listener: handleParenthesizedCondition((, null, null)
                parseSwitchBlock())
                  ensureBlock(), BlockKind(switch statement))
                    reportRecoverableError(), ExpectedSwitchStatementBody)
                      listener: handleRecoverableError(ExpectedSwitchStatementBody, ), ))
                    insertBlock())
                      rewriter()
                      rewriter()
                  listener: beginSwitchBlock({)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endSwitchBlock(0, {, })
                listener: endSwitchStatement(switch, })
          notEofOrType(CLOSE_CURLY_BRACKET, +)
          parseStatement(})
            parseStatementX(})
              parseExpressionStatementOrDeclaration(}, null)
                parseExpressionStatementOrDeclarationAfterModifiers(}, }, null, null, null, null)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement(})
                    parseExpression(})
                      parsePrecedenceExpression(}, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(}, true, ConstantPatternContext.none)
                          rewriteAndRecover(}, UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(}, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral(}, expression, ConstantPatternContext.none)
                              parseSend(}, expression, ConstantPatternContext.none)
                                ensureIdentifier(}, expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, )
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(+, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, sync, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(sync)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(sync, topLevelFunctionDeclaration)
        parseMethodTypeVar(sync)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(sync, sync, false, MemberKind.TopLevelMethod)
          parseFormalParameters(sync, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(sync, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(sync)
                              parseArguments(sync)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(sync, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, this, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(this)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          reportRecoverableErrorWithToken(this, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'this' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: this}], this, this)
          listener: handleIdentifier(this, topLevelFunctionDeclaration)
        parseMethodTypeVar(this)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(this, this, false, MemberKind.TopLevelMethod)
          parseFormalParameters(this, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseThisExpression(return, expression)
                          listener: handleThisExpression(this, expression)
                          listener: handleNoTypeArguments(()
                          parseArguments(this)
                            parseArgumentsRest(()
                              listener: beginArguments(()
                              allowedToShortcutParseExpression()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments(-)
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments(-)
                                          listener: handleSend(x, x)
                                  listener: beginBinaryExpression(-)
                                  parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                    parseUnaryExpression(-, true, ConstantPatternContext.none)
                                      parsePrimary(-, expression, ConstantPatternContext.none)
                                        parseLiteralInt(-)
                                          listener: handleLiteralInt(1)
                                  listener: endBinaryExpression(-, 1)
                              listener: endArguments(1, (, ))
                          listener: handleSend(this, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(throw)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, throw, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(throw)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(throw, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'throw' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: throw}], throw, throw)
          listener: handleIdentifier(throw, topLevelFunctionDeclaration)
        parseMethodTypeVar(throw)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(throw, throw, false, MemberKind.TopLevelMethod)
          parseFormalParameters(throw, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parseThrowExpression(return, true)
                    parseExpression(throw)
                      parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(throw, true, ConstantPatternContext.none)
                          parsePrimary(throw, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(throw, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(throw, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                ensureCloseParen(1, ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    listener: handleThrowExpression(throw, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(true)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, true, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(true)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(true, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'true' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: true}], true, true)
          listener: handleIdentifier(true, topLevelFunctionDeclaration)
        parseMethodTypeVar(true)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(true, true, false, MemberKind.TopLevelMethod)
          parseFormalParameters(true, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralBool(return)
                          listener: handleLiteralBool(true)
                    parseArgumentOrIndexStar(true, NoTypeParamOrArg(), false)
                      listener: handleNoTypeArguments(()
                      parseArguments(true)
                        parseArgumentsRest(()
                          listener: beginArguments(()
                          allowedToShortcutParseExpression()
                          parseExpression(()
                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                parsePrimary((, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                    parseSend((, expression, ConstantPatternContext.none)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(-)
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(-)
                                      listener: handleSend(x, x)
                              listener: beginBinaryExpression(-)
                              parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                parseUnaryExpression(-, true, ConstantPatternContext.none)
                                  parsePrimary(-, expression, ConstantPatternContext.none)
                                    parseLiteralInt(-)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(-, 1)
                          listener: endArguments(1, (, ))
                      listener: handleSend((, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(try)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, try, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(try)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(try, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'try' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: try}], try, try)
          listener: handleIdentifier(try, topLevelFunctionDeclaration)
        parseMethodTypeVar(try)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(try, try, false, MemberKind.TopLevelMethod)
          parseFormalParameters(try, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(try, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'try'., Try inserting an identifier before 'try'., {lexeme: try}], try, try)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(try)
                          parseArgumentsOpt()
                            listener: handleNoArguments(try)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, try)
          parseStatement(;)
            parseStatementX(;)
              parseTryStatement(;)
                listener: beginTryStatement(try)
                parseBlock(try, BlockKind(try statement))
                  ensureBlock(try, BlockKind(try statement))
                    reportRecoverableError(try, ExpectedTryStatementBody)
                      listener: handleRecoverableError(ExpectedTryStatementBody, try, try)
                    insertBlock(try)
                      rewriter()
                      rewriter()
                  listener: beginBlock({, BlockKind(try statement))
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(0, {, }, BlockKind(try statement))
                reportRecoverableError(try, OnlyTry)
                  listener: handleRecoverableError(OnlyTry, try, try)
                listener: endTryStatement(0, try, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(})
            parseStatementX(})
              parseExpressionStatementOrDeclaration(}, null)
                parseExpressionStatementOrDeclarationAfterModifiers(}, }, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(})
                    parseExpression(})
                      parsePrecedenceExpression(}, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(}, true, ConstantPatternContext.none)
                          parsePrimary(}, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(}, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(}, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                ensureCloseParen(1, ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement((, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(4, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, typedef, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(typedef)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(typedef, topLevelFunctionDeclaration)
        parseMethodTypeVar(typedef)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(typedef, typedef, false, MemberKind.TopLevelMethod)
          parseFormalParameters(typedef, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(typedef, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(typedef)
                              parseArguments(typedef)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(typedef, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(var)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, var, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(var)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(var, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'var' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: var}], var, var)
          listener: handleIdentifier(var, topLevelFunctionDeclaration)
        parseMethodTypeVar(var)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(var, var, false, MemberKind.TopLevelMethod)
          parseFormalParameters(var, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(var, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'var'., Try inserting an identifier before 'var'., {lexeme: var}], var, var)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(var)
                          parseArgumentsOpt()
                            listener: handleNoArguments(var)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(()
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration((, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      reportRecoverableErrorWithToken((, Template(ExpectedIdentifier))
                        listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
                      rewriter()
                      listener: handleIdentifier(, localVariableDeclaration)
                    listener: beginInitializedIdentifier()
                    parseVariableInitializerOpt()
                      listener: handleNoVariableInitializer()
                    listener: endInitializedIdentifier()
                  ensureSemicolon()
                    reportRecoverableError((, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], (, ()
                    rewriter()
                  listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, x)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(x)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(-)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(-)
                              listener: handleSend(x, x)
                      listener: beginBinaryExpression(-)
                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                          parsePrimary(-, expression, ConstantPatternContext.none)
                            parseLiteralInt(-)
                              listener: handleLiteralInt(1)
                      listener: endBinaryExpression(-, 1)
                  ensureSemicolon(1)
                    reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                    rewriter()
                  listener: handleExpressionStatement(x, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ))
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction())
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(), Template(ExpectedIdentifier))
                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ')'., Try inserting an identifier before ')'., {lexeme: )}], ), ))
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, )
                    ensureSemicolon()
                      reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                      rewriter()
                    listener: handleExpressionStatement(), ;)
          reportRecoverableError(;, Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}])
            listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}], ), ))
          notEofOrType(CLOSE_CURLY_BRACKET, +)
          parseStatement())
            parseStatementX())
              parseExpressionStatementOrDeclaration(), null)
                parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, null)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement())
                    parseExpression())
                      parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(), true, ConstantPatternContext.none)
                          rewriteAndRecover(), UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(), expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral(), expression, ConstantPatternContext.none)
                              parseSend(), expression, ConstantPatternContext.none)
                                ensureIdentifier(), expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, )
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(+, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(6, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(void)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, void, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(void)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(void, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'void' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: void}], void, void)
          listener: handleIdentifier(void, topLevelFunctionDeclaration)
        parseMethodTypeVar(void)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(void, void, false, MemberKind.TopLevelMethod)
          parseFormalParameters(void, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              reportRecoverableErrorWithToken(void, Template(ExpectedIdentifier))
                                listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'void'., Try inserting an identifier before 'void'., {lexeme: void}], void, void)
                              rewriter()
                              listener: handleIdentifier(, expression)
                            listener: handleNoTypeArguments(void)
                            parseArgumentsOpt()
                              listener: handleNoArguments(void)
                            listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, void)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  listener: beginMetadataStar(void)
                  listener: endMetadataStar(0)
                  listener: handleVoidKeyword(void)
                  listener: beginVariablesDeclaration((, null, null)
                  parseVariablesDeclarationRest(void, true)
                    parseOptionallyInitializedIdentifier(void)
                      ensureIdentifier(void, localVariableDeclaration)
                        reportRecoverableErrorWithToken((, Template(ExpectedIdentifier))
                          listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '('., Try inserting an identifier before '('., {lexeme: (}], (, ()
                        rewriter()
                        listener: handleIdentifier(, localVariableDeclaration)
                      listener: beginInitializedIdentifier()
                      parseVariableInitializerOpt()
                        listener: handleNoVariableInitializer()
                      listener: endInitializedIdentifier()
                    ensureSemicolon()
                      reportRecoverableError((, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], (, ()
                      rewriter()
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, x)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(x)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(-)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(-)
                              listener: handleSend(x, x)
                      listener: beginBinaryExpression(-)
                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                          parsePrimary(-, expression, ConstantPatternContext.none)
                            parseLiteralInt(-)
                              listener: handleLiteralInt(1)
                      listener: endBinaryExpression(-, 1)
                  ensureSemicolon(1)
                    reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                    rewriter()
                  listener: handleExpressionStatement(x, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ))
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction())
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                reportRecoverableErrorWithToken(), Template(ExpectedIdentifier))
                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ')'., Try inserting an identifier before ')'., {lexeme: )}], ), ))
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments())
                              parseArgumentsOpt()
                                listener: handleNoArguments())
                              listener: handleSend(, )
                    ensureSemicolon()
                      reportRecoverableError(1, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                        listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1, 1)
                      rewriter()
                    listener: handleExpressionStatement(), ;)
          reportRecoverableError(;, Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}])
            listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token ';'., null, {lexeme: ;}], ), ))
          notEofOrType(CLOSE_CURLY_BRACKET, +)
          parseStatement())
            parseStatementX())
              parseExpressionStatementOrDeclaration(), null)
                parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, null)
                  looksLikeLocalFunction(+)
                  parseExpressionStatement())
                    parseExpression())
                      parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(), true, ConstantPatternContext.none)
                          rewriteAndRecover(), UnsupportedPrefixPlus, )
                            reportRecoverableError(+, UnsupportedPrefixPlus)
                              listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                            rewriter()
                          parsePrimary(), expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral(), expression, ConstantPatternContext.none)
                              parseSend(), expression, ConstantPatternContext.none)
                                ensureIdentifier(), expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(+)
                                listener: handleSend(, )
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseLiteralInt(+)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(+, 1)
                    ensureSemicolon(1)
                    listener: handleExpressionStatement(+, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(6, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(while)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, while, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(while)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(while, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'while' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: while}], while, while)
          listener: handleIdentifier(while, topLevelFunctionDeclaration)
        parseMethodTypeVar(while)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(while, while, false, MemberKind.TopLevelMethod)
          parseFormalParameters(while, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(while, Template(ExpectedIdentifier))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'while'., Try inserting an identifier before 'while'., {lexeme: while}], while, while)
                            rewriter()
                            listener: handleIdentifier(, expression)
                          listener: handleNoTypeArguments(while)
                          parseArgumentsOpt()
                            listener: handleNoArguments(while)
                          listener: handleSend(, )
                ensureSemicolon()
                  reportRecoverableError(return, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], return, return)
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, while)
          parseStatement(;)
            parseStatementX(;)
              parseWhileStatement(;)
                listener: beginWhileStatement(while)
                ensureParenthesizedCondition(while, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(-)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(-)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(-)
                        parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(-, true, ConstantPatternContext.none)
                            parsePrimary(-, expression, ConstantPatternContext.none)
                              parseLiteralInt(-)
                                listener: handleLiteralInt(1)
                        listener: endBinaryExpression(-, 1)
                    ensureCloseParen(1, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginWhileStatementBody(+)
                parseStatement())
                  parseStatementX())
                    parseExpressionStatementOrDeclaration(), null)
                      parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, null)
                        looksLikeLocalFunction(+)
                        parseExpressionStatement())
                          parseExpression())
                            parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(), true, ConstantPatternContext.none)
                                rewriteAndRecover(), UnsupportedPrefixPlus, )
                                  reportRecoverableError(+, UnsupportedPrefixPlus)
                                    listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                                  rewriter()
                                parsePrimary(), expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(), expression, ConstantPatternContext.none)
                                    parseSend(), expression, ConstantPatternContext.none)
                                      ensureIdentifier(), expression)
                                        listener: handleIdentifier(, expression)
                                      listener: handleNoTypeArguments(+)
                                      parseArgumentsOpt()
                                        listener: handleNoArguments(+)
                                      listener: handleSend(, )
                              listener: beginBinaryExpression(+)
                              parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                                parseUnaryExpression(+, true, ConstantPatternContext.none)
                                  parsePrimary(+, expression, ConstantPatternContext.none)
                                    parseLiteralInt(+)
                                      listener: handleLiteralInt(1)
                              listener: endBinaryExpression(+, 1)
                          ensureSemicolon(1)
                          listener: handleExpressionStatement(+, ;)
                listener: endWhileStatementBody(;)
                listener: endWhileStatement(while, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      isReservedKeyword(with)
      indicatesMethodOrField(()
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, with, true)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(with)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, true)
          reportRecoverableErrorWithToken(with, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
          listener: handleIdentifier(with, topLevelFunctionDeclaration)
        parseMethodTypeVar(with)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(with, with, false, MemberKind.TopLevelMethod)
          parseFormalParameters(with, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSend(return, expression, ConstantPatternContext.none)
                          ensureIdentifier(return, expression)
                            reportRecoverableErrorWithToken(with, Template(ExpectedIdentifierButGotKeyword))
                              listener: handleRecoverableError(Message[Template(ExpectedIdentifierButGotKeyword), 'with' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: with}], with, with)
                            listener: handleIdentifier(with, expression)
                          listener: handleNoTypeArguments(()
                          parseArgumentsOpt(with)
                            parseArguments(with)
                              parseArgumentsRest(()
                                listener: beginArguments(()
                                allowedToShortcutParseExpression()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(x, expression)
                                            listener: handleNoTypeArguments(-)
                                            parseArgumentsOpt(x)
                                              listener: handleNoArguments(-)
                                            listener: handleSend(x, x)
                                    listener: beginBinaryExpression(-)
                                    parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseLiteralInt(-)
                                            listener: handleLiteralInt(1)
                                    listener: endBinaryExpression(-, 1)
                                listener: endArguments(1, (, ))
                          listener: handleSend(with, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, yield, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(yield)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(yield, topLevelFunctionDeclaration)
        parseMethodTypeVar(yield)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(yield, yield, false, MemberKind.TopLevelMethod)
          parseFormalParameters(yield, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(+)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(yield, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(yield)
                              parseArguments(yield)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(yield, ))
                    listener: beginBinaryExpression(+)
                    parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                      parseUnaryExpression(+, true, ConstantPatternContext.none)
                        parsePrimary(+, expression, ConstantPatternContext.none)
                          parseLiteralInt(+)
                            listener: handleLiteralInt(1)
                    listener: endBinaryExpression(+, 1)
                ensureSemicolon(1)
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(int)
  listener: endCompilationUnit(69, )
