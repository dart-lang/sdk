parseUnit(interface)
  skipErrorTokens(interface)
  listener: beginCompilationUnit(interface)
  syntheticPreviousToken(interface)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(interface)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, null, null, interface, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, interface, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(interface)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(interface, null, null, null, null, null, interface, null, null, null, A)
        parseClass(A, interface, class, A)
          parseClassHeaderOpt(A, interface, class)
            parseClassExtendsOpt(A)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(interface, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(interface, })
  listener: endTopLevelDeclaration(abstract)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(abstract)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, null, null, null, null, interface, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(abstract, null, null, null, null, interface, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(abstract)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(B, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(abstract, abstract, null, null, null, null, interface, null, null, null, B)
        parseClass(B, abstract, class, B)
          parseClassHeaderOpt(B, abstract, class)
            parseClassExtendsOpt(B)
              listener: handleNoType(B)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(B)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(abstract, class, null)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, B)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(abstract, })
  listener: endTopLevelDeclaration(mixin)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(mixin)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, mixin, null, null, null, null, null, Instance of 'DirectiveContext')
      parseMixin(null, null, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          listener: handleIdentifier(M, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginMixinDeclaration(null, null, mixin, M)
        parseMixinHeaderOpt(M, mixin)
          parseMixinOnOpt(M)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(M)
            listener: handleImplements(null, 0)
          listener: handleMixinHeader(mixin)
        parseClassOrMixinOrExtensionBody(M, DeclarationKind.Mixin, M)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(mixin, })
  listener: endTopLevelDeclaration(interface)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(interface)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, null, null, null, null, interface, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, interface, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(interface)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(=)
        listener: beginNamedMixinApplication(interface, null, null, null, null, null, interface, null, null, null, C)
        parseNamedMixinApplication(C, interface, class)
          listener: handleIdentifier(Object, typeReference)
          listener: handleNoTypeArguments(with)
          listener: handleType(Object, null)
          parseMixinApplicationRest(Object)
            parseTypeList(with)
              listener: beginTypeList(M)
              listener: handleIdentifier(M, typeReference)
              listener: handleNoTypeArguments(;)
              listener: handleType(M, null)
              listener: endTypeList(1)
            listener: handleNamedMixinApplicationWithClause(with)
          ensureSemicolon(M)
          listener: endNamedMixinApplication(interface, class, =, null, ;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(interface)
  listener: endCompilationUnit(4, )
