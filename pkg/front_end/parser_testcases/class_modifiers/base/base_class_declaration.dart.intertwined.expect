parseUnit(base)
  skipErrorTokens(base)
  listener: beginCompilationUnit(base)
  syntheticPreviousToken(base)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(base)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(base, , class, null, null, base, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(base, null, null, null, base, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(base)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(base, null, null, null, base, null, null, null, null, A)
        parseClass(A, base, class, A)
          parseClassHeaderOpt(A, base, class)
            parseClassExtendsOpt(A, DeclarationHeaderKind.Class)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(base, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(base, })
  listener: endTopLevelDeclaration(abstract)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(abstract)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(abstract, }, class, null, null, base, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(abstract, abstract, null, null, base, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(abstract)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(B, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(abstract, abstract, null, null, base, null, null, null, null, B)
        parseClass(B, abstract, class, B)
          parseClassHeaderOpt(B, abstract, class)
            parseClassExtendsOpt(B, DeclarationHeaderKind.Class)
              listener: handleNoType(B)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(B)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(B)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(abstract, class, null)
          parseClassOrMixinOrExtensionBody(B, DeclarationKind.Class, B)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(abstract, })
  listener: endTopLevelDeclaration(base)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(base)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(base, }, mixin, null, null, base, null, DirectiveContext(DirectiveState.Declarations))
      parseMixin(base, null, base, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          listener: handleIdentifier(M, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginMixinDeclaration(base, null, base, mixin, M)
        parseMixinHeaderOpt(M, mixin)
          parseMixinOnOpt(M)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(M)
            listener: handleImplements(null, 0)
          listener: handleMixinHeader(mixin)
        parseClassOrMixinOrExtensionBody(M, DeclarationKind.Mixin, M)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(base, })
  listener: endTopLevelDeclaration(base)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(base)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(base, }, class, null, null, base, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(base, null, null, null, base, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(base)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables(=)
        listener: beginNamedMixinApplication(base, null, null, null, base, null, null, null, null, C)
        parseNamedMixinApplication(C, base, class)
          listener: handleIdentifier(Object, typeReference)
          listener: handleNoTypeArguments(with)
          listener: handleType(Object, null)
          parseMixinApplicationRest(Object)
            parseTypeList(with)
              listener: beginTypeList(M)
              listener: handleIdentifier(M, typeReference)
              listener: handleNoTypeArguments(;)
              listener: handleType(M, null)
              listener: endTypeList(1)
            listener: handleNamedMixinApplicationWithClause(with)
          ensureSemicolon(M)
          listener: endNamedMixinApplication(base, class, =, null, ;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(base)
  listener: endCompilationUnit(4, )
