parseUnit(sealed)
  skipErrorTokens(sealed)
  listener: beginCompilationUnit(sealed)
  syntheticPreviousToken(sealed)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(sealed)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, sealed, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, sealed, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(sealed)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(Class, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(sealed, null, null, null, sealed, null, null, null, null, null, Class)
        parseClass(Class, sealed, class, Class)
          parseClassHeaderOpt(Class, sealed, class)
            parseClassExtendsOpt(Class)
              listener: handleNoType(Class)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(Class)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(Class)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(sealed, class, null)
          parseClassOrMixinOrExtensionBody(Class, DeclarationKind.Class, Class)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(sealed, })
  listener: endTopLevelDeclaration(mixin)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(mixin)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, mixin, null, null, null, null, null, Instance of 'DirectiveContext')
      parseMixin(null, null, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          listener: handleIdentifier(M, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginMixinDeclaration(null, null, mixin, M)
        parseMixinHeaderOpt(M, mixin)
          parseMixinOnOpt(M)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(M)
            listener: handleImplements(null, 0)
          listener: handleMixinHeader(mixin)
        parseClassOrMixinOrExtensionBody(M, DeclarationKind.Mixin, M)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(mixin, })
  listener: endTopLevelDeclaration(sealed)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(sealed)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(}, class, null, null, sealed, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, sealed, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(sealed)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables(=)
        listener: beginNamedMixinApplication(sealed, null, null, null, sealed, null, null, null, null, null, A)
        parseNamedMixinApplication(A, sealed, class)
          listener: handleIdentifier(Object, typeReference)
          listener: handleNoTypeArguments(with)
          listener: handleType(Object, null)
          parseMixinApplicationRest(Object)
            parseTypeList(with)
              listener: beginTypeList(M)
              listener: handleIdentifier(M, typeReference)
              listener: handleNoTypeArguments(;)
              listener: handleType(M, null)
              listener: endTypeList(1)
            listener: handleNamedMixinApplicationWithClause(with)
          ensureSemicolon(M)
          listener: endNamedMixinApplication(sealed, class, =, null, ;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(sealed)
  listener: endCompilationUnit(3, )
