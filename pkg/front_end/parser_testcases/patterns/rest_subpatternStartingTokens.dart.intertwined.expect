parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , Instance of 'VoidType', null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(x)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, switch)
          parseStatement({)
            parseStatementX({)
              parseSwitchStatement({)
                listener: beginSwitchStatement(switch)
                ensureParenthesizedCondition(switch, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      looksLikeOuterPatternEquals(()
                        skipOuterPattern(()
                          skipObjectPatternRest(x)
                      parsePrecedenceExpression((, 1, true)
                        parseUnaryExpression((, true)
                          parsePrimary((, expression)
                            parseSendOrFunctionLiteral((, expression)
                              parseSend((, expression)
                                isNextIdentifier(()
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments())
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments())
                                listener: handleSend(x, ))
                    ensureCloseParen(x, ()
                    listener: handleParenthesizedCondition((, null, null)
                parseSwitchBlock())
                  ensureBlock(), null, switch statement)
                  listener: beginSwitchBlock({)
                  notEofOrValue(}, case)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parsePrecedenceExpression(==, 12, false)
                              parseUnaryExpression(==, false)
                                parsePrimary(==, expression)
                                  parseLiteralNull(==)
                                    listener: handleLiteralNull(null)
                            listener: handleRelationalPattern(==)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parsePrecedenceExpression(!=, 12, false)
                              parseUnaryExpression(!=, false)
                                parsePrimary(!=, expression)
                                  parseLiteralNull(!=)
                                    listener: handleLiteralNull(null)
                            listener: handleRelationalPattern(!=)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parsePrecedenceExpression(<, 12, false)
                              parseUnaryExpression(<, false)
                                parsePrimary(<, expression)
                                  parseLiteralInt(<)
                                    listener: handleLiteralInt(0)
                            listener: handleRelationalPattern(<)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parsePrecedenceExpression(>, 12, false)
                              parseUnaryExpression(>, false)
                                parsePrimary(>, expression)
                                  parseLiteralInt(>)
                                    listener: handleLiteralInt(0)
                            listener: handleRelationalPattern(>)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parsePrecedenceExpression(<=, 12, false)
                              parseUnaryExpression(<=, false)
                                parsePrimary(<=, expression)
                                  parseLiteralInt(<=)
                                    listener: handleLiteralInt(0)
                            listener: handleRelationalPattern(<=)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parsePrecedenceExpression(>=, 12, false)
                              parseUnaryExpression(>=, false)
                                parsePrimary(>=, expression)
                                  parseLiteralInt(>=)
                                    listener: handleLiteralInt(0)
                            listener: handleRelationalPattern(>=)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(null)
                            parsePrecedenceExpression(..., 17, false)
                              parseUnaryExpression(..., false)
                                parsePrimary(..., expression)
                                  parseLiteralInt(...)
                                    listener: handleLiteralInt(0)
                            listener: endConstantPattern(null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(null)
                            parsePrecedenceExpression(..., 17, false)
                              parseUnaryExpression(..., false)
                                parsePrimary(..., expression)
                                  parseLiteralDouble(...)
                                    listener: handleLiteralDouble(0.0)
                            listener: endConstantPattern(null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(null)
                            parsePrecedenceExpression(..., 17, false)
                              parseUnaryExpression(..., false)
                                parsePrimary(..., expression)
                                  parseLiteralInt(...)
                                    listener: handleLiteralInt(0x0)
                            listener: endConstantPattern(null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(null)
                            parsePrecedenceExpression(..., 17, false)
                              parseUnaryExpression(..., false)
                                parsePrimary(..., expression)
                                  parseLiteralNull(...)
                                    listener: handleLiteralNull(null)
                            listener: endConstantPattern(null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(null)
                            parsePrecedenceExpression(..., 17, false)
                              parseUnaryExpression(..., false)
                                parsePrimary(..., expression)
                                  parseLiteralBool(...)
                                    listener: handleLiteralBool(false)
                            listener: endConstantPattern(null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(null)
                            parsePrecedenceExpression(..., 17, false)
                              parseUnaryExpression(..., false)
                                parsePrimary(..., expression)
                                  parseLiteralBool(...)
                                    listener: handleLiteralBool(true)
                            listener: endConstantPattern(null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(null)
                            parsePrecedenceExpression(..., 17, false)
                              parseUnaryExpression(..., false)
                                parsePrimary(..., expression)
                                  parseLiteralString(...)
                                    parseSingleLiteralString(...)
                                      listener: beginLiteralString('foo')
                                      listener: endLiteralString(0, ])
                            listener: endConstantPattern(null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(null)
                            parsePrecedenceExpression(..., 17, false)
                              parseUnaryExpression(..., false)
                                parsePrimary(..., expression)
                                  parseSendOrFunctionLiteral(..., expression)
                                    parseSend(..., expression)
                                      isNextIdentifier(...)
                                      ensureIdentifier(..., expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments(])
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments(])
                                      listener: handleSend(x, ])
                            listener: endConstantPattern(null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginConstantPattern(const)
                            parsePrecedenceExpression(const, 17, false)
                              parseUnaryExpression(const, false)
                                parsePrimary(const, expression)
                                  parseSendOrFunctionLiteral(const, expression)
                                    looksLikeFunctionBody(])
                                    parseSend(const, expression)
                                      isNextIdentifier(const)
                                      ensureIdentifier(const, expression)
                                        listener: handleIdentifier(List, expression)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(List)
                                        parseArguments(List)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            listener: endArguments(0, (, ))
                                      listener: handleSend(List, ])
                            listener: endConstantPattern(const)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parseVariablePattern(..., PatternContext.matching, typeInfo: Instance of 'NoType')
                              listener: handleNoType(var)
                              listener: handleVariablePattern(var, x, false)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parseVariablePattern(..., PatternContext.matching, typeInfo: Instance of 'NoType')
                              listener: handleNoType(final)
                              listener: handleVariablePattern(final, x, false)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parseVariablePattern(..., PatternContext.matching, typeInfo: Instance of 'SimpleType')
                              listener: handleIdentifier(List, typeReference)
                              listener: handleNoTypeArguments(x)
                              listener: handleType(List, null)
                              listener: handleVariablePattern(null, x, false)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parseVariablePattern(..., PatternContext.matching, typeInfo: Instance of 'NoType')
                              listener: handleNoType(...)
                              listener: handleVariablePattern(null, _, false)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            parseParenthesizedPatternOrRecordPattern(..., PatternContext.matching)
                              parsePattern((, PatternContext.matching, precedence: 1)
                                parsePrimaryPattern((, PatternContext.matching)
                                  parseVariablePattern((, PatternContext.matching, typeInfo: Instance of 'NoType')
                                    listener: handleNoType(()
                                    listener: handleVariablePattern(null, _, false)
                              ensureCloseParen(_, ()
                              listener: handleParenthesizedPattern(()
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: handleNoTypeArguments([)
                            parseListPatternSuffix(..., PatternContext.matching)
                              parsePattern([, PatternContext.matching, precedence: 1)
                                parsePrimaryPattern([, PatternContext.matching)
                                  parseVariablePattern([, PatternContext.matching, typeInfo: Instance of 'NoType')
                                    listener: handleNoType([)
                                    listener: handleVariablePattern(null, _, false)
                              listener: handleListPattern(1, [, ])
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: handleNoTypeArguments([])
                            parseListPatternSuffix(..., PatternContext.matching)
                              rewriteSquareBrackets(...)
                                link([, ])
                                rewriter()
                              listener: handleListPattern(0, [, ])
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: beginTypeArguments(<)
                            listener: handleIdentifier(int, typeReference)
                            listener: handleNoTypeArguments(>)
                            listener: handleType(int, null)
                            listener: endTypeArguments(1, <, >)
                            parseListPatternSuffix(>, PatternContext.matching)
                              rewriteSquareBrackets(>)
                                link([, ])
                                rewriter()
                              listener: handleListPattern(0, [, ])
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: handleNoTypeArguments({)
                            parseMapPatternSuffix(..., PatternContext.matching)
                              listener: handleMapPattern(0, {, })
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    parsePrimaryPattern(case, PatternContext.matching)
                      listener: handleNoTypeArguments([)
                      parseListPatternSuffix(case, PatternContext.matching)
                        parsePattern(..., PatternContext.matching, precedence: 1)
                          parsePrimaryPattern(..., PatternContext.matching)
                            listener: handleNoTypeArguments(()
                            parseObjectPatternRest(List, PatternContext.matching)
                              listener: handleObjectPatternFields(0, (, ))
                            listener: handleObjectPattern(List, null, null)
                        listener: handleRestPattern(..., true)
                        listener: handleListPattern(1, [, ])
                  ensureColon(])
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(break)
                  parseStatementsInSwitchCase(:, break, case, 0, 25, null, null)
                    listener: beginSwitchCase(0, 25, case)
                    parseStatement(:)
                      parseStatementX(:)
                        parseBreakStatement(:)
                          isBreakAllowed()
                          ensureSemicolon(break)
                          listener: handleBreakStatement(false, break, ;)
                    peekPastLabels(})
                    listener: endSwitchCase(0, 25, null, null, 1, case, })
                  notEofOrValue(}, })
                  listener: endSwitchBlock(1, {, })
                listener: endSwitchStatement(switch, })
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
