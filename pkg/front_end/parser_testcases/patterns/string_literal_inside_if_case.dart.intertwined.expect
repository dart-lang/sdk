parseUnit(test)
  skipErrorTokens(test)
  listener: beginCompilationUnit(test)
  syntheticPreviousToken(test)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(test)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(test)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, test, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test, topLevelFunctionDeclaration)
        parseMethodTypeVar(test)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test, test, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(dynamic)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(dynamic, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(dynamic, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(dynamic, null)
                ensureIdentifier(dynamic, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: true)
                  parseExpressionInParenthesisRest((, allowCase: true)
                    parseExpression(()
                      looksLikeOuterPatternEquals(()
                        skipOuterPattern(()
                          skipObjectPatternRest(x)
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(case)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(case)
                                listener: handleSend(x, x)
                    parsePattern(case, PatternContext.matching, precedence: 1)
                      listener: beginPattern(case)
                      parsePrimaryPattern(case, PatternContext.matching)
                        listener: beginConstantPattern(null)
                        parsePrecedenceExpression(case, 7, false, ConstantPatternContext.implicit)
                          parseUnaryExpression(case, false, ConstantPatternContext.implicit)
                            parsePrimary(case, expression, ConstantPatternContext.implicit)
                              parseLiteralString(case)
                                parseSingleLiteralString(case)
                                  listener: beginLiteralString("x")
                                  listener: endLiteralString(0, ))
                        listener: endConstantPattern(null)
                      listener: endPattern("x")
                    ensureCloseParen("x", ()
                    listener: handleParenthesizedCondition((, case, null)
                listener: beginThenStatement({)
                parseStatement())
                  parseStatementX())
                    parseBlock(), BlockKind(statement))
                      ensureBlock(), BlockKind(statement))
                      listener: beginBlock({, BlockKind(statement))
                      notEofOrType(CLOSE_CURLY_BRACKET, })
                      listener: endBlock(0, {, }, BlockKind(statement))
                listener: endThenStatement({, })
                listener: endIfStatement(if, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(test)
  listener: endCompilationUnit(1, )
