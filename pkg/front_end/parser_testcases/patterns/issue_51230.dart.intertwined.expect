parseUnit(method1)
  skipErrorTokens(method1)
  listener: beginCompilationUnit(method1)
  syntheticPreviousToken(method1)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(method1)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(method1)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , Instance of 'NoType', null, method1, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(method1, topLevelFunctionDeclaration)
        parseMethodTypeVar(method1)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(method1, method1, false, MemberKind.TopLevelMethod)
          parseFormalParameters(method1, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(o)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(o, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(o, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, o, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              looksLikeOuterPatternEquals(=>)
                skipOuterPattern(=>)
              parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                parseUnaryExpression(=>, true, ConstantPatternContext.none)
                  parsePrimary(=>, expression, ConstantPatternContext.none)
                    inPlainSync()
                    parseSwitchExpression(=>)
                      listener: beginSwitchExpression(switch)
                      ensureParenthesizedCondition(switch, allowCase: false)
                        parseExpressionInParenthesisRest((, allowCase: false)
                          parseExpression(()
                            looksLikeOuterPatternEquals(()
                              skipOuterPattern(()
                                skipObjectPatternRest(o)
                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                parsePrimary((, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                    parseSend((, expression, ConstantPatternContext.none)
                                      isNextIdentifier(()
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(o, expression)
                                      listener: handleNoTypeArguments())
                                      parseArgumentsOpt(o)
                                        listener: handleNoArguments())
                                      listener: handleSend(o, ))
                          ensureCloseParen(o, ()
                          listener: handleParenthesizedCondition((, null, null)
                      ensureBlock(), null, switch expression)
                      listener: beginSwitchExpressionBlock({)
                      listener: beginSwitchExpressionCase()
                      parsePattern({, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern({, PatternContext.matching)
                          parseVariablePattern({, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleIdentifier(int, typeReference)
                            listener: handleNoTypeArguments(a)
                            listener: handleType(int, null)
                            listener: handleDeclaredVariablePattern(final, a, false)
                      listener: handleSwitchExpressionCasePattern(a)
                      ensureFunctionArrow(a)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleIdentifier(String, typeReference)
                            listener: handleNoTypeArguments(a)
                            listener: handleType(String, null)
                            listener: handleDeclaredVariablePattern(final, a, false)
                      listener: handleSwitchExpressionCasePattern(a)
                      ensureFunctionArrow(a)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            parseRecordType((, final, false)
                              listener: beginRecordType(()
                              listener: endRecordType((, null, 0, false)
                            listener: handleDeclaredVariablePattern(final, a, false)
                      listener: handleSwitchExpressionCasePattern(a)
                      ensureFunctionArrow(a)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            parseRecordType((, final, false)
                              listener: beginRecordType(()
                              parseRecordTypeField((, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(()
                                  listener: beginMetadataStar(int)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(int, typeReference)
                                listener: handleNoTypeArguments(,)
                                listener: handleType(int, null)
                                listener: handleNoName(,)
                                listener: endRecordTypeEntry()
                              parseRecordTypeField(,, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(,)
                                  listener: beginMetadataStar(String)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(String, typeReference)
                                listener: handleNoTypeArguments())
                                listener: handleType(String, null)
                                listener: handleNoName())
                                listener: endRecordTypeEntry()
                              listener: endRecordType((, null, 2, false)
                            listener: handleDeclaredVariablePattern(final, a, false)
                      listener: handleSwitchExpressionCasePattern(a)
                      ensureFunctionArrow(a)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleIdentifier(int, typeReference)
                            listener: handleNoTypeArguments(a)
                            listener: handleType(int, null)
                            listener: handleDeclaredVariablePattern(final, a, false)
                        listener: handleNullCheckPattern(?)
                      listener: handleSwitchExpressionCasePattern(?)
                      ensureFunctionArrow(?)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleIdentifier(String, typeReference)
                            listener: handleNoTypeArguments(a)
                            listener: handleType(String, null)
                            listener: handleDeclaredVariablePattern(final, a, false)
                        listener: handleNullCheckPattern(?)
                      listener: handleSwitchExpressionCasePattern(?)
                      ensureFunctionArrow(?)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            parseRecordType((, final, false)
                              listener: beginRecordType(()
                              listener: endRecordType((, null, 0, false)
                            listener: handleDeclaredVariablePattern(final, a, false)
                        listener: handleNullCheckPattern(?)
                      listener: handleSwitchExpressionCasePattern(?)
                      ensureFunctionArrow(?)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            parseRecordType((, final, false)
                              listener: beginRecordType(()
                              parseRecordTypeField((, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(()
                                  listener: beginMetadataStar(int)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(int, typeReference)
                                listener: handleNoTypeArguments(,)
                                listener: handleType(int, null)
                                listener: handleNoName(,)
                                listener: endRecordTypeEntry()
                              parseRecordTypeField(,, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(,)
                                  listener: beginMetadataStar(String)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(String, typeReference)
                                listener: handleNoTypeArguments())
                                listener: handleType(String, null)
                                listener: handleNoName())
                                listener: endRecordTypeEntry()
                              listener: endRecordType((, null, 2, false)
                            listener: handleDeclaredVariablePattern(final, a, false)
                        listener: handleNullCheckPattern(?)
                      listener: handleSwitchExpressionCasePattern(?)
                      ensureFunctionArrow(?)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  parseRecordType((, final, false)
                                    listener: beginRecordType(()
                                    listener: endRecordType((, null, 0, false)
                                  listener: handleDeclaredVariablePattern(final, a, false)
                            listener: handlePatternField(:)
                            ensureCloseParen(a, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  parseRecordType((, final, false)
                                    listener: beginRecordType(()
                                    parseRecordTypeField((, identifierIsOptional: true)
                                      listener: beginRecordTypeEntry()
                                      parseMetadataStar(()
                                        listener: beginMetadataStar(int)
                                        listener: endMetadataStar(0)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(,)
                                      listener: handleType(int, null)
                                      listener: handleNoName(,)
                                      listener: endRecordTypeEntry()
                                    parseRecordTypeField(,, identifierIsOptional: true)
                                      listener: beginRecordTypeEntry()
                                      parseMetadataStar(,)
                                        listener: beginMetadataStar(String)
                                        listener: endMetadataStar(0)
                                      listener: handleIdentifier(String, typeReference)
                                      listener: handleNoTypeArguments())
                                      listener: handleType(String, null)
                                      listener: handleNoName())
                                      listener: endRecordTypeEntry()
                                    listener: endRecordType((, null, 2, false)
                                  listener: handleDeclaredVariablePattern(final, a, false)
                            listener: handlePatternField(:)
                            ensureCloseParen(a, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  listener: handleIdentifier(int, typeReference)
                                  listener: handleNoTypeArguments(a)
                                  listener: handleType(int, null)
                                  listener: handleDeclaredVariablePattern(final, a, false)
                              listener: handleNullCheckPattern(?)
                            listener: handlePatternField(:)
                            ensureCloseParen(?, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  listener: handleIdentifier(String, typeReference)
                                  listener: handleNoTypeArguments(a)
                                  listener: handleType(String, null)
                                  listener: handleDeclaredVariablePattern(final, a, false)
                              listener: handleNullCheckPattern(?)
                            listener: handlePatternField(:)
                            ensureCloseParen(?, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  parseRecordType((, final, false)
                                    listener: beginRecordType(()
                                    listener: endRecordType((, null, 0, false)
                                  listener: handleDeclaredVariablePattern(final, a, false)
                              listener: handleNullCheckPattern(?)
                            listener: handlePatternField(:)
                            ensureCloseParen(?, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  parseRecordType((, final, false)
                                    listener: beginRecordType(()
                                    parseRecordTypeField((, identifierIsOptional: true)
                                      listener: beginRecordTypeEntry()
                                      parseMetadataStar(()
                                        listener: beginMetadataStar(int)
                                        listener: endMetadataStar(0)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(,)
                                      listener: handleType(int, null)
                                      listener: handleNoName(,)
                                      listener: endRecordTypeEntry()
                                    parseRecordTypeField(,, identifierIsOptional: true)
                                      listener: beginRecordTypeEntry()
                                      parseMetadataStar(,)
                                        listener: beginMetadataStar(String)
                                        listener: endMetadataStar(0)
                                      listener: handleIdentifier(String, typeReference)
                                      listener: handleNoTypeArguments())
                                      listener: handleType(String, null)
                                      listener: handleNoName())
                                      listener: endRecordTypeEntry()
                                    listener: endRecordType((, null, 2, false)
                                  listener: handleDeclaredVariablePattern(final, a, false)
                              listener: handleNullCheckPattern(?)
                            listener: handlePatternField(:)
                            ensureCloseParen(?, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleNoType(_)
                            listener: handleWildcardPattern(null, _)
                      listener: handleSwitchExpressionCasePattern(_)
                      ensureFunctionArrow(_)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, '')
                      listener: endSwitchExpressionBlock(15, {, })
                      listener: endSwitchExpression(switch, })
            ensureSemicolon(})
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
        listener: endTopLevelMethod(method1, null, ;)
  listener: endTopLevelDeclaration(method2)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(method2)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(method2)
      isReservedKeyword(()
      parseTopLevelMethod(;, null, null, ;, Instance of 'NoType', null, method2, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleNoType(;)
        ensureIdentifierPotentiallyRecovered(;, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(method2, topLevelFunctionDeclaration)
        parseMethodTypeVar(method2)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(method2, method2, false, MemberKind.TopLevelMethod)
          parseFormalParameters(method2, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(o)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(o, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(o, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, o, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              looksLikeOuterPatternEquals(=>)
                skipOuterPattern(=>)
              parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                parseUnaryExpression(=>, true, ConstantPatternContext.none)
                  parsePrimary(=>, expression, ConstantPatternContext.none)
                    inPlainSync()
                    parseSwitchExpression(=>)
                      listener: beginSwitchExpression(switch)
                      ensureParenthesizedCondition(switch, allowCase: false)
                        parseExpressionInParenthesisRest((, allowCase: false)
                          parseExpression(()
                            looksLikeOuterPatternEquals(()
                              skipOuterPattern(()
                                skipObjectPatternRest(o)
                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                parsePrimary((, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                    parseSend((, expression, ConstantPatternContext.none)
                                      isNextIdentifier(()
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(o, expression)
                                      listener: handleNoTypeArguments())
                                      parseArgumentsOpt(o)
                                        listener: handleNoArguments())
                                      listener: handleSend(o, ))
                          ensureCloseParen(o, ()
                          listener: handleParenthesizedCondition((, null, null)
                      ensureBlock(), null, switch expression)
                      listener: beginSwitchExpressionBlock({)
                      listener: beginSwitchExpressionCase()
                      parsePattern({, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern({, PatternContext.matching)
                          parseVariablePattern({, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleIdentifier(int, typeReference)
                            listener: handleNoTypeArguments(async)
                            listener: handleType(int, null)
                            listener: handleDeclaredVariablePattern(final, async, false)
                      listener: handleSwitchExpressionCasePattern(async)
                      ensureFunctionArrow(async)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleIdentifier(String, typeReference)
                            listener: handleNoTypeArguments(async)
                            listener: handleType(String, null)
                            listener: handleDeclaredVariablePattern(final, async, false)
                      listener: handleSwitchExpressionCasePattern(async)
                      ensureFunctionArrow(async)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            parseRecordType((, final, false)
                              listener: beginRecordType(()
                              listener: endRecordType((, null, 0, false)
                            listener: handleDeclaredVariablePattern(final, async, false)
                      listener: handleSwitchExpressionCasePattern(async)
                      ensureFunctionArrow(async)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            parseRecordType((, final, false)
                              listener: beginRecordType(()
                              parseRecordTypeField((, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(()
                                  listener: beginMetadataStar(int)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(int, typeReference)
                                listener: handleNoTypeArguments(,)
                                listener: handleType(int, null)
                                listener: handleNoName(,)
                                listener: endRecordTypeEntry()
                              parseRecordTypeField(,, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(,)
                                  listener: beginMetadataStar(String)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(String, typeReference)
                                listener: handleNoTypeArguments())
                                listener: handleType(String, null)
                                listener: handleNoName())
                                listener: endRecordTypeEntry()
                              listener: endRecordType((, null, 2, false)
                            listener: handleDeclaredVariablePattern(final, async, false)
                      listener: handleSwitchExpressionCasePattern(async)
                      ensureFunctionArrow(async)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleIdentifier(int, typeReference)
                            listener: handleNoTypeArguments(async)
                            listener: handleType(int, null)
                            listener: handleDeclaredVariablePattern(final, async, false)
                        listener: handleNullCheckPattern(?)
                      listener: handleSwitchExpressionCasePattern(?)
                      ensureFunctionArrow(?)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleIdentifier(String, typeReference)
                            listener: handleNoTypeArguments(async)
                            listener: handleType(String, null)
                            listener: handleDeclaredVariablePattern(final, async, false)
                        listener: handleNullCheckPattern(?)
                      listener: handleSwitchExpressionCasePattern(?)
                      ensureFunctionArrow(?)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            parseRecordType((, final, false)
                              listener: beginRecordType(()
                              listener: endRecordType((, null, 0, false)
                            listener: handleDeclaredVariablePattern(final, async, false)
                        listener: handleNullCheckPattern(?)
                      listener: handleSwitchExpressionCasePattern(?)
                      ensureFunctionArrow(?)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            parseRecordType((, final, false)
                              listener: beginRecordType(()
                              parseRecordTypeField((, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(()
                                  listener: beginMetadataStar(int)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(int, typeReference)
                                listener: handleNoTypeArguments(,)
                                listener: handleType(int, null)
                                listener: handleNoName(,)
                                listener: endRecordTypeEntry()
                              parseRecordTypeField(,, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(,)
                                  listener: beginMetadataStar(String)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(String, typeReference)
                                listener: handleNoTypeArguments())
                                listener: handleType(String, null)
                                listener: handleNoName())
                                listener: endRecordTypeEntry()
                              listener: endRecordType((, null, 2, false)
                            listener: handleDeclaredVariablePattern(final, async, false)
                        listener: handleNullCheckPattern(?)
                      listener: handleSwitchExpressionCasePattern(?)
                      ensureFunctionArrow(?)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  parseRecordType((, final, false)
                                    listener: beginRecordType(()
                                    listener: endRecordType((, null, 0, false)
                                  listener: handleDeclaredVariablePattern(final, async, false)
                            listener: handlePatternField(:)
                            ensureCloseParen(async, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  parseRecordType((, final, false)
                                    listener: beginRecordType(()
                                    parseRecordTypeField((, identifierIsOptional: true)
                                      listener: beginRecordTypeEntry()
                                      parseMetadataStar(()
                                        listener: beginMetadataStar(int)
                                        listener: endMetadataStar(0)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(,)
                                      listener: handleType(int, null)
                                      listener: handleNoName(,)
                                      listener: endRecordTypeEntry()
                                    parseRecordTypeField(,, identifierIsOptional: true)
                                      listener: beginRecordTypeEntry()
                                      parseMetadataStar(,)
                                        listener: beginMetadataStar(String)
                                        listener: endMetadataStar(0)
                                      listener: handleIdentifier(String, typeReference)
                                      listener: handleNoTypeArguments())
                                      listener: handleType(String, null)
                                      listener: handleNoName())
                                      listener: endRecordTypeEntry()
                                    listener: endRecordType((, null, 2, false)
                                  listener: handleDeclaredVariablePattern(final, async, false)
                            listener: handlePatternField(:)
                            ensureCloseParen(async, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  listener: handleIdentifier(int, typeReference)
                                  listener: handleNoTypeArguments(async)
                                  listener: handleType(int, null)
                                  listener: handleDeclaredVariablePattern(final, async, false)
                              listener: handleNullCheckPattern(?)
                            listener: handlePatternField(:)
                            ensureCloseParen(?, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  listener: handleIdentifier(String, typeReference)
                                  listener: handleNoTypeArguments(async)
                                  listener: handleType(String, null)
                                  listener: handleDeclaredVariablePattern(final, async, false)
                              listener: handleNullCheckPattern(?)
                            listener: handlePatternField(:)
                            ensureCloseParen(?, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  parseRecordType((, final, false)
                                    listener: beginRecordType(()
                                    listener: endRecordType((, null, 0, false)
                                  listener: handleDeclaredVariablePattern(final, async, false)
                              listener: handleNullCheckPattern(?)
                            listener: handlePatternField(:)
                            ensureCloseParen(?, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseParenthesizedPatternOrRecordPattern(,, PatternContext.matching)
                            listener: handleNoName(()
                            parsePattern(:, PatternContext.matching, precedence: 1)
                              parsePrimaryPattern(:, PatternContext.matching)
                                parseVariablePattern(:, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  parseRecordType((, final, false)
                                    listener: beginRecordType(()
                                    parseRecordTypeField((, identifierIsOptional: true)
                                      listener: beginRecordTypeEntry()
                                      parseMetadataStar(()
                                        listener: beginMetadataStar(int)
                                        listener: endMetadataStar(0)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(,)
                                      listener: handleType(int, null)
                                      listener: handleNoName(,)
                                      listener: endRecordTypeEntry()
                                    parseRecordTypeField(,, identifierIsOptional: true)
                                      listener: beginRecordTypeEntry()
                                      parseMetadataStar(,)
                                        listener: beginMetadataStar(String)
                                        listener: endMetadataStar(0)
                                      listener: handleIdentifier(String, typeReference)
                                      listener: handleNoTypeArguments())
                                      listener: handleType(String, null)
                                      listener: handleNoName())
                                      listener: endRecordTypeEntry()
                                    listener: endRecordType((, null, 2, false)
                                  listener: handleDeclaredVariablePattern(final, async, false)
                              listener: handleNullCheckPattern(?)
                            listener: handlePatternField(:)
                            ensureCloseParen(?, ()
                            listener: handleRecordPattern((, 1)
                      listener: handleSwitchExpressionCasePattern())
                      ensureFunctionArrow())
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('working')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, 'working')
                      listener: beginSwitchExpressionCase()
                      parsePattern(,, PatternContext.matching, precedence: 1)
                        parsePrimaryPattern(,, PatternContext.matching)
                          parseVariablePattern(,, PatternContext.matching, typeInfo: Instance of 'NoType')
                            listener: handleNoType(_)
                            listener: handleWildcardPattern(null, _)
                      listener: handleSwitchExpressionCasePattern(_)
                      ensureFunctionArrow(_)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralString(=>)
                                parseSingleLiteralString(=>)
                                  listener: beginLiteralString('')
                                  listener: endLiteralString(0, ,)
                      listener: endSwitchExpressionCase(null, =>, '')
                      listener: endSwitchExpressionBlock(15, {, })
                      listener: endSwitchExpression(switch, })
            ensureSemicolon(})
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
        listener: endTopLevelMethod(method2, null, ;)
  listener: endTopLevelDeclaration(void)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(;, null, null, ;, Instance of 'VoidType', null, foo, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, ()
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement({)
                    parseExpression({)
                      looksLikeOuterPatternEquals({)
                        skipOuterPattern({)
                      parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression({, true, ConstantPatternContext.none)
                          parsePrimary({, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral({, ConstantPatternContext.none)
                              listener: handleNoTypeVariables(()
                              parseFunctionExpression({)
                                listener: beginFunctionExpression(()
                                parseFormalParametersRequiredOpt({, MemberKind.Local)
                                  parseFormalParametersRest((, MemberKind.Local)
                                    listener: beginFormalParameters((, MemberKind.Local)
                                    listener: endFormalParameters(0, (, ), MemberKind.Local)
                                parseAsyncOptBody(), true, false)
                                  parseAsyncModifierOpt())
                                    listener: handleAsyncModifier(async, null)
                                    inPlainSync()
                                  parseFunctionBody(async, true, false)
                                    parseExpressionFunctionBody(=>, true)
                                      parseExpression(=>)
                                        looksLikeOuterPatternEquals(=>)
                                          skipOuterPattern(=>)
                                            skipObjectPatternRest(print)
                                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                            parsePrimary(=>, expression, ConstantPatternContext.none)
                                              parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                looksLikeFunctionBody(;)
                                                parseSend(=>, expression, ConstantPatternContext.none)
                                                  isNextIdentifier(=>)
                                                  ensureIdentifier(=>, expression)
                                                    listener: handleIdentifier(print, expression)
                                                  listener: handleNoTypeArguments(()
                                                  parseArgumentsOpt(print)
                                                    parseArguments(print)
                                                      parseArgumentsRest(()
                                                        listener: beginArguments(()
                                                        parseExpression(()
                                                          looksLikeOuterPatternEquals(()
                                                            skipOuterPattern(()
                                                          parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                            parseUnaryExpression((, true, ConstantPatternContext.none)
                                                              parsePrimary((, expression, ConstantPatternContext.none)
                                                                parseLiteralString(()
                                                                  parseSingleLiteralString(()
                                                                    listener: beginLiteralString("async unnamed taking 0 parameters")
                                                                    listener: endLiteralString(0, ))
                                                        listener: endArguments(1, (, ))
                                                  listener: handleSend(print, ;)
                                      listener: handleExpressionFunctionBody(=>, null)
                                      inGenerator()
                                listener: endFunctionExpression((, ;)
                    ensureSemicolon())
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      looksLikeOuterPatternEquals(;)
                        skipOuterPattern(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              listener: handleNoTypeVariables(()
                              parseFunctionExpression(;)
                                listener: beginFunctionExpression(()
                                parseFormalParametersRequiredOpt(;, MemberKind.Local)
                                  parseFormalParametersRest((, MemberKind.Local)
                                    listener: beginFormalParameters((, MemberKind.Local)
                                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                      parseMetadataStar(()
                                        listener: beginMetadataStar(int)
                                        listener: endMetadataStar(0)
                                      listener: beginFormalParameter(int, MemberKind.Local, null, null, null)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(x)
                                      listener: handleType(int, null)
                                      ensureIdentifier(int, formalParameterDeclaration)
                                        listener: handleIdentifier(x, formalParameterDeclaration)
                                      listener: handleFormalParameterWithoutValue())
                                      listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                    listener: endFormalParameters(1, (, ), MemberKind.Local)
                                parseAsyncOptBody(), true, false)
                                  parseAsyncModifierOpt())
                                    listener: handleAsyncModifier(async, null)
                                    inPlainSync()
                                  parseFunctionBody(async, true, false)
                                    parseExpressionFunctionBody(=>, true)
                                      parseExpression(=>)
                                        looksLikeOuterPatternEquals(=>)
                                          skipOuterPattern(=>)
                                            skipObjectPatternRest(print)
                                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                            parsePrimary(=>, expression, ConstantPatternContext.none)
                                              parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                looksLikeFunctionBody(;)
                                                parseSend(=>, expression, ConstantPatternContext.none)
                                                  isNextIdentifier(=>)
                                                  ensureIdentifier(=>, expression)
                                                    listener: handleIdentifier(print, expression)
                                                  listener: handleNoTypeArguments(()
                                                  parseArgumentsOpt(print)
                                                    parseArguments(print)
                                                      parseArgumentsRest(()
                                                        listener: beginArguments(()
                                                        parseExpression(()
                                                          looksLikeOuterPatternEquals(()
                                                            skipOuterPattern(()
                                                          parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                            parseUnaryExpression((, true, ConstantPatternContext.none)
                                                              parsePrimary((, expression, ConstantPatternContext.none)
                                                                parseLiteralString(()
                                                                  parseSingleLiteralString(()
                                                                    listener: beginLiteralString("async unnamed taking 1 parameter")
                                                                    listener: endLiteralString(0, ))
                                                        listener: endArguments(1, (, ))
                                                  listener: handleSend(print, ;)
                                      listener: handleExpressionFunctionBody(=>, null)
                                      inGenerator()
                                listener: endFunctionExpression((, ;)
                    ensureSemicolon())
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      looksLikeOuterPatternEquals(;)
                        skipOuterPattern(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              listener: handleNoTypeVariables(()
                              parseFunctionExpression(;)
                                listener: beginFunctionExpression(()
                                parseFormalParametersRequiredOpt(;, MemberKind.Local)
                                  parseFormalParametersRest((, MemberKind.Local)
                                    listener: beginFormalParameters((, MemberKind.Local)
                                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                      parseMetadataStar(()
                                        listener: beginMetadataStar(int)
                                        listener: endMetadataStar(0)
                                      listener: beginFormalParameter(int, MemberKind.Local, null, null, null)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(x)
                                      listener: handleType(int, null)
                                      ensureIdentifier(int, formalParameterDeclaration)
                                        listener: handleIdentifier(x, formalParameterDeclaration)
                                      listener: handleFormalParameterWithoutValue(,)
                                      listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                    parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.Local)
                                      parseMetadataStar(,)
                                        listener: beginMetadataStar(int)
                                        listener: endMetadataStar(0)
                                      listener: beginFormalParameter(int, MemberKind.Local, null, null, null)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(y)
                                      listener: handleType(int, null)
                                      ensureIdentifier(int, formalParameterDeclaration)
                                        listener: handleIdentifier(y, formalParameterDeclaration)
                                      listener: handleFormalParameterWithoutValue())
                                      listener: endFormalParameter(null, null, null, y, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                    listener: endFormalParameters(2, (, ), MemberKind.Local)
                                parseAsyncOptBody(), true, false)
                                  parseAsyncModifierOpt())
                                    listener: handleAsyncModifier(async, null)
                                    inPlainSync()
                                  parseFunctionBody(async, true, false)
                                    parseExpressionFunctionBody(=>, true)
                                      parseExpression(=>)
                                        looksLikeOuterPatternEquals(=>)
                                          skipOuterPattern(=>)
                                            skipObjectPatternRest(print)
                                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                            parsePrimary(=>, expression, ConstantPatternContext.none)
                                              parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                looksLikeFunctionBody(;)
                                                parseSend(=>, expression, ConstantPatternContext.none)
                                                  isNextIdentifier(=>)
                                                  ensureIdentifier(=>, expression)
                                                    listener: handleIdentifier(print, expression)
                                                  listener: handleNoTypeArguments(()
                                                  parseArgumentsOpt(print)
                                                    parseArguments(print)
                                                      parseArgumentsRest(()
                                                        listener: beginArguments(()
                                                        parseExpression(()
                                                          looksLikeOuterPatternEquals(()
                                                            skipOuterPattern(()
                                                          parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                            parseUnaryExpression((, true, ConstantPatternContext.none)
                                                              parsePrimary((, expression, ConstantPatternContext.none)
                                                                parseLiteralString(()
                                                                  parseSingleLiteralString(()
                                                                    listener: beginLiteralString("async unnamed taking 2 parameters")
                                                                    listener: endLiteralString(0, ))
                                                        listener: endArguments(1, (, ))
                                                  listener: handleSend(print, ;)
                                      listener: handleExpressionFunctionBody(=>, null)
                                      inGenerator()
                                listener: endFunctionExpression((, ;)
                    ensureSemicolon())
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(method1)
  listener: endCompilationUnit(3, )
