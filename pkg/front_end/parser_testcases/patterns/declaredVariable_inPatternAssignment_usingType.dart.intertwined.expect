parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , Instance of 'VoidType', null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, [)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction([)
                  parseExpressionStatement({)
                    parseExpression({)
                      looksLikeOuterPatternEquals({)
                        skipOuterPattern({)
                      parsePatternAssignment({)
                        parsePattern({, PatternContext.assignment, precedence: 1)
                          parsePrimaryPattern({, PatternContext.assignment)
                            listener: handleNoTypeArguments([)
                            parseListPatternSuffix({, PatternContext.assignment)
                              parsePattern([, PatternContext.assignment, precedence: 1)
                                parsePrimaryPattern([, PatternContext.assignment)
                                  parseVariablePattern([, PatternContext.assignment, typeInfo: Instance of 'NoType')
                                    listener: handleAssignedVariablePattern(a)
                              parsePattern(,, PatternContext.assignment, precedence: 1)
                                parsePrimaryPattern(,, PatternContext.assignment)
                                  parseVariablePattern(,, PatternContext.assignment, typeInfo: Instance of 'SimpleType')
                                    listener: handleIdentifier(int, typeReference)
                                    listener: handleNoTypeArguments(d)
                                    listener: handleType(int, null)
                                    reportRecoverableError(d, Message[PatternAssignmentDeclaresVariable, Variable 'd' can't be declared in a pattern assignment., Try using a preexisting variable or changing the assignment to a pattern variable declaration., {name: d}])
                                      listener: handleRecoverableError(Message[PatternAssignmentDeclaresVariable, Variable 'd' can't be declared in a pattern assignment., Try using a preexisting variable or changing the assignment to a pattern variable declaration., {name: d}], d, d)
                                    listener: handleDeclaredVariablePattern(null, d, true)
                              listener: handleListPattern(2, [, ])
                        parseExpression(=)
                          looksLikeOuterPatternEquals(=)
                            skipOuterPattern(=)
                              skipObjectPatternRest(y)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                                  parseSend(=, expression, ConstantPatternContext.none)
                                    isNextIdentifier(=)
                                    ensureIdentifier(=, expression)
                                      listener: handleIdentifier(y, expression)
                                    listener: handleNoTypeArguments(;)
                                    parseArgumentsOpt(y)
                                      listener: handleNoArguments(;)
                                    listener: handleSend(y, ;)
                        listener: handlePatternAssignment(=)
                    ensureSemicolon(y)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
