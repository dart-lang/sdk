parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , Instance of 'VoidType', null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, var)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers(var, {, null, var, null, null)
                skipOuterPattern(var)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                parsePatternVariableDeclarationStatement(var, {, var)
                  parsePattern(var, PatternContext.declaration, precedence: 1)
                    listener: beginPattern(var)
                    parsePrimaryPattern(var, PatternContext.declaration)
                      parseParenthesizedPatternOrRecordPattern(var, PatternContext.declaration)
                        parsePattern((, PatternContext.declaration, precedence: 1)
                          listener: beginPattern(()
                          parsePrimaryPattern((, PatternContext.declaration)
                            parseVariablePattern((, PatternContext.declaration, typeInfo: Instance of 'SimpleType')
                              listener: handleIdentifier(int, typeReference)
                              listener: handleNoTypeArguments(x)
                              listener: handleType(int, null)
                              listener: handleDeclaredVariablePattern(null, x, false)
                          listener: endPattern(x)
                        listener: handlePatternField(null)
                        parsePattern(,, PatternContext.declaration, precedence: 1)
                          listener: beginPattern(,)
                          parsePrimaryPattern(,, PatternContext.declaration)
                            parseVariablePattern(,, PatternContext.declaration, typeInfo: Instance of 'ComplexTypeInfo')
                              parseRecordType((, ,, true)
                                listener: beginRecordType(()
                                parseRecordTypeField((, identifierIsOptional: true)
                                  listener: beginRecordTypeEntry()
                                  parseMetadataStar(()
                                    listener: beginMetadataStar(int)
                                    listener: endMetadataStar(0)
                                  listener: handleIdentifier(int, typeReference)
                                  listener: handleNoTypeArguments(,)
                                  listener: handleType(int, null)
                                  listener: handleNoName(,)
                                  listener: endRecordTypeEntry()
                                listener: endRecordType((, ?, 1, false)
                              listener: handleDeclaredVariablePattern(null, y, false)
                          listener: endPattern(y)
                        listener: handlePatternField(null)
                        ensureCloseParen(y, ()
                        listener: handleRecordPattern((, 2)
                    listener: endPattern())
                  parseExpression(=)
                    looksLikeOuterPatternEquals(=)
                      skipOuterPattern(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          inPlainSync()
                          parseSwitchExpression(=)
                            listener: beginSwitchExpression(switch)
                            ensureParenthesizedCondition(switch, allowCase: false)
                              parseExpressionInParenthesisRest((, allowCase: false)
                                parseExpression(()
                                  looksLikeOuterPatternEquals(()
                                    skipOuterPattern(()
                                      skipObjectPatternRest(foo)
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            isNextIdentifier(()
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(foo, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(foo)
                                              listener: handleNoArguments())
                                            listener: handleSend(foo, ))
                                ensureCloseParen(foo, ()
                                listener: handleParenthesizedCondition((, null, null)
                            ensureBlock(), null, switch expression)
                            listener: beginSwitchExpressionBlock({)
                            listener: beginSwitchExpressionCase()
                            parsePattern({, PatternContext.matching, precedence: 1)
                              listener: beginPattern({)
                              parsePrimaryPattern({, PatternContext.matching)
                                parseVariablePattern({, PatternContext.matching, typeInfo: Instance of 'NoType')
                                  listener: handleNoType(_)
                                  listener: handleWildcardPattern(null, _)
                              listener: endPattern(_)
                            listener: handleSwitchExpressionCasePattern(_)
                            ensureFunctionArrow(_)
                            parseExpression(=>)
                              looksLikeOuterPatternEquals(=>)
                                skipOuterPattern(=>)
                              parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                  parsePrimary(=>, expression, ConstantPatternContext.none)
                                    parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=>, ConstantPatternContext.none)
                                      parseParenthesizedExpressionOrRecordLiteral(=>, null, ConstantPatternContext.none)
                                        listener: beginParenthesizedExpressionOrRecordLiteral(()
                                        parseExpression(()
                                          looksLikeOuterPatternEquals(()
                                            skipOuterPattern(()
                                          parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression((, true, ConstantPatternContext.none)
                                              parsePrimary((, expression, ConstantPatternContext.none)
                                                parseLiteralInt(()
                                                  listener: handleLiteralInt(42)
                                        parseExpression(,)
                                          looksLikeOuterPatternEquals(,)
                                            skipOuterPattern(,)
                                          parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression(,, true, ConstantPatternContext.none)
                                              parsePrimary(,, expression, ConstantPatternContext.none)
                                                parseLiteralNull(,)
                                                  listener: handleLiteralNull(null)
                                        ensureCloseParen(null, ()
                                        listener: endRecordLiteral((, 2, null)
                            listener: endSwitchExpressionCase(null, =>, ))
                            listener: endSwitchExpressionBlock(1, {, })
                            listener: endSwitchExpression(switch, })
                  ensureSemicolon(})
                  listener: handlePatternVariableDeclarationStatement(var, =, ;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
