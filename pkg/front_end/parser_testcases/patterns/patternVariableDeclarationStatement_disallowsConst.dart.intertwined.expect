parseUnit(f)
  skipErrorTokens(f)
  listener: beginCompilationUnit(f)
  syntheticPreviousToken(f)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(f)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(f)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , Instance of 'NoType', null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(x)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, const)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrConstDeclaration({)
                parseExpressionStatement({)
                  parseExpression({)
                    looksLikeOuterPatternEquals({)
                      skipOuterPattern({)
                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression({, true, ConstantPatternContext.none)
                        parsePrimary({, expression, ConstantPatternContext.none)
                          parseConstExpression({)
                            listener: beginConstLiteral(()
                            parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                              listener: beginParenthesizedExpressionOrRecordLiteral(()
                              parseExpression(()
                                looksLikeOuterPatternEquals(()
                                  skipOuterPattern(()
                                    skipObjectPatternRest(_)
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          isNextIdentifier(()
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(_, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(_)
                                            listener: handleNoArguments())
                                          listener: handleSend(_, ))
                              ensureCloseParen(_, ()
                              reportRecoverableError(), RecordLiteralOnePositionalFieldNoTrailingComma)
                                listener: handleRecoverableError(RecordLiteralOnePositionalFieldNoTrailingComma, ), ))
                              listener: endRecordLiteral((, 1, const)
                            listener: endConstLiteral(=)
                      parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(=, true, ConstantPatternContext.none)
                          parsePrimary(=, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                              parseSend(=, expression, ConstantPatternContext.none)
                                isNextIdentifier(=)
                                ensureIdentifier(=, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(;)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(;)
                                listener: handleSend(x, ;)
                      listener: handleAssignmentExpression(=)
                  ensureSemicolon(x)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(f, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(f)
  listener: endCompilationUnit(1, )
