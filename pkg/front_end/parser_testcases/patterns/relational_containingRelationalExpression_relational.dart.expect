Problems reported:

parser/patterns/relational_containingRelationalExpression_relational:3:14: Expected ':' before this.
    case > 1 > 0:
             ^

parser/patterns/relational_containingRelationalExpression_relational:3:14: Expected an identifier, but got '>'.
    case > 1 > 0:
             ^

parser/patterns/relational_containingRelationalExpression_relational:3:16: Expected ';' after this.
    case > 1 > 0:
               ^

parser/patterns/relational_containingRelationalExpression_relational:3:17: Expected an identifier, but got ':'.
    case > 1 > 0:
                ^

parser/patterns/relational_containingRelationalExpression_relational:3:16: Expected ';' after this.
    case > 1 > 0:
               ^

parser/patterns/relational_containingRelationalExpression_relational:3:17: Unexpected token ':'.
    case > 1 > 0:
                ^

beginCompilationUnit(void)
  beginMetadataStar(void)
  endMetadataStar(0)
  beginTopLevelMember(void)
    beginTopLevelMethod(, null, null)
      handleVoidKeyword(void)
      handleIdentifier(f, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
        beginMetadataStar(x)
        endMetadataStar(0)
        beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
          handleNoType(()
          handleIdentifier(x, formalParameterDeclaration)
          handleFormalParameterWithoutValue())
        endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
      endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
        beginSwitchStatement(switch)
          handleIdentifier(x, expression)
          handleNoTypeArguments())
          handleNoArguments())
          handleSend(x, ))
          handleParenthesizedCondition((, null, null)
          beginSwitchBlock({)
            beginCaseExpression(case)
              handleLiteralInt(1)
              handleRelationalPattern(>)
              handleSwitchCaseNoWhenClause(1)
              handleRecoverableError(Message[ExpectedButGot, Expected ':' before this., null, {string: :}], >, >)
            endCaseExpression(case, null, :)
            beginSwitchCase(0, 1, case)
              handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '>'., Try inserting an identifier before '>'., {lexeme: >}], >, >)
              handleIdentifier(, expression)
              handleNoTypeArguments(>)
              handleNoArguments(>)
              handleSend(, >)
              beginBinaryExpression(>)
                handleLiteralInt(0)
              endBinaryExpression(>)
              handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 0, 0)
              handleExpressionStatement(;)
              handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ':'., Try inserting an identifier before ':'., {lexeme: :}], :, :)
              handleIdentifier(, expression)
              handleNoTypeArguments(:)
              handleNoArguments(:)
              handleSend(, :)
              handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 0, 0)
              handleExpressionStatement(;)
              handleRecoverableError(Message[UnexpectedToken, Unexpected token ':'., null, {lexeme: :}], :, :)
              handleBreakStatement(false, break, ;)
            endSwitchCase(0, 1, null, null, 3, case, })
          endSwitchBlock(1, {, })
        endSwitchStatement(switch, })
      endBlockFunctionBody(1, {, })
    endTopLevelMethod(void, null, })
  endTopLevelDeclaration()
endCompilationUnit(1, )
