parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(, class, null, null, null, null, null, Instance of 'DirectiveContext')
      parseClassOrNamedMixinApplication(null, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, C)
        parseClass(C, class, class, C)
          parseClassHeaderOpt(C, class, class)
            parseClassExtendsOpt(C)
              listener: handleNoType(C)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(C)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(C)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(C, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, var)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, C)
              parseMetadataStar({)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
              listener: beginMember()
              skipOuterPattern(var)
              reportRecoverableErrorWithEnd((, ), PatternVariableDeclarationOutsideFunctionOrMethod)
                listener: handleRecoverableError(PatternVariableDeclarationOutsideFunctionOrMethod, (, ))
              rewriter()
              rewriter()
              parseFields({, null, null, null, null, null, null, var, var, Instance of 'NoType', , DeclarationKind.Class, C, true)
                listener: beginFields(DeclarationKind.Class, null, null, null, null, null, null, var, {)
                listener: handleNoType(var)
                ensureIdentifierPotentiallyRecovered(var, fieldDeclaration, true)
                  listener: handleIdentifier(, fieldDeclaration)
                parseFieldInitializerOpt(, , null, null, null, null, var, DeclarationKind.Class, C)
                  listener: beginFieldInitializer(=)
                  parseExpression(=)
                    looksLikeOuterPatternEquals(=)
                      skipOuterPattern(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                            parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                              listener: beginParenthesizedExpressionOrRecordLiteral(()
                              parseExpression(()
                                looksLikeOuterPatternEquals(()
                                  skipOuterPattern(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseLiteralInt(()
                                        listener: handleLiteralInt(0)
                              parseExpression(,)
                                looksLikeOuterPatternEquals(,)
                                  skipOuterPattern(,)
                                parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression(,, true, ConstantPatternContext.none)
                                    parsePrimary(,, expression, ConstantPatternContext.none)
                                      parseLiteralInt(,)
                                        listener: handleLiteralInt(1)
                              ensureCloseParen(1, ()
                              listener: endRecordLiteral((, 2, null)
                  listener: endFieldInitializer(=, ;)
                listener: endClassFields(null, null, null, null, null, null, var, 1, var, ;)
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(1, )
