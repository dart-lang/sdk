parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(x)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, switch)
          parseStatement({)
            parseStatementX({)
              parseSwitchStatement({)
                listener: beginSwitchStatement(switch)
                ensureParenthesizedCondition(switch, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      looksLikeOuterPatternEquals(()
                        skipOuterPattern(()
                          skipObjectPatternRest(x)
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments())
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments())
                                listener: handleSend(x, x)
                    ensureCloseParen(x, ()
                    listener: handleParenthesizedCondition((, null, null)
                parseSwitchBlock())
                  ensureBlock(), BlockKind(switch statement))
                  listener: beginSwitchBlock({)
                  notEofOrType(CLOSE_CURLY_BRACKET, case)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parsePattern(case, PatternContext.matching, precedence: 1)
                    listener: beginPattern(case)
                    parsePrimaryPattern(case, PatternContext.matching)
                      parsePrecedenceExpression(==, 9, false, ConstantPatternContext.none)
                        parseUnaryExpression(==, false, ConstantPatternContext.none)
                          parsePrimary(==, expression, ConstantPatternContext.none)
                            parseLiteralInt(==)
                              listener: handleLiteralInt(1)
                      listener: handleRelationalPattern(==)
                    listener: endPattern(1)
                  listener: handleSwitchCaseNoWhenClause(1)
                  ensureColon(1)
                    rewriteAndRecover(1, Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}], :)
                      reportRecoverableError(>, Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}])
                        listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}], >, >)
                      rewriter()
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(>)
                  parseStatementsInSwitchCase(:, >, case, 0, 1, null, null)
                    listener: beginSwitchCase(0, 1, case)
                    parseStatement(:)
                      parseStatementX(:)
                        parseExpressionStatementOrDeclaration(:, null)
                          parseExpressionStatementOrDeclarationAfterModifiers(:, :, null, null, null, null)
                            looksLikeLocalFunction(>)
                            parseExpressionStatement(:)
                              parseExpression(:)
                                looksLikeOuterPatternEquals(:)
                                  skipOuterPattern(:)
                                parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression(:, true, ConstantPatternContext.none)
                                    parsePrimary(:, expression, ConstantPatternContext.none)
                                      parseSend(:, expression, ConstantPatternContext.none)
                                        ensureIdentifier(:, expression)
                                          reportRecoverableErrorWithToken(>, Template(ExpectedIdentifier))
                                            listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '>'., Try inserting an identifier before '>'., {lexeme: >}], >, >)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(>)
                                        listener: handleSend(, )
                                  listener: beginBinaryExpression(>)
                                  parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                    parseUnaryExpression(>, true, ConstantPatternContext.none)
                                      parsePrimary(>, expression, ConstantPatternContext.none)
                                        parseLiteralInt(>)
                                          listener: handleLiteralInt(0)
                                  listener: endBinaryExpression(>, 0)
                              ensureSemicolon(0)
                                reportRecoverableError(0, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                  listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 0, 0)
                                rewriter()
                              listener: handleExpressionStatement(>, ;)
                    peekPastLabels(:)
                    parseStatement(;)
                      parseStatementX(;)
                        parseExpressionStatementOrDeclaration(;, null)
                          parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                            looksLikeLocalFunction(:)
                            parseExpressionStatement(;)
                              parseExpression(;)
                                looksLikeOuterPatternEquals(;)
                                  skipOuterPattern(;)
                                parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression(;, true, ConstantPatternContext.none)
                                    parsePrimary(;, expression, ConstantPatternContext.none)
                                      parseSend(;, expression, ConstantPatternContext.none)
                                        ensureIdentifier(;, expression)
                                          reportRecoverableErrorWithToken(:, Template(ExpectedIdentifier))
                                            listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ':'., Try inserting an identifier before ':'., {lexeme: :}], :, :)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(:)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(:)
                                        listener: handleSend(, )
                              ensureSemicolon()
                                reportRecoverableError(0, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                  listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 0, 0)
                                rewriter()
                              listener: handleExpressionStatement(:, ;)
                    reportRecoverableError(:, Message[Template(UnexpectedToken), Unexpected token ':'., null, {lexeme: :}])
                      listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token ':'., null, {lexeme: :}], :, :)
                    peekPastLabels(break)
                    parseStatement(:)
                      parseStatementX(:)
                        parseBreakStatement(:)
                          isBreakAllowed()
                          ensureSemicolon(break)
                          listener: handleBreakStatement(false, break, ;)
                    peekPastLabels(})
                    listener: endSwitchCase(0, 1, null, null, 3, case, ;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endSwitchBlock(1, {, })
                listener: endSwitchStatement(switch, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
