Problems reported:

parser/patterns/switchExpression_recovery_caseKeyword:2:3: Unexpected token 'case'.
  case 1 => 'one',
  ^^^^

parser/patterns/switchExpression_recovery_caseKeyword:3:3: Unexpected token 'case'.
  case 2 => 'two'
  ^^^^

beginCompilationUnit(f)
  beginMetadataStar(f)
  endMetadataStar(0)
  beginTopLevelMember(f)
    beginTopLevelMethod(, null, null)
      handleNoType()
      handleIdentifier(f, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
        beginMetadataStar(x)
        endMetadataStar(0)
        beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
          handleNoType(()
          handleIdentifier(x, formalParameterDeclaration)
          handleFormalParameterWithoutValue())
        endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
      endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginSwitchExpression(switch)
        handleIdentifier(x, expression)
        handleNoTypeArguments())
        handleNoArguments())
        handleSend(x, ))
        handleParenthesizedCondition((, null, null)
        beginSwitchExpressionBlock({)
          beginSwitchExpressionCase()
            handleRecoverableError(Message[UnexpectedToken, Unexpected token 'case'., null, {lexeme: case}], case, case)
            beginConstantPattern(null)
              handleLiteralInt(1)
            endConstantPattern(null)
            handleSwitchExpressionCasePattern(1)
            beginLiteralString('one')
            endLiteralString(0, ,)
          endSwitchExpressionCase(null, =>, 'one')
          beginSwitchExpressionCase()
            handleRecoverableError(Message[UnexpectedToken, Unexpected token 'case'., null, {lexeme: case}], case, case)
            beginConstantPattern(null)
              handleLiteralInt(2)
            endConstantPattern(null)
            handleSwitchExpressionCasePattern(2)
            beginLiteralString('two')
            endLiteralString(0, })
          endSwitchExpressionCase(null, =>, 'two')
        endSwitchExpressionBlock(2, {, })
      endSwitchExpression(switch, })
      handleExpressionFunctionBody(=>, ;)
    endTopLevelMethod(f, null, ;)
  endTopLevelDeclaration()
endCompilationUnit(1, )
