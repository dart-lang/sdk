parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , Instance of 'VoidType', null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(x)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              looksLikeOuterPatternEquals(=>)
                skipOuterPattern(=>)
              parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                parseUnaryExpression(=>, true, ConstantPatternContext.none)
                  parsePrimary(=>, expression, ConstantPatternContext.none)
                    inPlainSync()
                    parseSwitchExpression(=>)
                      listener: beginSwitchExpression(switch)
                      ensureParenthesizedCondition(switch, allowCase: false)
                        parseExpressionInParenthesisRest((, allowCase: false)
                          parseExpression(()
                            looksLikeOuterPatternEquals(()
                              skipOuterPattern(()
                                skipObjectPatternRest(x)
                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                parsePrimary((, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                    parseSend((, expression, ConstantPatternContext.none)
                                      isNextIdentifier(()
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments())
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments())
                                      listener: handleSend(x, ))
                          ensureCloseParen(x, ()
                          listener: handleParenthesizedCondition((, null, null)
                      ensureBlock(), null, switch expression)
                      listener: beginSwitchExpressionBlock({)
                      listener: beginSwitchExpressionCase()
                      parsePattern({, PatternContext.matching, precedence: 1)
                        listener: beginPattern({)
                        parsePrimaryPattern({, PatternContext.matching)
                          parseVariablePattern({, PatternContext.matching, typeInfo: Instance of 'ComplexTypeInfo')
                            parseRecordType((, {, true)
                              listener: beginRecordType(()
                              parseRecordTypeField((, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(()
                                  listener: beginMetadataStar(int)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(int, typeReference)
                                listener: handleNoTypeArguments(,)
                                listener: handleType(int, null)
                                listener: handleNoName(,)
                                listener: endRecordTypeEntry()
                              listener: endRecordType((, ?, 1, false)
                            listener: handleDeclaredVariablePattern(null, y, false)
                        listener: endPattern(y)
                      listener: handleSwitchExpressionCasePattern(y)
                      ensureFunctionArrow(y)
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              parseLiteralInt(=>)
                                listener: handleLiteralInt(0)
                      listener: endSwitchExpressionCase(null, =>, 0)
                      listener: endSwitchExpressionBlock(1, {, })
                      listener: endSwitchExpression(switch, })
            ensureSemicolon(})
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
        listener: endTopLevelMethod(void, null, ;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
