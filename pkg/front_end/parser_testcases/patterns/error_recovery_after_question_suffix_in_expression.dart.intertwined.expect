parseUnit(f)
  skipErrorTokens(f)
  listener: beginCompilationUnit(f)
  syntheticPreviousToken(f)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(f)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(f)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, try)
          parseStatement({)
            parseStatementX({)
              parseTryStatement({)
                listener: beginTryStatement(try)
                parseBlock(try, BlockKind(try statement))
                  ensureBlock(try, BlockKind(try statement))
                  listener: beginBlock({, BlockKind(try statement))
                  notEofOrType(CLOSE_CURLY_BRACKET, true)
                  parseStatement({)
                    parseStatementX({)
                      parseExpressionStatementOrDeclaration({, null)
                        parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                          looksLikeLocalFunction(true)
                          parseExpressionStatement({)
                            parseExpression({)
                              looksLikeOuterPatternEquals({)
                                skipOuterPattern({)
                              parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression({, true, ConstantPatternContext.none)
                                  parsePrimary({, expression, ConstantPatternContext.none)
                                    parseLiteralBool({)
                                      listener: handleLiteralBool(true)
                                parseConditionalExpressionRest(true)
                                  listener: beginConditionalExpression(?)
                                  parseExpressionWithoutCascade(?)
                                    parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                                      parseUnaryExpression(?, false, ConstantPatternContext.none)
                                        parsePrimary(?, expression, ConstantPatternContext.none)
                                          parseSend(?, expression, ConstantPatternContext.none)
                                            ensureIdentifier(?, expression)
                                              reportRecoverableErrorWithToken(:, Template(ExpectedIdentifier))
                                                listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ':'., Try inserting an identifier before ':'., {lexeme: :}], :, :)
                                              rewriter()
                                              listener: handleIdentifier(, expression)
                                            listener: handleNoTypeArguments(:)
                                            parseArgumentsOpt()
                                              listener: handleNoArguments(:)
                                            listener: handleSend(, )
                                  ensureColon()
                                  listener: handleConditionalExpressionColon()
                                  parseExpressionWithoutCascade(:)
                                    parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                                      parseUnaryExpression(:, false, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(2)
                                  listener: endConditionalExpression(?, :, 2)
                            ensureSemicolon(2)
                            listener: handleExpressionStatement(true, ;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(try statement))
                listener: beginCatchClause(catch)
                parseFormalParameters(catch, MemberKind.Catch)
                  parseFormalParametersRest((, MemberKind.Catch)
                    listener: beginFormalParameters((, MemberKind.Catch)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Catch)
                      parseMetadataStar(()
                        listener: beginMetadataStar(e)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(e, MemberKind.Catch, null, null, null)
                      listener: handleNoType(()
                      ensureIdentifier((, formalParameterDeclaration)
                        listener: handleIdentifier(e, formalParameterDeclaration)
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, e, null, null, FormalParameterKind.requiredPositional, MemberKind.Catch)
                    listener: endFormalParameters(1, (, ), MemberKind.Catch)
                listener: endCatchClause({)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(0, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(null, catch, null)
                listener: endTryStatement(1, try, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(f, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(f)
  listener: endCompilationUnit(1, )
