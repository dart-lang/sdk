Problems reported:

parser/patterns/const_patterns_binary:19:12: The binary operator + is not supported as a constant pattern.
    case 1 + 2: // Error
           ^

parser/patterns/const_patterns_binary:20:12: The binary operator - is not supported as a constant pattern.
    case 1 - 2: // Error
           ^

parser/patterns/const_patterns_binary:21:12: The binary operator * is not supported as a constant pattern.
    case 1 * 2: // Error
           ^

parser/patterns/const_patterns_binary:22:12: The binary operator / is not supported as a constant pattern.
    case 1 / 2: // Error
           ^

parser/patterns/const_patterns_binary:23:12: The binary operator ~/ is not supported as a constant pattern.
    case 1 ~/ 2: // Error
           ^^

parser/patterns/const_patterns_binary:24:12: The binary operator % is not supported as a constant pattern.
    case 1 % 2: // Error
           ^

parser/patterns/const_patterns_binary:25:12: The binary operator == is not supported as a constant pattern.
    case 1 == 2: // Error
           ^^

parser/patterns/const_patterns_binary:26:12: The binary operator != is not supported as a constant pattern.
    case 1 != 2: // Error
           ^^

parser/patterns/const_patterns_binary:27:12: The binary operator ^ is not supported as a constant pattern.
    case 1 ^ 2: // Error
           ^

parser/patterns/const_patterns_binary:28:12: The binary operator & is not supported as a constant pattern.
    case 1 & 2: // Error
           ^

parser/patterns/const_patterns_binary:29:12: The binary operator | is not supported as a constant pattern.
    case 1 | 2: // Error
           ^

parser/patterns/const_patterns_binary:30:12: The binary operator < is not supported as a constant pattern.
    case 1 < 2: // Error
           ^

parser/patterns/const_patterns_binary:31:12: The binary operator <= is not supported as a constant pattern.
    case 1 <= 2: // Error
           ^^

parser/patterns/const_patterns_binary:32:12: The binary operator > is not supported as a constant pattern.
    case 1 > 2: // Error
           ^

parser/patterns/const_patterns_binary:33:12: The binary operator >= is not supported as a constant pattern.
    case 1 >= 2: // Error
           ^^

parser/patterns/const_patterns_binary:34:12: The binary operator << is not supported as a constant pattern.
    case 1 << 2: // Error
           ^^

parser/patterns/const_patterns_binary:35:12: The binary operator >> is not supported as a constant pattern.
    case 1 >> 2: // Error
           ^^

parser/patterns/const_patterns_binary:36:12: The binary operator >>> is not supported as a constant pattern.
    case 1 >>> 2: // Error
           ^^^

parser/patterns/const_patterns_binary:37:12: The binary operator + is not supported as a constant pattern.
    case 1 + 2 + 3: // Error
           ^

parser/patterns/const_patterns_binary:40:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 as int: // Error
               ^

parser/patterns/const_patterns_binary:41:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 + 2: // Error
               ^

parser/patterns/const_patterns_binary:41:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 + 2: // Error
               ^

parser/patterns/const_patterns_binary:42:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 - 2: // Error
               ^

parser/patterns/const_patterns_binary:42:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 - 2: // Error
               ^

parser/patterns/const_patterns_binary:43:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 * 2: // Error
               ^

parser/patterns/const_patterns_binary:43:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 * 2: // Error
               ^

parser/patterns/const_patterns_binary:44:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 / 2: // Error
               ^

parser/patterns/const_patterns_binary:44:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 / 2: // Error
               ^

parser/patterns/const_patterns_binary:45:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 ~/ 2: // Error
               ^

parser/patterns/const_patterns_binary:45:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 ~/ 2: // Error
               ^

parser/patterns/const_patterns_binary:46:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 % 2: // Error
               ^

parser/patterns/const_patterns_binary:46:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 % 2: // Error
               ^

parser/patterns/const_patterns_binary:47:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 == 2: // Error
               ^

parser/patterns/const_patterns_binary:47:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 == 2: // Error
               ^

parser/patterns/const_patterns_binary:48:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 != 2: // Error
               ^

parser/patterns/const_patterns_binary:48:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 != 2: // Error
               ^

parser/patterns/const_patterns_binary:49:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 ^ 2: // Error
               ^

parser/patterns/const_patterns_binary:49:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 ^ 2: // Error
               ^

parser/patterns/const_patterns_binary:50:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 & 2: // Error
               ^

parser/patterns/const_patterns_binary:50:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 & 2: // Error
               ^

parser/patterns/const_patterns_binary:51:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 | 2: // Error
               ^

parser/patterns/const_patterns_binary:51:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 | 2: // Error
               ^

parser/patterns/const_patterns_binary:52:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 < 2: // Error
               ^

parser/patterns/const_patterns_binary:52:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 < 2: // Error
               ^

parser/patterns/const_patterns_binary:53:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 <= 2: // Error
               ^

parser/patterns/const_patterns_binary:53:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 <= 2: // Error
               ^

parser/patterns/const_patterns_binary:54:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 > 2: // Error
               ^

parser/patterns/const_patterns_binary:54:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 > 2: // Error
               ^

parser/patterns/const_patterns_binary:55:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 >= 2: // Error
               ^

parser/patterns/const_patterns_binary:55:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 >= 2: // Error
               ^

parser/patterns/const_patterns_binary:56:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 << 2: // Error
               ^

parser/patterns/const_patterns_binary:56:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 << 2: // Error
               ^

parser/patterns/const_patterns_binary:57:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 >> 2: // Error
               ^

parser/patterns/const_patterns_binary:57:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 >> 2: // Error
               ^

parser/patterns/const_patterns_binary:58:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 >>> 2: // Error
               ^

parser/patterns/const_patterns_binary:58:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 >>> 2: // Error
               ^

parser/patterns/const_patterns_binary:59:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 + 2 + 3: // Error
               ^

parser/patterns/const_patterns_binary:59:16: The expression can't be prefixed by 'const' to form a constant pattern.
    case const 1 + 2 + 3: // Error
               ^

parser/patterns/const_patterns_binary:60:23: The expression can't be prefixed by 'const' to form a constant pattern.
    case const Object() == 2: // Error
                      ^

parser/patterns/const_patterns_binary:81:12: Expected ':' before this.
    case 1 ?? 2: // Error
           ^^

parser/patterns/const_patterns_binary:81:12: Expected an identifier, but got '??'.
    case 1 ?? 2: // Error
           ^^

parser/patterns/const_patterns_binary:81:15: Expected ';' after this.
    case 1 ?? 2: // Error
              ^

parser/patterns/const_patterns_binary:81:16: Expected an identifier, but got ':'.
    case 1 ?? 2: // Error
               ^

parser/patterns/const_patterns_binary:81:15: Expected ';' after this.
    case 1 ?? 2: // Error
              ^

parser/patterns/const_patterns_binary:81:16: Unexpected token ':'.
    case 1 ?? 2: // Error
               ^

beginCompilationUnit(import)
  beginMetadataStar(import)
  endMetadataStar(0)
  beginUncategorizedTopLevelDeclaration(import)
    beginImport(import)
      beginLiteralString('const_patterns_binary.dart')
      endLiteralString(0, as)
      beginConditionalUris(as)
      endConditionalUris(0)
      handleIdentifier(prefix, importPrefixDeclaration)
      handleImportPrefix(null, as)
      beginCombinators(;)
      endCombinators(0)
    endImport(import, null, ;)
  endTopLevelDeclaration(const)
  beginMetadataStar(const)
  endMetadataStar(0)
  beginTopLevelMember(const)
    beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, const, ;)
      handleNoType(const)
      handleIdentifier(value, topLevelVariableDeclaration)
      beginFieldInitializer(=)
        handleLiteralInt(1)
      endFieldInitializer(=, ;)
    endTopLevelFields(null, null, null, null, const, 1, const, ;)
  endTopLevelDeclaration(class)
  beginMetadataStar(class)
  endMetadataStar(0)
  beginClassOrMixinOrNamedMixinApplicationPrelude(class)
    handleIdentifier(Class, classOrMixinDeclaration)
    handleNoTypeVariables({)
    beginClassDeclaration(class, null, null, null, null, null, null, null, null, null, Class)
      handleNoType(Class)
      handleClassExtends(null, 1)
      handleClassNoWithClause()
      handleImplements(null, 0)
      handleClassHeader(class, class, null)
      beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
        beginMetadataStar(static)
        endMetadataStar(0)
        beginMember()
          beginFields(DeclarationKind.Class, null, null, null, static, null, null, const, {)
            handleNoType(const)
            handleIdentifier(value, fieldDeclaration)
            beginFieldInitializer(=)
              handleLiteralInt(2)
            endFieldInitializer(=, ;)
          endClassFields(null, null, null, static, null, null, const, 1, static, ;)
        endMember()
      endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
    endClassDeclaration(class, })
  endTopLevelDeclaration(method)
  beginMetadataStar(method)
  endMetadataStar(0)
  beginTopLevelMember(method)
    beginTopLevelMethod(}, null, null)
      handleNoType(})
      handleIdentifier(method, topLevelFunctionDeclaration)
      beginTypeVariables(<)
        beginMetadataStar(T)
        endMetadataStar(0)
        handleIdentifier(T, typeVariableDeclaration)
        beginTypeVariable(T)
          handleTypeVariablesDefined(T, 1)
          handleNoType(T)
        endTypeVariable(>, 0, null, null)
      endTypeVariables(<, >)
      beginFormalParameters((, MemberKind.TopLevelMethod)
        beginMetadataStar(o)
        endMetadataStar(0)
        beginFormalParameter(o, MemberKind.TopLevelMethod, null, null, null)
          handleNoType(()
          handleIdentifier(o, formalParameterDeclaration)
          handleFormalParameterWithoutValue())
        endFormalParameter(null, null, null, o, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
      endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
        beginSwitchStatement(switch)
          handleIdentifier(o, expression)
          handleNoTypeArguments())
          handleNoArguments())
          handleSend(o, ))
          handleParenthesizedCondition((, null, null)
          beginSwitchBlock({)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                endConstantPattern(null)
                beginBinaryPattern(||)
                  beginPattern(||)
                    beginConstantPattern(null)
                      handleLiteralInt(2)
                    endConstantPattern(null)
                  endPattern(2)
                endBinaryPattern(||)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                endConstantPattern(null)
                beginBinaryPattern(&&)
                  beginPattern(&&)
                    beginConstantPattern(null)
                      handleLiteralInt(2)
                    endConstantPattern(null)
                  endPattern(2)
                endBinaryPattern(&&)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                endConstantPattern(null)
                beginAsOperatorType(as)
                  handleIdentifier(T, typeReference)
                  handleNoTypeArguments(:)
                  handleType(T, null)
                endAsOperatorType(as)
                handleCastPattern(as)
              endPattern(T)
              handleSwitchCaseNoWhenClause(T)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleIdentifier(Object, expression)
                  handleNoTypeArguments(()
                  beginArguments(()
                  endArguments(0, (, ))
                  handleSend(Object, :)
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator + is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: +}], +, +)
                  beginBinaryExpression(+)
                    handleLiteralInt(2)
                  endBinaryExpression(+)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator - is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: -}], -, -)
                  beginBinaryExpression(-)
                    handleLiteralInt(2)
                  endBinaryExpression(-)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator * is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: *}], *, *)
                  beginBinaryExpression(*)
                    handleLiteralInt(2)
                  endBinaryExpression(*)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator / is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: /}], /, /)
                  beginBinaryExpression(/)
                    handleLiteralInt(2)
                  endBinaryExpression(/)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator ~/ is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: ~/}], ~/, ~/)
                  beginBinaryExpression(~/)
                    handleLiteralInt(2)
                  endBinaryExpression(~/)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator % is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: %}], %, %)
                  beginBinaryExpression(%)
                    handleLiteralInt(2)
                  endBinaryExpression(%)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator == is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: ==}], ==, ==)
                  beginBinaryExpression(==)
                    handleLiteralInt(2)
                  endBinaryExpression(==)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator != is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: !=}], !=, !=)
                  beginBinaryExpression(!=)
                    handleLiteralInt(2)
                  endBinaryExpression(!=)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator ^ is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: ^}], ^, ^)
                  beginBinaryExpression(^)
                    handleLiteralInt(2)
                  endBinaryExpression(^)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator & is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: &}], &, &)
                  beginBinaryExpression(&)
                    handleLiteralInt(2)
                  endBinaryExpression(&)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator | is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: |}], |, |)
                  beginBinaryExpression(|)
                    handleLiteralInt(2)
                  endBinaryExpression(|)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator < is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: <}], <, <)
                  beginBinaryExpression(<)
                    handleLiteralInt(2)
                  endBinaryExpression(<)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator <= is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: <=}], <=, <=)
                  beginBinaryExpression(<=)
                    handleLiteralInt(2)
                  endBinaryExpression(<=)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator > is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: >}], >, >)
                  beginBinaryExpression(>)
                    handleLiteralInt(2)
                  endBinaryExpression(>)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator >= is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: >=}], >=, >=)
                  beginBinaryExpression(>=)
                    handleLiteralInt(2)
                  endBinaryExpression(>=)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator << is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: <<}], <<, <<)
                  beginBinaryExpression(<<)
                    handleLiteralInt(2)
                  endBinaryExpression(<<)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator >> is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: >>}], >>, >>)
                  beginBinaryExpression(>>)
                    handleLiteralInt(2)
                  endBinaryExpression(>>)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator >>> is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: >>>}], >>>, >>>)
                  beginBinaryExpression(>>>)
                    handleLiteralInt(2)
                  endBinaryExpression(>>>)
                endConstantPattern(null)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                  handleRecoverableError(Message[InvalidConstantPatternBinary, The binary operator + is not supported as a constant pattern., Try wrapping the expression in 'const ( ... )'., {name: +}], +, +)
                  beginBinaryExpression(+)
                    handleLiteralInt(2)
                  endBinaryExpression(+)
                  beginBinaryExpression(+)
                    handleLiteralInt(3)
                  endBinaryExpression(+)
                endConstantPattern(null)
              endPattern(3)
              handleSwitchCaseNoWhenClause(3)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleIdentifier(prefix, expression)
                  handleNoTypeArguments(.)
                  handleNoArguments(.)
                  handleSend(prefix, .)
                  handleIdentifier(value, expressionContinuation)
                  handleNoTypeArguments(as)
                  handleNoArguments(as)
                  handleSend(value, as)
                  handleEndingBinaryExpression(.)
                endConstantPattern(null)
                beginAsOperatorType(as)
                  handleIdentifier(T, typeReference)
                  handleNoTypeArguments(:)
                  handleType(T, null)
                endAsOperatorType(as)
                handleCastPattern(as)
              endPattern(T)
              handleSwitchCaseNoWhenClause(T)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleIdentifier(prefix, expression)
                  handleNoTypeArguments(.)
                  handleNoArguments(.)
                  handleSend(prefix, .)
                  handleIdentifier(Class, expressionContinuation)
                  handleNoTypeArguments(.)
                  handleNoArguments(.)
                  handleSend(Class, .)
                  handleEndingBinaryExpression(.)
                  handleIdentifier(value, expressionContinuation)
                  handleNoTypeArguments(as)
                  handleNoArguments(as)
                  handleSend(value, as)
                  handleEndingBinaryExpression(.)
                endConstantPattern(null)
                beginAsOperatorType(as)
                  handleIdentifier(T, typeReference)
                  handleNoTypeArguments(:)
                  handleType(T, null)
                endAsOperatorType(as)
                handleCastPattern(as)
              endPattern(T)
              handleSwitchCaseNoWhenClause(T)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                endConstantPattern(const)
                beginAsOperatorType(as)
                  handleIdentifier(int, typeReference)
                  handleNoTypeArguments(:)
                  handleType(int, null)
                endAsOperatorType(as)
                handleCastPattern(as)
              endPattern(int)
              handleSwitchCaseNoWhenClause(int)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(+)
                    handleLiteralInt(2)
                  endBinaryExpression(+)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(-)
                    handleLiteralInt(2)
                  endBinaryExpression(-)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(*)
                    handleLiteralInt(2)
                  endBinaryExpression(*)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(/)
                    handleLiteralInt(2)
                  endBinaryExpression(/)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(~/)
                    handleLiteralInt(2)
                  endBinaryExpression(~/)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(%)
                    handleLiteralInt(2)
                  endBinaryExpression(%)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(==)
                    handleLiteralInt(2)
                  endBinaryExpression(==)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(!=)
                    handleLiteralInt(2)
                  endBinaryExpression(!=)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(^)
                    handleLiteralInt(2)
                  endBinaryExpression(^)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(&)
                    handleLiteralInt(2)
                  endBinaryExpression(&)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(|)
                    handleLiteralInt(2)
                  endBinaryExpression(|)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(<)
                    handleLiteralInt(2)
                  endBinaryExpression(<)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(<=)
                    handleLiteralInt(2)
                  endBinaryExpression(<=)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(>)
                    handleLiteralInt(2)
                  endBinaryExpression(>)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(>=)
                    handleLiteralInt(2)
                  endBinaryExpression(>=)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(<<)
                    handleLiteralInt(2)
                  endBinaryExpression(<<)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(>>)
                    handleLiteralInt(2)
                  endBinaryExpression(>>)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(>>>)
                    handleLiteralInt(2)
                  endBinaryExpression(>>>)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  handleLiteralInt(1)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, 1, 1)
                  beginBinaryExpression(+)
                    handleLiteralInt(2)
                  endBinaryExpression(+)
                  beginBinaryExpression(+)
                    handleLiteralInt(3)
                  endBinaryExpression(+)
                endConstantPattern(const)
              endPattern(3)
              handleSwitchCaseNoWhenClause(3)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  handleIdentifier(Object, expression)
                  handleNoTypeArguments(()
                  beginArguments(()
                  endArguments(0, (, ))
                  handleSend(Object, ==)
                  handleRecoverableError(InvalidConstantPatternConstPrefix, ), ))
                  beginBinaryExpression(==)
                    handleLiteralInt(2)
                  endBinaryExpression(==)
                endConstantPattern(const)
              endPattern(2)
              handleSwitchCaseNoWhenClause(2)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginTypeArguments(<)
                    handleIdentifier(int, typeReference)
                    handleNoTypeArguments(>)
                    handleType(int, null)
                  endTypeArguments(1, <, >)
                  handleLiteralList(0, [, null, ])
                endConstantPattern(const)
                beginAsOperatorType(as)
                  handleIdentifier(List, typeReference)
                  beginTypeArguments(<)
                    handleIdentifier(T, typeReference)
                    handleNoTypeArguments(>)
                    handleType(T, null)
                  endTypeArguments(1, <, >)
                  handleType(List, null)
                endAsOperatorType(as)
                handleCastPattern(as)
              endPattern(>)
              handleSwitchCaseNoWhenClause(>)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(+)
                      handleLiteralInt(2)
                    endBinaryExpression(+)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(-)
                      handleLiteralInt(2)
                    endBinaryExpression(-)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(*)
                      handleLiteralInt(2)
                    endBinaryExpression(*)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(/)
                      handleLiteralInt(2)
                    endBinaryExpression(/)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(~/)
                      handleLiteralInt(2)
                    endBinaryExpression(~/)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(%)
                      handleLiteralInt(2)
                    endBinaryExpression(%)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(==)
                      handleLiteralInt(2)
                    endBinaryExpression(==)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(!=)
                      handleLiteralInt(2)
                    endBinaryExpression(!=)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(^)
                      handleLiteralInt(2)
                    endBinaryExpression(^)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(&)
                      handleLiteralInt(2)
                    endBinaryExpression(&)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(|)
                      handleLiteralInt(2)
                    endBinaryExpression(|)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(<)
                      handleLiteralInt(2)
                    endBinaryExpression(<)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(<=)
                      handleLiteralInt(2)
                    endBinaryExpression(<=)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(>)
                      handleLiteralInt(2)
                    endBinaryExpression(>)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(>=)
                      handleLiteralInt(2)
                    endBinaryExpression(>=)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(<<)
                      handleLiteralInt(2)
                    endBinaryExpression(<<)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(>>)
                      handleLiteralInt(2)
                    endBinaryExpression(>>)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(>>>)
                      handleLiteralInt(2)
                    endBinaryExpression(>>>)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(const)
                  beginParenthesizedExpressionOrRecordLiteral(()
                    handleLiteralInt(1)
                    beginBinaryExpression(+)
                      handleLiteralInt(2)
                    endBinaryExpression(+)
                    beginBinaryExpression(+)
                      handleLiteralInt(3)
                    endBinaryExpression(+)
                  endParenthesizedExpression(()
                endConstantPattern(const)
              endPattern())
              handleSwitchCaseNoWhenClause())
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleLiteralInt(1)
                endConstantPattern(null)
              endPattern(1)
              handleSwitchCaseNoWhenClause(1)
              handleRecoverableError(Message[ExpectedButGot, Expected ':' before this., null, {string: :}], ??, ??)
            endCaseExpression(case, null, :)
            beginSwitchCase(0, 67, case)
              handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '??'., Try inserting an identifier before '??'., {lexeme: ??}], ??, ??)
              handleIdentifier(, expression)
              handleNoTypeArguments(??)
              handleNoArguments(??)
              handleSend(, ??)
              beginBinaryExpression(??)
                handleLiteralInt(2)
              endBinaryExpression(??)
              handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 2, 2)
              handleExpressionStatement(;)
              handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got ':'., Try inserting an identifier before ':'., {lexeme: :}], :, :)
              handleIdentifier(, expression)
              handleNoTypeArguments(:)
              handleNoArguments(:)
              handleSend(, :)
              handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], 2, 2)
              handleExpressionStatement(;)
              handleRecoverableError(Message[UnexpectedToken, Unexpected token ':'., null, {lexeme: :}], :, :)
            endSwitchCase(0, 67, null, null, 2, case, case)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleIdentifier(o, expression)
                  handleNoTypeArguments(++)
                  handleNoArguments(++)
                  handleSend(o, ++)
                  handleUnaryPostfixAssignmentExpression(++)
                endConstantPattern(null)
              endPattern(++)
              handleSwitchCaseNoWhenClause(++)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleIdentifier(o, expression)
                  handleNoTypeArguments(--)
                  handleNoArguments(--)
                  handleSend(o, --)
                  handleUnaryPostfixAssignmentExpression(--)
                endConstantPattern(null)
              endPattern(--)
              handleSwitchCaseNoWhenClause(--)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleIdentifier(o, expression)
                  handleNoTypeArguments(:)
                  handleNoArguments(:)
                  handleSend(o, :)
                  handleUnaryPrefixAssignmentExpression(++)
                endConstantPattern(null)
              endPattern(o)
              handleSwitchCaseNoWhenClause(o)
            endCaseExpression(case, null, :)
            beginCaseExpression(case)
              beginPattern(case)
                beginConstantPattern(null)
                  handleIdentifier(o, expression)
                  handleNoTypeArguments(:)
                  handleNoArguments(:)
                  handleSend(o, :)
                  handleUnaryPrefixAssignmentExpression(--)
                endConstantPattern(null)
              endPattern(o)
              handleSwitchCaseNoWhenClause(o)
            endCaseExpression(case, null, :)
            beginSwitchCase(0, 4, case)
            endSwitchCase(0, 4, null, null, 0, case, })
          endSwitchBlock(2, {, })
        endSwitchStatement(switch, })
      endBlockFunctionBody(1, {, })
    endTopLevelMethod(method, null, })
  endTopLevelDeclaration()
endCompilationUnit(4, )
