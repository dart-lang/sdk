parseUnit(f)
  skipErrorTokens(f)
  listener: beginCompilationUnit(f)
  syntheticPreviousToken(f)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(f)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(f)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , Instance of 'NoType', null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(x)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(y)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(y, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(,)
                ensureIdentifier(,, formalParameterDeclaration)
                  listener: handleIdentifier(y, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, y, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(2, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: true)
                  parseExpressionInParenthesisRest((, allowCase: true)
                    parseExpression(()
                      looksLikeOuterPatternEquals(()
                        skipOuterPattern(()
                          skipObjectPatternRest(x)
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                isNextIdentifier(()
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(case)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(case)
                                listener: handleSend(x, case)
                    parsePattern(case, PatternContext.matching, precedence: 1)
                      parsePrimaryPattern(case, PatternContext.matching)
                        parseVariablePattern(case, PatternContext.matching, typeInfo: Instance of 'NoType')
                          listener: handleNoType(_)
                          listener: handleWildcardPattern(null, _)
                    listener: beginPatternGuard(when)
                    parseExpression(when)
                      looksLikeOuterPatternEquals(when)
                        skipOuterPattern(when)
                          skipObjectPatternRest(y)
                      parsePrecedenceExpression(when, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(when, true, ConstantPatternContext.none)
                          parsePrimary(when, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral(when, expression, ConstantPatternContext.none)
                              parseSend(when, expression, ConstantPatternContext.none)
                                isNextIdentifier(when)
                                ensureIdentifier(when, expression)
                                  listener: handleIdentifier(y, expression)
                                listener: handleNoTypeArguments(+)
                                parseArgumentsOpt(y)
                                  listener: handleNoArguments(+)
                                listener: handleSend(y, +)
                        listener: beginBinaryExpression(+)
                        parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                          parseUnaryExpression(+, true, ConstantPatternContext.none)
                            parsePrimary(+, expression, ConstantPatternContext.none)
                              parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(+, ConstantPatternContext.none)
                                listener: handleNoTypeVariables(()
                                parseFunctionExpression(+)
                                  listener: beginFunctionExpression(()
                                  parseFormalParametersRequiredOpt(+, MemberKind.Local)
                                    parseFormalParametersRest((, MemberKind.Local)
                                      listener: beginFormalParameters((, MemberKind.Local)
                                      listener: endFormalParameters(0, (, ), MemberKind.Local)
                                  parseAsyncOptBody(), true, false)
                                    parseAsyncModifierOpt())
                                      listener: handleAsyncModifier(null, null)
                                      inPlainSync()
                                    parseFunctionBody(), true, false)
                                      parseExpressionFunctionBody(=>, true)
                                        parseExpression(=>)
                                          looksLikeOuterPatternEquals(=>)
                                            skipOuterPattern(=>)
                                          parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                              parsePrimary(=>, expression, ConstantPatternContext.none)
                                                parseLiteralInt(=>)
                                                  listener: handleLiteralInt(0)
                                        listener: handleExpressionFunctionBody(=>, null)
                                        inGenerator()
                                  listener: endFunctionExpression((, ))
                        listener: endBinaryExpression(+)
                    listener: endPatternGuard(when)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, case, when)
                listener: beginThenStatement({)
                parseStatement())
                  parseStatementX())
                    parseBlock(), BlockKind(statement))
                      ensureBlock(), null, null)
                      listener: beginBlock({, BlockKind(statement))
                      notEofOrValue(}, })
                      listener: endBlock(0, {, }, BlockKind(statement))
                listener: endThenStatement(})
                listener: endIfStatement(if, null)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(f, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(f)
  listener: endCompilationUnit(1, )
