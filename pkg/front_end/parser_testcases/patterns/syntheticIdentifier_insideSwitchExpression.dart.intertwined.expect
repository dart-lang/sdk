parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(Object)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(Object, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(Object, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(Object, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              looksLikeOuterPatternEquals(=>)
                skipOuterPattern(=>)
              parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                parseUnaryExpression(=>, true, ConstantPatternContext.none)
                  parsePrimary(=>, expression, ConstantPatternContext.none)
                    inPlainSync()
                    parseSwitchExpression(=>)
                      listener: beginSwitchExpression(switch)
                      ensureParenthesizedCondition(switch, allowCase: false)
                        parseExpressionInParenthesisRest((, allowCase: false)
                          parseExpression(()
                            looksLikeOuterPatternEquals(()
                              skipOuterPattern(()
                                skipObjectPatternRest(x)
                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                parsePrimary((, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                    parseSend((, expression, ConstantPatternContext.none)
                                      ensureIdentifier((, expression)
                                        listener: handleIdentifier(x, expression)
                                      listener: handleNoTypeArguments())
                                      parseArgumentsOpt(x)
                                        listener: handleNoArguments())
                                      listener: handleSend(x, x)
                          ensureCloseParen(x, ()
                          listener: handleParenthesizedCondition((, null, null)
                      ensureBlock(), BlockKind(switch expression))
                      listener: beginSwitchExpressionBlock({)
                      listener: beginSwitchExpressionCase()
                      parsePattern({, PatternContext.matching, precedence: 1)
                        listener: beginPattern({)
                        parsePrimaryPattern({, PatternContext.matching)
                          listener: beginConstantPattern(null)
                          parsePrecedenceExpression({, 7, false, ConstantPatternContext.implicit)
                            parseUnaryExpression({, false, ConstantPatternContext.implicit)
                              parsePrimary({, expression, ConstantPatternContext.implicit)
                                inPlainSync()
                                parseSend({, expression, ConstantPatternContext.implicit)
                                  ensureIdentifier({, expression)
                                    reportRecoverableErrorWithToken(if, Template(ExpectedIdentifier))
                                      listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'if'., Try inserting an identifier before 'if'., {lexeme: if}], if, if)
                                    rewriter()
                                    listener: handleIdentifier(, expression)
                                  listener: handleNoTypeArguments(if)
                                  parseArgumentsOpt()
                                    listener: handleNoArguments(if)
                                  listener: handleSend(, )
                          listener: endConstantPattern(null)
                        listener: endPattern()
                      listener: handleSwitchExpressionCasePattern()
                      ensureFunctionArrow()
                        rewriteAndRecover(, Message[Template(ExpectedButGot), Expected '=>' before this., null, {string: =>}], =>)
                          reportRecoverableError(if, Message[Template(ExpectedButGot), Expected '=>' before this., null, {string: =>}])
                            listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected '=>' before this., null, {string: =>}], if, if)
                          rewriter()
                      parseExpression(=>)
                        looksLikeOuterPatternEquals(=>)
                          skipOuterPattern(=>)
                        parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=>, true, ConstantPatternContext.none)
                            parsePrimary(=>, expression, ConstantPatternContext.none)
                              inPlainSync()
                              parseSend(=>, expression, ConstantPatternContext.none)
                                ensureIdentifier(=>, expression)
                                  reportRecoverableErrorWithToken(if, Template(ExpectedIdentifier))
                                    listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'if'., Try inserting an identifier before 'if'., {lexeme: if}], if, if)
                                  rewriter()
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(if)
                                parseArgumentsOpt()
                                  listener: handleNoArguments(if)
                                listener: handleSend(, )
                      listener: endSwitchExpressionCase(if, null, =>, )
                      findNextCommaOrSemicolon(if, })
                      reportRecoverableError(if, Message[Template(ExpectedButGot), Expected '}' before this., null, {string: }}])
                        listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected '}' before this., null, {string: }}], if, if)
                      listener: endSwitchExpressionBlock(1, {, })
                      listener: endSwitchExpression(switch, })
            ensureSemicolon(})
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
        listener: endTopLevelMethod(void, null, ;)
  listener: endTopLevelDeclaration(;)
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
