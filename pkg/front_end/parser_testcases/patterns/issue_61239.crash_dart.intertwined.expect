parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(x)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(x, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  looksLikeOuterPatternEquals(return)
                    skipOuterPattern(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSwitchExpression(return)
                          listener: beginSwitchExpression(switch)
                          ensureParenthesizedCondition(switch, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                looksLikeOuterPatternEquals(()
                                  skipOuterPattern(()
                                    skipObjectPatternRest(x)
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(x, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(x)
                                            listener: handleNoArguments())
                                          listener: handleSend(x, x)
                              ensureCloseParen(x, ()
                              listener: handleParenthesizedCondition((, null, null)
                          ensureBlock(), BlockKind(switch expression))
                          listener: beginSwitchExpressionBlock({)
                          listener: beginSwitchExpressionCase()
                          parsePattern({, PatternContext.matching, precedence: 1)
                            listener: beginPattern({)
                            parsePrimaryPattern({, PatternContext.matching)
                              listener: beginConstantPattern(null)
                              parsePrecedenceExpression({, 7, false, ConstantPatternContext.implicit)
                                parseUnaryExpression({, false, ConstantPatternContext.implicit)
                                  parsePrimary({, expression, ConstantPatternContext.implicit)
                                    parseLiteralInt({)
                                      listener: handleLiteralInt(42)
                                rewriter()
                                parsePrecedenceExpression(^, 11, false, ConstantPatternContext.none)
                                  parseUnaryExpression(^, false, ConstantPatternContext.none)
                                    parsePrimary(^, expression, ConstantPatternContext.none)
                                      parseSend(^, expression, ConstantPatternContext.none)
                                        ensureIdentifier(^, expression)
                                          reportRecoverableErrorWithToken(=>, Template(ExpectedIdentifier))
                                          rewriter()
                                        parseArgumentsOpt()
                              listener: endConstantPattern(null)
                            listener: endPattern(42)
                          listener: handleSwitchExpressionCasePattern(42)
                          ensureFunctionArrow(42)
                            rewriteAndRecover(42, Message[Template(ExpectedButGot), Expected '=>' before this., null, {string: =>}], =>)
                              reportRecoverableError(xor, Message[Template(ExpectedButGot), Expected '=>' before this., null, {string: =>}])
                                listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected '=>' before this., null, {string: =>}], xor, xor)
                              rewriter()
                          parseExpression(=>)
                            looksLikeOuterPatternEquals(=>)
                              skipOuterPattern(=>)
                                skipObjectPatternRest(xor)
                            parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                parsePrimary(=>, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                    parseSend(=>, expression, ConstantPatternContext.none)
                                      ensureIdentifier(=>, expression)
                                        listener: handleIdentifier(xor, expression)
                                      listener: handleNoTypeArguments(=>)
                                      parseArgumentsOpt(xor)
                                        listener: handleNoArguments(=>)
                                      listener: handleSend(xor, xor)
                          listener: endSwitchExpressionCase(42, null, =>, xor)
                          findNextCommaOrSemicolon(=>, })
                          reportRecoverableError(=>, Message[Template(ExpectedButGot), Expected ',' before this., null, {string: ,}])
                            listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ',' before this., null, {string: ,}], =>, =>)
                          listener: beginSwitchExpressionCase()
                          parsePattern(,, PatternContext.matching, precedence: 1)
                            listener: beginPattern(,)
                            parsePrimaryPattern(,, PatternContext.matching)
                              parseVariablePattern(,, PatternContext.matching, typeInfo: NoType())
                                listener: handleNoType(_)
                                listener: handleWildcardPattern(null, _)
                            listener: endPattern(_)
                          listener: handleSwitchExpressionCasePattern(_)
                          ensureFunctionArrow(_)
                          parseExpression(=>)
                            looksLikeOuterPatternEquals(=>)
                              skipOuterPattern(=>)
                            parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                parsePrimary(=>, expression, ConstantPatternContext.none)
                                  parseLiteralInt(=>)
                                    listener: handleLiteralInt(0)
                          listener: endSwitchExpressionCase(_, null, =>, 0)
                          listener: endSwitchExpressionBlock(2, {, })
                          listener: endSwitchExpression(switch, })
                ensureSemicolon(})
                  reportRecoverableError(}, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], }, })
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
