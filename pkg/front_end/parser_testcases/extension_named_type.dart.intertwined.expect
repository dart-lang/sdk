parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, , class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, A)
        parseClass(A, class, class, A)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A, DeclarationHeaderKind.Class)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionTypeDeclaration(extension, type, extension, type)
          listener: handleNoTypeVariables(A)
          listener: beginExtensionTypeDeclaration(extension, on)
          reportRecoverableError(on, MissingPrimaryConstructor)
            listener: handleRecoverableError(MissingPrimaryConstructor, on, on)
          listener: handleNoPrimaryConstructor(on, null)
          parseClassOrMixinOrEnumImplementsOpt(on)
            listener: handleImplements(null, 0)
          parseExtensionTypeHeaderRecovery(on, extension)
            parseDeclarationHeaderRecoveryInternal(on, extension, extension, DeclarationHeaderKind.ExtensionType)
              parseClassOrMixinOrEnumImplementsOpt(on)
              skipUnexpectedTokenOpt(on, [extends, with, implements, {])
                reportRecoverableErrorWithToken(A, Template(UnexpectedToken))
                  listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token 'A'., null, {lexeme: A}], A, A)
              parseClassExtendsOpt(A, DeclarationHeaderKind.ExtensionType)
                listener: handleNoType(A)
                listener: handleClassExtends(null, 1)
              parseClassWithClauseOpt(A)
                listener: handleClassNoWithClause()
              parseClassOrMixinOrEnumImplementsOpt(A)
                listener: handleImplements(null, 0)
              listener: handleRecoverDeclarationHeader(DeclarationHeaderKind.ExtensionType)
          ensureBlock(A, BlockKind(extension type declaration))
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.ExtensionType, on)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, {)
            notEofOrValue(}, method)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.ExtensionType, on)
              parseMetadataStar({)
                listener: beginMetadataStar(method)
                listener: endMetadataStar(0)
              listener: beginMember()
              isReservedKeyword(()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, method, DeclarationKind.ExtensionType, on, false)
                listener: beginMethod(DeclarationKind.ExtensionType, null, null, null, null, null, null, method)
                listener: handleNoType({)
                ensureIdentifierPotentiallyRecovered({, methodDeclaration, false)
                  listener: handleIdentifier(method, methodDeclaration)
                parseQualifiedRestOpt(method, methodDeclarationContinuation)
                parseMethodTypeVar(method)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(method, method, false, MemberKind.NonStaticMethod)
                  parseFormalParameters(method, MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(0, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(0, {, })
                listener: endExtensionTypeMethod(null, method, (, null, })
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.ExtensionType, 1, {, })
          listener: endExtensionTypeDeclaration(extension, extension, type, })
  listener: endTopLevelDeclaration(test)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test, topLevelFunctionDeclaration)
        parseMethodTypeVar(test)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test, test, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(A)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(A, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(A, typeReference)
                listener: handleNoTypeArguments(a)
                listener: handleType(A, null)
                ensureIdentifier(A, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                parseUnaryExpression(=>, true, ConstantPatternContext.none)
                  parsePrimary(=>, expression, ConstantPatternContext.none)
                    parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                      looksLikeFunctionBody(.)
                      parseSend(=>, expression, ConstantPatternContext.none)
                        isNextIdentifier(=>)
                        ensureIdentifier(=>, expression)
                          listener: handleIdentifier(type, expression)
                        listener: handleNoTypeArguments(()
                        parseArgumentsOpt(type)
                          parseArguments(type)
                            parseArgumentsRest(()
                              listener: beginArguments(()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseNewExpression(()
                                        isNextIdentifier(new)
                                        listener: beginNewExpression(new)
                                        parseConstructorReference(new, ConstructorReferenceContext.New, null)
                                          ensureIdentifier(new, constructorReference)
                                            listener: handleIdentifier(A, constructorReference)
                                          listener: beginConstructorReference(A)
                                          parseQualifiedRestOpt(A, constructorReferenceContinuation)
                                          listener: handleNoTypeArguments(()
                                          listener: handleNoConstructorReferenceContinuationAfterTypeArguments(()
                                          listener: endConstructorReference(A, null, (, ConstructorReferenceContext.New)
                                        parseConstructorInvocationArguments(A)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            listener: endArguments(0, (, ))
                                        listener: endNewExpression(new)
                              listener: endArguments(1, (, ))
                        listener: handleSend(type, .)
                parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(., expressionContinuation, ConstantPatternContext.none)
                      isNextIdentifier(.)
                      ensureIdentifier(., expressionContinuation)
                        listener: handleIdentifier(method, expressionContinuation)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(method)
                        parseArguments(method)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            listener: endArguments(0, (, ))
                      listener: handleSend(method, ;)
                listener: handleEndingBinaryExpression(.)
            ensureSemicolon())
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
        listener: endTopLevelMethod(test, null, ;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(3, )
