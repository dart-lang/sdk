parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , Instance of 'VoidType', null, foo, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, var)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers(var, {, null, var, null, null)
                looksLikeLocalFunction(r1)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(r1, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(r1, localVariableDeclaration)
                    listener: beginInitializedIdentifier(r1)
                    parseVariableInitializerOpt(r1)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseConstExpression(=)
                                listener: beginConstLiteral(()
                                parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseLiteralInt(()
                                            listener: handleLiteralInt(42)
                                  ensureCloseParen(,, ()
                                  listener: endRecordLiteral((, 1, const)
                                listener: endConstLiteral(;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(r1)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(r2)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(r2, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(r2, localVariableDeclaration)
                    listener: beginInitializedIdentifier(r2)
                    parseVariableInitializerOpt(r2)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseConstExpression(=)
                                listener: beginConstLiteral(()
                                parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseLiteralInt(()
                                            listener: handleLiteralInt(1)
                                  parseExpression(,)
                                    parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(,, true, ConstantPatternContext.none)
                                        parsePrimary(,, expression, ConstantPatternContext.none)
                                          parseLiteralInt(,)
                                            listener: handleLiteralInt(2)
                                  ensureIdentifier(,, namedRecordFieldReference)
                                    listener: handleIdentifier(a, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(3)
                                  listener: handleNamedRecordField(:)
                                  ensureIdentifier(,, namedRecordFieldReference)
                                    listener: handleIdentifier(b, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(4)
                                  listener: handleNamedRecordField(:)
                                  ensureCloseParen(4, ()
                                  listener: endRecordLiteral((, 4, const)
                                listener: endConstLiteral(;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(r2)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(r3)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(r3, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(r3, localVariableDeclaration)
                    listener: beginInitializedIdentifier(r3)
                    parseVariableInitializerOpt(r3)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseConstExpression(=)
                                listener: beginConstLiteral(()
                                parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseLiteralInt(()
                                            listener: handleLiteralInt(1)
                                  ensureIdentifier(,, namedRecordFieldReference)
                                    listener: handleIdentifier(a, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(2)
                                  listener: handleNamedRecordField(:)
                                  parseExpression(,)
                                    parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(,, true, ConstantPatternContext.none)
                                        parsePrimary(,, expression, ConstantPatternContext.none)
                                          parseLiteralInt(,)
                                            listener: handleLiteralInt(3)
                                  ensureIdentifier(,, namedRecordFieldReference)
                                    listener: handleIdentifier(b, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(4)
                                  listener: handleNamedRecordField(:)
                                  ensureCloseParen(4, ()
                                  listener: endRecordLiteral((, 4, const)
                                listener: endConstLiteral(;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(r3)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(r4)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(r4, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(r4, localVariableDeclaration)
                    listener: beginInitializedIdentifier(r4)
                    parseVariableInitializerOpt(r4)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseConstExpression(=)
                                listener: beginConstLiteral(()
                                parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                  ensureIdentifier((, namedRecordFieldReference)
                                    listener: handleIdentifier(hello, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(42)
                                  listener: handleNamedRecordField(:)
                                  ensureCloseParen(42, ()
                                  listener: endRecordLiteral((, 1, const)
                                listener: endConstLiteral(;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(r4)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(r5)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(r5, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(r5, localVariableDeclaration)
                    listener: beginInitializedIdentifier(r5)
                    parseVariableInitializerOpt(r5)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseConstExpression(=)
                                listener: beginConstLiteral(()
                                parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseLiteralInt(()
                                            listener: handleLiteralInt(42)
                                  ensureCloseParen(42, ()
                                  reportRecoverableError(), RecordLiteralOnePositionalFieldNoTrailingComma)
                                    listener: handleRecoverableError(RecordLiteralOnePositionalFieldNoTrailingComma, ), ))
                                  listener: endRecordLiteral((, 1, const)
                                listener: endConstLiteral(;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(r5)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(r6)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(r6, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(r6, localVariableDeclaration)
                    listener: beginInitializedIdentifier(r6)
                    parseVariableInitializerOpt(r6)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseConstExpression(=)
                                listener: beginConstLiteral(()
                                parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                  ensureCloseParen((, ()
                                  listener: endRecordLiteral((, 0, const)
                                listener: endConstLiteral(;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(r6)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(6, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(void)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(}, null, null, }, Instance of 'VoidType', null, bar, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(bar, topLevelFunctionDeclaration)
        parseMethodTypeVar(bar)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(bar, bar, false, MemberKind.TopLevelMethod)
          parseFormalParameters(bar, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseOptionalNamedParameters((, MemberKind.TopLevelMethod)
                listener: beginOptionalFormalParameters({)
                parseFormalParameter({, FormalParameterKind.optionalNamed, MemberKind.TopLevelMethod)
                  parseMetadataStar({)
                    listener: beginMetadataStar(dynamic)
                    listener: endMetadataStar(0)
                  listener: beginFormalParameter(dynamic, MemberKind.TopLevelMethod, null, null, null)
                  listener: handleIdentifier(dynamic, typeReference)
                  listener: handleNoTypeArguments(record1)
                  listener: handleType(dynamic, null)
                  ensureIdentifier(dynamic, formalParameterDeclaration)
                    listener: handleIdentifier(record1, formalParameterDeclaration)
                  listener: beginFormalParameterDefaultValueExpression()
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                            parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                              listener: beginParenthesizedExpressionOrRecordLiteral(()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseLiteralInt(()
                                        listener: handleLiteralInt(42)
                              parseExpression(,)
                                parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression(,, true, ConstantPatternContext.none)
                                    parsePrimary(,, expression, ConstantPatternContext.none)
                                      parseLiteralInt(,)
                                        listener: handleLiteralInt(42)
                              ensureCloseParen(42, ()
                              listener: endRecordLiteral((, 2, null)
                  listener: endFormalParameterDefaultValueExpression()
                  listener: handleValuedFormalParameter(=, ,, FormalParameterKind.optionalNamed)
                  listener: endFormalParameter(null, null, null, record1, (, ), FormalParameterKind.optionalNamed, MemberKind.TopLevelMethod)
                parseFormalParameter(,, FormalParameterKind.optionalNamed, MemberKind.TopLevelMethod)
                  parseMetadataStar(,)
                    listener: beginMetadataStar(dynamic)
                    listener: endMetadataStar(0)
                  listener: beginFormalParameter(dynamic, MemberKind.TopLevelMethod, null, null, null)
                  listener: handleIdentifier(dynamic, typeReference)
                  listener: handleNoTypeArguments(record2)
                  listener: handleType(dynamic, null)
                  ensureIdentifier(dynamic, formalParameterDeclaration)
                    listener: handleIdentifier(record2, formalParameterDeclaration)
                  listener: beginFormalParameterDefaultValueExpression()
                  parseExpression(=)
                    parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(=, true, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseConstExpression(=)
                            listener: beginConstLiteral(()
                            parseParenthesizedExpressionOrRecordLiteral(const, const, ConstantPatternContext.none)
                              listener: beginParenthesizedExpressionOrRecordLiteral(()
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseLiteralInt(()
                                        listener: handleLiteralInt(42)
                              parseExpression(,)
                                parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression(,, true, ConstantPatternContext.none)
                                    parsePrimary(,, expression, ConstantPatternContext.none)
                                      parseLiteralInt(,)
                                        listener: handleLiteralInt(42)
                              ensureCloseParen(42, ()
                              listener: endRecordLiteral((, 2, const)
                            listener: endConstLiteral(})
                  listener: endFormalParameterDefaultValueExpression()
                  listener: handleValuedFormalParameter(=, }, FormalParameterKind.optionalNamed)
                  listener: endFormalParameter(null, null, null, record2, const, ), FormalParameterKind.optionalNamed, MemberKind.TopLevelMethod)
                listener: endOptionalFormalParameters(2, {, })
              ensureCloseParen(}, ()
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(0, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(void)
  listener: endCompilationUnit(2, )
