parseUnit(main)
  skipErrorTokens(main)
  listener: beginCompilationUnit(main)
  syntheticPreviousToken(main)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(main)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(main)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction(emptyRecord1)
                  listener: beginMetadataStar(()
                  listener: endMetadataStar(0)
                  parseRecordType((, {, false)
                    listener: beginRecordType(()
                    listener: endRecordType((, null, 0, false)
                  listener: beginVariablesDeclaration(emptyRecord1, null, null)
                  parseVariablesDeclarationRest(), true)
                    parseOptionallyInitializedIdentifier())
                      ensureIdentifier(), localVariableDeclaration)
                        listener: handleIdentifier(emptyRecord1, localVariableDeclaration)
                      listener: beginInitializedIdentifier(emptyRecord1)
                      parseVariableInitializerOpt(emptyRecord1)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    ensureCloseParen((, ()
                                    listener: endRecordLiteral((, 0, null)
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(emptyRecord1)
                    ensureSemicolon())
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(emptyRecord2)
                  listener: beginMetadataStar(()
                  listener: endMetadataStar(0)
                  parseRecordType((, ;, false)
                    listener: beginRecordType(()
                    reportRecoverableError(,, RecordTypeZeroFieldsButTrailingComma)
                      listener: handleRecoverableError(RecordTypeZeroFieldsButTrailingComma, ,, ,)
                    listener: endRecordType((, null, 0, false)
                  listener: beginVariablesDeclaration(emptyRecord2, null, null)
                  parseVariablesDeclarationRest(), true)
                    parseOptionallyInitializedIdentifier())
                      ensureIdentifier(), localVariableDeclaration)
                        listener: handleIdentifier(emptyRecord2, localVariableDeclaration)
                      listener: beginInitializedIdentifier(emptyRecord2)
                      parseVariableInitializerOpt(emptyRecord2)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    ensureCloseParen((, ()
                                    listener: endRecordLiteral((, 0, null)
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(emptyRecord2)
                    ensureSemicolon())
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(emptyRecord3)
                  listener: beginMetadataStar(()
                  listener: endMetadataStar(0)
                  parseRecordType((, ;, false)
                    listener: beginRecordType(()
                    listener: endRecordType((, null, 0, false)
                  listener: beginVariablesDeclaration(emptyRecord3, null, null)
                  parseVariablesDeclarationRest(), true)
                    parseOptionallyInitializedIdentifier())
                      ensureIdentifier(), localVariableDeclaration)
                        listener: handleIdentifier(emptyRecord3, localVariableDeclaration)
                      listener: beginInitializedIdentifier(emptyRecord3)
                      parseVariableInitializerOpt(emptyRecord3)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    ensureCloseParen(,, ()
                                    reportRecoverableError(,, RecordLiteralZeroFieldsWithTrailingComma)
                                      listener: handleRecoverableError(RecordLiteralZeroFieldsWithTrailingComma, ,, ,)
                                    listener: endRecordLiteral((, 0, null)
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(emptyRecord3)
                    ensureSemicolon())
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(emptyRecord4)
                  listener: beginMetadataStar(()
                  listener: endMetadataStar(0)
                  parseRecordType((, ;, false)
                    listener: beginRecordType(()
                    reportRecoverableError(,, RecordTypeZeroFieldsButTrailingComma)
                      listener: handleRecoverableError(RecordTypeZeroFieldsButTrailingComma, ,, ,)
                    listener: endRecordType((, null, 0, false)
                  listener: beginVariablesDeclaration(emptyRecord4, null, null)
                  parseVariablesDeclarationRest(), true)
                    parseOptionallyInitializedIdentifier())
                      ensureIdentifier(), localVariableDeclaration)
                        listener: handleIdentifier(emptyRecord4, localVariableDeclaration)
                      listener: beginInitializedIdentifier(emptyRecord4)
                      parseVariableInitializerOpt(emptyRecord4)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    ensureCloseParen(,, ()
                                    reportRecoverableError(,, RecordLiteralZeroFieldsWithTrailingComma)
                                      listener: handleRecoverableError(RecordLiteralZeroFieldsWithTrailingComma, ,, ,)
                                    listener: endRecordLiteral((, 0, null)
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(emptyRecord4)
                    ensureSemicolon())
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(emptyRecord5)
                  listener: beginMetadataStar(()
                  listener: endMetadataStar(0)
                  parseRecordType((, ;, false)
                    listener: beginRecordType(()
                    parseRecordTypeField((, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(()
                        listener: beginMetadataStar(int)
                        listener: endMetadataStar(0)
                      listener: handleIdentifier(int, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(int, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    parseRecordTypeField(,, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(,)
                        listener: beginMetadataStar(,)
                        listener: endMetadataStar(0)
                      reportRecoverableErrorWithToken(,, Template(ExpectedType))
                        listener: handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got ','., null, {lexeme: ,}], ,, ,)
                      rewriter()
                      listener: handleIdentifier(, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    listener: endRecordType((, null, 2, false)
                  listener: beginVariablesDeclaration(emptyRecord5, null, null)
                  parseVariablesDeclarationRest(), true)
                    parseOptionallyInitializedIdentifier())
                      ensureIdentifier(), localVariableDeclaration)
                        listener: handleIdentifier(emptyRecord5, localVariableDeclaration)
                      listener: beginInitializedIdentifier(emptyRecord5)
                      parseVariableInitializerOpt(emptyRecord5)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseLiteralInt(()
                                              listener: handleLiteralInt(42)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseLiteralInt(,)
                                              listener: handleLiteralInt(42)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseSend(,, expression, ConstantPatternContext.none)
                                              ensureIdentifier(,, expression)
                                                reportRecoverableErrorWithToken(,, Template(ExpectedIdentifier))
                                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ','., Try inserting an identifier before ','., {lexeme: ,}], ,, ,)
                                                rewriter()
                                                listener: handleIdentifier(, expression)
                                              listener: handleNoTypeArguments(,)
                                              parseArgumentsOpt()
                                                listener: handleNoArguments(,)
                                              listener: handleSend(, )
                                    ensureCloseParen(,, ()
                                    listener: endRecordLiteral((, 3, null)
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(emptyRecord5)
                    ensureSemicolon())
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(emptyRecord6)
                  listener: beginMetadataStar(()
                  listener: endMetadataStar(0)
                  parseRecordType((, ;, false)
                    listener: beginRecordType(()
                    parseRecordTypeField((, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(()
                        listener: beginMetadataStar(int)
                        listener: endMetadataStar(0)
                      listener: handleIdentifier(int, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(int, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    parseRecordTypeField(,, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(,)
                        listener: beginMetadataStar(int)
                        listener: endMetadataStar(0)
                      listener: handleIdentifier(int, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(int, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    parseRecordTypeField(,, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(,)
                        listener: beginMetadataStar(,)
                        listener: endMetadataStar(0)
                      reportRecoverableErrorWithToken(,, Template(ExpectedType))
                        listener: handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got ','., null, {lexeme: ,}], ,, ,)
                      rewriter()
                      listener: handleIdentifier(, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    listener: endRecordType((, null, 3, false)
                  listener: beginVariablesDeclaration(emptyRecord6, null, null)
                  parseVariablesDeclarationRest(), true)
                    parseOptionallyInitializedIdentifier())
                      ensureIdentifier(), localVariableDeclaration)
                        listener: handleIdentifier(emptyRecord6, localVariableDeclaration)
                      listener: beginInitializedIdentifier(emptyRecord6)
                      parseVariableInitializerOpt(emptyRecord6)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseLiteralInt(()
                                              listener: handleLiteralInt(42)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseLiteralInt(,)
                                              listener: handleLiteralInt(42)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseSend(,, expression, ConstantPatternContext.none)
                                              ensureIdentifier(,, expression)
                                                reportRecoverableErrorWithToken(,, Template(ExpectedIdentifier))
                                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ','., Try inserting an identifier before ','., {lexeme: ,}], ,, ,)
                                                rewriter()
                                                listener: handleIdentifier(, expression)
                                              listener: handleNoTypeArguments(,)
                                              parseArgumentsOpt()
                                                listener: handleNoArguments(,)
                                              listener: handleSend(, )
                                    ensureCloseParen(,, ()
                                    listener: endRecordLiteral((, 3, null)
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(emptyRecord6)
                    ensureSemicolon())
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(emptyRecord7)
                  listener: beginMetadataStar(()
                  listener: endMetadataStar(0)
                  parseRecordType((, ;, false)
                    listener: beginRecordType(()
                    parseRecordTypeField((, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(()
                        listener: beginMetadataStar(int)
                        listener: endMetadataStar(0)
                      listener: handleIdentifier(int, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(int, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    parseRecordTypeField(,, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(,)
                        listener: beginMetadataStar(,)
                        listener: endMetadataStar(0)
                      reportRecoverableErrorWithToken(,, Template(ExpectedType))
                        listener: handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got ','., null, {lexeme: ,}], ,, ,)
                      rewriter()
                      listener: handleIdentifier(, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    parseRecordTypeField(,, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(,)
                        listener: beginMetadataStar(,)
                        listener: endMetadataStar(0)
                      reportRecoverableErrorWithToken(,, Template(ExpectedType))
                        listener: handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got ','., null, {lexeme: ,}], ,, ,)
                      rewriter()
                      listener: handleIdentifier(, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    listener: endRecordType((, null, 3, false)
                  listener: beginVariablesDeclaration(emptyRecord7, null, null)
                  parseVariablesDeclarationRest(), true)
                    parseOptionallyInitializedIdentifier())
                      ensureIdentifier(), localVariableDeclaration)
                        listener: handleIdentifier(emptyRecord7, localVariableDeclaration)
                      listener: beginInitializedIdentifier(emptyRecord7)
                      parseVariableInitializerOpt(emptyRecord7)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseLiteralInt(()
                                              listener: handleLiteralInt(42)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseLiteralInt(,)
                                              listener: handleLiteralInt(42)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseSend(,, expression, ConstantPatternContext.none)
                                              ensureIdentifier(,, expression)
                                                reportRecoverableErrorWithToken(,, Template(ExpectedIdentifier))
                                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ','., Try inserting an identifier before ','., {lexeme: ,}], ,, ,)
                                                rewriter()
                                                listener: handleIdentifier(, expression)
                                              listener: handleNoTypeArguments(,)
                                              parseArgumentsOpt()
                                                listener: handleNoArguments(,)
                                              listener: handleSend(, )
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseSend(,, expression, ConstantPatternContext.none)
                                              ensureIdentifier(,, expression)
                                                reportRecoverableErrorWithToken(,, Template(ExpectedIdentifier))
                                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ','., Try inserting an identifier before ','., {lexeme: ,}], ,, ,)
                                                rewriter()
                                                listener: handleIdentifier(, expression)
                                              listener: handleNoTypeArguments(,)
                                              parseArgumentsOpt()
                                                listener: handleNoArguments(,)
                                              listener: handleSend(, )
                                    ensureCloseParen(,, ()
                                    listener: endRecordLiteral((, 4, null)
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(emptyRecord7)
                    ensureSemicolon())
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(emptyRecord8)
                  listener: beginMetadataStar(()
                  listener: endMetadataStar(0)
                  parseRecordType((, ;, false)
                    listener: beginRecordType(()
                    parseRecordTypeField((, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(()
                        listener: beginMetadataStar(int)
                        listener: endMetadataStar(0)
                      listener: handleIdentifier(int, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(int, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    parseRecordTypeField(,, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(,)
                        listener: beginMetadataStar(int)
                        listener: endMetadataStar(0)
                      listener: handleIdentifier(int, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(int, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    parseRecordTypeField(,, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(,)
                        listener: beginMetadataStar(,)
                        listener: endMetadataStar(0)
                      reportRecoverableErrorWithToken(,, Template(ExpectedType))
                        listener: handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got ','., null, {lexeme: ,}], ,, ,)
                      rewriter()
                      listener: handleIdentifier(, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    parseRecordTypeField(,, identifierIsOptional: true)
                      listener: beginRecordTypeEntry()
                      parseMetadataStar(,)
                        listener: beginMetadataStar(,)
                        listener: endMetadataStar(0)
                      reportRecoverableErrorWithToken(,, Template(ExpectedType))
                        listener: handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got ','., null, {lexeme: ,}], ,, ,)
                      rewriter()
                      listener: handleIdentifier(, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(, null)
                      listener: handleNoName(,)
                      listener: endRecordTypeEntry()
                    listener: endRecordType((, null, 4, false)
                  listener: beginVariablesDeclaration(emptyRecord8, null, null)
                  parseVariablesDeclarationRest(), true)
                    parseOptionallyInitializedIdentifier())
                      ensureIdentifier(), localVariableDeclaration)
                        listener: handleIdentifier(emptyRecord8, localVariableDeclaration)
                      listener: beginInitializedIdentifier(emptyRecord8)
                      parseVariableInitializerOpt(emptyRecord8)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseLiteralInt(()
                                              listener: handleLiteralInt(42)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseLiteralInt(,)
                                              listener: handleLiteralInt(42)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseSend(,, expression, ConstantPatternContext.none)
                                              ensureIdentifier(,, expression)
                                                reportRecoverableErrorWithToken(,, Template(ExpectedIdentifier))
                                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ','., Try inserting an identifier before ','., {lexeme: ,}], ,, ,)
                                                rewriter()
                                                listener: handleIdentifier(, expression)
                                              listener: handleNoTypeArguments(,)
                                              parseArgumentsOpt()
                                                listener: handleNoArguments(,)
                                              listener: handleSend(, )
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            parseSend(,, expression, ConstantPatternContext.none)
                                              ensureIdentifier(,, expression)
                                                reportRecoverableErrorWithToken(,, Template(ExpectedIdentifier))
                                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ','., Try inserting an identifier before ','., {lexeme: ,}], ,, ,)
                                                rewriter()
                                                listener: handleIdentifier(, expression)
                                              listener: handleNoTypeArguments(,)
                                              parseArgumentsOpt()
                                                listener: handleNoArguments(,)
                                              listener: handleSend(, )
                                    ensureCloseParen(,, ()
                                    listener: endRecordLiteral((, 4, null)
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(emptyRecord8)
                    ensureSemicolon())
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(8, {, })
        listener: endTopLevelMethod(main, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(main)
  listener: endCompilationUnit(1, )
