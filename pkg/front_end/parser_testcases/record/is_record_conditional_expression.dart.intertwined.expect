parseUnit(foo)
  skipErrorTokens(foo)
  listener: beginCompilationUnit(foo)
  syntheticPreviousToken(foo)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(foo)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(foo)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, foo, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(dynamic)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(dynamic, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(dynamic, typeReference)
                listener: handleNoTypeArguments(a)
                listener: handleType(dynamic, null)
                ensureIdentifier(dynamic, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, final)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers(final, {, null, final, null, null)
                looksLikeLocalFunction(b)
                listener: beginMetadataStar(final)
                listener: endMetadataStar(0)
                listener: handleNoType(final)
                listener: beginVariablesDeclaration(b, null, final)
                parseVariablesDeclarationRest(final, true)
                  parseOptionallyInitializedIdentifier(final)
                    ensureIdentifier(final, localVariableDeclaration)
                      listener: handleIdentifier(b, localVariableDeclaration)
                    listener: beginInitializedIdentifier(b)
                    parseVariableInitializerOpt(b)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                                parseSend(=, expression, ConstantPatternContext.none)
                                  ensureIdentifier(=, expression)
                                    listener: handleIdentifier(a, expression)
                                  listener: handleNoTypeArguments(is)
                                  parseArgumentsOpt(a)
                                    listener: handleNoArguments(is)
                                  listener: handleSend(a, a)
                          parseIsOperatorRest(a)
                            listener: beginIsOperatorType(is)
                            computeTypeAfterIsOrAs(is)
                            parseRecordType((, is, false)
                              listener: beginRecordType(()
                              parseRecordTypeField((, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(()
                                  listener: beginMetadataStar(int)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(int, typeReference)
                                listener: handleNoTypeArguments(,)
                                listener: handleType(int, null)
                                listener: handleNoName(,)
                                listener: endRecordTypeEntry()
                              parseRecordTypeField(,, identifierIsOptional: true)
                                listener: beginRecordTypeEntry()
                                parseMetadataStar(,)
                                  listener: beginMetadataStar(int)
                                  listener: endMetadataStar(0)
                                listener: handleIdentifier(int, typeReference)
                                listener: handleNoTypeArguments())
                                listener: handleType(int, null)
                                listener: handleNoName())
                                listener: endRecordTypeEntry()
                              listener: endRecordType((, null, 2, false)
                            listener: endIsOperatorType(is)
                            listener: handleIsOperator(is, null)
                            skipChainedAsIsOperators())
                          parseConditionalExpressionRest())
                            listener: beginConditionalExpression(?)
                            parseExpressionWithoutCascade(?)
                              parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                                parseUnaryExpression(?, false, ConstantPatternContext.none)
                                  parsePrimary(?, expression, ConstantPatternContext.none)
                                    parseLiteralInt(?)
                                      listener: handleLiteralInt(42)
                            ensureColon(42)
                            listener: handleConditionalExpressionColon()
                            parseExpressionWithoutCascade(:)
                              parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                                parseUnaryExpression(:, false, ConstantPatternContext.none)
                                  parsePrimary(:, expression, ConstantPatternContext.none)
                                    parseLiteralInt(:)
                                      listener: handleLiteralInt(43)
                            listener: endConditionalExpression(?, :, 43)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(b)
                  ensureSemicolon(43)
                  listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(foo, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(foo)
  listener: endCompilationUnit(1, )
