parseUnit(()
  skipErrorTokens(()
  listener: beginCompilationUnit(()
  syntheticPreviousToken(()
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(()
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(()
      parseTopLevelMethod(, null, null, , ComplexTypeInfo(start: (, typeArguments: NoTypeParamOrArg(), beforeQuestionMark: null, end: ), typeVariableStarters: [], gftHasReturnType: null, isRecordType: true, gftReturnTypeHasRecordType: false, recovered: false), null, f1, false)
        listener: beginTopLevelMethod(, null, null)
        parseRecordType((, , false)
          listener: beginRecordType(()
          parseRecordTypeField((, identifierIsOptional: true)
            listener: beginRecordTypeEntry()
            parseMetadataStar(()
              listener: beginMetadataStar(int)
              listener: endMetadataStar(0)
            listener: handleIdentifier(int, typeReference)
            listener: handleNoTypeArguments(,)
            listener: handleType(int, null)
            listener: handleNoName(,)
            listener: endRecordTypeEntry()
          parseRecordTypeField(,, identifierIsOptional: true)
            listener: beginRecordTypeEntry()
            parseMetadataStar(,)
              listener: beginMetadataStar(T)
              listener: endMetadataStar(0)
            listener: handleIdentifier(T, typeReference)
            listener: handleNoTypeArguments())
            listener: handleType(T, null)
            listener: handleNoName())
            listener: endRecordTypeEntry()
          listener: endRecordType((, null, 2, false)
        ensureIdentifierPotentiallyRecovered(), topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f1, topLevelFunctionDeclaration)
        parseMethodTypeVar(f1)
          listener: beginTypeVariables(<)
          listener: beginMetadataStar(T)
          listener: endMetadataStar(0)
          listener: handleIdentifier(T, typeVariableDeclaration)
          listener: beginTypeVariable(T)
          listener: handleTypeVariablesDefined(T, 1)
          listener: handleNoType(T)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
        parseGetterOrFormalParameters(>, f1, false, MemberKind.TopLevelMethod)
          parseFormalParameters(>, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(T)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(T, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(T, typeReference)
                listener: handleNoTypeArguments(t)
                listener: handleType(T, null)
                ensureIdentifier(T, formalParameterDeclaration)
                  listener: handleIdentifier(t, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, t, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(return, ConstantPatternContext.none)
                          parseParenthesizedExpressionOrRecordLiteral(return, null, ConstantPatternContext.none)
                            listener: beginParenthesizedExpressionOrRecordLiteral(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseLiteralInt(()
                                      listener: handleLiteralInt(42)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(t, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(t)
                                          listener: handleNoArguments())
                                        listener: handleSend(t, t)
                            ensureCloseParen(t, ()
                            listener: endRecordLiteral((, 2, null)
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod((, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(()
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(()
      parseTopLevelMethod(}, null, null, }, ComplexTypeInfo(start: (, typeArguments: NoTypeParamOrArg(), beforeQuestionMark: null, end: ), typeVariableStarters: [], gftHasReturnType: null, isRecordType: true, gftReturnTypeHasRecordType: false, recovered: false), null, f2, false)
        listener: beginTopLevelMethod(}, null, null)
        parseRecordType((, }, false)
          listener: beginRecordType(()
          parseRecordTypeField((, identifierIsOptional: true)
            listener: beginRecordTypeEntry()
            parseMetadataStar(()
              listener: beginMetadataStar(int)
              listener: endMetadataStar(0)
            listener: handleIdentifier(int, typeReference)
            listener: handleNoTypeArguments(,)
            listener: handleType(int, null)
            listener: handleNoName(,)
            listener: endRecordTypeEntry()
          parseRecordTypeField(,, identifierIsOptional: true)
            listener: beginRecordTypeEntry()
            parseMetadataStar(,)
              listener: beginMetadataStar(T)
              listener: endMetadataStar(0)
            listener: handleIdentifier(T, typeReference)
            listener: handleNoTypeArguments())
            listener: handleType(T, null)
            listener: handleNoName())
            listener: endRecordTypeEntry()
          listener: endRecordType((, null, 2, false)
        ensureIdentifierPotentiallyRecovered(), topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f2, topLevelFunctionDeclaration)
        parseMethodTypeVar(f2)
          listener: beginTypeVariables(<)
          listener: beginMetadataStar(T)
          listener: endMetadataStar(0)
          listener: handleIdentifier(T, typeVariableDeclaration)
          listener: beginTypeVariable(T)
          listener: handleTypeVariablesDefined(T, 1)
          listener: handleNoType(T)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
        parseGetterOrFormalParameters(>, f2, false, MemberKind.TopLevelMethod)
          parseFormalParameters(>, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(T)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(T, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(T, typeReference)
                listener: handleNoTypeArguments(t)
                listener: handleType(T, null)
                ensureIdentifier(T, formalParameterDeclaration)
                  listener: handleIdentifier(t, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, t, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                parseUnaryExpression(=>, true, ConstantPatternContext.none)
                  parsePrimary(=>, expression, ConstantPatternContext.none)
                    parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=>, ConstantPatternContext.none)
                      parseParenthesizedExpressionOrRecordLiteral(=>, null, ConstantPatternContext.none)
                        listener: beginParenthesizedExpressionOrRecordLiteral(()
                        parseExpression(()
                          parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression((, true, ConstantPatternContext.none)
                              parsePrimary((, expression, ConstantPatternContext.none)
                                parseLiteralInt(()
                                  listener: handleLiteralInt(42)
                        parseExpression(,)
                          parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(,, true, ConstantPatternContext.none)
                              parsePrimary(,, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                  parseSend(,, expression, ConstantPatternContext.none)
                                    ensureIdentifier(,, expression)
                                      listener: handleIdentifier(t, expression)
                                    listener: handleNoTypeArguments())
                                    parseArgumentsOpt(t)
                                      listener: handleNoArguments())
                                    listener: handleSend(t, t)
                        ensureCloseParen(t, ()
                        listener: endRecordLiteral((, 2, null)
            ensureSemicolon())
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
        listener: endTopLevelMethod((, null, ;)
  listener: endTopLevelDeclaration(;)
  reportAllErrorTokens(()
  listener: endCompilationUnit(2, )
