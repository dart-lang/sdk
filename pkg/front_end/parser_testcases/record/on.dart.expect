Problems reported:

parser/record/on:5:9: Expected a type, but got '['.
  } on ([int? i, String? n]) {
        ^

parser/record/on:5:9: Expected ')' before this.
  } on ([int? i, String? n]) {
        ^

parser/record/on:5:28: A record type with exactly one positional field requires a trailing comma.
  } on ([int? i, String? n]) {
                           ^

parser/record/on:7:6: A catch clause must have a body, even if it is empty.
  on();
     ^

beginCompilationUnit(main)
  beginMetadataStar(main)
  endMetadataStar(0)
  beginTopLevelMember(main)
    beginTopLevelMethod(, null, null)
      handleNoType()
      handleIdentifier(main, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
        beginTryStatement(try)
          beginBlock({, BlockKind(try statement))
            handleIdentifier(print, expression)
            handleNoTypeArguments(()
            beginArguments(()
              handleLiteralInt(0)
            endArguments(1, (, ))
            handleSend(print, ;)
            handleExpressionStatement(;)
          endBlock(1, {, }, BlockKind(try statement))
          beginCatchClause(on)
            handleIdentifier(String, typeReference)
            handleNoTypeArguments({)
            handleType(String, null)
          endCatchClause({)
          beginBlock({, BlockKind(catch clause))
          endBlock(0, {, }, BlockKind(catch clause))
          handleCatchBlock(on, null, null)
          beginCatchClause(on)
            beginRecordType(()
              beginRecordTypeEntry()
                beginMetadataStar([)
                endMetadataStar(0)
                handleRecoverableError(Message[ExpectedType, Expected a type, but got '['., null, {lexeme: [}], [, [)
                handleIdentifier(, typeReference)
                handleNoTypeArguments([)
                handleType(, null)
                handleNoName([)
              endRecordTypeEntry()
              handleRecoverableError(Message[ExpectedButGot, Expected ')' before this., null, {string: )}], [, [)
              handleRecoverableError(RecordTypeOnePositionalFieldNoTrailingComma, ), ))
            endRecordType((, null, 1, false)
          endCatchClause({)
          beginBlock({, BlockKind(catch clause))
          endBlock(0, {, }, BlockKind(catch clause))
          handleCatchBlock(on, null, null)
          beginCatchClause(on)
            beginRecordType(()
            endRecordType((, null, 0, false)
          endCatchClause(;)
          handleRecoverableError(Message[ExpectedClassOrMixinBody, A catch clause must have a body, even if it is empty., Try adding an empty body., {string: catch clause}], ), ))
          beginBlock({, BlockKind(catch clause))
          endBlock(0, {, }, BlockKind(catch clause))
          handleCatchBlock(on, null, null)
        endTryStatement(3, try, null)
        handleEmptyStatement(;)
      endBlockFunctionBody(2, {, })
    endTopLevelMethod(main, null, })
  endTopLevelDeclaration()
endCompilationUnit(1, )
