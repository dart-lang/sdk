parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, var)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers(var, {, null, var, null, null)
                looksLikeLocalFunction(f0)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(f0, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(f0, localVariableDeclaration)
                    listener: beginInitializedIdentifier(f0)
                    parseVariableInitializerOpt(f0)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                listener: handleNoTypeVariables(()
                                parseFunctionExpression(=)
                                  listener: beginFunctionExpression(()
                                  parseFormalParametersRequiredOpt(=, MemberKind.Local)
                                    parseFormalParametersRest((, MemberKind.Local)
                                      listener: beginFormalParameters((, MemberKind.Local)
                                      listener: endFormalParameters(0, (, ), MemberKind.Local)
                                  parseAsyncOptBody(), true, false)
                                    parseAsyncModifierOpt())
                                      listener: handleAsyncModifier(null, null)
                                      inPlainSync()
                                    parseFunctionBody(), true, false)
                                      parseExpressionFunctionBody(=>, true)
                                        parseExpression(=>)
                                          parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                              parsePrimary(=>, expression, ConstantPatternContext.none)
                                                parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                  looksLikeFunctionBody(;)
                                                  parseSend(=>, expression, ConstantPatternContext.none)
                                                    isNextIdentifier(=>)
                                                    ensureIdentifier(=>, expression)
                                                      listener: handleIdentifier(print, expression)
                                                    listener: handleNoTypeArguments(()
                                                    parseArgumentsOpt(print)
                                                      parseArguments(print)
                                                        parseArgumentsRest(()
                                                          listener: beginArguments(()
                                                          parseExpression(()
                                                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                parsePrimary((, expression, ConstantPatternContext.none)
                                                                  parseLiteralString(()
                                                                    parseSingleLiteralString(()
                                                                      listener: beginLiteralString("hello")
                                                                      listener: endLiteralString(0, ))
                                                          listener: endArguments(1, (, ))
                                                    listener: handleSend(print, ;)
                                        listener: handleExpressionFunctionBody(=>, null)
                                        inGenerator()
                                  listener: endFunctionExpression((, ;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(f0)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, f0)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f0)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f0, expression)
                              listener: handleNoTypeArguments(>)
                              parseArgumentsOpt(f0)
                                listener: handleNoArguments(>)
                              listener: handleSend(f0, >)
                      listener: beginBinaryExpression(>)
                      parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                        parseUnaryExpression(>, true, ConstantPatternContext.none)
                          parsePrimary(>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>)
                        parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                          parseUnaryExpression(>, true, ConstantPatternContext.none)
                            parsePrimary(>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, f0)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f0)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f0, expression)
                              listener: handleNoTypeArguments(>>)
                              parseArgumentsOpt(f0)
                                listener: handleNoArguments(>>)
                              listener: handleSend(f0, >>)
                      listener: beginBinaryExpression(>>)
                      parsePrecedenceExpression(>>, 13, true, ConstantPatternContext.none)
                        parseUnaryExpression(>>, true, ConstantPatternContext.none)
                          parsePrimary(>>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>>)
                        parsePrecedenceExpression(>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>, true, ConstantPatternContext.none)
                            parsePrimary(>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, f0)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f0)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f0, expression)
                              listener: handleNoTypeArguments(>>>)
                              parseArgumentsOpt(f0)
                                listener: handleNoArguments(>>>)
                              listener: handleSend(f0, >>>)
                      listener: beginBinaryExpression(>>>)
                      parsePrecedenceExpression(>>>, 13, true, ConstantPatternContext.none)
                        parseUnaryExpression(>>>, true, ConstantPatternContext.none)
                          parsePrimary(>>>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>>>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>>>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>>>)
                        parsePrecedenceExpression(>>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>>, true, ConstantPatternContext.none)
                            parsePrimary(>>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(f1)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(f1, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(f1, localVariableDeclaration)
                    listener: beginInitializedIdentifier(f1)
                    parseVariableInitializerOpt(f1)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                listener: handleNoTypeVariables(()
                                parseFunctionExpression(=)
                                  listener: beginFunctionExpression(()
                                  parseFormalParametersRequiredOpt(=, MemberKind.Local)
                                    parseFormalParametersRest((, MemberKind.Local)
                                      listener: beginFormalParameters((, MemberKind.Local)
                                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                        parseMetadataStar(()
                                          listener: beginMetadataStar(x)
                                          listener: endMetadataStar(0)
                                        listener: beginFormalParameter(x, MemberKind.Local, null, null, null)
                                        listener: handleNoType(()
                                        ensureIdentifier((, formalParameterDeclaration)
                                          listener: handleIdentifier(x, formalParameterDeclaration)
                                        listener: handleFormalParameterWithoutValue())
                                        listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                      listener: endFormalParameters(1, (, ), MemberKind.Local)
                                  parseAsyncOptBody(), true, false)
                                    parseAsyncModifierOpt())
                                      listener: handleAsyncModifier(null, null)
                                      inPlainSync()
                                    parseFunctionBody(), true, false)
                                      parseExpressionFunctionBody(=>, true)
                                        parseExpression(=>)
                                          parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                              parsePrimary(=>, expression, ConstantPatternContext.none)
                                                parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                  looksLikeFunctionBody(;)
                                                  parseSend(=>, expression, ConstantPatternContext.none)
                                                    isNextIdentifier(=>)
                                                    ensureIdentifier(=>, expression)
                                                      listener: handleIdentifier(print, expression)
                                                    listener: handleNoTypeArguments(()
                                                    parseArgumentsOpt(print)
                                                      parseArguments(print)
                                                        parseArgumentsRest(()
                                                          listener: beginArguments(()
                                                          parseExpression(()
                                                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                parsePrimary((, expression, ConstantPatternContext.none)
                                                                  parseLiteralString(()
                                                                    parseSingleLiteralString(()
                                                                      listener: beginLiteralString("hello )
                                                                      parseIdentifierExpression($)
                                                                        parseSend($, expression, ConstantPatternContext.none)
                                                                          isNextIdentifier($)
                                                                          ensureIdentifier($, expression)
                                                                            listener: handleIdentifier(x, expression)
                                                                          listener: handleNoTypeArguments(")
                                                                          parseArgumentsOpt(x)
                                                                            listener: handleNoArguments(")
                                                                          listener: handleSend(x, ")
                                                                      listener: handleInterpolationExpression($, null)
                                                                      parseStringPart(x)
                                                                        listener: handleStringPart(")
                                                                      listener: endLiteralString(1, ))
                                                          listener: endArguments(1, (, ))
                                                    listener: handleSend(print, ;)
                                        listener: handleExpressionFunctionBody(=>, null)
                                        inGenerator()
                                  listener: endFunctionExpression((, ;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(f1)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, f1)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f1)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f1, expression)
                              listener: handleNoTypeArguments(>)
                              parseArgumentsOpt(f1)
                                listener: handleNoArguments(>)
                              listener: handleSend(f1, >)
                      listener: beginBinaryExpression(>)
                      parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                        parseUnaryExpression(>, true, ConstantPatternContext.none)
                          parsePrimary(>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(()
                                                    listener: beginMetadataStar(x)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(x, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(()
                                                  ensureIdentifier((, formalParameterDeclaration)
                                                    listener: handleIdentifier(x, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue())
                                                  listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                listener: endFormalParameters(1, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(x, expression)
                                                                                    listener: handleNoTypeArguments(")
                                                                                    parseArgumentsOpt(x)
                                                                                      listener: handleNoArguments(")
                                                                                    listener: handleSend(x, ")
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(x)
                                                                                  listener: handleStringPart(")
                                                                                listener: endLiteralString(1, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>)
                        parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                          parseUnaryExpression(>, true, ConstantPatternContext.none)
                            parsePrimary(>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, f1)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f1)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f1, expression)
                              listener: handleNoTypeArguments(>>)
                              parseArgumentsOpt(f1)
                                listener: handleNoArguments(>>)
                              listener: handleSend(f1, >>)
                      listener: beginBinaryExpression(>>)
                      parsePrecedenceExpression(>>, 13, true, ConstantPatternContext.none)
                        parseUnaryExpression(>>, true, ConstantPatternContext.none)
                          parsePrimary(>>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(()
                                                    listener: beginMetadataStar(x)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(x, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(()
                                                  ensureIdentifier((, formalParameterDeclaration)
                                                    listener: handleIdentifier(x, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue())
                                                  listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                listener: endFormalParameters(1, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(x, expression)
                                                                                    listener: handleNoTypeArguments(")
                                                                                    parseArgumentsOpt(x)
                                                                                      listener: handleNoArguments(")
                                                                                    listener: handleSend(x, ")
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(x)
                                                                                  listener: handleStringPart(")
                                                                                listener: endLiteralString(1, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>>)
                        parsePrecedenceExpression(>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>, true, ConstantPatternContext.none)
                            parsePrimary(>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, f1)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f1)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f1, expression)
                              listener: handleNoTypeArguments(>>>)
                              parseArgumentsOpt(f1)
                                listener: handleNoArguments(>>>)
                              listener: handleSend(f1, >>>)
                      listener: beginBinaryExpression(>>>)
                      parsePrecedenceExpression(>>>, 13, true, ConstantPatternContext.none)
                        parseUnaryExpression(>>>, true, ConstantPatternContext.none)
                          parsePrimary(>>>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>>>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>>>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(()
                                                    listener: beginMetadataStar(x)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(x, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(()
                                                  ensureIdentifier((, formalParameterDeclaration)
                                                    listener: handleIdentifier(x, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue())
                                                  listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                listener: endFormalParameters(1, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(x, expression)
                                                                                    listener: handleNoTypeArguments(")
                                                                                    parseArgumentsOpt(x)
                                                                                      listener: handleNoArguments(")
                                                                                    listener: handleSend(x, ")
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(x)
                                                                                  listener: handleStringPart(")
                                                                                listener: endLiteralString(1, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>>>)
                        parsePrecedenceExpression(>>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>>, true, ConstantPatternContext.none)
                            parsePrimary(>>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(f2)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(f2, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(f2, localVariableDeclaration)
                    listener: beginInitializedIdentifier(f2)
                    parseVariableInitializerOpt(f2)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                listener: handleNoTypeVariables(()
                                parseFunctionExpression(=)
                                  listener: beginFunctionExpression(()
                                  parseFormalParametersRequiredOpt(=, MemberKind.Local)
                                    parseFormalParametersRest((, MemberKind.Local)
                                      listener: beginFormalParameters((, MemberKind.Local)
                                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                        parseMetadataStar(()
                                          listener: beginMetadataStar(x)
                                          listener: endMetadataStar(0)
                                        listener: beginFormalParameter(x, MemberKind.Local, null, null, null)
                                        listener: handleNoType(()
                                        ensureIdentifier((, formalParameterDeclaration)
                                          listener: handleIdentifier(x, formalParameterDeclaration)
                                        listener: handleFormalParameterWithoutValue(,)
                                        listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                      parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.Local)
                                        parseMetadataStar(,)
                                          listener: beginMetadataStar(y)
                                          listener: endMetadataStar(0)
                                        listener: beginFormalParameter(y, MemberKind.Local, null, null, null)
                                        listener: handleNoType(,)
                                        ensureIdentifier(,, formalParameterDeclaration)
                                          listener: handleIdentifier(y, formalParameterDeclaration)
                                        listener: handleFormalParameterWithoutValue())
                                        listener: endFormalParameter(null, null, null, y, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                      listener: endFormalParameters(2, (, ), MemberKind.Local)
                                  parseAsyncOptBody(), true, false)
                                    parseAsyncModifierOpt())
                                      listener: handleAsyncModifier(null, null)
                                      inPlainSync()
                                    parseFunctionBody(), true, false)
                                      parseExpressionFunctionBody(=>, true)
                                        parseExpression(=>)
                                          parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                              parsePrimary(=>, expression, ConstantPatternContext.none)
                                                parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                  looksLikeFunctionBody(;)
                                                  parseSend(=>, expression, ConstantPatternContext.none)
                                                    isNextIdentifier(=>)
                                                    ensureIdentifier(=>, expression)
                                                      listener: handleIdentifier(print, expression)
                                                    listener: handleNoTypeArguments(()
                                                    parseArgumentsOpt(print)
                                                      parseArguments(print)
                                                        parseArgumentsRest(()
                                                          listener: beginArguments(()
                                                          parseExpression(()
                                                            parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                              parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                parsePrimary((, expression, ConstantPatternContext.none)
                                                                  parseLiteralString(()
                                                                    parseSingleLiteralString(()
                                                                      listener: beginLiteralString("hello )
                                                                      parseIdentifierExpression($)
                                                                        parseSend($, expression, ConstantPatternContext.none)
                                                                          isNextIdentifier($)
                                                                          ensureIdentifier($, expression)
                                                                            listener: handleIdentifier(x, expression)
                                                                          listener: handleNoTypeArguments( )
                                                                          parseArgumentsOpt(x)
                                                                            listener: handleNoArguments( )
                                                                          listener: handleSend(x,  )
                                                                      listener: handleInterpolationExpression($, null)
                                                                      parseStringPart(x)
                                                                        listener: handleStringPart( )
                                                                      parseIdentifierExpression($)
                                                                        parseSend($, expression, ConstantPatternContext.none)
                                                                          isNextIdentifier($)
                                                                          ensureIdentifier($, expression)
                                                                            listener: handleIdentifier(y, expression)
                                                                          listener: handleNoTypeArguments(")
                                                                          parseArgumentsOpt(y)
                                                                            listener: handleNoArguments(")
                                                                          listener: handleSend(y, ")
                                                                      listener: handleInterpolationExpression($, null)
                                                                      parseStringPart(y)
                                                                        listener: handleStringPart(")
                                                                      listener: endLiteralString(2, ))
                                                          listener: endArguments(1, (, ))
                                                    listener: handleSend(print, ;)
                                        listener: handleExpressionFunctionBody(=>, null)
                                        inGenerator()
                                  listener: endFunctionExpression((, ;)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(f2)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, f2)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f2)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f2, expression)
                              listener: handleNoTypeArguments(>)
                              parseArgumentsOpt(f2)
                                listener: handleNoArguments(>)
                              listener: handleSend(f2, >)
                      listener: beginBinaryExpression(>)
                      parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                        parseUnaryExpression(>, true, ConstantPatternContext.none)
                          parsePrimary(>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(()
                                                    listener: beginMetadataStar(x)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(x, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(()
                                                  ensureIdentifier((, formalParameterDeclaration)
                                                    listener: handleIdentifier(x, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue(,)
                                                  listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(,)
                                                    listener: beginMetadataStar(y)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(y, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(,)
                                                  ensureIdentifier(,, formalParameterDeclaration)
                                                    listener: handleIdentifier(y, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue())
                                                  listener: endFormalParameter(null, null, null, y, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                listener: endFormalParameters(2, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(x, expression)
                                                                                    listener: handleNoTypeArguments( )
                                                                                    parseArgumentsOpt(x)
                                                                                      listener: handleNoArguments( )
                                                                                    listener: handleSend(x,  )
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(x)
                                                                                  listener: handleStringPart( )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(y, expression)
                                                                                    listener: handleNoTypeArguments(")
                                                                                    parseArgumentsOpt(y)
                                                                                      listener: handleNoArguments(")
                                                                                    listener: handleSend(y, ")
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(y)
                                                                                  listener: handleStringPart(")
                                                                                listener: endLiteralString(2, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>)
                        parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                          parseUnaryExpression(>, true, ConstantPatternContext.none)
                            parsePrimary(>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, f2)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f2)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f2, expression)
                              listener: handleNoTypeArguments(>>)
                              parseArgumentsOpt(f2)
                                listener: handleNoArguments(>>)
                              listener: handleSend(f2, >>)
                      listener: beginBinaryExpression(>>)
                      parsePrecedenceExpression(>>, 13, true, ConstantPatternContext.none)
                        parseUnaryExpression(>>, true, ConstantPatternContext.none)
                          parsePrimary(>>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(()
                                                    listener: beginMetadataStar(x)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(x, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(()
                                                  ensureIdentifier((, formalParameterDeclaration)
                                                    listener: handleIdentifier(x, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue(,)
                                                  listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(,)
                                                    listener: beginMetadataStar(y)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(y, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(,)
                                                  ensureIdentifier(,, formalParameterDeclaration)
                                                    listener: handleIdentifier(y, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue())
                                                  listener: endFormalParameter(null, null, null, y, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                listener: endFormalParameters(2, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(x, expression)
                                                                                    listener: handleNoTypeArguments( )
                                                                                    parseArgumentsOpt(x)
                                                                                      listener: handleNoArguments( )
                                                                                    listener: handleSend(x,  )
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(x)
                                                                                  listener: handleStringPart( )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(y, expression)
                                                                                    listener: handleNoTypeArguments(")
                                                                                    parseArgumentsOpt(y)
                                                                                      listener: handleNoArguments(")
                                                                                    listener: handleSend(y, ")
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(y)
                                                                                  listener: handleStringPart(")
                                                                                listener: endLiteralString(2, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>>)
                        parsePrecedenceExpression(>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>, true, ConstantPatternContext.none)
                            parsePrimary(>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, f2)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f2)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f2, expression)
                              listener: handleNoTypeArguments(>>>)
                              parseArgumentsOpt(f2)
                                listener: handleNoArguments(>>>)
                              listener: handleSend(f2, >>>)
                      listener: beginBinaryExpression(>>>)
                      parsePrecedenceExpression(>>>, 13, true, ConstantPatternContext.none)
                        parseUnaryExpression(>>>, true, ConstantPatternContext.none)
                          parsePrimary(>>>, expression, ConstantPatternContext.none)
                            parseLiteralInt(>>>)
                              listener: handleLiteralInt(42)
                      listener: endBinaryExpression(>>>)
                  ensureSemicolon(42)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(()
                                                    listener: beginMetadataStar(x)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(x, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(()
                                                  ensureIdentifier((, formalParameterDeclaration)
                                                    listener: handleIdentifier(x, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue(,)
                                                  listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                  parseMetadataStar(,)
                                                    listener: beginMetadataStar(y)
                                                    listener: endMetadataStar(0)
                                                  listener: beginFormalParameter(y, MemberKind.Local, null, null, null)
                                                  listener: handleNoType(,)
                                                  ensureIdentifier(,, formalParameterDeclaration)
                                                    listener: handleIdentifier(y, formalParameterDeclaration)
                                                  listener: handleFormalParameterWithoutValue())
                                                  listener: endFormalParameter(null, null, null, y, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                                                listener: endFormalParameters(2, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(x, expression)
                                                                                    listener: handleNoTypeArguments( )
                                                                                    parseArgumentsOpt(x)
                                                                                      listener: handleNoArguments( )
                                                                                    listener: handleSend(x,  )
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(x)
                                                                                  listener: handleStringPart( )
                                                                                parseIdentifierExpression($)
                                                                                  parseSend($, expression, ConstantPatternContext.none)
                                                                                    isNextIdentifier($)
                                                                                    ensureIdentifier($, expression)
                                                                                      listener: handleIdentifier(y, expression)
                                                                                    listener: handleNoTypeArguments(")
                                                                                    parseArgumentsOpt(y)
                                                                                      listener: handleNoArguments(")
                                                                                    listener: handleSend(y, ")
                                                                                listener: handleInterpolationExpression($, null)
                                                                                parseStringPart(y)
                                                                                  listener: handleStringPart(")
                                                                                listener: endLiteralString(2, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(>>>)
                        parsePrecedenceExpression(>>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>>, true, ConstantPatternContext.none)
                            parsePrimary(>>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody(,)
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ,)
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ,)
                                ensureCloseParen(,, ()
                                listener: endRecordLiteral((, 1, null)
                        listener: beginBinaryExpression(>)
                        parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                          parseUnaryExpression(>, true, ConstantPatternContext.none)
                            parsePrimary(>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody(,)
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ,)
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ,)
                                ensureCloseParen(,, ()
                                listener: endRecordLiteral((, 1, null)
                        listener: beginBinaryExpression(>>)
                        parsePrecedenceExpression(>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>, true, ConstantPatternContext.none)
                            parsePrimary(>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody(,)
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ,)
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ,)
                                ensureCloseParen(,, ()
                                listener: endRecordLiteral((, 1, null)
                        listener: beginBinaryExpression(>>>)
                        parsePrecedenceExpression(>>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>>, true, ConstantPatternContext.none)
                            parsePrimary(>>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody(,)
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ,)
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ,)
                                parseExpression(,)
                                  parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression(,, true, ConstantPatternContext.none)
                                      parsePrimary(,, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(,, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(,)
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt(,, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endRecordLiteral((, 2, null)
                        listener: beginBinaryExpression(>)
                        parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                          parseUnaryExpression(>, true, ConstantPatternContext.none)
                            parsePrimary(>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody(,)
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ,)
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ,)
                                parseExpression(,)
                                  parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression(,, true, ConstantPatternContext.none)
                                      parsePrimary(,, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(,, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(,)
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt(,, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endRecordLiteral((, 2, null)
                        listener: beginBinaryExpression(>>)
                        parsePrecedenceExpression(>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>, true, ConstantPatternContext.none)
                            parsePrimary(>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(()
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt((, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody(,)
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ,)
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ,)
                                parseExpression(,)
                                  parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression(,, true, ConstantPatternContext.none)
                                      parsePrimary(,, expression, ConstantPatternContext.none)
                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(,, ConstantPatternContext.none)
                                          listener: handleNoTypeVariables(()
                                          parseFunctionExpression(,)
                                            listener: beginFunctionExpression(()
                                            parseFormalParametersRequiredOpt(,, MemberKind.Local)
                                              parseFormalParametersRest((, MemberKind.Local)
                                                listener: beginFormalParameters((, MemberKind.Local)
                                                listener: endFormalParameters(0, (, ), MemberKind.Local)
                                            parseAsyncOptBody(), true, false)
                                              parseAsyncModifierOpt())
                                                listener: handleAsyncModifier(null, null)
                                                inPlainSync()
                                              parseFunctionBody(), true, false)
                                                parseExpressionFunctionBody(=>, true)
                                                  parseExpression(=>)
                                                    parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression(=>, true, ConstantPatternContext.none)
                                                        parsePrimary(=>, expression, ConstantPatternContext.none)
                                                          parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                                                            looksLikeFunctionBody())
                                                            parseSend(=>, expression, ConstantPatternContext.none)
                                                              isNextIdentifier(=>)
                                                              ensureIdentifier(=>, expression)
                                                                listener: handleIdentifier(print, expression)
                                                              listener: handleNoTypeArguments(()
                                                              parseArgumentsOpt(print)
                                                                parseArguments(print)
                                                                  parseArgumentsRest(()
                                                                    listener: beginArguments(()
                                                                    parseExpression(()
                                                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                          parsePrimary((, expression, ConstantPatternContext.none)
                                                                            parseLiteralString(()
                                                                              parseSingleLiteralString(()
                                                                                listener: beginLiteralString("hello")
                                                                                listener: endLiteralString(0, ))
                                                                    listener: endArguments(1, (, ))
                                                              listener: handleSend(print, ))
                                                  listener: handleExpressionFunctionBody(=>, null)
                                                  inGenerator()
                                            listener: endFunctionExpression((, ))
                                ensureCloseParen(), ()
                                listener: endRecordLiteral((, 2, null)
                        listener: beginBinaryExpression(>>>)
                        parsePrecedenceExpression(>>>, 13, true, ConstantPatternContext.none)
                          parseUnaryExpression(>>>, true, ConstantPatternContext.none)
                            parsePrimary(>>>, expression, ConstantPatternContext.none)
                              parseLiteralInt(>>>)
                                listener: handleLiteralInt(42)
                        listener: endBinaryExpression(>>>)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(27, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionDeclaration(extension, extension, extension)
          listener: handleNoTypeVariables(on)
          listener: beginExtensionDeclaration(extension, FunctionExtension)
          listener: handleIdentifier(Function, typeReference)
          listener: handleNoTypeArguments({)
          listener: handleType(Function, null)
          parseClassOrMixinOrExtensionBody(Function, DeclarationKind.Extension, FunctionExtension)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Extension, {)
            notEofOrValue(}, operator)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Extension, FunctionExtension)
              parseMetadataStar({)
                listener: beginMetadataStar(operator)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, operator, DeclarationKind.Extension, FunctionExtension, false)
                listener: beginMethod(DeclarationKind.Extension, null, null, null, null, null, null, operator)
                listener: handleNoType({)
                parseOperatorName({)
                  listener: handleOperatorName(operator, >)
                parseMethodTypeVar(>)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(>, operator, false, MemberKind.ExtensionNonStaticMethod)
                  parseFormalParameters(>, MemberKind.ExtensionNonStaticMethod)
                    parseFormalParametersRest((, MemberKind.ExtensionNonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.ExtensionNonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(dynamic)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(dynamic, MemberKind.ExtensionNonStaticMethod, null, null, null)
                        listener: handleIdentifier(dynamic, typeReference)
                        listener: handleNoTypeArguments(x)
                        listener: handleType(dynamic, null)
                        ensureIdentifier(dynamic, formalParameterDeclaration)
                          listener: handleIdentifier(x, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.ExtensionNonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, print)
                  parseStatement({)
                    parseStatementX({)
                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                        looksLikeLocalFunction(print)
                        parseExpressionStatement({)
                          parseExpression({)
                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                parsePrimary({, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                    looksLikeFunctionBody(;)
                                    parseSend({, expression, ConstantPatternContext.none)
                                      isNextIdentifier({)
                                      ensureIdentifier({, expression)
                                        listener: handleIdentifier(print, expression)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(print)
                                        parseArguments(print)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            parseExpression(()
                                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                                  parsePrimary((, expression, ConstantPatternContext.none)
                                                    parseLiteralString(()
                                                      parseSingleLiteralString(()
                                                        listener: beginLiteralString("You did > with ')
                                                        parseIdentifierExpression($)
                                                          parseSend($, expression, ConstantPatternContext.none)
                                                            isNextIdentifier($)
                                                            ensureIdentifier($, expression)
                                                              listener: handleIdentifier(x, expression)
                                                            listener: handleNoTypeArguments(' on ')
                                                            parseArgumentsOpt(x)
                                                              listener: handleNoArguments(' on ')
                                                            listener: handleSend(x, ' on ')
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(x)
                                                          listener: handleStringPart(' on ')
                                                        parseIdentifierExpression($)
                                                          listener: handleThisExpression(this, expression)
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(this)
                                                          listener: handleStringPart(' (Function)")
                                                        listener: endLiteralString(2, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(print, ;)
                          ensureSemicolon())
                          listener: handleExpressionStatement(;)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(1, {, })
                listener: endExtensionMethod(null, operator, (, null, })
              listener: endMember()
            notEofOrValue(}, operator)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Extension, FunctionExtension)
              parseMetadataStar(})
                listener: beginMetadataStar(operator)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod(}, null, null, null, null, null, null, null, }, NoType(), null, operator, DeclarationKind.Extension, FunctionExtension, false)
                listener: beginMethod(DeclarationKind.Extension, null, null, null, null, null, null, operator)
                listener: handleNoType(})
                parseOperatorName(})
                  listener: handleOperatorName(operator, >>)
                parseMethodTypeVar(>>)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(>>, operator, false, MemberKind.ExtensionNonStaticMethod)
                  parseFormalParameters(>>, MemberKind.ExtensionNonStaticMethod)
                    parseFormalParametersRest((, MemberKind.ExtensionNonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.ExtensionNonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(dynamic)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(dynamic, MemberKind.ExtensionNonStaticMethod, null, null, null)
                        listener: handleIdentifier(dynamic, typeReference)
                        listener: handleNoTypeArguments(x)
                        listener: handleType(dynamic, null)
                        ensureIdentifier(dynamic, formalParameterDeclaration)
                          listener: handleIdentifier(x, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.ExtensionNonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, print)
                  parseStatement({)
                    parseStatementX({)
                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                        looksLikeLocalFunction(print)
                        parseExpressionStatement({)
                          parseExpression({)
                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                parsePrimary({, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                    looksLikeFunctionBody(;)
                                    parseSend({, expression, ConstantPatternContext.none)
                                      isNextIdentifier({)
                                      ensureIdentifier({, expression)
                                        listener: handleIdentifier(print, expression)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(print)
                                        parseArguments(print)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            parseExpression(()
                                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                                  parsePrimary((, expression, ConstantPatternContext.none)
                                                    parseLiteralString(()
                                                      parseSingleLiteralString(()
                                                        listener: beginLiteralString("You did >> with ')
                                                        parseIdentifierExpression($)
                                                          parseSend($, expression, ConstantPatternContext.none)
                                                            isNextIdentifier($)
                                                            ensureIdentifier($, expression)
                                                              listener: handleIdentifier(x, expression)
                                                            listener: handleNoTypeArguments(' on ')
                                                            parseArgumentsOpt(x)
                                                              listener: handleNoArguments(' on ')
                                                            listener: handleSend(x, ' on ')
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(x)
                                                          listener: handleStringPart(' on ')
                                                        parseIdentifierExpression($)
                                                          listener: handleThisExpression(this, expression)
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(this)
                                                          listener: handleStringPart(' (Function)")
                                                        listener: endLiteralString(2, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(print, ;)
                          ensureSemicolon())
                          listener: handleExpressionStatement(;)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(1, {, })
                listener: endExtensionMethod(null, operator, (, null, })
              listener: endMember()
            notEofOrValue(}, operator)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Extension, FunctionExtension)
              parseMetadataStar(})
                listener: beginMetadataStar(operator)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod(}, null, null, null, null, null, null, null, }, NoType(), null, operator, DeclarationKind.Extension, FunctionExtension, false)
                listener: beginMethod(DeclarationKind.Extension, null, null, null, null, null, null, operator)
                listener: handleNoType(})
                parseOperatorName(})
                  listener: handleOperatorName(operator, >>>)
                parseMethodTypeVar(>>>)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(>>>, operator, false, MemberKind.ExtensionNonStaticMethod)
                  parseFormalParameters(>>>, MemberKind.ExtensionNonStaticMethod)
                    parseFormalParametersRest((, MemberKind.ExtensionNonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.ExtensionNonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(dynamic)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(dynamic, MemberKind.ExtensionNonStaticMethod, null, null, null)
                        listener: handleIdentifier(dynamic, typeReference)
                        listener: handleNoTypeArguments(x)
                        listener: handleType(dynamic, null)
                        ensureIdentifier(dynamic, formalParameterDeclaration)
                          listener: handleIdentifier(x, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.ExtensionNonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, print)
                  parseStatement({)
                    parseStatementX({)
                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                        looksLikeLocalFunction(print)
                        parseExpressionStatement({)
                          parseExpression({)
                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                parsePrimary({, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                    looksLikeFunctionBody(;)
                                    parseSend({, expression, ConstantPatternContext.none)
                                      isNextIdentifier({)
                                      ensureIdentifier({, expression)
                                        listener: handleIdentifier(print, expression)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(print)
                                        parseArguments(print)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            parseExpression(()
                                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                                  parsePrimary((, expression, ConstantPatternContext.none)
                                                    parseLiteralString(()
                                                      parseSingleLiteralString(()
                                                        listener: beginLiteralString("You did >>> with ')
                                                        parseIdentifierExpression($)
                                                          parseSend($, expression, ConstantPatternContext.none)
                                                            isNextIdentifier($)
                                                            ensureIdentifier($, expression)
                                                              listener: handleIdentifier(x, expression)
                                                            listener: handleNoTypeArguments(' on ')
                                                            parseArgumentsOpt(x)
                                                              listener: handleNoArguments(' on ')
                                                            listener: handleSend(x, ' on ')
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(x)
                                                          listener: handleStringPart(' on ')
                                                        parseIdentifierExpression($)
                                                          listener: handleThisExpression(this, expression)
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(this)
                                                          listener: handleStringPart(' (Function)")
                                                        listener: endLiteralString(2, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(print, ;)
                          ensureSemicolon())
                          listener: handleExpressionStatement(;)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(1, {, })
                listener: endExtensionMethod(null, operator, (, null, })
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Extension, 3, {, })
          listener: endExtensionDeclaration(extension, extension, on, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionDeclaration(extension, extension, extension)
          listener: handleNoTypeVariables(on)
          listener: beginExtensionDeclaration(extension, RecordExtension)
          listener: handleIdentifier(Record, typeReference)
          listener: handleNoTypeArguments({)
          listener: handleType(Record, null)
          parseClassOrMixinOrExtensionBody(Record, DeclarationKind.Extension, RecordExtension)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Extension, {)
            notEofOrValue(}, operator)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Extension, RecordExtension)
              parseMetadataStar({)
                listener: beginMetadataStar(operator)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, operator, DeclarationKind.Extension, RecordExtension, false)
                listener: beginMethod(DeclarationKind.Extension, null, null, null, null, null, null, operator)
                listener: handleNoType({)
                parseOperatorName({)
                  listener: handleOperatorName(operator, >)
                parseMethodTypeVar(>)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(>, operator, false, MemberKind.ExtensionNonStaticMethod)
                  parseFormalParameters(>, MemberKind.ExtensionNonStaticMethod)
                    parseFormalParametersRest((, MemberKind.ExtensionNonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.ExtensionNonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(dynamic)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(dynamic, MemberKind.ExtensionNonStaticMethod, null, null, null)
                        listener: handleIdentifier(dynamic, typeReference)
                        listener: handleNoTypeArguments(x)
                        listener: handleType(dynamic, null)
                        ensureIdentifier(dynamic, formalParameterDeclaration)
                          listener: handleIdentifier(x, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.ExtensionNonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, print)
                  parseStatement({)
                    parseStatementX({)
                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                        looksLikeLocalFunction(print)
                        parseExpressionStatement({)
                          parseExpression({)
                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                parsePrimary({, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                    looksLikeFunctionBody(;)
                                    parseSend({, expression, ConstantPatternContext.none)
                                      isNextIdentifier({)
                                      ensureIdentifier({, expression)
                                        listener: handleIdentifier(print, expression)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(print)
                                        parseArguments(print)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            parseExpression(()
                                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                                  parsePrimary((, expression, ConstantPatternContext.none)
                                                    parseLiteralString(()
                                                      parseSingleLiteralString(()
                                                        listener: beginLiteralString("You did > with ')
                                                        parseIdentifierExpression($)
                                                          parseSend($, expression, ConstantPatternContext.none)
                                                            isNextIdentifier($)
                                                            ensureIdentifier($, expression)
                                                              listener: handleIdentifier(x, expression)
                                                            listener: handleNoTypeArguments(' on ')
                                                            parseArgumentsOpt(x)
                                                              listener: handleNoArguments(' on ')
                                                            listener: handleSend(x, ' on ')
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(x)
                                                          listener: handleStringPart(' on ')
                                                        parseIdentifierExpression($)
                                                          listener: handleThisExpression(this, expression)
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(this)
                                                          listener: handleStringPart(' (Record)")
                                                        listener: endLiteralString(2, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(print, ;)
                          ensureSemicolon())
                          listener: handleExpressionStatement(;)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(1, {, })
                listener: endExtensionMethod(null, operator, (, null, })
              listener: endMember()
            notEofOrValue(}, operator)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Extension, RecordExtension)
              parseMetadataStar(})
                listener: beginMetadataStar(operator)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod(}, null, null, null, null, null, null, null, }, NoType(), null, operator, DeclarationKind.Extension, RecordExtension, false)
                listener: beginMethod(DeclarationKind.Extension, null, null, null, null, null, null, operator)
                listener: handleNoType(})
                parseOperatorName(})
                  listener: handleOperatorName(operator, >>)
                parseMethodTypeVar(>>)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(>>, operator, false, MemberKind.ExtensionNonStaticMethod)
                  parseFormalParameters(>>, MemberKind.ExtensionNonStaticMethod)
                    parseFormalParametersRest((, MemberKind.ExtensionNonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.ExtensionNonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(dynamic)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(dynamic, MemberKind.ExtensionNonStaticMethod, null, null, null)
                        listener: handleIdentifier(dynamic, typeReference)
                        listener: handleNoTypeArguments(x)
                        listener: handleType(dynamic, null)
                        ensureIdentifier(dynamic, formalParameterDeclaration)
                          listener: handleIdentifier(x, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.ExtensionNonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, print)
                  parseStatement({)
                    parseStatementX({)
                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                        looksLikeLocalFunction(print)
                        parseExpressionStatement({)
                          parseExpression({)
                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                parsePrimary({, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                    looksLikeFunctionBody(;)
                                    parseSend({, expression, ConstantPatternContext.none)
                                      isNextIdentifier({)
                                      ensureIdentifier({, expression)
                                        listener: handleIdentifier(print, expression)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(print)
                                        parseArguments(print)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            parseExpression(()
                                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                                  parsePrimary((, expression, ConstantPatternContext.none)
                                                    parseLiteralString(()
                                                      parseSingleLiteralString(()
                                                        listener: beginLiteralString("You did >> with ')
                                                        parseIdentifierExpression($)
                                                          parseSend($, expression, ConstantPatternContext.none)
                                                            isNextIdentifier($)
                                                            ensureIdentifier($, expression)
                                                              listener: handleIdentifier(x, expression)
                                                            listener: handleNoTypeArguments(' on ')
                                                            parseArgumentsOpt(x)
                                                              listener: handleNoArguments(' on ')
                                                            listener: handleSend(x, ' on ')
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(x)
                                                          listener: handleStringPart(' on ')
                                                        parseIdentifierExpression($)
                                                          listener: handleThisExpression(this, expression)
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(this)
                                                          listener: handleStringPart(' (Record)")
                                                        listener: endLiteralString(2, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(print, ;)
                          ensureSemicolon())
                          listener: handleExpressionStatement(;)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(1, {, })
                listener: endExtensionMethod(null, operator, (, null, })
              listener: endMember()
            notEofOrValue(}, operator)
            parseClassOrMixinOrExtensionOrEnumMemberImpl(}, DeclarationKind.Extension, RecordExtension)
              parseMetadataStar(})
                listener: beginMetadataStar(operator)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod(}, null, null, null, null, null, null, null, }, NoType(), null, operator, DeclarationKind.Extension, RecordExtension, false)
                listener: beginMethod(DeclarationKind.Extension, null, null, null, null, null, null, operator)
                listener: handleNoType(})
                parseOperatorName(})
                  listener: handleOperatorName(operator, >>>)
                parseMethodTypeVar(>>>)
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters(>>>, operator, false, MemberKind.ExtensionNonStaticMethod)
                  parseFormalParameters(>>>, MemberKind.ExtensionNonStaticMethod)
                    parseFormalParametersRest((, MemberKind.ExtensionNonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.ExtensionNonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(dynamic)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(dynamic, MemberKind.ExtensionNonStaticMethod, null, null, null)
                        listener: handleIdentifier(dynamic, typeReference)
                        listener: handleNoTypeArguments(x)
                        listener: handleType(dynamic, null)
                        ensureIdentifier(dynamic, formalParameterDeclaration)
                          listener: handleIdentifier(x, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.ExtensionNonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.ExtensionNonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  listener: beginBlockFunctionBody({)
                  notEofOrValue(}, print)
                  parseStatement({)
                    parseStatementX({)
                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                        looksLikeLocalFunction(print)
                        parseExpressionStatement({)
                          parseExpression({)
                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                parsePrimary({, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                    looksLikeFunctionBody(;)
                                    parseSend({, expression, ConstantPatternContext.none)
                                      isNextIdentifier({)
                                      ensureIdentifier({, expression)
                                        listener: handleIdentifier(print, expression)
                                      listener: handleNoTypeArguments(()
                                      parseArgumentsOpt(print)
                                        parseArguments(print)
                                          parseArgumentsRest(()
                                            listener: beginArguments(()
                                            parseExpression(()
                                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                                  parsePrimary((, expression, ConstantPatternContext.none)
                                                    parseLiteralString(()
                                                      parseSingleLiteralString(()
                                                        listener: beginLiteralString("You did >>> with ')
                                                        parseIdentifierExpression($)
                                                          parseSend($, expression, ConstantPatternContext.none)
                                                            isNextIdentifier($)
                                                            ensureIdentifier($, expression)
                                                              listener: handleIdentifier(x, expression)
                                                            listener: handleNoTypeArguments(' on ')
                                                            parseArgumentsOpt(x)
                                                              listener: handleNoArguments(' on ')
                                                            listener: handleSend(x, ' on ')
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(x)
                                                          listener: handleStringPart(' on ')
                                                        parseIdentifierExpression($)
                                                          listener: handleThisExpression(this, expression)
                                                        listener: handleInterpolationExpression($, null)
                                                        parseStringPart(this)
                                                          listener: handleStringPart(' (Record)")
                                                        listener: endLiteralString(2, ))
                                            listener: endArguments(1, (, ))
                                      listener: handleSend(print, ;)
                          ensureSemicolon())
                          listener: handleExpressionStatement(;)
                  notEofOrValue(}, })
                  listener: endBlockFunctionBody(1, {, })
                listener: endExtensionMethod(null, operator, (, null, })
              listener: endMember()
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Extension, 3, {, })
          listener: endExtensionDeclaration(extension, extension, on, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(void)
  listener: endCompilationUnit(3, )
