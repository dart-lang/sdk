parseUnit(test1)
  skipErrorTokens(test1)
  listener: beginCompilationUnit(test1)
  syntheticPreviousToken(test1)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(test1)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(test1)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, test1, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test1, topLevelFunctionDeclaration)
        parseMethodTypeVar(test1)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test1, test1, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test1, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: beginFunctionType(bool)
                listener: handleNoTypeVariables(()
                ensureIdentifier(,, typeReference)
                  listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(Function)
                listener: handleType(bool, null)
                parseFormalParametersRequiredOpt(Function, MemberKind.GeneralizedFunctionType)
                  parseFormalParametersRest((, MemberKind.GeneralizedFunctionType)
                    listener: beginFormalParameters((, MemberKind.GeneralizedFunctionType)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                      parseMetadataStar(()
                        listener: beginMetadataStar(dynamic)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(dynamic, MemberKind.GeneralizedFunctionType, null, null, null)
                      listener: handleIdentifier(dynamic, typeReference)
                      listener: handleNoTypeArguments())
                      listener: handleType(dynamic, null)
                      listener: handleNoName())
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, null, ), null, null, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                    listener: endFormalParameters(1, (, ), MemberKind.GeneralizedFunctionType)
                listener: endFunctionType(Function, null)
                ensureIdentifier(), formalParameterDeclaration)
                  listener: handleIdentifier(p, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, p, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(3, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        looksLikeFunctionBody())
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(p, expression)
                                          listener: handleNoTypeArguments(()
                                          parseArgumentsOpt(p)
                                            parseArguments(p)
                                              parseArgumentsRest(()
                                                listener: beginArguments(()
                                                allowedToShortcutParseExpression()
                                                listener: handleIdentifier(element, expression)
                                                listener: handleNoTypeArguments())
                                                listener: handleNoArguments())
                                                listener: handleSend(element, element)
                                                listener: endArguments(1, (, ))
                                          listener: handleSend(p, ))
                              ensureCloseParen(), ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(})
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(})
                                      listener: handleSend(a, a)
                          listener: handleNullAwareElement(?)
                          listener: endIfControlFlow(a)
                          listener: endForInControlFlow(a)
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test1, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test2)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test2)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test2, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test2, topLevelFunctionDeclaration)
        parseMethodTypeVar(test2)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test2, test2, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test2, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: beginFunctionType(bool)
                listener: handleNoTypeVariables(()
                ensureIdentifier(,, typeReference)
                  listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(Function)
                listener: handleType(bool, null)
                parseFormalParametersRequiredOpt(Function, MemberKind.GeneralizedFunctionType)
                  parseFormalParametersRest((, MemberKind.GeneralizedFunctionType)
                    listener: beginFormalParameters((, MemberKind.GeneralizedFunctionType)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                      parseMetadataStar(()
                        listener: beginMetadataStar(dynamic)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(dynamic, MemberKind.GeneralizedFunctionType, null, null, null)
                      listener: handleIdentifier(dynamic, typeReference)
                      listener: handleNoTypeArguments())
                      listener: handleType(dynamic, null)
                      listener: handleNoName())
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, null, ), null, null, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                    listener: endFormalParameters(1, (, ), MemberKind.GeneralizedFunctionType)
                listener: endFunctionType(Function, null)
                ensureIdentifier(), formalParameterDeclaration)
                  listener: handleIdentifier(p, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, p, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(4, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        looksLikeFunctionBody())
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(p, expression)
                                          listener: handleNoTypeArguments(()
                                          parseArgumentsOpt(p)
                                            parseArguments(p)
                                              parseArgumentsRest(()
                                                listener: beginArguments(()
                                                allowedToShortcutParseExpression()
                                                listener: handleIdentifier(element, expression)
                                                listener: handleNoTypeArguments())
                                                listener: handleNoArguments())
                                                listener: handleSend(element, element)
                                                listener: endArguments(1, (, ))
                                          listener: handleSend(p, ))
                              ensureCloseParen(), ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(else)
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(else)
                                      listener: handleSend(a, a)
                          listener: handleNullAwareElement(?)
                          listener: handleElseControlFlow(else)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(b, expression)
                                      listener: handleNoTypeArguments(})
                                      parseArgumentsOpt(b)
                                        listener: handleNoArguments(})
                                      listener: handleSend(b, b)
                          listener: handleNullAwareElement(?)
                          listener: endIfElseControlFlow(b)
                          listener: endForInControlFlow(b)
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test2, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test3)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test3)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test3, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test3, topLevelFunctionDeclaration)
        parseMethodTypeVar(test3)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test3, test3, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test3, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(t)
                listener: handleType(bool, null)
                ensureIdentifier(bool, formalParameterDeclaration)
                  listener: handleIdentifier(t, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, t, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(3, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(t, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(t)
                                            listener: handleNoArguments())
                                          listener: handleSend(t, t)
                              ensureCloseParen(t, ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(})
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(})
                                      listener: handleSend(a, a)
                          listener: handleNullAwareElement(?)
                          listener: endForInControlFlow(a)
                          listener: endIfControlFlow(a)
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test3, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test4)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test4)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test4, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test4, topLevelFunctionDeclaration)
        parseMethodTypeVar(test4)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test4, test4, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test4, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(t)
                listener: handleType(bool, null)
                ensureIdentifier(bool, formalParameterDeclaration)
                  listener: handleIdentifier(t, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, t, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(4, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(t, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(t)
                                            listener: handleNoArguments())
                                          listener: handleSend(t, t)
                              ensureCloseParen(t, ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(else)
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(else)
                                      listener: handleSend(a, a)
                          listener: handleNullAwareElement(?)
                          listener: endForInControlFlow(a)
                          listener: handleElseControlFlow(else)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(b, expression)
                                      listener: handleNoTypeArguments(})
                                      parseArgumentsOpt(b)
                                        listener: handleNoArguments(})
                                      listener: handleSend(b, b)
                          listener: handleNullAwareElement(?)
                          listener: endForInControlFlow(b)
                          listener: endIfElseControlFlow(b)
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test4, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test5)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test5)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test5, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test5, topLevelFunctionDeclaration)
        parseMethodTypeVar(test5)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test5, test5, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test5, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: beginFunctionType(bool)
                listener: handleNoTypeVariables(()
                ensureIdentifier(,, typeReference)
                  listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(Function)
                listener: handleType(bool, null)
                parseFormalParametersRequiredOpt(Function, MemberKind.GeneralizedFunctionType)
                  parseFormalParametersRest((, MemberKind.GeneralizedFunctionType)
                    listener: beginFormalParameters((, MemberKind.GeneralizedFunctionType)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                      parseMetadataStar(()
                        listener: beginMetadataStar(dynamic)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(dynamic, MemberKind.GeneralizedFunctionType, null, null, null)
                      listener: handleIdentifier(dynamic, typeReference)
                      listener: handleNoTypeArguments())
                      listener: handleType(dynamic, null)
                      listener: handleNoName())
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, null, ), null, null, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                    listener: endFormalParameters(1, (, ), MemberKind.GeneralizedFunctionType)
                listener: endFunctionType(Function, null)
                ensureIdentifier(), formalParameterDeclaration)
                  listener: handleIdentifier(p, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, p, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(3, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        looksLikeFunctionBody())
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(p, expression)
                                          listener: handleNoTypeArguments(()
                                          parseArgumentsOpt(p)
                                            parseArguments(p)
                                              parseArgumentsRest(()
                                                listener: beginArguments(()
                                                allowedToShortcutParseExpression()
                                                listener: handleIdentifier(element, expression)
                                                listener: handleNoTypeArguments())
                                                listener: handleNoArguments())
                                                listener: handleSend(element, element)
                                                listener: endArguments(1, (, ))
                                          listener: handleSend(p, ))
                              ensureCloseParen(), ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(:)
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(:)
                                      listener: handleSend(a, a)
                          parseExpression(:)
                            parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(:, true, ConstantPatternContext.none)
                                parsePrimary(:, expression, ConstantPatternContext.none)
                                  parseLiteralString(:)
                                    parseSingleLiteralString(:)
                                      listener: beginLiteralString("value")
                                      listener: endLiteralString(0, })
                          listener: handleLiteralMapEntry(:, }, ?, null)
                          listener: endIfControlFlow("value")
                          listener: endForInControlFlow("value")
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test5, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test6)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test6)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test6, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test6, topLevelFunctionDeclaration)
        parseMethodTypeVar(test6)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test6, test6, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test6, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: beginFunctionType(bool)
                listener: handleNoTypeVariables(()
                ensureIdentifier(,, typeReference)
                  listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(Function)
                listener: handleType(bool, null)
                parseFormalParametersRequiredOpt(Function, MemberKind.GeneralizedFunctionType)
                  parseFormalParametersRest((, MemberKind.GeneralizedFunctionType)
                    listener: beginFormalParameters((, MemberKind.GeneralizedFunctionType)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                      parseMetadataStar(()
                        listener: beginMetadataStar(dynamic)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(dynamic, MemberKind.GeneralizedFunctionType, null, null, null)
                      listener: handleIdentifier(dynamic, typeReference)
                      listener: handleNoTypeArguments())
                      listener: handleType(dynamic, null)
                      listener: handleNoName())
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, null, ), null, null, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                    listener: endFormalParameters(1, (, ), MemberKind.GeneralizedFunctionType)
                listener: endFunctionType(Function, null)
                ensureIdentifier(), formalParameterDeclaration)
                  listener: handleIdentifier(p, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, p, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(4, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        looksLikeFunctionBody())
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(p, expression)
                                          listener: handleNoTypeArguments(()
                                          parseArgumentsOpt(p)
                                            parseArguments(p)
                                              parseArgumentsRest(()
                                                listener: beginArguments(()
                                                allowedToShortcutParseExpression()
                                                listener: handleIdentifier(element, expression)
                                                listener: handleNoTypeArguments())
                                                listener: handleNoArguments())
                                                listener: handleSend(element, element)
                                                listener: endArguments(1, (, ))
                                          listener: handleSend(p, ))
                              ensureCloseParen(), ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(:)
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(:)
                                      listener: handleSend(a, a)
                          parseExpression(:)
                            parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(:, true, ConstantPatternContext.none)
                                parsePrimary(:, expression, ConstantPatternContext.none)
                                  parseLiteralString(:)
                                    parseSingleLiteralString(:)
                                      listener: beginLiteralString("value")
                                      listener: endLiteralString(0, else)
                          listener: handleLiteralMapEntry(:, else, ?, null)
                          listener: handleElseControlFlow(else)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(b, expression)
                                      listener: handleNoTypeArguments(:)
                                      parseArgumentsOpt(b)
                                        listener: handleNoArguments(:)
                                      listener: handleSend(b, b)
                          parseExpression(:)
                            parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(:, true, ConstantPatternContext.none)
                                parsePrimary(:, expression, ConstantPatternContext.none)
                                  parseLiteralString(:)
                                    parseSingleLiteralString(:)
                                      listener: beginLiteralString("value")
                                      listener: endLiteralString(0, })
                          listener: handleLiteralMapEntry(:, }, ?, null)
                          listener: endIfElseControlFlow("value")
                          listener: endForInControlFlow("value")
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test6, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test7)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test7)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test7, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test7, topLevelFunctionDeclaration)
        parseMethodTypeVar(test7)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test7, test7, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test7, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(t)
                listener: handleType(bool, null)
                ensureIdentifier(bool, formalParameterDeclaration)
                  listener: handleIdentifier(t, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, t, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(3, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(t, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(t)
                                            listener: handleNoArguments())
                                          listener: handleSend(t, t)
                              ensureCloseParen(t, ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(:)
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(:)
                                      listener: handleSend(a, a)
                          parseExpression(:)
                            parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(:, true, ConstantPatternContext.none)
                                parsePrimary(:, expression, ConstantPatternContext.none)
                                  parseLiteralString(:)
                                    parseSingleLiteralString(:)
                                      listener: beginLiteralString("value")
                                      listener: endLiteralString(0, })
                          listener: handleLiteralMapEntry(:, }, ?, null)
                          listener: endForInControlFlow("value")
                          listener: endIfControlFlow("value")
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test7, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test8)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test8)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test8, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test8, topLevelFunctionDeclaration)
        parseMethodTypeVar(test8)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test8, test8, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test8, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(t)
                listener: handleType(bool, null)
                ensureIdentifier(bool, formalParameterDeclaration)
                  listener: handleIdentifier(t, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, t, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(4, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(t, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(t)
                                            listener: handleNoArguments())
                                          listener: handleSend(t, t)
                              ensureCloseParen(t, ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(:)
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(:)
                                      listener: handleSend(a, a)
                          parseExpression(:)
                            parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(:, true, ConstantPatternContext.none)
                                parsePrimary(:, expression, ConstantPatternContext.none)
                                  parseLiteralString(:)
                                    parseSingleLiteralString(:)
                                      listener: beginLiteralString("value")
                                      listener: endLiteralString(0, else)
                          listener: handleLiteralMapEntry(:, else, ?, null)
                          listener: endForInControlFlow("value")
                          listener: handleElseControlFlow(else)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(b, expression)
                                      listener: handleNoTypeArguments(:)
                                      parseArgumentsOpt(b)
                                        listener: handleNoArguments(:)
                                      listener: handleSend(b, b)
                          parseExpression(:)
                            parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(:, true, ConstantPatternContext.none)
                                parsePrimary(:, expression, ConstantPatternContext.none)
                                  parseLiteralString(:)
                                    parseSingleLiteralString(:)
                                      listener: beginLiteralString("value")
                                      listener: endLiteralString(0, })
                          listener: handleLiteralMapEntry(:, }, ?, null)
                          listener: endForInControlFlow("value")
                          listener: endIfElseControlFlow("value")
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test8, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test9)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test9)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test9, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test9, topLevelFunctionDeclaration)
        parseMethodTypeVar(test9)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test9, test9, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test9, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: beginFunctionType(bool)
                listener: handleNoTypeVariables(()
                ensureIdentifier(,, typeReference)
                  listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(Function)
                listener: handleType(bool, null)
                parseFormalParametersRequiredOpt(Function, MemberKind.GeneralizedFunctionType)
                  parseFormalParametersRest((, MemberKind.GeneralizedFunctionType)
                    listener: beginFormalParameters((, MemberKind.GeneralizedFunctionType)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                      parseMetadataStar(()
                        listener: beginMetadataStar(dynamic)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(dynamic, MemberKind.GeneralizedFunctionType, null, null, null)
                      listener: handleIdentifier(dynamic, typeReference)
                      listener: handleNoTypeArguments())
                      listener: handleType(dynamic, null)
                      listener: handleNoName())
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, null, ), null, null, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                    listener: endFormalParameters(1, (, ), MemberKind.GeneralizedFunctionType)
                listener: endFunctionType(Function, null)
                ensureIdentifier(), formalParameterDeclaration)
                  listener: handleIdentifier(p, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, p, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(3, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        looksLikeFunctionBody())
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(p, expression)
                                          listener: handleNoTypeArguments(()
                                          parseArgumentsOpt(p)
                                            parseArguments(p)
                                              parseArgumentsRest(()
                                                listener: beginArguments(()
                                                allowedToShortcutParseExpression()
                                                listener: handleIdentifier(element, expression)
                                                listener: handleNoTypeArguments())
                                                listener: handleNoArguments())
                                                listener: handleSend(element, element)
                                                listener: endArguments(1, (, ))
                                          listener: handleSend(p, ))
                              ensureCloseParen(), ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          parseExpression())
                            parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(), true, ConstantPatternContext.none)
                                parsePrimary(), expression, ConstantPatternContext.none)
                                  parseLiteralString())
                                    parseSingleLiteralString())
                                      listener: beginLiteralString("key")
                                      listener: endLiteralString(0, :)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(})
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(})
                                      listener: handleSend(a, a)
                          listener: handleLiteralMapEntry(:, }, null, ?)
                          listener: endIfControlFlow(a)
                          listener: endForInControlFlow(a)
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test9, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test10)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test10)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test10, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test10, topLevelFunctionDeclaration)
        parseMethodTypeVar(test10)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test10, test10, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test10, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: beginFunctionType(bool)
                listener: handleNoTypeVariables(()
                ensureIdentifier(,, typeReference)
                  listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(Function)
                listener: handleType(bool, null)
                parseFormalParametersRequiredOpt(Function, MemberKind.GeneralizedFunctionType)
                  parseFormalParametersRest((, MemberKind.GeneralizedFunctionType)
                    listener: beginFormalParameters((, MemberKind.GeneralizedFunctionType)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                      parseMetadataStar(()
                        listener: beginMetadataStar(dynamic)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(dynamic, MemberKind.GeneralizedFunctionType, null, null, null)
                      listener: handleIdentifier(dynamic, typeReference)
                      listener: handleNoTypeArguments())
                      listener: handleType(dynamic, null)
                      listener: handleNoName())
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, null, ), null, null, FormalParameterKind.requiredPositional, MemberKind.GeneralizedFunctionType)
                    listener: endFormalParameters(1, (, ), MemberKind.GeneralizedFunctionType)
                listener: endFunctionType(Function, null)
                ensureIdentifier(), formalParameterDeclaration)
                  listener: handleIdentifier(p, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, p, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(4, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        looksLikeFunctionBody())
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(p, expression)
                                          listener: handleNoTypeArguments(()
                                          parseArgumentsOpt(p)
                                            parseArguments(p)
                                              parseArgumentsRest(()
                                                listener: beginArguments(()
                                                allowedToShortcutParseExpression()
                                                listener: handleIdentifier(element, expression)
                                                listener: handleNoTypeArguments())
                                                listener: handleNoArguments())
                                                listener: handleSend(element, element)
                                                listener: endArguments(1, (, ))
                                          listener: handleSend(p, ))
                              ensureCloseParen(), ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          parseExpression())
                            parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(), true, ConstantPatternContext.none)
                                parsePrimary(), expression, ConstantPatternContext.none)
                                  parseLiteralString())
                                    parseSingleLiteralString())
                                      listener: beginLiteralString("key")
                                      listener: endLiteralString(0, :)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(else)
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(else)
                                      listener: handleSend(a, a)
                          listener: handleLiteralMapEntry(:, else, null, ?)
                          listener: handleElseControlFlow(else)
                          parseExpression(else)
                            parsePrecedenceExpression(else, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(else, true, ConstantPatternContext.none)
                                parsePrimary(else, expression, ConstantPatternContext.none)
                                  parseLiteralString(else)
                                    parseSingleLiteralString(else)
                                      listener: beginLiteralString("key")
                                      listener: endLiteralString(0, :)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(b, expression)
                                      listener: handleNoTypeArguments(})
                                      parseArgumentsOpt(b)
                                        listener: handleNoArguments(})
                                      listener: handleSend(b, b)
                          listener: handleLiteralMapEntry(:, }, null, ?)
                          listener: endIfElseControlFlow(b)
                          listener: endForInControlFlow(b)
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test10, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test11)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test11)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test11, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test11, topLevelFunctionDeclaration)
        parseMethodTypeVar(test11)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test11, test11, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test11, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(t)
                listener: handleType(bool, null)
                ensureIdentifier(bool, formalParameterDeclaration)
                  listener: handleIdentifier(t, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, t, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(3, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(t, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(t)
                                            listener: handleNoArguments())
                                          listener: handleSend(t, t)
                              ensureCloseParen(t, ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression())
                            parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(), true, ConstantPatternContext.none)
                                parsePrimary(), expression, ConstantPatternContext.none)
                                  parseLiteralString())
                                    parseSingleLiteralString())
                                      listener: beginLiteralString("key")
                                      listener: endLiteralString(0, :)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(})
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(})
                                      listener: handleSend(a, a)
                          listener: handleLiteralMapEntry(:, }, null, ?)
                          listener: endForInControlFlow(a)
                          listener: endIfControlFlow(a)
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test11, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(test12)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(test12)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, test12, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(test12, topLevelFunctionDeclaration)
        parseMethodTypeVar(test12)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(test12, test12, false, MemberKind.TopLevelMethod)
          parseFormalParameters(test12, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(List)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(List, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(List, typeReference)
                listener: handleNoTypeArguments(list)
                listener: handleType(List, null)
                ensureIdentifier(List, formalParameterDeclaration)
                  listener: handleIdentifier(list, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, list, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(bool)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(bool, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(bool, typeReference)
                listener: handleNoTypeArguments(t)
                listener: handleType(bool, null)
                ensureIdentifier(bool, formalParameterDeclaration)
                  listener: handleIdentifier(t, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, t, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(a, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue(,)
                listener: endFormalParameter(null, null, null, null, a, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              parseFormalParameter(,, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(,)
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(b, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, b, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(4, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments({)
                        parseLiteralSetOrMapSuffix(return, null)
                          listener: beginIfControlFlow(if)
                          ensureParenthesizedCondition(if, allowCase: false)
                            parseExpressionInParenthesisRest((, allowCase: false)
                              parseExpression(()
                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                    parsePrimary((, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                        parseSend((, expression, ConstantPatternContext.none)
                                          ensureIdentifier((, expression)
                                            listener: handleIdentifier(t, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(t)
                                            listener: handleNoArguments())
                                          listener: handleSend(t, t)
                              ensureCloseParen(t, ()
                              listener: handleParenthesizedCondition((, null, null)
                          listener: handleThenControlFlow())
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression())
                            parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(), true, ConstantPatternContext.none)
                                parsePrimary(), expression, ConstantPatternContext.none)
                                  parseLiteralString())
                                    parseSingleLiteralString())
                                      listener: beginLiteralString("key")
                                      listener: endLiteralString(0, :)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(a, expression)
                                      listener: handleNoTypeArguments(else)
                                      parseArgumentsOpt(a)
                                        listener: handleNoArguments(else)
                                      listener: handleSend(a, a)
                          listener: handleLiteralMapEntry(:, else, null, ?)
                          listener: endForInControlFlow(a)
                          listener: handleElseControlFlow(else)
                          listener: beginForControlFlow(null, for)
                          parseForLoopPartsStart(null, for, ForPartsContext(null))
                            parseExpressionStatementOrDeclaration((, ForPartsContext(null))
                              parseExpressionStatementOrDeclarationAfterModifiers(var, (, null, var, null, ForPartsContext(null))
                                listener: beginMetadataStar(var)
                                listener: endMetadataStar(0)
                                listener: handleNoType(var)
                                listener: beginVariablesDeclaration(element, null, var)
                          parseForLoopPartsMid(var, null, for)
                            parseVariablesDeclarationRest(var, false)
                              parseOptionallyInitializedIdentifier(var)
                                ensureIdentifier(var, localVariableDeclaration)
                                  listener: handleIdentifier(element, localVariableDeclaration)
                                listener: beginInitializedIdentifier(element)
                                parseVariableInitializerOpt(element)
                                  listener: handleNoVariableInitializer(element)
                                listener: endInitializedIdentifier(element)
                              listener: endVariablesDeclaration(1, null)
                            listener: handleForInitializerLocalVariableDeclaration(element, true)
                          parseForInLoopPartsRest(element, null, for, null, element)
                            listener: beginForInExpression(list)
                            parseExpression(in)
                              parsePrecedenceExpression(in, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(in, true, ConstantPatternContext.none)
                                  parsePrimary(in, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(in, expression, ConstantPatternContext.none)
                                      parseSend(in, expression, ConstantPatternContext.none)
                                        ensureIdentifier(in, expression)
                                          listener: handleIdentifier(list, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(list)
                                          listener: handleNoArguments())
                                        listener: handleSend(list, list)
                            ensureCloseParen(list, ()
                            listener: endForInExpression())
                            listener: handleForInLoopParts(null, for, (, null, in)
                          parseExpression())
                            parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(), true, ConstantPatternContext.none)
                                parsePrimary(), expression, ConstantPatternContext.none)
                                  parseLiteralString())
                                    parseSingleLiteralString())
                                      listener: beginLiteralString("key")
                                      listener: endLiteralString(0, :)
                          parseExpression(?)
                            parsePrecedenceExpression(?, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(?, true, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(?, expression, ConstantPatternContext.none)
                                    parseSend(?, expression, ConstantPatternContext.none)
                                      ensureIdentifier(?, expression)
                                        listener: handleIdentifier(b, expression)
                                      listener: handleNoTypeArguments(})
                                      parseArgumentsOpt(b)
                                        listener: handleNoArguments(})
                                      listener: handleSend(b, b)
                          listener: handleLiteralMapEntry(:, }, null, ?)
                          listener: endForInControlFlow(b)
                          listener: endIfElseControlFlow(b)
                          listener: handleLiteralSetOrMap(1, {, null, }, false)
                ensureSemicolon(})
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(test12, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(test1)
  listener: endCompilationUnit(12, )
