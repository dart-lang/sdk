parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(on)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  inPlainSync()
                  listener: handleIdentifier(on, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, on, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, try)
          parseStatement({)
            parseStatementX({)
              parseTryStatement({)
                listener: beginTryStatement(try)
                parseBlock(try, BlockKind(try statement))
                  ensureBlock(try, BlockKind(try statement))
                  listener: beginBlock({, BlockKind(try statement))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(try statement))
                listener: beginCatchClause(catch)
                parseFormalParameters(catch, MemberKind.Catch)
                  parseFormalParametersRest((, MemberKind.Catch)
                    listener: beginFormalParameters((, MemberKind.Catch)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Catch)
                      parseMetadataStar(()
                        listener: beginMetadataStar(e)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(e, MemberKind.Catch, null, null, null)
                      listener: handleNoType(()
                      ensureIdentifier((, formalParameterDeclaration)
                        listener: handleIdentifier(e, formalParameterDeclaration)
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, e, null, null, FormalParameterKind.requiredPositional, MemberKind.Catch)
                    listener: endFormalParameters(1, (, ), MemberKind.Catch)
                listener: endCatchClause({)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(null, catch, null)
                listener: beginCatchClause(on)
                listener: handleIdentifier(Foo, typeReference)
                listener: handleNoTypeArguments({)
                listener: handleType(Foo, null)
                listener: endCatchClause({)
                parseBlock(Foo, BlockKind(catch clause))
                  ensureBlock(Foo, BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: beginCatchClause(on)
                reportRecoverableErrorWithToken(=, Template(ExpectedType))
                  listener: handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got '='., null, {lexeme: =}], =, =)
                rewriter()
                listener: handleIdentifier(, typeReference)
                listener: handleNoTypeArguments(=)
                listener: handleType(, null)
                listener: endCatchClause(=)
                parseBlock(, BlockKind(catch clause))
                  ensureBlock(, BlockKind(catch clause))
                    reportRecoverableError(, ExpectedCatchClauseBody)
                      listener: handleRecoverableError(ExpectedCatchClauseBody, =, =)
                    insertBlock()
                      rewriter()
                      rewriter()
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(0, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: endTryStatement(3, try, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, =)
          parseStatement(})
            parseStatementX(})
              parseExpressionStatementOrDeclaration(}, null)
                parseExpressionStatementOrDeclarationAfterModifiers(}, }, null, null, null, null)
                  looksLikeLocalFunction(=)
                  parseExpressionStatement(})
                    parseExpression(})
                      parsePrecedenceExpression(}, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(}, true, ConstantPatternContext.none)
                          parsePrimary(}, expression, ConstantPatternContext.none)
                            parseSend(}, expression, ConstantPatternContext.none)
                              ensureIdentifier(}, expression)
                                reportRecoverableErrorWithToken(=, Template(ExpectedIdentifier))
                                  listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got '='., Try inserting an identifier before '='., {lexeme: =}], =, =)
                                rewriter()
                                listener: handleIdentifier(, expression)
                              listener: handleNoTypeArguments(=)
                              parseArgumentsOpt()
                                listener: handleNoArguments(=)
                              listener: handleSend(, )
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseLiteralInt(=)
                                listener: handleLiteralInt(42)
                        listener: handleAssignmentExpression(=, 42)
                    ensureSemicolon(42)
                    listener: handleExpressionStatement(=, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
