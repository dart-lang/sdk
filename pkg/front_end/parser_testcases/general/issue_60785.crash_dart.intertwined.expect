parseUnit(UnmatchedToken({))
  skipErrorTokens(UnmatchedToken({))
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(UnmatchedToken({), DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar(UnmatchedToken({))
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(UnmatchedToken({))
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(UnmatchedToken({), null, null, UnmatchedToken({), VoidType(), null, foo, false)
        listener: beginTopLevelMethod(UnmatchedToken({), null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(String)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(String, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(String, typeReference)
                listener: handleNoTypeArguments(s)
                listener: handleType(String, null)
                ensureIdentifier(String, formalParameterDeclaration)
                  listener: handleIdentifier(s, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, s, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, switch)
          parseStatement({)
            parseStatementX({)
              parseSwitchStatement({)
                listener: beginSwitchStatement(switch)
                ensureParenthesizedCondition(switch, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(s, expression)
                                listener: handleNoTypeArguments())
                                parseArgumentsOpt(s)
                                  listener: handleNoArguments())
                                listener: handleSend(s, s)
                    ensureCloseParen(s, ()
                    listener: handleParenthesizedCondition((, null, null)
                parseSwitchBlock())
                  ensureBlock(), BlockKind(switch statement))
                  listener: beginSwitchBlock({)
                  notEofOrType(CLOSE_CURLY_BRACKET, case)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parseExpression(case)
                    parsePrecedenceExpression(case, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(case, true, ConstantPatternContext.none)
                        parsePrimary(case, expression, ConstantPatternContext.none)
                          parseLiteralString(case)
                            parseSingleLiteralString(case)
                              listener: beginLiteralString('foo')
                              listener: endLiteralString(0, ))
                  listener: handleSwitchCaseNoWhenClause('foo')
                  ensureColon('foo')
                    rewriteAndRecover('foo', Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}], :)
                      reportRecoverableError(), Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}])
                        listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}], ), ))
                      rewriter()
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels())
                  parseStatementsInSwitchCase(:, ), case, 0, 1, null, null)
                    listener: beginSwitchCase(0, 1, case)
                    parseStatement(:)
                      parseStatementX(:)
                        parseExpressionStatementOrDeclaration(:, null)
                          parseExpressionStatementOrDeclarationAfterModifiers(:, :, null, null, null, null)
                            looksLikeLocalFunction())
                            parseExpressionStatement(:)
                              parseExpression(:)
                                parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression(:, true, ConstantPatternContext.none)
                                    parsePrimary(:, expression, ConstantPatternContext.none)
                                      parseSend(:, expression, ConstantPatternContext.none)
                                        ensureIdentifier(:, expression)
                                          reportRecoverableErrorWithToken(), Template(ExpectedIdentifier))
                                            listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ')'., Try inserting an identifier before ')'., {lexeme: )}], ), ))
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt()
                                          listener: handleNoArguments())
                                        listener: handleSend(, )
                              ensureSemicolon()
                                reportRecoverableError('foo', Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                  listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 'foo', 'foo')
                                rewriter()
                              listener: handleExpressionStatement(), ;)
                    reportRecoverableError(), Message[Template(UnexpectedToken), Unexpected token ')'., null, {lexeme: )}])
                      listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token ')'., null, {lexeme: )}], ), ))
                    peekPastLabels({)
                    parseStatement())
                      parseStatementX())
                        parseBlock(), BlockKind(statement))
                          ensureBlock(), BlockKind(statement))
                          listener: beginBlock({, BlockKind(statement))
                          notEofOrType(CLOSE_CURLY_BRACKET, print)
                          parseStatement({)
                            parseStatementX({)
                              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                                looksLikeLocalFunction(print)
                                parseExpressionStatement({)
                                  parseExpression({)
                                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression({, true, ConstantPatternContext.none)
                                        parsePrimary({, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                            looksLikeFunctionBody(;)
                                            parseSend({, expression, ConstantPatternContext.none)
                                              ensureIdentifier({, expression)
                                                listener: handleIdentifier(print, expression)
                                              listener: handleNoTypeArguments(()
                                              parseArgumentsOpt(print)
                                                parseArguments(print)
                                                  parseArgumentsRest(()
                                                    listener: beginArguments(()
                                                    allowedToShortcutParseExpression()
                                                    listener: beginLiteralString('foo')
                                                    listener: endLiteralString(0, ))
                                                    listener: endArguments(1, (, ))
                                              listener: handleSend(print, ))
                                  ensureSemicolon())
                                  listener: handleExpressionStatement(print, ;)
                          notEofOrType(CLOSE_CURLY_BRACKET, })
                          listener: endBlock(1, {, }, BlockKind(statement))
                    peekPastLabels(else)
                    parseStatement(})
                      parseStatementX(})
                        parseExpressionStatementOrDeclaration(}, null)
                          parseExpressionStatementOrDeclarationAfterModifiers(}, }, null, null, null, null)
                            looksLikeLocalFunction(else)
                            parseExpressionStatement(})
                              parseExpression(})
                                parsePrecedenceExpression(}, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression(}, true, ConstantPatternContext.none)
                                    parsePrimary(}, expression, ConstantPatternContext.none)
                                      inPlainSync()
                                      parseSend(}, expression, ConstantPatternContext.none)
                                        ensureIdentifier(}, expression)
                                          reportRecoverableErrorWithToken(else, Template(ExpectedIdentifier))
                                            listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got 'else'., Try inserting an identifier before 'else'., {lexeme: else}], else, else)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(else)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(else)
                                        listener: handleSend(, )
                              ensureSemicolon()
                                reportRecoverableError(}, Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                  listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], }, })
                                rewriter()
                              listener: handleExpressionStatement(else, ;)
                    reportRecoverableError(else, Message[Template(UnexpectedToken), Unexpected token 'else'., null, {lexeme: else}])
                      listener: handleRecoverableError(Message[Template(UnexpectedToken), Unexpected token 'else'., null, {lexeme: else}], else, else)
                    peekPastLabels({)
                    parseStatement(else)
                      parseStatementX(else)
                        parseBlock(else, BlockKind(statement))
                          ensureBlock(else, BlockKind(statement))
                          listener: beginBlock({, BlockKind(statement))
                          notEofOrType(CLOSE_CURLY_BRACKET, print)
                          parseStatement({)
                            parseStatementX({)
                              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                                looksLikeLocalFunction(print)
                                parseExpressionStatement({)
                                  parseExpression({)
                                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression({, true, ConstantPatternContext.none)
                                        parsePrimary({, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                            looksLikeFunctionBody(;)
                                            parseSend({, expression, ConstantPatternContext.none)
                                              ensureIdentifier({, expression)
                                                listener: handleIdentifier(print, expression)
                                              listener: handleNoTypeArguments(()
                                              parseArgumentsOpt(print)
                                                parseArguments(print)
                                                  parseArgumentsRest(()
                                                    listener: beginArguments(()
                                                    allowedToShortcutParseExpression()
                                                    listener: beginLiteralString('bar')
                                                    listener: endLiteralString(0, ))
                                                    listener: endArguments(1, (, ))
                                              listener: handleSend(print, ))
                                  ensureSemicolon())
                                  listener: handleExpressionStatement(print, ;)
                          notEofOrType(CLOSE_CURLY_BRACKET, })
                          listener: endBlock(1, {, }, BlockKind(statement))
                    peekPastLabels(})
                    listener: endSwitchCase(0, 1, null, null, 4, case, })
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endSwitchBlock(1, {, })
                listener: endSwitchStatement(switch, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(UnmatchedToken({))
    listener: handleErrorToken(UnmatchedToken({))
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find '}' to match '{'., null, {string: }, lexeme: {}], UnmatchedToken({), UnmatchedToken({))
  listener: endCompilationUnit(1, )
