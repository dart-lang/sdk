parseUnit(x)
  skipErrorTokens(x)
  listener: beginCompilationUnit(x)
  syntheticPreviousToken(x)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(x)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(x)
      isReservedKeyword(.)
      parseTopLevelMethod(, null, null, , NoType(), null, x, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(x, topLevelFunctionDeclaration)
        parseMethodTypeVar(x)
          listener: handleNoTypeVariables(.)
        parseGetterOrFormalParameters(x, x, false, MemberKind.TopLevelMethod)
          missingParameterMessage(MemberKind.TopLevelMethod)
          reportRecoverableError(x, MissingFunctionParameters)
            listener: handleRecoverableError(MissingFunctionParameters, x, x)
          rewriter()
          parseFormalParametersRest((, MemberKind.TopLevelMethod)
            listener: beginFormalParameters((, MemberKind.TopLevelMethod)
            listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          ensureBlock(), BlockKind(function body))
            reportRecoverableError(., Message[Template(ExpectedFunctionBody), Expected a function body, but got '.'., null, {lexeme: .}])
              listener: handleRecoverableError(Message[Template(ExpectedFunctionBody), Expected a function body, but got '.'., null, {lexeme: .}], ., .)
            insertBlock())
              rewriter()
              rewriter()
          listener: handleInvalidFunctionBody({)
        listener: endTopLevelMethod(x, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(.)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember(.)
    parseInvalidTopLevelDeclaration(})
      reportRecoverableErrorWithToken(., Template(ExpectedDeclaration))
        listener: handleRecoverableError(Message[Template(ExpectedDeclaration), Expected a declaration, but got '.'., null, {lexeme: .}], ., .)
      listener: handleInvalidTopLevelDeclaration(.)
  listener: endTopLevelDeclaration(.)
  parseTopLevelDeclarationImpl(., DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(.)
      listener: beginMetadataStar(y)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(.)
      listener: beginTopLevelMember(y)
      isReservedKeyword(=)
      parseFields(., null, null, null, null, null, null, null, ., NoType(), y, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, .)
        reportRecoverableError(y, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, y, y)
        listener: handleNoType(.)
        ensureIdentifierPotentiallyRecovered(., topLevelVariableDeclaration, false)
          listener: handleIdentifier(y, topLevelVariableDeclaration)
        parseFieldInitializerOpt(y, y, null, null, null, null, null, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseLiteralInt(=)
                    listener: handleLiteralInt(42)
          listener: endFieldInitializer(=, 42)
        listener: endTopLevelFields(null, null, null, null, null, null, 1, y, ;)
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(;, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(;)
      listener: beginMetadataStar(x)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(x)
      isReservedKeyword(.)
      parseTopLevelMethod(;, null, null, ;, NoType(), null, x, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleNoType(;)
        ensureIdentifierPotentiallyRecovered(;, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(x, topLevelFunctionDeclaration)
        parseMethodTypeVar(x)
          listener: handleNoTypeVariables(.)
        parseGetterOrFormalParameters(x, x, false, MemberKind.TopLevelMethod)
          missingParameterMessage(MemberKind.TopLevelMethod)
          reportRecoverableError(x, MissingFunctionParameters)
            listener: handleRecoverableError(MissingFunctionParameters, x, x)
          rewriter()
          parseFormalParametersRest((, MemberKind.TopLevelMethod)
            listener: beginFormalParameters((, MemberKind.TopLevelMethod)
            listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          ensureBlock(), BlockKind(function body))
            reportRecoverableError(., Message[Template(ExpectedFunctionBody), Expected a function body, but got '.'., null, {lexeme: .}])
              listener: handleRecoverableError(Message[Template(ExpectedFunctionBody), Expected a function body, but got '.'., null, {lexeme: .}], ., .)
            insertBlock())
              rewriter()
              rewriter()
          listener: handleInvalidFunctionBody({)
        listener: endTopLevelMethod(x, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(.)
      listener: endMetadataStar(0)
    listener: beginTopLevelMember(.)
    parseInvalidTopLevelDeclaration(})
      reportRecoverableErrorWithToken(., Template(ExpectedDeclaration))
        listener: handleRecoverableError(Message[Template(ExpectedDeclaration), Expected a declaration, but got '.'., null, {lexeme: .}], ., .)
      listener: handleInvalidTopLevelDeclaration(.)
  listener: endTopLevelDeclaration(.)
  parseTopLevelDeclarationImpl(., DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(.)
      listener: beginMetadataStar(z)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(.)
      listener: beginTopLevelMember(z)
      isReservedKeyword(=)
      parseFields(., null, null, null, null, null, null, null, ., NoType(), z, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, null, .)
        reportRecoverableError(z, MissingConstFinalVarOrType)
          listener: handleRecoverableError(MissingConstFinalVarOrType, z, z)
        listener: handleNoType(.)
        ensureIdentifierPotentiallyRecovered(., topLevelVariableDeclaration, false)
          listener: handleIdentifier(z, topLevelVariableDeclaration)
        parseFieldInitializerOpt(z, z, null, null, null, null, null, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseLiteralBool(=)
                    listener: handleLiteralBool(true)
          listener: endFieldInitializer(=, true)
        listener: endTopLevelFields(null, null, null, null, null, null, 1, z, ;)
  listener: endTopLevelDeclaration(;)
  parseTopLevelDeclarationImpl(;, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(;)
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(;, null, null, ;, VoidType(), null, foo, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(!=)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(!=)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(!=)
                        parsePrecedenceExpression(!=, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(!=, true, ConstantPatternContext.none)
                            parsePrimary(!=, expression, ConstantPatternContext.none)
                              parseLiteralNull(!=)
                                listener: handleLiteralNull(null)
                        listener: endBinaryExpression(!=, null)
                    ensureCloseParen(null, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement({)
                parseStatement())
                  parseStatementX())
                    parseBlock(), BlockKind(statement))
                      ensureBlock(), BlockKind(statement))
                      listener: beginBlock({, BlockKind(statement))
                      notEofOrType(CLOSE_CURLY_BRACKET, })
                      listener: endBlock(0, {, }, BlockKind(statement))
                listener: endThenStatement({, })
                listener: endIfStatement(if, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(x)
  listener: endCompilationUnit(7, )
