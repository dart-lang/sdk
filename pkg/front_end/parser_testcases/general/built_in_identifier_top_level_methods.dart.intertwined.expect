parseUnit(int)
  skipErrorTokens(int)
  listener: beginCompilationUnit(int)
  syntheticPreviousToken(int)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(, null, null, , SimpleType(), null, abstract, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(abstract)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(abstract, topLevelFunctionDeclaration)
        parseMethodTypeVar(abstract)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(abstract, abstract, false, MemberKind.TopLevelMethod)
          parseFormalParameters(abstract, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(abstract, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(abstract)
                              parseArguments(abstract)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(abstract, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, as, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(as)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(as, topLevelFunctionDeclaration)
        parseMethodTypeVar(as)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(as, as, false, MemberKind.TopLevelMethod)
          parseFormalParameters(as, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(as, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(as)
                              parseArguments(as)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(as, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, covariant, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(covariant)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(covariant, topLevelFunctionDeclaration)
        parseMethodTypeVar(covariant)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(covariant, covariant, false, MemberKind.TopLevelMethod)
          parseFormalParameters(covariant, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(covariant, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(covariant)
                              parseArguments(covariant)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(covariant, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, deferred, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(deferred)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(deferred, topLevelFunctionDeclaration)
        parseMethodTypeVar(deferred)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(deferred, deferred, false, MemberKind.TopLevelMethod)
          parseFormalParameters(deferred, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(deferred, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(deferred)
                              parseArguments(deferred)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(deferred, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, dynamic, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(dynamic)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(dynamic, topLevelFunctionDeclaration)
        parseMethodTypeVar(dynamic)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(dynamic, dynamic, false, MemberKind.TopLevelMethod)
          parseFormalParameters(dynamic, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(dynamic, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(dynamic)
                              parseArguments(dynamic)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(dynamic, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, export, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(export)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(export, topLevelFunctionDeclaration)
        parseMethodTypeVar(export)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(export, export, false, MemberKind.TopLevelMethod)
          parseFormalParameters(export, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(export, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(export)
                              parseArguments(export)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(export, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, external, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(external)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(external, topLevelFunctionDeclaration)
        parseMethodTypeVar(external)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(external, external, false, MemberKind.TopLevelMethod)
          parseFormalParameters(external, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(external, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(external)
                              parseArguments(external)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(external, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, factory, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(factory)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(factory, topLevelFunctionDeclaration)
        parseMethodTypeVar(factory)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(factory, factory, false, MemberKind.TopLevelMethod)
          parseFormalParameters(factory, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(factory, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(factory)
                              parseArguments(factory)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(factory, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, Function, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(Function)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(Function, topLevelFunctionDeclaration)
        parseMethodTypeVar(Function)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(Function, Function, false, MemberKind.TopLevelMethod)
          parseFormalParameters(Function, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(Function, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(Function)
                              parseArguments(Function)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(Function, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, get, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        parseMethodTypeVar(get)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(get, get, false, MemberKind.TopLevelMethod)
          parseFormalParameters(get, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(get, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(get)
                              parseArguments(get)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(get, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, implements, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(implements)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(implements, topLevelFunctionDeclaration)
        parseMethodTypeVar(implements)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(implements, implements, false, MemberKind.TopLevelMethod)
          parseFormalParameters(implements, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(implements, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(implements)
                              parseArguments(implements)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(implements, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, import, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(import)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(import, topLevelFunctionDeclaration)
        parseMethodTypeVar(import)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(import, import, false, MemberKind.TopLevelMethod)
          parseFormalParameters(import, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(import, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(import)
                              parseArguments(import)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(import, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, interface, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(interface)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(interface, topLevelFunctionDeclaration)
        parseMethodTypeVar(interface)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(interface, interface, false, MemberKind.TopLevelMethod)
          parseFormalParameters(interface, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(interface, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(interface)
                              parseArguments(interface)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(interface, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, library, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(library)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(library, topLevelFunctionDeclaration)
        parseMethodTypeVar(library)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(library, library, false, MemberKind.TopLevelMethod)
          parseFormalParameters(library, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(library, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(library)
                              parseArguments(library)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(library, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, operator, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(operator)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(operator, topLevelFunctionDeclaration)
        parseMethodTypeVar(operator)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(operator, operator, false, MemberKind.TopLevelMethod)
          parseFormalParameters(operator, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(operator, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(operator)
                              parseArguments(operator)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(operator, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, mixin, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(mixin)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(mixin, topLevelFunctionDeclaration)
        parseMethodTypeVar(mixin)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(mixin, mixin, false, MemberKind.TopLevelMethod)
          parseFormalParameters(mixin, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(mixin, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(mixin)
                              parseArguments(mixin)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(mixin, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, part, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(part)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(part, topLevelFunctionDeclaration)
        parseMethodTypeVar(part)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(part, part, false, MemberKind.TopLevelMethod)
          parseFormalParameters(part, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(part, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(part)
                              parseArguments(part)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(part, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, set, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(set)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(set, topLevelFunctionDeclaration)
        parseMethodTypeVar(set)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(set, set, false, MemberKind.TopLevelMethod)
          parseFormalParameters(set, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(set, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(set)
                              parseArguments(set)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(set, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, static, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(static)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(static, topLevelFunctionDeclaration)
        parseMethodTypeVar(static)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(static, static, false, MemberKind.TopLevelMethod)
          parseFormalParameters(static, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(static, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(static)
                              parseArguments(static)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(static, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(int)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, typedef, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(typedef)
        listener: handleType(int, null)
        ensureIdentifierPotentiallyRecovered(int, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(typedef, topLevelFunctionDeclaration)
        parseMethodTypeVar(typedef)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(typedef, typedef, false, MemberKind.TopLevelMethod)
          parseFormalParameters(typedef, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(int)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(int, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(x)
                listener: handleType(int, null)
                ensureIdentifier(int, formalParameterDeclaration)
                  listener: handleIdentifier(x, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, x, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(x, expression)
                                listener: handleNoTypeArguments(==)
                                parseArgumentsOpt(x)
                                  listener: handleNoArguments(==)
                                listener: handleSend(x, x)
                        listener: beginBinaryExpression(==)
                        parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                          parseUnaryExpression(==, true, ConstantPatternContext.none)
                            parsePrimary(==, expression, ConstantPatternContext.none)
                              parseLiteralInt(==)
                                listener: handleLiteralInt(0)
                        listener: endBinaryExpression(==, 0)
                    ensureCloseParen(0, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(return)
                parseStatement())
                  parseStatementX())
                    parseReturnStatement())
                      listener: beginReturnStatement(return)
                      parseExpression(return)
                        parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(return, true, ConstantPatternContext.none)
                            parsePrimary(return, expression, ConstantPatternContext.none)
                              parseLiteralInt(return)
                                listener: handleLiteralInt(42)
                      ensureSemicolon(42)
                      listener: endReturnStatement(true, return, ;)
                      inGenerator()
                listener: endThenStatement(return, ;)
                listener: endIfStatement(if, null, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        inPlainSync()
                        parseSendOrFunctionLiteral(return, expression, ConstantPatternContext.none)
                          looksLikeFunctionBody(;)
                          parseSend(return, expression, ConstantPatternContext.none)
                            ensureIdentifier(return, expression)
                              inPlainSync()
                              listener: handleIdentifier(typedef, expression)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(typedef)
                              parseArguments(typedef)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                            parseSend((, expression, ConstantPatternContext.none)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(x, expression)
                                              listener: handleNoTypeArguments(-)
                                              parseArgumentsOpt(x)
                                                listener: handleNoArguments(-)
                                              listener: handleSend(x, x)
                                      listener: beginBinaryExpression(-)
                                      parsePrecedenceExpression(-, 14, true, ConstantPatternContext.none)
                                        parseUnaryExpression(-, true, ConstantPatternContext.none)
                                          parsePrimary(-, expression, ConstantPatternContext.none)
                                            parseLiteralInt(-)
                                              listener: handleLiteralInt(1)
                                      listener: endBinaryExpression(-, 1)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(typedef, ))
                ensureSemicolon())
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(int)
  listener: endCompilationUnit(20, )
