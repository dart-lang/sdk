parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, try)
          parseStatement({)
            parseStatementX({)
              parseTryStatement({)
                listener: beginTryStatement(try)
                parseBlock(try, BlockKind(try statement))
                  ensureBlock(try, BlockKind(try statement))
                  listener: beginBlock({, BlockKind(try statement))
                  notEofOrValue(}, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrValue(}, })
                  listener: endBlock(1, {, }, BlockKind(try statement))
                listener: beginCatchClause(catch)
                parseFormalParameters(catch, MemberKind.Catch)
                  parseFormalParametersRest((, MemberKind.Catch)
                    listener: beginFormalParameters((, MemberKind.Catch)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Catch)
                      parseMetadataStar(()
                        listener: beginMetadataStar(e)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(e, MemberKind.Catch, null, null, null)
                      listener: handleNoType(()
                      ensureIdentifier((, formalParameterDeclaration)
                        listener: handleIdentifier(e, formalParameterDeclaration)
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, e, null, null, FormalParameterKind.requiredPositional, MemberKind.Catch)
                    listener: endFormalParameters(1, (, ), MemberKind.Catch)
                listener: endCatchClause({)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrValue(}, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrValue(}, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(null, catch, null)
                listener: beginCatchClause(on)
                listener: handleIdentifier(Foo, typeReference)
                listener: handleNoTypeArguments({)
                listener: handleType(Foo, null)
                listener: endCatchClause({)
                parseBlock(Foo, BlockKind(catch clause))
                  ensureBlock(Foo, BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrValue(}, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrValue(}, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: beginCatchClause(on)
                parseRecordType((, on, false)
                  listener: beginRecordType(()
                  listener: endRecordType((, null, 0, false)
                listener: endCatchClause({)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrValue(}, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrValue(}, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: beginCatchClause(on)
                parseRecordType((, on, false)
                  listener: beginRecordType(()
                  parseRecordTypeField((, identifierIsOptional: true)
                    listener: beginRecordTypeEntry()
                    parseMetadataStar(()
                      listener: beginMetadataStar(a)
                      listener: endMetadataStar(0)
                    listener: handleIdentifier(a, typeReference)
                    listener: handleNoTypeArguments(,)
                    listener: handleType(a, null)
                    listener: handleNoName(,)
                    listener: endRecordTypeEntry()
                  parseRecordTypeField(,, identifierIsOptional: true)
                    listener: beginRecordTypeEntry()
                    parseMetadataStar(,)
                      listener: beginMetadataStar(b)
                      listener: endMetadataStar(0)
                    listener: handleIdentifier(b, typeReference)
                    listener: handleNoTypeArguments())
                    listener: handleType(b, null)
                    listener: handleNoName())
                    listener: endRecordTypeEntry()
                  listener: endRecordType((, null, 2, false)
                listener: endCatchClause({)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrValue(}, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrValue(}, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: beginCatchClause(on)
                parseRecordType((, on, false)
                  listener: beginRecordType(()
                  parseRecordTypeField((, identifierIsOptional: true)
                    listener: beginRecordTypeEntry()
                    parseMetadataStar(()
                      listener: beginMetadataStar(a)
                      listener: endMetadataStar(0)
                    listener: handleIdentifier(a, typeReference)
                    listener: handleNoTypeArguments(,)
                    listener: handleType(a, null)
                    listener: handleNoName(,)
                    listener: endRecordTypeEntry()
                  parseRecordTypeField(,, identifierIsOptional: true)
                    listener: beginRecordTypeEntry()
                    parseMetadataStar(,)
                      listener: beginMetadataStar(b)
                      listener: endMetadataStar(0)
                    listener: handleIdentifier(b, typeReference)
                    listener: handleNoTypeArguments(,)
                    listener: handleType(b, null)
                    listener: handleNoName(,)
                    listener: endRecordTypeEntry()
                  parseRecordTypeField(,, identifierIsOptional: true)
                    listener: beginRecordTypeEntry()
                    parseMetadataStar(,)
                      listener: beginMetadataStar(c)
                      listener: endMetadataStar(0)
                    listener: handleIdentifier(c, typeReference)
                    listener: handleNoTypeArguments())
                    listener: handleType(c, null)
                    listener: handleNoName())
                    listener: endRecordTypeEntry()
                  listener: endRecordType((, null, 3, false)
                listener: endCatchClause({)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrValue(}, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrValue(}, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: endTryStatement(5, try, null, })
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(}, null, null, }, VoidType(), null, on, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(on, topLevelFunctionDeclaration)
        parseMethodTypeVar(on)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(on, on, false, MemberKind.TopLevelMethod)
          parseFormalParameters(on, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseOptionalPositionalParameters((, MemberKind.TopLevelMethod)
                listener: beginOptionalFormalParameters([)
                parseFormalParameter([, FormalParameterKind.optionalPositional, MemberKind.TopLevelMethod)
                  parseMetadataStar([)
                    listener: beginMetadataStar(a)
                    listener: endMetadataStar(0)
                  listener: beginFormalParameter(a, MemberKind.TopLevelMethod, null, null, null)
                  listener: handleNoType([)
                  ensureIdentifier([, formalParameterDeclaration)
                    listener: handleIdentifier(a, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue(,)
                  listener: endFormalParameter(null, null, null, a, null, null, FormalParameterKind.optionalPositional, MemberKind.TopLevelMethod)
                parseFormalParameter(,, FormalParameterKind.optionalPositional, MemberKind.TopLevelMethod)
                  parseMetadataStar(,)
                    listener: beginMetadataStar(b)
                    listener: endMetadataStar(0)
                  listener: beginFormalParameter(b, MemberKind.TopLevelMethod, null, null, null)
                  listener: handleNoType(,)
                  ensureIdentifier(,, formalParameterDeclaration)
                    listener: handleIdentifier(b, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue(,)
                  listener: endFormalParameter(null, null, null, b, null, null, FormalParameterKind.optionalPositional, MemberKind.TopLevelMethod)
                parseFormalParameter(,, FormalParameterKind.optionalPositional, MemberKind.TopLevelMethod)
                  parseMetadataStar(,)
                    listener: beginMetadataStar(c)
                    listener: endMetadataStar(0)
                  listener: beginFormalParameter(c, MemberKind.TopLevelMethod, null, null, null)
                  listener: handleNoType(,)
                  ensureIdentifier(,, formalParameterDeclaration)
                    listener: handleIdentifier(c, formalParameterDeclaration)
                  listener: handleFormalParameterWithoutValue(])
                  listener: endFormalParameter(null, null, null, c, null, null, FormalParameterKind.optionalPositional, MemberKind.TopLevelMethod)
                listener: endOptionalFormalParameters(3, [, ], MemberKind.TopLevelMethod)
              ensureCloseParen(], ()
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(0, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(2, )
