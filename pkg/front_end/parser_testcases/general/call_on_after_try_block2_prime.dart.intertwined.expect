parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, try)
          parseStatement({)
            parseStatementX({)
              parseTryStatement({)
                listener: beginTryStatement(try)
                parseBlock(try, BlockKind(try statement))
                  ensureBlock(try, BlockKind(try statement))
                  listener: beginBlock({, BlockKind(try statement))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(try statement))
                listener: beginCatchClause(catch)
                parseFormalParameters(catch, MemberKind.Catch)
                  parseFormalParametersRest((, MemberKind.Catch)
                    listener: beginFormalParameters((, MemberKind.Catch)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Catch)
                      parseMetadataStar(()
                        listener: beginMetadataStar(e)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(e, MemberKind.Catch, null, null, null)
                      listener: handleNoType(()
                      ensureIdentifier((, formalParameterDeclaration)
                        listener: handleIdentifier(e, formalParameterDeclaration)
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, null, e, null, null, FormalParameterKind.requiredPositional, MemberKind.Catch)
                    listener: endFormalParameters(1, (, ), MemberKind.Catch)
                listener: endCatchClause({)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(null, catch, null)
                listener: beginCatchClause(on)
                listener: handleIdentifier(Foo, typeReference)
                listener: handleNoTypeArguments({)
                listener: handleType(Foo, null)
                listener: endCatchClause({)
                parseBlock(Foo, BlockKind(catch clause))
                  ensureBlock(Foo, BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: endTryStatement(2, try, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, onX)
          parseStatement(})
            parseStatementX(})
              parseExpressionStatementOrDeclarationAfterModifiers(}, }, null, null, null, null)
                looksLikeLocalFunction(onX)
                listener: beginMetadataStar(onX)
                listener: endMetadataStar(0)
                listener: handleNoTypeVariables(()
                listener: beginLocalFunctionDeclaration(onX)
                listener: handleNoType(})
                parseNamedFunctionRest(}, onX, onX, false)
                  listener: beginFunctionName(onX)
                  ensureIdentifier(}, localFunctionDeclaration)
                    listener: handleIdentifier(onX, localFunctionDeclaration)
                  listener: endFunctionName(onX, (, false)
                  parseFormalParametersRequiredOpt(onX, MemberKind.Local)
                    parseFormalParametersRest((, MemberKind.Local)
                      listener: beginFormalParameters((, MemberKind.Local)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Local)
                        parseMetadataStar(()
                          listener: beginMetadataStar(e)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(e, MemberKind.Local, null, null, null)
                        listener: handleNoType(()
                        ensureIdentifier((, formalParameterDeclaration)
                          listener: handleIdentifier(e, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, null, e, null, null, FormalParameterKind.requiredPositional, MemberKind.Local)
                      listener: endFormalParameters(1, (, ), MemberKind.Local)
                  parseInitializersOpt())
                    listener: handleNoInitializers()
                  parseAsyncOptBody(), false, false)
                    parseAsyncModifierOpt())
                      listener: handleAsyncModifier(null, null)
                      inPlainSync()
                    parseFunctionBody(), false, false)
                      listener: beginBlockFunctionBody({)
                      notEofOrType(CLOSE_CURLY_BRACKET, ;)
                      parseStatement({)
                        parseStatementX({)
                          parseEmptyStatement({)
                            listener: handleEmptyStatement(;)
                      notEofOrType(CLOSE_CURLY_BRACKET, })
                      listener: endBlockFunctionBody(1, {, })
                  listener: endLocalFunctionDeclaration(})
          notEofOrType(CLOSE_CURLY_BRACKET, onX)
          parseStatement(})
            parseStatementX(})
              parseExpressionStatementOrDeclarationAfterModifiers(}, }, null, null, null, null)
                looksLikeLocalFunction(onX)
                parseExpressionStatement(})
                  parseExpression(})
                    parsePrecedenceExpression(}, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(}, true, ConstantPatternContext.none)
                        parsePrimary(}, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(}, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend(}, expression, ConstantPatternContext.none)
                              ensureIdentifier(}, expression)
                                listener: handleIdentifier(onX, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(onX)
                                parseArguments(onX)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    allowedToShortcutParseExpression()
                                    listener: beginLiteralString("")
                                    listener: endLiteralString(0, ))
                                    listener: endArguments(1, (, ))
                              listener: handleSend(onX, ))
                  ensureSemicolon())
                  listener: handleExpressionStatement(onX, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
