parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, , class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          reportRecoverableErrorWithToken(Function, Template(BuiltInIdentifierInDeclaration))
            listener: handleRecoverableError(Message[BuiltInIdentifierInDeclaration, Can't use 'Function' as a name here., null, {lexeme: Function}], Function, Function)
          listener: handleIdentifier(Function, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, Function)
        parseClass(Function, class, class, Function)
          parseClassHeaderOpt(Function, class, class)
            parseClassExtendsOpt(Function, DeclarationHeaderKind.Class)
              listener: handleNoType(Function)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(Function)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(Function)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(Function, DeclarationKind.Class, Function)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(class)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, }, class, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(C, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        parseMetadataStar(<)
          listener: beginMetadataStar(Function)
          listener: endMetadataStar(0)
        ensureIdentifier(<, typeVariableDeclaration)
          reportRecoverableErrorWithToken(Function, Template(BuiltInIdentifierInDeclaration))
            listener: handleRecoverableError(Message[BuiltInIdentifierInDeclaration, Can't use 'Function' as a name here., null, {lexeme: Function}], Function, Function)
          listener: handleIdentifier(Function, typeVariableDeclaration)
        listener: beginTypeVariable(Function)
        listener: handleTypeVariablesDefined(Function, 1)
        listener: handleNoType(Function)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, C)
        parseClass(>, class, class, C)
          parseClassHeaderOpt(>, class, class)
            parseClassExtendsOpt(>, DeclarationHeaderKind.Class)
              listener: handleNoType(>)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(>)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(>)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(>, DeclarationKind.Class, C)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 0, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(typedef)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(typedef)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(typedef, }, typedef, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseTypedef(typedef)
        listener: beginUncategorizedTopLevelDeclaration(typedef)
        listener: beginTypedef(typedef)
        ensureIdentifierPotentiallyRecovered(typedef, typedefDeclaration, true)
          reportRecoverableErrorWithToken(Function, Template(ExpectedIdentifierButGotKeyword))
            listener: handleRecoverableError(Message[ExpectedIdentifierButGotKeyword, 'Function' can't be used as an identifier because it's a keyword., Try renaming this to be an identifier that isn't a keyword., {lexeme: Function}], Function, Function)
          listener: handleIdentifier(Function, typedefDeclaration)
        listener: handleNoTypeVariables(=)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(;)
        listener: handleType(int, null)
        ensureSemicolon(int)
        listener: endTypedef(typedef, =, ;)
  listener: endTopLevelDeclaration(typedef)
  parseTopLevelDeclarationImpl(;, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(;)
      listener: beginMetadataStar(typedef)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(typedef, ;, typedef, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseTypedef(typedef)
        listener: beginUncategorizedTopLevelDeclaration(typedef)
        listener: beginTypedef(typedef)
        ensureIdentifierPotentiallyRecovered(typedef, typedefDeclaration, true)
          listener: handleIdentifier(F, typedefDeclaration)
        listener: beginTypeVariables(<)
        parseMetadataStar(<)
          listener: beginMetadataStar(Function)
          listener: endMetadataStar(0)
        ensureIdentifier(<, typeVariableDeclaration)
          reportRecoverableErrorWithToken(Function, Template(BuiltInIdentifierInDeclaration))
            listener: handleRecoverableError(Message[BuiltInIdentifierInDeclaration, Can't use 'Function' as a name here., null, {lexeme: Function}], Function, Function)
          listener: handleIdentifier(Function, typeVariableDeclaration)
        listener: beginTypeVariable(Function)
        listener: handleTypeVariablesDefined(Function, 1)
        listener: handleNoType(Function)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: handleIdentifier(int, typeReference)
        listener: handleNoTypeArguments(;)
        listener: handleType(int, null)
        ensureSemicolon(int)
        listener: endTypedef(typedef, =, ;)
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(;, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(;)
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, ;, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionDeclaration(extension, extension, extension)
          reportRecoverableErrorWithToken(Function, Template(BuiltInIdentifierInDeclaration))
            listener: handleRecoverableError(Message[BuiltInIdentifierInDeclaration, Can't use 'Function' as a name here., null, {lexeme: Function}], Function, Function)
          listener: handleNoTypeVariables(on)
          listener: beginExtensionDeclaration(extension, Function)
          listener: handleIdentifier(List, typeReference)
          listener: handleNoTypeArguments({)
          listener: handleType(List, null)
          parseClassOrMixinOrExtensionBody(List, DeclarationKind.Extension, Function)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Extension, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Extension, 0, {, })
          listener: endExtensionDeclaration(extension, extension, on, })
  listener: endTopLevelDeclaration(extension)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, }, extension, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionDeclaration(extension, extension, extension)
          listener: beginTypeVariables(<)
          parseMetadataStar(<)
            listener: beginMetadataStar(Function)
            listener: endMetadataStar(0)
          ensureIdentifier(<, typeVariableDeclaration)
            reportRecoverableErrorWithToken(Function, Template(BuiltInIdentifierInDeclaration))
              listener: handleRecoverableError(Message[BuiltInIdentifierInDeclaration, Can't use 'Function' as a name here., null, {lexeme: Function}], Function, Function)
            listener: handleIdentifier(Function, typeVariableDeclaration)
          listener: beginTypeVariable(Function)
          listener: handleTypeVariablesDefined(Function, 1)
          listener: handleNoType(Function)
          listener: endTypeVariable(>, 0, null, null)
          listener: endTypeVariables(<, >)
          listener: beginExtensionDeclaration(extension, E)
          ensureIdentifier(on, typeReference)
            listener: handleIdentifier(List, typeReference)
          listener: beginTypeArguments(<)
          listener: handleIdentifier(Function, typeReference)
          listener: handleNoTypeArguments(>)
          listener: handleType(Function, null)
          listener: endTypeArguments(1, <, >)
          listener: handleType(List, null)
          parseClassOrMixinOrExtensionBody(>, DeclarationKind.Extension, E)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Extension, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Extension, 0, {, })
          listener: endExtensionDeclaration(extension, extension, on, })
  listener: endTopLevelDeclaration(mixin)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(mixin)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(mixin, }, mixin, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseMixin(mixin, null, null, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          reportRecoverableErrorWithToken(Function, Template(BuiltInIdentifierInDeclaration))
            listener: handleRecoverableError(Message[BuiltInIdentifierInDeclaration, Can't use 'Function' as a name here., null, {lexeme: Function}], Function, Function)
          listener: handleIdentifier(Function, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginMixinDeclaration(mixin, null, null, mixin, Function)
        parseMixinHeaderOpt(Function, mixin)
          parseMixinOnOpt(Function)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(Function)
            listener: handleImplements(null, 0)
          listener: handleMixinHeader(mixin)
        parseClassOrMixinOrExtensionBody(Function, DeclarationKind.Mixin, Function)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(mixin, })
  listener: endTopLevelDeclaration(mixin)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(mixin)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(mixin, }, mixin, null, null, null, null, DirectiveContext(DirectiveState.Declarations))
      parseMixin(mixin, null, null, mixin)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(mixin)
        ensureIdentifier(mixin, classOrMixinDeclaration)
          listener: handleIdentifier(M, classOrMixinDeclaration)
        listener: beginTypeVariables(<)
        parseMetadataStar(<)
          listener: beginMetadataStar(Function)
          listener: endMetadataStar(0)
        ensureIdentifier(<, typeVariableDeclaration)
          reportRecoverableErrorWithToken(Function, Template(BuiltInIdentifierInDeclaration))
            listener: handleRecoverableError(Message[BuiltInIdentifierInDeclaration, Can't use 'Function' as a name here., null, {lexeme: Function}], Function, Function)
          listener: handleIdentifier(Function, typeVariableDeclaration)
        listener: beginTypeVariable(Function)
        listener: handleTypeVariablesDefined(Function, 1)
        listener: handleNoType(Function)
        listener: endTypeVariable(>, 0, null, null)
        listener: endTypeVariables(<, >)
        listener: beginMixinDeclaration(mixin, null, null, mixin, M)
        parseMixinHeaderOpt(>, mixin)
          parseMixinOnOpt(>)
            listener: handleMixinOn(null, 0)
          parseClassOrMixinOrEnumImplementsOpt(>)
            ensureIdentifier(implements, typeReference)
              listener: handleIdentifier(List, typeReference)
            listener: beginTypeArguments(<)
            listener: handleIdentifier(Function, typeReference)
            listener: handleNoTypeArguments(>)
            listener: handleType(Function, null)
            listener: endTypeArguments(1, <, >)
            listener: handleType(List, null)
            listener: handleImplements(implements, 1)
          listener: handleMixinHeader(mixin)
        parseClassOrMixinOrExtensionBody(>, DeclarationKind.Mixin, M)
          listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Mixin, {)
          notEofOrValue(}, })
          listener: endClassOrMixinOrExtensionBody(DeclarationKind.Mixin, 0, {, })
        listener: endMixinDeclaration(mixin, })
  listener: endTopLevelDeclaration(void)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(}, null, null, }, VoidType(), null, main, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, Function)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction(ok)
                  listener: beginMetadataStar(Function)
                  listener: endMetadataStar(0)
                  listener: handleIdentifier(Function, typeReference)
                  listener: handleNoTypeArguments(ok)
                  listener: handleType(Function, null)
                  listener: beginVariablesDeclaration(ok, null, null)
                  parseVariablesDeclarationRest(Function, true)
                    parseOptionallyInitializedIdentifier(Function)
                      ensureIdentifier(Function, localVariableDeclaration)
                        listener: handleIdentifier(ok, localVariableDeclaration)
                      listener: beginInitializedIdentifier(ok)
                      parseVariableInitializerOpt(ok)
                        listener: handleNoVariableInitializer(ok)
                      listener: endInitializedIdentifier(ok)
                    ensureSemicolon(ok)
                    listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, dynamic)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(okToo)
                  listener: beginMetadataStar(dynamic)
                  listener: endMetadataStar(0)
                  listener: handleIdentifier(dynamic, typeReference)
                  listener: handleNoTypeArguments(okToo)
                  listener: handleType(dynamic, null)
                  listener: beginVariablesDeclaration(okToo, null, null)
                  parseVariablesDeclarationRest(dynamic, true)
                    parseOptionallyInitializedIdentifier(dynamic)
                      ensureIdentifier(dynamic, localVariableDeclaration)
                        listener: handleIdentifier(okToo, localVariableDeclaration)
                      listener: beginInitializedIdentifier(okToo)
                      parseVariableInitializerOpt(okToo)
                        listener: handleNoVariableInitializer(okToo)
                      listener: endInitializedIdentifier(okToo)
                    ensureSemicolon(okToo)
                    listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(class)
  listener: endCompilationUnit(9, )
