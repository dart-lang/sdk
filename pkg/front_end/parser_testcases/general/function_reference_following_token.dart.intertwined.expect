parseUnit(var)
  skipErrorTokens(var)
  listener: beginCompilationUnit(var)
  syntheticPreviousToken(var)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_closeBrace)
      parseFields(, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_closeBrace, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, )
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_closeBrace, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_closeBrace, typeArgs_closeBrace, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  listener: handleNoTypeArguments({)
                  parseLiteralSetOrMapSuffix(=, null)
                    parseExpression({)
                      parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression({, true, ConstantPatternContext.none)
                          parsePrimary({, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                              parseSend({, expression, ConstantPatternContext.none)
                                isNextIdentifier({)
                                ensureIdentifier({, expression)
                                  listener: handleIdentifier(f, expression)
                                listener: handleNoTypeArguments(<)
                                parseArgumentsOpt(f)
                                  listener: handleNoArguments(<)
                                listener: handleSend(f, <)
                        listener: beginTypeArguments(<)
                        listener: handleIdentifier(a, typeReference)
                        listener: handleNoTypeArguments(,)
                        listener: handleType(a, null)
                        listener: handleIdentifier(b, typeReference)
                        listener: handleNoTypeArguments(>)
                        listener: handleType(b, null)
                        listener: endTypeArguments(2, <, >)
                        listener: handleTypeArgumentApplication(<)
                    listener: handleLiteralSetOrMap(1, {, null, }, true)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_closeBracket)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_closeBracket, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_closeBracket, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_closeBracket, typeArgs_closeBracket, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  listener: handleNoTypeArguments([)
                  parseLiteralListSuffix(=, null)
                    parseExpression([)
                      parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression([, true, ConstantPatternContext.none)
                          parsePrimary([, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                              parseSend([, expression, ConstantPatternContext.none)
                                isNextIdentifier([)
                                ensureIdentifier([, expression)
                                  listener: handleIdentifier(f, expression)
                                listener: handleNoTypeArguments(<)
                                parseArgumentsOpt(f)
                                  listener: handleNoArguments(<)
                                listener: handleSend(f, <)
                        listener: beginTypeArguments(<)
                        listener: handleIdentifier(a, typeReference)
                        listener: handleNoTypeArguments(,)
                        listener: handleType(a, null)
                        listener: handleIdentifier(b, typeReference)
                        listener: handleNoTypeArguments(>)
                        listener: handleType(b, null)
                        listener: endTypeArguments(2, <, >)
                        listener: handleTypeArgumentApplication(<)
                    listener: handleLiteralList(1, [, null, ])
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_closeParen)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_closeParen, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_closeParen, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_closeParen, typeArgs_closeParen, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(g, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(g)
                        parseArguments(g)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(f, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(f)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(f, <)
                                listener: beginTypeArguments(<)
                                listener: handleIdentifier(a, typeReference)
                                listener: handleNoTypeArguments(,)
                                listener: handleType(a, null)
                                listener: handleIdentifier(b, typeReference)
                                listener: handleNoTypeArguments(>)
                                listener: handleType(b, null)
                                listener: endTypeArguments(2, <, >)
                                listener: handleTypeArgumentApplication(<)
                            listener: endArguments(1, (, ))
                      listener: handleSend(g, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_colon)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_colon, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_colon, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_colon, typeArgs_colon, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  listener: handleNoTypeArguments({)
                  parseLiteralSetOrMapSuffix(=, null)
                    parseExpression({)
                      parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression({, true, ConstantPatternContext.none)
                          parsePrimary({, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                              parseSend({, expression, ConstantPatternContext.none)
                                isNextIdentifier({)
                                ensureIdentifier({, expression)
                                  listener: handleIdentifier(f, expression)
                                listener: handleNoTypeArguments(<)
                                parseArgumentsOpt(f)
                                  listener: handleNoArguments(<)
                                listener: handleSend(f, <)
                        listener: beginTypeArguments(<)
                        listener: handleIdentifier(a, typeReference)
                        listener: handleNoTypeArguments(,)
                        listener: handleType(a, null)
                        listener: handleIdentifier(b, typeReference)
                        listener: handleNoTypeArguments(>)
                        listener: handleType(b, null)
                        listener: endTypeArguments(2, <, >)
                        listener: handleTypeArgumentApplication(<)
                    parseExpression(:)
                      parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(:, true, ConstantPatternContext.none)
                          parsePrimary(:, expression, ConstantPatternContext.none)
                            parseLiteralNull(:)
                              listener: handleLiteralNull(null)
                    listener: handleLiteralMapEntry(:, })
                    listener: handleLiteralSetOrMap(1, {, null, }, false)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_comma)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_comma, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_comma, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_comma, typeArgs_comma, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  listener: handleNoTypeArguments([)
                  parseLiteralListSuffix(=, null)
                    parseExpression([)
                      parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression([, true, ConstantPatternContext.none)
                          parsePrimary([, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                              parseSend([, expression, ConstantPatternContext.none)
                                isNextIdentifier([)
                                ensureIdentifier([, expression)
                                  listener: handleIdentifier(f, expression)
                                listener: handleNoTypeArguments(<)
                                parseArgumentsOpt(f)
                                  listener: handleNoArguments(<)
                                listener: handleSend(f, <)
                        listener: beginTypeArguments(<)
                        listener: handleIdentifier(a, typeReference)
                        listener: handleNoTypeArguments(,)
                        listener: handleType(a, null)
                        listener: handleIdentifier(b, typeReference)
                        listener: handleNoTypeArguments(>)
                        listener: handleType(b, null)
                        listener: endTypeArguments(2, <, >)
                        listener: handleTypeArgumentApplication(<)
                    parseExpression(,)
                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                          parsePrimary(,, expression, ConstantPatternContext.none)
                            parseLiteralNull(,)
                              listener: handleLiteralNull(null)
                    listener: handleLiteralList(2, [, null, ])
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_equals)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_equals, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_equals, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_equals, typeArgs_equals, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(<)
                      parseArgumentsOpt(f)
                        listener: handleNoArguments(<)
                      listener: handleSend(f, <)
              listener: beginTypeArguments(<)
              listener: handleIdentifier(a, typeReference)
              listener: handleNoTypeArguments(,)
              listener: handleType(a, null)
              listener: handleIdentifier(b, typeReference)
              listener: handleNoTypeArguments(>)
              listener: handleType(b, null)
              listener: endTypeArguments(2, <, >)
              listener: handleTypeArgumentApplication(<)
              listener: beginBinaryExpression(==)
              parsePrecedenceExpression(==, 8, true, ConstantPatternContext.none)
                parseUnaryExpression(==, true, ConstantPatternContext.none)
                  parsePrimary(==, expression, ConstantPatternContext.none)
                    parseLiteralNull(==)
                      listener: handleLiteralNull(null)
              listener: endBinaryExpression(==)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_not_equals)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_not_equals, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_not_equals, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_not_equals, typeArgs_not_equals, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(<)
                      parseArgumentsOpt(f)
                        listener: handleNoArguments(<)
                      listener: handleSend(f, <)
              listener: beginTypeArguments(<)
              listener: handleIdentifier(a, typeReference)
              listener: handleNoTypeArguments(,)
              listener: handleType(a, null)
              listener: handleIdentifier(b, typeReference)
              listener: handleNoTypeArguments(>)
              listener: handleType(b, null)
              listener: endTypeArguments(2, <, >)
              listener: handleTypeArgumentApplication(<)
              listener: beginBinaryExpression(!=)
              parsePrecedenceExpression(!=, 8, true, ConstantPatternContext.none)
                parseUnaryExpression(!=, true, ConstantPatternContext.none)
                  parsePrimary(!=, expression, ConstantPatternContext.none)
                    parseLiteralNull(!=)
                      listener: handleLiteralNull(null)
              listener: endBinaryExpression(!=)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_openParen)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_openParen, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_openParen, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_openParen, typeArgs_openParen, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: beginTypeArguments(<)
                      listener: handleIdentifier(a, typeReference)
                      listener: handleNoTypeArguments(,)
                      listener: handleType(a, null)
                      listener: handleIdentifier(b, typeReference)
                      listener: handleNoTypeArguments(>)
                      listener: handleType(b, null)
                      listener: endTypeArguments(2, <, >)
                      parseArgumentsOpt(>)
                        parseArguments(>)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            listener: endArguments(0, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_period_methodInvocation)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_period_methodInvocation, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_period_methodInvocation, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_period_methodInvocation, typeArgs_period_methodInvocation, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parseImplicitCreationExpression(=, <, Instance of 'ComplexTypeParamOrArgInfo')
                  listener: beginImplicitCreationExpression(f)
                  parseConstructorReference(=, ConstructorReferenceContext.Implicit, Instance of 'ComplexTypeParamOrArgInfo')
                    ensureIdentifier(=, constructorReference)
                      listener: handleIdentifier(f, constructorReference)
                    listener: beginConstructorReference(f)
                    parseQualifiedRestOpt(f, constructorReferenceContinuation)
                    listener: beginTypeArguments(<)
                    listener: handleIdentifier(a, typeReference)
                    listener: handleNoTypeArguments(,)
                    listener: handleType(a, null)
                    listener: handleIdentifier(b, typeReference)
                    listener: handleNoTypeArguments(>)
                    listener: handleType(b, null)
                    listener: endTypeArguments(2, <, >)
                    ensureIdentifier(., constructorReferenceContinuationAfterTypeArguments)
                      listener: handleIdentifier(toString, constructorReferenceContinuationAfterTypeArguments)
                    listener: endConstructorReference(f, ., (, ConstructorReferenceContext.Implicit)
                  parseConstructorInvocationArguments(toString)
                    parseArgumentsRest(()
                      listener: beginArguments(()
                      listener: endArguments(0, (, ))
                  listener: endImplicitCreationExpression(f, <)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_period_methodInvocation_generic)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_period_methodInvocation_generic, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_period_methodInvocation_generic, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_period_methodInvocation_generic, typeArgs_period_methodInvocation_generic, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(<)
                      parseArgumentsOpt(f)
                        listener: handleNoArguments(<)
                      listener: handleSend(f, <)
              listener: beginTypeArguments(<)
              listener: handleIdentifier(a, typeReference)
              listener: handleNoTypeArguments(,)
              listener: handleType(a, null)
              listener: handleIdentifier(b, typeReference)
              listener: handleNoTypeArguments(>)
              listener: handleType(b, null)
              listener: endTypeArguments(2, <, >)
              listener: handleTypeArgumentApplication(<)
              parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                  looksLikeFunctionBody(;)
                  parseSend(., expressionContinuation, ConstantPatternContext.none)
                    isNextIdentifier(.)
                    ensureIdentifier(., expressionContinuation)
                      listener: handleIdentifier(foo, expressionContinuation)
                    listener: beginTypeArguments(<)
                    listener: handleIdentifier(c, typeReference)
                    listener: handleNoTypeArguments(>)
                    listener: handleType(c, null)
                    listener: endTypeArguments(1, <, >)
                    parseArgumentsOpt(>)
                      parseArguments(>)
                        parseArgumentsRest(()
                          listener: beginArguments(()
                          listener: endArguments(0, (, ))
                    listener: handleSend(foo, ;)
              listener: handleEndingBinaryExpression(.)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_period_propertyAccess)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_period_propertyAccess, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_period_propertyAccess, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_period_propertyAccess, typeArgs_period_propertyAccess, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(<)
                      parseArgumentsOpt(f)
                        listener: handleNoArguments(<)
                      listener: handleSend(f, <)
              listener: beginTypeArguments(<)
              listener: handleIdentifier(a, typeReference)
              listener: handleNoTypeArguments(,)
              listener: handleType(a, null)
              listener: handleIdentifier(b, typeReference)
              listener: handleNoTypeArguments(>)
              listener: handleType(b, null)
              listener: endTypeArguments(2, <, >)
              listener: handleTypeArgumentApplication(<)
              parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                  parseSend(., expressionContinuation, ConstantPatternContext.none)
                    isNextIdentifier(.)
                    ensureIdentifier(., expressionContinuation)
                      listener: handleIdentifier(hashCode, expressionContinuation)
                    listener: handleNoTypeArguments(;)
                    parseArgumentsOpt(hashCode)
                      listener: handleNoArguments(;)
                    listener: handleSend(hashCode, ;)
              listener: handleEndingBinaryExpression(.)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(typeArgs_semicolon)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', typeArgs_semicolon, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(typeArgs_semicolon, topLevelVariableDeclaration)
        parseFieldInitializerOpt(typeArgs_semicolon, typeArgs_semicolon, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(<)
                      parseArgumentsOpt(f)
                        listener: handleNoArguments(<)
                      listener: handleSend(f, <)
              listener: beginTypeArguments(<)
              listener: handleIdentifier(a, typeReference)
              listener: handleNoTypeArguments(,)
              listener: handleType(a, null)
              listener: handleIdentifier(b, typeReference)
              listener: handleNoTypeArguments(>)
              listener: handleType(b, null)
              listener: endTypeArguments(2, <, >)
              listener: handleTypeArgumentApplication(<)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_ampersand)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_ampersand, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_ampersand, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_ampersand, operators_ampersand, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(&, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '&'., Try inserting an identifier before '&'., {lexeme: &}], &, &)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(&)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(&)
                                        listener: handleSend(, &)
                                  listener: beginBinaryExpression(&)
                                  parsePrecedenceExpression(&, 12, true, ConstantPatternContext.none)
                                    parseUnaryExpression(&, true, ConstantPatternContext.none)
                                      parsePrimary(&, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(&, expression, ConstantPatternContext.none)
                                          parseSend(&, expression, ConstantPatternContext.none)
                                            isNextIdentifier(&)
                                            ensureIdentifier(&, expression)
                                              listener: handleIdentifier(d, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(d)
                                              listener: handleNoArguments())
                                            listener: handleSend(d, ))
                                  listener: endBinaryExpression(&)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_as)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_as, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_as, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_as, operators_as, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      inPlainSync()
                                      parseSendOrFunctionLiteral(>, expression, ConstantPatternContext.none)
                                        parseSend(>, expression, ConstantPatternContext.none)
                                          isNextIdentifier(>)
                                          ensureIdentifier(>, expression)
                                            inPlainSync()
                                            listener: handleIdentifier(as, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(as)
                                            listener: handleNoArguments())
                                          listener: handleSend(as, ))
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_asterisk)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_asterisk, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_asterisk, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_asterisk, operators_asterisk, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(*, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '*'., Try inserting an identifier before '*'., {lexeme: *}], *, *)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(*)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(*)
                                        listener: handleSend(, *)
                                  listener: beginBinaryExpression(*)
                                  parsePrecedenceExpression(*, 15, true, ConstantPatternContext.none)
                                    parseUnaryExpression(*, true, ConstantPatternContext.none)
                                      parsePrimary(*, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(*, expression, ConstantPatternContext.none)
                                          parseSend(*, expression, ConstantPatternContext.none)
                                            isNextIdentifier(*)
                                            ensureIdentifier(*, expression)
                                              listener: handleIdentifier(d, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(d)
                                              listener: handleNoArguments())
                                            listener: handleSend(d, ))
                                  listener: endBinaryExpression(*)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_bang_openBracket)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_bang_openBracket, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_bang_openBracket, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_bang_openBracket, operators_bang_openBracket, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrecedenceExpression(!, 16, true, ConstantPatternContext.none)
                                      parseUnaryExpression(!, true, ConstantPatternContext.none)
                                        parsePrimary(!, expression, ConstantPatternContext.none)
                                          listener: handleNoTypeArguments([)
                                          parseLiteralListSuffix(!, null)
                                            parseExpression([)
                                              parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression([, true, ConstantPatternContext.none)
                                                  parsePrimary([, expression, ConstantPatternContext.none)
                                                    parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                                      parseSend([, expression, ConstantPatternContext.none)
                                                        isNextIdentifier([)
                                                        ensureIdentifier([, expression)
                                                          listener: handleIdentifier(d, expression)
                                                        listener: handleNoTypeArguments(])
                                                        parseArgumentsOpt(d)
                                                          listener: handleNoArguments(])
                                                        listener: handleSend(d, ])
                                            listener: handleLiteralList(1, [, null, ])
                                    listener: handleUnaryPrefixExpression(!)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_bang_paren)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_bang_paren, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_bang_paren, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_bang_paren, operators_bang_paren, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrecedenceExpression(!, 16, true, ConstantPatternContext.none)
                                      parseUnaryExpression(!, true, ConstantPatternContext.none)
                                        parsePrimary(!, expression, ConstantPatternContext.none)
                                          parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(!, ConstantPatternContext.none)
                                            parseParenthesizedExpressionOrRecordLiteral(!, null, ConstantPatternContext.none)
                                              listener: beginParenthesizedExpressionOrRecordLiteral(()
                                              parseExpression(()
                                                parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                  parseUnaryExpression((, true, ConstantPatternContext.none)
                                                    parsePrimary((, expression, ConstantPatternContext.none)
                                                      parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                                        parseSend((, expression, ConstantPatternContext.none)
                                                          isNextIdentifier(()
                                                          ensureIdentifier((, expression)
                                                            listener: handleIdentifier(d, expression)
                                                          listener: handleNoTypeArguments())
                                                          parseArgumentsOpt(d)
                                                            listener: handleNoArguments())
                                                          listener: handleSend(d, ))
                                              ensureCloseParen(d, ()
                                              listener: endParenthesizedExpression(()
                                    listener: handleUnaryPrefixExpression(!)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_bar)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_bar, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_bar, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_bar, operators_bar, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(|, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '|'., Try inserting an identifier before '|'., {lexeme: |}], |, |)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(|)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(|)
                                        listener: handleSend(, |)
                                  listener: beginBinaryExpression(|)
                                  parsePrecedenceExpression(|, 10, true, ConstantPatternContext.none)
                                    parseUnaryExpression(|, true, ConstantPatternContext.none)
                                      parsePrimary(|, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(|, expression, ConstantPatternContext.none)
                                          parseSend(|, expression, ConstantPatternContext.none)
                                            isNextIdentifier(|)
                                            ensureIdentifier(|, expression)
                                              listener: handleIdentifier(d, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(d)
                                              listener: handleNoArguments())
                                            listener: handleSend(d, ))
                                  listener: endBinaryExpression(|)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_caret)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_caret, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_caret, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_caret, operators_caret, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(^, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '^'., Try inserting an identifier before '^'., {lexeme: ^}], ^, ^)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(^)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(^)
                                        listener: handleSend(, ^)
                                  listener: beginBinaryExpression(^)
                                  parsePrecedenceExpression(^, 11, true, ConstantPatternContext.none)
                                    parseUnaryExpression(^, true, ConstantPatternContext.none)
                                      parsePrimary(^, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(^, expression, ConstantPatternContext.none)
                                          parseSend(^, expression, ConstantPatternContext.none)
                                            isNextIdentifier(^)
                                            ensureIdentifier(^, expression)
                                              listener: handleIdentifier(d, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(d)
                                              listener: handleNoArguments())
                                            listener: handleSend(d, ))
                                  listener: endBinaryExpression(^)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_is)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_is, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_is, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_is, operators_is, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      inPlainSync()
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(is, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got 'is'., Try inserting an identifier before 'is'., {lexeme: is}], is, is)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(is)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(is)
                                        listener: handleSend(, is)
                                listener: endBinaryExpression(>)
                                parseIsOperatorRest()
                                  listener: beginIsOperatorType(is)
                                  computeTypeAfterIsOrAs(is)
                                  listener: handleIdentifier(int, typeReference)
                                  listener: handleNoTypeArguments())
                                  listener: handleType(int, null)
                                  listener: endIsOperatorType(is)
                                  listener: handleIsOperator(is, null)
                                  skipChainedAsIsOperators(int)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_lessThan)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_lessThan, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_lessThan, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_lessThan, operators_lessThan, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(<)
                      parseArgumentsOpt(f)
                        listener: handleNoArguments(<)
                      listener: handleSend(f, <)
              listener: beginBinaryExpression(<)
              parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                parseUnaryExpression(<, true, ConstantPatternContext.none)
                  parsePrimary(<, expression, ConstantPatternContext.none)
                    parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                      parseSend(<, expression, ConstantPatternContext.none)
                        isNextIdentifier(<)
                        ensureIdentifier(<, expression)
                          listener: handleIdentifier(a, expression)
                        listener: handleNoTypeArguments(>)
                        parseArgumentsOpt(a)
                          listener: handleNoArguments(>)
                        listener: handleSend(a, >)
              listener: endBinaryExpression(<)
              reportRecoverableError(>, EqualityCannotBeEqualityOperand)
                listener: handleRecoverableError(EqualityCannotBeEqualityOperand, >, >)
              listener: beginBinaryExpression(>)
              parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                parseUnaryExpression(>, true, ConstantPatternContext.none)
                  parsePrimary(>, expression, ConstantPatternContext.none)
                    parseLiteralListSetMapOrFunction(>, null)
                      listener: beginTypeArguments(<)
                      listener: handleIdentifier(b, typeReference)
                      listener: handleNoTypeArguments(>)
                      listener: handleType(b, null)
                      listener: endTypeArguments(1, <, >)
                      reportRecoverableError(;, Message[ExpectedButGot, Expected '[' before this., null, {string: [}])
                        listener: handleRecoverableError(Message[ExpectedButGot, Expected '[' before this., null, {string: [}], ;, ;)
                      rewriter()
                      parseLiteralListSuffix(>, null)
                        rewriteSquareBrackets(>)
                          link([, ])
                          rewriter()
                        listener: handleLiteralList(0, [, null, ])
              listener: endBinaryExpression(>)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_minus)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_minus, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_minus, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_minus, operators_minus, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrecedenceExpression(-, 16, true, ConstantPatternContext.none)
                                      parseUnaryExpression(-, true, ConstantPatternContext.none)
                                        parsePrimary(-, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral(-, expression, ConstantPatternContext.none)
                                            parseSend(-, expression, ConstantPatternContext.none)
                                              isNextIdentifier(-)
                                              ensureIdentifier(-, expression)
                                                listener: handleIdentifier(d, expression)
                                              listener: handleNoTypeArguments())
                                              parseArgumentsOpt(d)
                                                listener: handleNoArguments())
                                              listener: handleSend(d, ))
                                    listener: handleUnaryPrefixExpression(-)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_openBracket)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_openBracket, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_openBracket, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_openBracket, operators_openBracket, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      listener: handleNoTypeArguments([)
                                      parseLiteralListSuffix(>, null)
                                        parseExpression([)
                                          parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression([, true, ConstantPatternContext.none)
                                              parsePrimary([, expression, ConstantPatternContext.none)
                                                parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                                  parseSend([, expression, ConstantPatternContext.none)
                                                    isNextIdentifier([)
                                                    ensureIdentifier([, expression)
                                                      listener: handleIdentifier(d, expression)
                                                    listener: handleNoTypeArguments(])
                                                    parseArgumentsOpt(d)
                                                      listener: handleNoArguments(])
                                                    listener: handleSend(d, ])
                                        listener: handleLiteralList(1, [, null, ])
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_openBracket_error)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_openBracket_error, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_openBracket_error, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_openBracket_error, operators_openBracket_error, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      listener: handleNoTypeArguments([)
                                      parseLiteralListSuffix(>, null)
                                        parseExpression([)
                                          parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression([, true, ConstantPatternContext.none)
                                              parsePrimary([, expression, ConstantPatternContext.none)
                                                parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                                  parseSend([, expression, ConstantPatternContext.none)
                                                    isNextIdentifier([)
                                                    ensureIdentifier([, expression)
                                                      listener: handleIdentifier(d, expression)
                                                    listener: handleNoTypeArguments(])
                                                    parseArgumentsOpt(d)
                                                      listener: handleNoArguments(])
                                                    listener: handleSend(d, ])
                                        listener: handleLiteralList(1, [, null, ])
                                listener: endBinaryExpression(>)
                                reportRecoverableError(>, EqualityCannotBeEqualityOperand)
                                  listener: handleRecoverableError(EqualityCannotBeEqualityOperand, >, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(>, expression, ConstantPatternContext.none)
                                        parseSend(>, expression, ConstantPatternContext.none)
                                          isNextIdentifier(>)
                                          ensureIdentifier(>, expression)
                                            listener: handleIdentifier(e, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(e)
                                            listener: handleNoArguments())
                                          listener: handleSend(e, ))
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_openBracket_unambiguous)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_openBracket_unambiguous, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_openBracket_unambiguous, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_openBracket_unambiguous, operators_openBracket_unambiguous, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      listener: handleNoTypeArguments([)
                                      parseLiteralListSuffix(>, null)
                                        parseExpression([)
                                          parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression([, true, ConstantPatternContext.none)
                                              parsePrimary([, expression, ConstantPatternContext.none)
                                                parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                                  parseSend([, expression, ConstantPatternContext.none)
                                                    isNextIdentifier([)
                                                    ensureIdentifier([, expression)
                                                      listener: handleIdentifier(d, expression)
                                                    listener: handleNoTypeArguments(,)
                                                    parseArgumentsOpt(d)
                                                      listener: handleNoArguments(,)
                                                    listener: handleSend(d, ,)
                                        parseExpression(,)
                                          parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                            parseUnaryExpression(,, true, ConstantPatternContext.none)
                                              parsePrimary(,, expression, ConstantPatternContext.none)
                                                parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                                  parseSend(,, expression, ConstantPatternContext.none)
                                                    isNextIdentifier(,)
                                                    ensureIdentifier(,, expression)
                                                      listener: handleIdentifier(e, expression)
                                                    listener: handleNoTypeArguments(])
                                                    parseArgumentsOpt(e)
                                                      listener: handleNoArguments(])
                                                    listener: handleSend(e, ])
                                        listener: handleLiteralList(2, [, null, ])
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_percent)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_percent, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_percent, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_percent, operators_percent, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(%, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '%'., Try inserting an identifier before '%'., {lexeme: %}], %, %)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(%)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(%)
                                        listener: handleSend(, %)
                                  listener: beginBinaryExpression(%)
                                  parsePrecedenceExpression(%, 15, true, ConstantPatternContext.none)
                                    parseUnaryExpression(%, true, ConstantPatternContext.none)
                                      parsePrimary(%, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(%, expression, ConstantPatternContext.none)
                                          parseSend(%, expression, ConstantPatternContext.none)
                                            isNextIdentifier(%)
                                            ensureIdentifier(%, expression)
                                              listener: handleIdentifier(d, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(d)
                                              listener: handleNoArguments())
                                            listener: handleSend(d, ))
                                  listener: endBinaryExpression(%)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_period_period)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_period_period, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_period_period, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_period_period, operators_period_period, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(.., Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '..'., Try inserting an identifier before '..'., {lexeme: ..}], .., ..)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(..)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(..)
                                        listener: handleSend(, ..)
                                listener: endBinaryExpression(>)
                                parseCascadeExpression()
                                  listener: beginCascade(..)
                                  parseSend(.., expressionContinuation, ConstantPatternContext.none)
                                    isNextIdentifier(..)
                                    ensureIdentifier(.., expressionContinuation)
                                      listener: handleIdentifier(toString, expressionContinuation)
                                    listener: handleNoTypeArguments(()
                                    parseArgumentsOpt(toString)
                                      parseArguments(toString)
                                        parseArgumentsRest(()
                                          listener: beginArguments(()
                                          listener: endArguments(0, (, ))
                                    listener: handleSend(toString, ))
                                  listener: handleEndingBinaryExpression(..)
                                  parseArgumentOrIndexStar(), Instance of 'NoTypeParamOrArg', false)
                                  listener: endCascade()
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_plus)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_plus, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_plus, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_plus, operators_plus, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    rewriteAndRecover(>, UnsupportedPrefixPlus, )
                                      reportRecoverableError(+, UnsupportedPrefixPlus)
                                        listener: handleRecoverableError(UnsupportedPrefixPlus, +, +)
                                      rewriter()
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(>, expression, ConstantPatternContext.none)
                                        parseSend(>, expression, ConstantPatternContext.none)
                                          isNextIdentifier(>)
                                          ensureIdentifier(>, expression)
                                            listener: handleIdentifier(, expression)
                                          listener: handleNoTypeArguments(+)
                                          parseArgumentsOpt()
                                            listener: handleNoArguments(+)
                                          listener: handleSend(, +)
                                  listener: beginBinaryExpression(+)
                                  parsePrecedenceExpression(+, 14, true, ConstantPatternContext.none)
                                    parseUnaryExpression(+, true, ConstantPatternContext.none)
                                      parsePrimary(+, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(+, expression, ConstantPatternContext.none)
                                          parseSend(+, expression, ConstantPatternContext.none)
                                            isNextIdentifier(+)
                                            ensureIdentifier(+, expression)
                                              listener: handleIdentifier(d, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(d)
                                              listener: handleNoArguments())
                                            listener: handleSend(d, ))
                                  listener: endBinaryExpression(+)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_question)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_question, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_question, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_question, operators_question, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(?, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '?'., Try inserting an identifier before '?'., {lexeme: ?}], ?, ?)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(?)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(?)
                                        listener: handleSend(, ?)
                                listener: endBinaryExpression(>)
                                parseConditionalExpressionRest()
                                  listener: beginConditionalExpression(?)
                                  parseExpressionWithoutCascade(?)
                                    parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                                      parseUnaryExpression(?, false, ConstantPatternContext.none)
                                        parsePrimary(?, expression, ConstantPatternContext.none)
                                          parseLiteralNull(?)
                                            listener: handleLiteralNull(null)
                                  ensureColon(null)
                                  listener: handleConditionalExpressionColon()
                                  parseExpressionWithoutCascade(:)
                                    parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                                      parseUnaryExpression(:, false, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralNull(:)
                                            listener: handleLiteralNull(null)
                                  listener: endConditionalExpression(?, :)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_question_period_methodInvocation)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_question_period_methodInvocation, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_question_period_methodInvocation, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_question_period_methodInvocation, operators_question_period_methodInvocation, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(?., Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '?.'., Try inserting an identifier before '?.'., {lexeme: ?.}], ?., ?.)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(?.)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(?.)
                                        listener: handleSend(, ?.)
                                  parsePrimary(?., expressionContinuation, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(?., expressionContinuation, ConstantPatternContext.none)
                                      looksLikeFunctionBody())
                                      parseSend(?., expressionContinuation, ConstantPatternContext.none)
                                        isNextIdentifier(?.)
                                        ensureIdentifier(?., expressionContinuation)
                                          listener: handleIdentifier(toString, expressionContinuation)
                                        listener: handleNoTypeArguments(()
                                        parseArgumentsOpt(toString)
                                          parseArguments(toString)
                                            parseArgumentsRest(()
                                              listener: beginArguments(()
                                              listener: endArguments(0, (, ))
                                        listener: handleSend(toString, ))
                                  listener: handleEndingBinaryExpression(?.)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_question_period_methodInvocation_generic)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_question_period_methodInvocation_generic, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_question_period_methodInvocation_generic, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_question_period_methodInvocation_generic, operators_question_period_methodInvocation_generic, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(?., Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '?.'., Try inserting an identifier before '?.'., {lexeme: ?.}], ?., ?.)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(?.)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(?.)
                                        listener: handleSend(, ?.)
                                  parsePrimary(?., expressionContinuation, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(?., expressionContinuation, ConstantPatternContext.none)
                                      looksLikeFunctionBody())
                                      parseSend(?., expressionContinuation, ConstantPatternContext.none)
                                        isNextIdentifier(?.)
                                        ensureIdentifier(?., expressionContinuation)
                                          listener: handleIdentifier(foo, expressionContinuation)
                                        listener: beginTypeArguments(<)
                                        listener: handleIdentifier(c, typeReference)
                                        listener: handleNoTypeArguments(>)
                                        listener: handleType(c, null)
                                        listener: endTypeArguments(1, <, >)
                                        parseArgumentsOpt(>)
                                          parseArguments(>)
                                            parseArgumentsRest(()
                                              listener: beginArguments(()
                                              listener: endArguments(0, (, ))
                                        listener: handleSend(foo, ))
                                  listener: handleEndingBinaryExpression(?.)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_question_period_period)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_question_period_period, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_question_period_period, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_question_period_period, operators_question_period_period, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(?.., Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '?..'., Try inserting an identifier before '?..'., {lexeme: ?..}], ?.., ?..)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(toString)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(toString)
                                        listener: handleSend(, toString)
                                listener: endBinaryExpression(>)
                            rewriteAndRecover(, Message[ExpectedButGot, Expected ',' before this., null, {string: ,}], ,)
                              reportRecoverableError(toString, Message[ExpectedButGot, Expected ',' before this., null, {string: ,}])
                                listener: handleRecoverableError(Message[ExpectedButGot, Expected ',' before this., null, {string: ,}], toString, toString)
                              rewriter()
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      looksLikeFunctionBody())
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(toString, expression)
                                        listener: handleNoTypeArguments(()
                                        parseArgumentsOpt(toString)
                                          parseArguments(toString)
                                            parseArgumentsRest(()
                                              listener: beginArguments(()
                                              listener: endArguments(0, (, ))
                                        listener: handleSend(toString, ))
                            listener: endArguments(3, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_question_period_propertyAccess)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_question_period_propertyAccess, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_question_period_propertyAccess, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_question_period_propertyAccess, operators_question_period_propertyAccess, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(?., Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '?.'., Try inserting an identifier before '?.'., {lexeme: ?.}], ?., ?.)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(?.)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(?.)
                                        listener: handleSend(, ?.)
                                  parsePrimary(?., expressionContinuation, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(?., expressionContinuation, ConstantPatternContext.none)
                                      parseSend(?., expressionContinuation, ConstantPatternContext.none)
                                        isNextIdentifier(?.)
                                        ensureIdentifier(?., expressionContinuation)
                                          listener: handleIdentifier(hashCode, expressionContinuation)
                                        listener: handleNoTypeArguments())
                                        parseArgumentsOpt(hashCode)
                                          listener: handleNoArguments())
                                        listener: handleSend(hashCode, ))
                                  listener: handleEndingBinaryExpression(?.)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_question_question)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_question_question, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_question_question, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_question_question, operators_question_question, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(??, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '??'., Try inserting an identifier before '??'., {lexeme: ??}], ??, ??)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(??)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(??)
                                        listener: handleSend(, ??)
                                listener: endBinaryExpression(>)
                                listener: beginBinaryExpression(??)
                                parsePrecedenceExpression(??, 5, true, ConstantPatternContext.none)
                                  parseUnaryExpression(??, true, ConstantPatternContext.none)
                                    parsePrimary(??, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(??, expression, ConstantPatternContext.none)
                                        parseSend(??, expression, ConstantPatternContext.none)
                                          isNextIdentifier(??)
                                          ensureIdentifier(??, expression)
                                            listener: handleIdentifier(d, expression)
                                          listener: handleNoTypeArguments())
                                          parseArgumentsOpt(d)
                                            listener: handleNoArguments())
                                          listener: handleSend(d, ))
                                listener: endBinaryExpression(??)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_slash)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_slash, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_slash, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_slash, operators_slash, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(/, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '/'., Try inserting an identifier before '/'., {lexeme: /}], /, /)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(/)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(/)
                                        listener: handleSend(, /)
                                  listener: beginBinaryExpression(/)
                                  parsePrecedenceExpression(/, 15, true, ConstantPatternContext.none)
                                    parseUnaryExpression(/, true, ConstantPatternContext.none)
                                      parsePrimary(/, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(/, expression, ConstantPatternContext.none)
                                          parseSend(/, expression, ConstantPatternContext.none)
                                            isNextIdentifier(/)
                                            ensureIdentifier(/, expression)
                                              listener: handleIdentifier(d, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(d)
                                              listener: handleNoArguments())
                                            listener: handleSend(d, ))
                                  listener: endBinaryExpression(/)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration(var)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(var)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(var)
      skipOuterPattern(var)
        skipObjectPatternRest(operators_tilde_slash)
      parseFields(;, null, null, null, null, null, null, var, var, Instance of 'NoType', operators_tilde_slash, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, var, ;)
        listener: handleNoType(var)
        ensureIdentifierPotentiallyRecovered(var, topLevelVariableDeclaration, false)
          listener: handleIdentifier(operators_tilde_slash, topLevelVariableDeclaration)
        parseFieldInitializerOpt(operators_tilde_slash, operators_tilde_slash, null, null, null, null, var, DeclarationKind.TopLevel, null)
          listener: beginFieldInitializer(=)
          parseExpression(=)
            parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
              parseUnaryExpression(=, true, ConstantPatternContext.none)
                parsePrimary(=, expression, ConstantPatternContext.none)
                  parseSendOrFunctionLiteral(=, expression, ConstantPatternContext.none)
                    looksLikeFunctionBody(;)
                    parseSend(=, expression, ConstantPatternContext.none)
                      isNextIdentifier(=)
                      ensureIdentifier(=, expression)
                        listener: handleIdentifier(f, expression)
                      listener: handleNoTypeArguments(()
                      parseArgumentsOpt(f)
                        parseArguments(f)
                          parseArgumentsRest(()
                            listener: beginArguments(()
                            parseExpression(()
                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                  parsePrimary((, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                      parseSend((, expression, ConstantPatternContext.none)
                                        isNextIdentifier(()
                                        ensureIdentifier((, expression)
                                          listener: handleIdentifier(a, expression)
                                        listener: handleNoTypeArguments(<)
                                        parseArgumentsOpt(a)
                                          listener: handleNoArguments(<)
                                        listener: handleSend(a, <)
                                listener: beginBinaryExpression(<)
                                parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(<, true, ConstantPatternContext.none)
                                    parsePrimary(<, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                        parseSend(<, expression, ConstantPatternContext.none)
                                          isNextIdentifier(<)
                                          ensureIdentifier(<, expression)
                                            listener: handleIdentifier(b, expression)
                                          listener: handleNoTypeArguments(,)
                                          parseArgumentsOpt(b)
                                            listener: handleNoArguments(,)
                                          listener: handleSend(b, ,)
                                listener: endBinaryExpression(<)
                            parseExpression(,)
                              parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression(,, true, ConstantPatternContext.none)
                                  parsePrimary(,, expression, ConstantPatternContext.none)
                                    parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                      parseSend(,, expression, ConstantPatternContext.none)
                                        isNextIdentifier(,)
                                        ensureIdentifier(,, expression)
                                          listener: handleIdentifier(c, expression)
                                        listener: handleNoTypeArguments(>)
                                        parseArgumentsOpt(c)
                                          listener: handleNoArguments(>)
                                        listener: handleSend(c, >)
                                listener: beginBinaryExpression(>)
                                parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                  parseUnaryExpression(>, true, ConstantPatternContext.none)
                                    parsePrimary(>, expression, ConstantPatternContext.none)
                                      parseSend(>, expression, ConstantPatternContext.none)
                                        isNextIdentifier(>)
                                        ensureIdentifier(>, expression)
                                          reportRecoverableErrorWithToken(~/, Instance of 'Template<(Token) => Message>')
                                            listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '~/'., Try inserting an identifier before '~/'., {lexeme: ~/}], ~/, ~/)
                                          rewriter()
                                          listener: handleIdentifier(, expression)
                                        listener: handleNoTypeArguments(~/)
                                        parseArgumentsOpt()
                                          listener: handleNoArguments(~/)
                                        listener: handleSend(, ~/)
                                  listener: beginBinaryExpression(~/)
                                  parsePrecedenceExpression(~/, 15, true, ConstantPatternContext.none)
                                    parseUnaryExpression(~/, true, ConstantPatternContext.none)
                                      parsePrimary(~/, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(~/, expression, ConstantPatternContext.none)
                                          parseSend(~/, expression, ConstantPatternContext.none)
                                            isNextIdentifier(~/)
                                            ensureIdentifier(~/, expression)
                                              listener: handleIdentifier(d, expression)
                                            listener: handleNoTypeArguments())
                                            parseArgumentsOpt(d)
                                              listener: handleNoArguments())
                                            listener: handleSend(d, ))
                                  listener: endBinaryExpression(~/)
                                listener: endBinaryExpression(>)
                            listener: endArguments(2, (, ))
                      listener: handleSend(f, ;)
          listener: endFieldInitializer(=, ;)
        listener: endTopLevelFields(null, null, null, null, var, 1, var, ;)
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(var)
  listener: endCompilationUnit(36, )
