parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, try)
          parseStatement({)
            parseStatementX({)
              parseTryStatement({)
                listener: beginTryStatement(try)
                parseBlock(try, BlockKind(try statement))
                  ensureBlock(try, BlockKind(try statement))
                  listener: beginBlock({, BlockKind(try statement))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(try statement))
                listener: beginCatchClause(catch)
                parseFormalParameters(catch, MemberKind.Catch)
                  parseFormalParametersRest((, MemberKind.Catch)
                    listener: beginFormalParameters((, MemberKind.Catch)
                    parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.Catch)
                      parseMetadataStar(()
                        listener: beginMetadataStar(e)
                        listener: endMetadataStar(0)
                      listener: beginFormalParameter(e, MemberKind.Catch, null, null, null)
                      listener: handleNoType(()
                      ensureIdentifier((, formalParameterDeclaration)
                        listener: handleIdentifier(e, formalParameterDeclaration)
                      listener: handleFormalParameterWithoutValue())
                      listener: endFormalParameter(null, null, null, e, null, null, FormalParameterKind.requiredPositional, MemberKind.Catch)
                    listener: endFormalParameters(1, (, ), MemberKind.Catch)
                listener: endCatchClause({)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(null, catch, null)
                listener: beginCatchClause(on)
                listener: handleIdentifier(Foo, typeReference)
                listener: handleNoTypeArguments({)
                listener: handleType(Foo, null)
                listener: endCatchClause({)
                parseBlock(Foo, BlockKind(catch clause))
                  ensureBlock(Foo, BlockKind(catch clause))
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, ;)
                  parseStatement({)
                    parseStatementX({)
                      parseEmptyStatement({)
                        listener: handleEmptyStatement(;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(1, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: beginCatchClause(on)
                parseRecordType((, on, false)
                  listener: beginRecordType(()
                  parseRecordTypeField((, identifierIsOptional: true)
                    listener: beginRecordTypeEntry()
                    parseMetadataStar(()
                      listener: beginMetadataStar(42)
                      listener: endMetadataStar(0)
                    reportRecoverableErrorWithToken(42, Template(ExpectedType))
                      listener: handleRecoverableError(Message[Template(ExpectedType), Expected a type, but got '42'., null, {lexeme: 42}], 42, 42)
                    rewriter()
                    listener: handleIdentifier(, typeReference)
                    listener: handleNoTypeArguments(42)
                    listener: handleType(, null)
                    listener: handleNoName(42)
                    listener: endRecordTypeEntry()
                  ensureCloseParen(, ()
                    reportRecoverableError(42, Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}])
                      listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ')' before this., null, {string: )}], 42, 42)
                  reportRecoverableError(), RecordTypeOnePositionalFieldNoTrailingComma)
                    listener: handleRecoverableError(RecordTypeOnePositionalFieldNoTrailingComma, ), ))
                  listener: endRecordType((, null, 1, false)
                listener: endCatchClause(;)
                parseBlock(), BlockKind(catch clause))
                  ensureBlock(), BlockKind(catch clause))
                    reportRecoverableError(), ExpectedCatchClauseBody)
                      listener: handleRecoverableError(ExpectedCatchClauseBody, ), ))
                    insertBlock())
                      rewriter()
                      rewriter()
                  listener: beginBlock({, BlockKind(catch clause))
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endBlock(0, {, }, BlockKind(catch clause))
                listener: handleCatchBlock(on, null, null)
                listener: endTryStatement(3, try, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, ;)
          parseStatement(})
            parseStatementX(})
              parseEmptyStatement(})
                listener: handleEmptyStatement(;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(}, null, null, }, VoidType(), null, on, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(on, topLevelFunctionDeclaration)
        parseMethodTypeVar(on)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(on, on, false, MemberKind.TopLevelMethod)
          parseFormalParameters(on, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(e)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(e, MemberKind.TopLevelMethod, null, null, null)
                listener: handleNoType(()
                ensureIdentifier((, formalParameterDeclaration)
                  listener: handleIdentifier(e, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, e, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(0, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(2, )
