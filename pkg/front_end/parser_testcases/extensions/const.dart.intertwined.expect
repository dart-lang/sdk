parseUnit(extension)
  skipErrorTokens(extension)
  listener: beginCompilationUnit(extension)
  syntheticPreviousToken(extension)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(extension)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(extension, , extension, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseExtension(extension, extension)
        listener: beginExtensionDeclarationPrelude(extension)
        parseExtensionDeclaration(extension, extension, extension)
          listener: handleNoTypeVariables(const)
          listener: beginExtensionDeclaration(extension, null)
          reportRecoverableError(extension, Message[ExpectedAfterButGot, Expected 'on' after this., null, {string: on}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected 'on' after this., null, {string: on}], extension, extension)
          rewriter()
          reportRecoverableErrorWithToken(const, Template(ExpectedType))
            listener: handleRecoverableError(Message[ExpectedType, Expected a type, but got 'const'., null, {lexeme: const}], const, const)
          rewriter()
          listener: handleIdentifier(, typeReference)
          listener: handleNoTypeArguments(const)
          listener: handleType(, null)
          ensureBlock(, BlockKind(extension declaration))
            reportRecoverableError(, ExpectedExtensionBody)
              listener: handleRecoverableError(ExpectedExtensionBody, const, const)
            insertBlock()
              rewriter()
              rewriter()
          parseClassOrMixinOrExtensionBody(, DeclarationKind.Extension, null)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Extension, {)
            notEofOrValue(}, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Extension, 0, {, })
          listener: endExtensionDeclaration(extension, extension, on, })
  listener: endTopLevelDeclaration(const)
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(const)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(const)
      skipOuterPattern(const)
        skipObjectPatternRest(Extension)
      parseFields(}, null, null, null, null, null, null, const, const, SimpleType(), on, DeclarationKind.TopLevel, null, false)
        listener: beginFields(DeclarationKind.TopLevel, null, null, null, null, null, null, const, })
        listener: handleIdentifier(Extension, typeReference)
        listener: handleNoTypeArguments(on)
        listener: handleType(Extension, null)
        ensureIdentifierPotentiallyRecovered(Extension, topLevelVariableDeclaration, false)
          listener: handleIdentifier(on, topLevelVariableDeclaration)
        parseFieldInitializerOpt(on, on, null, null, null, null, const, DeclarationKind.TopLevel, null)
          reportRecoverableError(on, Message[ConstFieldWithoutInitializer, The const variable 'on' must be initialized., Try adding an initializer ('= expression') to the declaration., {name: on}])
            listener: handleRecoverableError(Message[ConstFieldWithoutInitializer, The const variable 'on' must be initialized., Try adding an initializer ('= expression') to the declaration., {name: on}], on, on)
          listener: handleNoFieldInitializer(int)
        ensureSemicolon(on)
          reportRecoverableError(on, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], on, on)
          rewriter()
        listener: endTopLevelFields(null, null, null, null, const, 1, const, ;)
  listener: endTopLevelDeclaration(int)
  parseTopLevelDeclarationImpl(;, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(;)
      listener: beginMetadataStar(int)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(int)
      isReservedKeyword({)
      parseTopLevelMethod(;, null, null, ;, NoType(), null, int, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleNoType(;)
        ensureIdentifierPotentiallyRecovered(;, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(int, topLevelFunctionDeclaration)
        parseMethodTypeVar(int)
          listener: handleNoTypeVariables({)
        parseGetterOrFormalParameters(int, int, false, MemberKind.TopLevelMethod)
          missingParameterMessage(MemberKind.TopLevelMethod)
          reportRecoverableError(int, MissingFunctionParameters)
            listener: handleRecoverableError(MissingFunctionParameters, int, int)
          rewriter()
          parseFormalParametersRest((, MemberKind.TopLevelMethod)
            listener: beginFormalParameters((, MemberKind.TopLevelMethod)
            listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(0, {, })
        listener: endTopLevelMethod(int, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(extension)
  listener: endCompilationUnit(3, )
