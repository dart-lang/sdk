beginCompilationUnit(f)
  beginMetadataStar(f)
  endMetadataStar(0)
  beginTopLevelMember(f)
    beginTopLevelMethod(, null)
      handleNoType()
      handleIdentifier(f, topLevelFunctionDeclaration)
      handleNoTypeVariables(()
      beginFormalParameters((, MemberKind.TopLevelMethod)
      endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
      handleAsyncModifier(null, null)
      beginBlockFunctionBody({)
        beginMetadataStar(var)
        endMetadataStar(0)
        handleNoType(var)
        beginVariablesDeclaration(a, null, var)
          handleIdentifier(a, localVariableDeclaration)
          beginInitializedIdentifier(a)
            handleNoVariableInitializer(a)
          endInitializedIdentifier(a)
          handleIdentifier(b, localVariableDeclaration)
          beginInitializedIdentifier(b)
            handleNoVariableInitializer(b)
          endInitializedIdentifier(b)
          handleIdentifier(c, localVariableDeclaration)
          beginInitializedIdentifier(c)
            handleNoVariableInitializer(c)
          endInitializedIdentifier(c)
        endVariablesDeclaration(3, ;)
        handleIdentifier(a, expression)
        handleNoTypeArguments(?)
        handleNoArguments(?)
        handleSend(a, ?)
        beginConditionalExpression(?)
          handleNoTypeArguments([)
          handleIdentifier(b, expression)
          handleNoTypeArguments(])
          handleNoArguments(])
          handleSend(b, ])
          handleLiteralList(1, [, null, ])
          handleConditionalExpressionColon()
          handleIdentifier(c, expression)
          handleNoTypeArguments(;)
          handleNoArguments(;)
          handleSend(c, ;)
        endConditionalExpression(?, :)
        handleExpressionStatement(;)
        handleIdentifier(a, expression)
        handleNoTypeArguments(?)
        handleNoArguments(?)
        handleSend(a, ?)
        beginConditionalExpression(?)
          handleNoTypeArguments([)
          handleIdentifier(b, expression)
          handleNoTypeArguments(])
          handleNoArguments(])
          handleSend(b, ])
          handleLiteralList(1, [, null, ])
          handleConditionalExpressionColon()
          handleIdentifier(c, expression)
          handleNoTypeArguments(;)
          handleNoArguments(;)
          handleSend(c, ;)
        endConditionalExpression(?, :)
        handleExpressionStatement(;)
        handleIdentifier(a, expression)
        handleNoTypeArguments(?)
        handleNoArguments(?)
        handleSend(a, ?)
        beginConditionalExpression(?)
          handleNoTypeArguments([)
          handleIdentifier(b, expression)
          handleNoTypeArguments(])
          handleNoArguments(])
          handleSend(b, ])
          handleLiteralList(1, [, null, ])
          handleIdentifier(toString, expressionContinuation)
          handleNoTypeArguments(()
          beginArguments(()
          endArguments(0, (, ))
          handleSend(toString, :)
          handleEndingBinaryExpression(.)
          handleConditionalExpressionColon()
          handleIdentifier(c, expression)
          handleNoTypeArguments(;)
          handleNoArguments(;)
          handleSend(c, ;)
        endConditionalExpression(?, :)
        handleExpressionStatement(;)
        handleIdentifier(a, expression)
        handleNoTypeArguments(?)
        handleNoArguments(?)
        handleSend(a, ?)
        beginConditionalExpression(?)
          handleNoTypeArguments([)
          handleIdentifier(b, expression)
          handleNoTypeArguments(])
          handleNoArguments(])
          handleSend(b, ])
          handleLiteralList(1, [, null, ])
          handleIdentifier(toString, expressionContinuation)
          handleNoTypeArguments(()
          beginArguments(()
          endArguments(0, (, ))
          handleSend(toString, :)
          handleEndingBinaryExpression(.)
          handleConditionalExpressionColon()
          handleIdentifier(c, expression)
          handleNoTypeArguments(;)
          handleNoArguments(;)
          handleSend(c, ;)
        endConditionalExpression(?, :)
        handleExpressionStatement(;)
        handleIdentifier(a, expression)
        handleNoTypeArguments(?)
        handleNoArguments(?)
        handleSend(a, ?)
        beginConditionalExpression(?)
          beginTypeArguments(<)
            handleIdentifier(dynamic, typeReference)
            handleNoTypeArguments(>)
            handleType(dynamic, null)
          endTypeArguments(1, <, >)
          handleIdentifier(b, expression)
          handleNoTypeArguments(])
          handleNoArguments(])
          handleSend(b, ])
          handleLiteralList(1, [, null, ])
          handleConditionalExpressionColon()
          beginTypeArguments(<)
            handleIdentifier(dynamic, typeReference)
            handleNoTypeArguments(>)
            handleType(dynamic, null)
          endTypeArguments(1, <, >)
          handleIdentifier(c, expression)
          handleNoTypeArguments(])
          handleNoArguments(])
          handleSend(c, ])
          handleLiteralList(1, [, null, ])
        endConditionalExpression(?, :)
        handleExpressionStatement(;)
        handleIdentifier(a, expression)
        handleNoTypeArguments(?)
        handleNoArguments(?)
        handleSend(a, ?)
        beginConditionalExpression(?)
          handleNoTypeArguments([)
          handleIdentifier(b, expression)
          handleNoTypeArguments(])
          handleNoArguments(])
          handleSend(b, ])
          handleLiteralList(1, [, null, ])
          handleParenthesizedExpression(()
          handleConditionalExpressionColon()
          handleNoTypeArguments([)
          handleIdentifier(c, expression)
          handleNoTypeArguments(])
          handleNoArguments(])
          handleSend(c, ])
          handleLiteralList(1, [, null, ])
          handleParenthesizedExpression(()
        endConditionalExpression(?, :)
        handleExpressionStatement(;)
      endBlockFunctionBody(7, {, })
    endTopLevelMethod(f, null, })
  endTopLevelDeclaration()
endCompilationUnit(1, )
