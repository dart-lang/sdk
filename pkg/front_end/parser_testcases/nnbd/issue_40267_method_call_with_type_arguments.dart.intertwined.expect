parseUnit(f)
  skipErrorTokens(f)
  listener: beginCompilationUnit(f)
  syntheticPreviousToken(f)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(f)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(f)
      isReservedKeyword(()
      parseTopLevelMethod(, null, , Instance of 'NoType', null, f, false)
        listener: beginTopLevelMethod(, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, var)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers(var, {, null, var, null, false)
                looksLikeLocalFunction(a)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(a, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(a, localVariableDeclaration)
                    listener: beginInitializedIdentifier(a)
                    parseVariableInitializerOpt(a)
                      listener: handleNoVariableInitializer(a)
                    listener: endInitializedIdentifier(a)
                  parseOptionallyInitializedIdentifier(,)
                    ensureIdentifier(,, localVariableDeclaration)
                      listener: handleIdentifier(b, localVariableDeclaration)
                    listener: beginInitializedIdentifier(b)
                    parseVariableInitializerOpt(b)
                      listener: handleNoVariableInitializer(b)
                    listener: endInitializedIdentifier(b)
                  ensureSemicolon(b)
                  listener: endVariablesDeclaration(2, ;)
          notEofOrValue(}, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true)
                      parseUnaryExpression(;, true)
                        parsePrimary(;, expression)
                          parseSendOrFunctionLiteral(;, expression)
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?.)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?.)
                              listener: handleSend(a, ?.)
                      parsePrimary(?., expressionContinuation)
                        parseSendOrFunctionLiteral(?., expressionContinuation)
                          looksLikeFunctionBody(;)
                          parseSend(?., expressionContinuation)
                            ensureIdentifier(?., expressionContinuation)
                              listener: handleIdentifier(call, expressionContinuation)
                            listener: beginTypeArguments(<)
                            listener: handleIdentifier(Foo, typeReference)
                            listener: handleNoTypeArguments(>)
                            listener: handleType(Foo, null)
                            listener: endTypeArguments(1, <, >)
                            parseArgumentsOpt(>)
                              parseArguments(>)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true)
                                      parseUnaryExpression((, true)
                                        parsePrimary((, expression)
                                          parseSendOrFunctionLiteral((, expression)
                                            parseSend((, expression)
                                              ensureIdentifier((, expression)
                                                listener: handleIdentifier(b, expression)
                                              listener: handleNoTypeArguments())
                                              parseArgumentsOpt(b)
                                                listener: handleNoArguments())
                                              listener: handleSend(b, ))
                                  listener: endArguments(1, (, ))
                            listener: handleSend(call, ;)
                      listener: handleEndingBinaryExpression(?.)
                  ensureSemicolon())
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, false)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true)
                      parseUnaryExpression(;, true)
                        parsePrimary(;, expression)
                          parseSendOrFunctionLiteral(;, expression)
                            parseSend(;, expression)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?)
                              listener: handleSend(a, ?)
                      parseConditionalExpressionRest(a)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false)
                            parseUnaryExpression(?, false)
                              parsePrimary(?, expression)
                                parseLiteralListSetMapOrFunction(?, null)
                                  listener: beginTypeVariables(<)
                                  listener: beginMetadataStar(Foo)
                                  listener: endMetadataStar(0)
                                  listener: handleIdentifier(Foo, typeVariableDeclaration)
                                  listener: beginTypeVariable(Foo)
                                  listener: handleTypeVariablesDefined(Foo, 1)
                                  listener: handleNoType(Foo)
                                  listener: endTypeVariable(>, 0, null, null)
                                  listener: endTypeVariables(<, >)
                                  parseLiteralFunctionSuffix(>)
                                    reportRecoverableErrorWithToken(;, Instance of 'Template<(Token) => Message>')
                                      listener: handleRecoverableError(Message[UnexpectedToken, Unexpected token ';'., null, {token: ;}], ;, ;)
                                    parseFunctionExpression(>)
                                      listener: beginFunctionExpression(()
                                      parseFormalParametersRequiredOpt(>, MemberKind.Local)
                                        parseFormalParametersRest((, MemberKind.Local)
                                          listener: beginFormalParameters((, MemberKind.Local)
                                          parseFormalParameter((, FormalParameterKind.mandatory, MemberKind.Local)
                                            parseMetadataStar(()
                                              listener: beginMetadataStar(b)
                                              listener: endMetadataStar(0)
                                            listener: beginFormalParameter(b, MemberKind.Local, null, null, null)
                                            listener: handleNoType(()
                                            ensureIdentifier((, formalParameterDeclaration)
                                              listener: handleIdentifier(b, formalParameterDeclaration)
                                            listener: handleFormalParameterWithoutValue())
                                            listener: endFormalParameter(null, null, b, null, null, FormalParameterKind.mandatory, MemberKind.Local)
                                          listener: endFormalParameters(1, (, ), MemberKind.Local)
                                      parseAsyncOptBody(), true, false)
                                        parseAsyncModifierOpt())
                                          listener: handleAsyncModifier(null, null)
                                          inPlainSync()
                                        parseFunctionBody(), true, false)
                                          reportRecoverableError(;, ExpectedBody)
                                            listener: handleRecoverableError(ExpectedBody, ;, ;)
                                          listener: handleEmptyFunctionBody(;)
                                      listener: endFunctionExpression((, })
                        ensureColon(;)
                          rewriteAndRecover(;, Message[ExpectedButGot, Expected ':' before this., null, {string: :}], :)
                            reportRecoverableError(}, Message[ExpectedButGot, Expected ':' before this., null, {string: :}])
                              listener: handleRecoverableError(Message[ExpectedButGot, Expected ':' before this., null, {string: :}], }, })
                            rewriter()
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false)
                            parseUnaryExpression(:, false)
                              parsePrimary(:, expression)
                                parseSend(:, expression)
                                  ensureIdentifier(:, expression)
                                    reportRecoverableErrorWithToken(}, Instance of 'Template<(Token) => Message>')
                                      listener: handleRecoverableError(Message[ExpectedIdentifier, Expected an identifier, but got '}'., Try inserting an identifier before '}'., {token: }}], }, })
                                    rewriter()
                                    listener: handleIdentifier(, expression)
                                  listener: handleNoTypeArguments(})
                                  parseArgumentsOpt()
                                    listener: handleNoArguments(})
                                  listener: handleSend(, })
                        listener: endConditionalExpression(?, :)
                  ensureSemicolon()
                    reportRecoverableError(, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], }, })
                    rewriter()
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(f, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(f)
  listener: endCompilationUnit(1, )
