parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, Function)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction(f)
                  parseExpressionWithoutCascade(=)
                    parsePrecedenceExpression(=, 1, false, ConstantPatternContext.none)
                      parseUnaryExpression(=, false, ConstantPatternContext.none)
                        parsePrimary(=, expression, ConstantPatternContext.none)
                          parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                            parseFunctionExpression(=)
                              parseFormalParametersRequiredOpt(=, MemberKind.Local)
                                parseFormalParametersRest((, MemberKind.Local)
                              parseAsyncOptBody(), true, false)
                                parseAsyncModifierOpt())
                                  inPlainSync()
                                parseFunctionBody(), true, false)
                                  notEofOrType(CLOSE_CURLY_BRACKET, print)
                                  parseStatement({)
                                    parseStatementX({)
                                      parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                                        looksLikeLocalFunction(print)
                                        parseExpressionStatement({)
                                          parseExpression({)
                                            parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                              parseUnaryExpression({, true, ConstantPatternContext.none)
                                                parsePrimary({, expression, ConstantPatternContext.none)
                                                  parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                                    looksLikeFunctionBody(})
                                                    parseSend({, expression, ConstantPatternContext.none)
                                                      ensureIdentifier({, expression)
                                                      parseArgumentsOpt(print)
                                                        parseArguments(print)
                                                          parseArgumentsRest(()
                                                            allowedToShortcutParseExpression()
                                                            parseExpression(()
                                                              parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                  parsePrimary((, expression, ConstantPatternContext.none)
                                                                    parseLiteralInt(()
                                          ensureSemicolon())
                                            reportRecoverableError(), Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                            rewriter()
                                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: beginMetadataStar(Function)
                  listener: endMetadataStar(0)
                  listener: handleIdentifier(Function, typeReference)
                  listener: handleNoTypeArguments(?)
                  listener: handleType(Function, ?)
                  listener: beginVariablesDeclaration(f, null, null)
                  parseVariablesDeclarationRest(?, true)
                    parseOptionallyInitializedIdentifier(?)
                      ensureIdentifier(?, localVariableDeclaration)
                        listener: handleIdentifier(f, localVariableDeclaration)
                      listener: beginInitializedIdentifier(f)
                      parseVariableInitializerOpt(f)
                        listener: beginVariableInitializer(=)
                        parseExpression(=)
                          parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(=, true, ConstantPatternContext.none)
                              parsePrimary(=, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                  listener: handleNoTypeVariables(()
                                  parseFunctionExpression(=)
                                    listener: beginFunctionExpression(()
                                    parseFormalParametersRequiredOpt(=, MemberKind.Local)
                                      parseFormalParametersRest((, MemberKind.Local)
                                        listener: beginFormalParameters((, MemberKind.Local)
                                        listener: endFormalParameters(0, (, ), MemberKind.Local)
                                    parseAsyncOptBody(), true, false)
                                      parseAsyncModifierOpt())
                                        listener: handleAsyncModifier(null, null)
                                        inPlainSync()
                                      parseFunctionBody(), true, false)
                                        listener: beginBlockFunctionBody({)
                                        notEofOrType(CLOSE_CURLY_BRACKET, print)
                                        parseStatement({)
                                          parseStatementX({)
                                            parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                                              looksLikeLocalFunction(print)
                                              parseExpressionStatement({)
                                                parseExpression({)
                                                  parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                                    parseUnaryExpression({, true, ConstantPatternContext.none)
                                                      parsePrimary({, expression, ConstantPatternContext.none)
                                                        parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                                          looksLikeFunctionBody(})
                                                          parseSend({, expression, ConstantPatternContext.none)
                                                            ensureIdentifier({, expression)
                                                              listener: handleIdentifier(print, expression)
                                                            listener: handleNoTypeArguments(()
                                                            parseArgumentsOpt(print)
                                                              parseArguments(print)
                                                                parseArgumentsRest(()
                                                                  listener: beginArguments(()
                                                                  allowedToShortcutParseExpression()
                                                                  parseExpression(()
                                                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                                                        parsePrimary((, expression, ConstantPatternContext.none)
                                                                          parseLiteralInt(()
                                                                            listener: handleLiteralInt(1)
                                                                  listener: endArguments(1, (, ))
                                                            listener: handleSend(print, ))
                                                ensureSemicolon())
                                                  reportRecoverableError(), Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                                                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], ), ))
                                                  rewriter()
                                                listener: handleExpressionStatement(print, ;)
                                        notEofOrType(CLOSE_CURLY_BRACKET, })
                                        listener: endBlockFunctionBody(1, {, })
                                    listener: endFunctionExpression((, })
                        listener: endVariableInitializer(=)
                      listener: endInitializedIdentifier(f)
                    ensureSemicolon(})
                    listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, f)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(f)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(f, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(f)
                                parseArguments(f)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    listener: endArguments(0, (, ))
                              listener: handleSend(f, ))
                  ensureSemicolon())
                  listener: handleExpressionStatement(f, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(2, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
