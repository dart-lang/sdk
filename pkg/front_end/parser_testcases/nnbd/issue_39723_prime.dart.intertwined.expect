parseUnit(class)
  skipErrorTokens(class)
  listener: beginCompilationUnit(class)
  syntheticPreviousToken(class)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(class)
      listener: endMetadataStar(0)
    parseTopLevelKeywordDeclaration(class, , class, null, null, null, null, DirectiveContext(DirectiveState.Unknown))
      parseClassOrNamedMixinApplication(class, null, null, null, null, null, null, null, null, class)
        listener: beginClassOrMixinOrNamedMixinApplicationPrelude(class)
        ensureIdentifier(class, classOrMixinDeclaration)
          listener: handleIdentifier(A, classOrMixinDeclaration)
        listener: handleNoTypeVariables({)
        listener: beginClassDeclaration(class, null, null, null, null, null, null, null, null, A)
        parseClass(A, class, class, null, A)
          parsePrimaryConstructorOpt(A, null, false)
            listener: handleNoPrimaryConstructor(A, null, false)
          parseClassHeaderOpt(A, class, class)
            parseClassExtendsOpt(A, DeclarationHeaderKind.Class)
              listener: handleNoType(A)
              listener: handleClassExtends(null, 1)
            parseClassWithClauseOpt(A)
              listener: handleClassNoWithClause()
            parseClassOrMixinOrEnumImplementsOpt(A)
              listener: handleImplements(null, 0)
            listener: handleClassHeader(class, class, null)
          parseClassOrMixinOrExtensionBody(A, DeclarationKind.Class, A)
            listener: beginClassOrMixinOrExtensionBody(DeclarationKind.Class, {)
            notEofOrType(CLOSE_CURLY_BRACKET, operator)
            parseClassOrMixinOrExtensionOrEnumMemberImpl({, DeclarationKind.Class, A)
              parseMetadataStar({)
                listener: beginMetadataStar(operator)
                listener: endMetadataStar(0)
              listener: beginMember()
              parseMethod({, null, null, null, null, null, null, null, {, NoType(), null, operator, DeclarationKind.Class, A, false)
                listener: beginMethod(DeclarationKind.Class, null, null, null, null, null, null, operator, A)
                listener: handleNoType({)
                parseOperatorName({)
                  listener: handleOperatorName(operator, [])
                parseMethodTypeVar([])
                  listener: handleNoTypeVariables(()
                parseGetterOrFormalParameters([], operator, false, MemberKind.NonStaticMethod)
                  parseFormalParameters([], MemberKind.NonStaticMethod)
                    parseFormalParametersRest((, MemberKind.NonStaticMethod)
                      listener: beginFormalParameters((, MemberKind.NonStaticMethod)
                      parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
                        parseMetadataStar(()
                          listener: beginMetadataStar(int)
                          listener: endMetadataStar(0)
                        listener: beginFormalParameter(int, MemberKind.NonStaticMethod, null, null, null)
                        listener: handleIdentifier(int, typeReference)
                        listener: handleNoTypeArguments(index)
                        listener: handleType(int, null)
                        ensureIdentifier(int, formalParameterDeclaration)
                          listener: handleIdentifier(index, formalParameterDeclaration)
                        listener: handleFormalParameterWithoutValue())
                        listener: endFormalParameter(null, null, null, null, index, null, null, FormalParameterKind.requiredPositional, MemberKind.NonStaticMethod)
                      listener: endFormalParameters(1, (, ), MemberKind.NonStaticMethod)
                parseInitializersOpt())
                  listener: handleNoInitializers()
                parseAsyncModifierOpt())
                  listener: handleAsyncModifier(null, null)
                  inPlainSync()
                inPlainSync()
                parseFunctionBody(), false, true)
                  parseExpressionFunctionBody(=>, false)
                    parseExpression(=>)
                      parsePrecedenceExpression(=>, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(=>, true, ConstantPatternContext.none)
                          parsePrimary(=>, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral(=>, expression, ConstantPatternContext.none)
                              parseSend(=>, expression, ConstantPatternContext.none)
                                ensureIdentifier(=>, expression)
                                  listener: handleIdentifier(index, expression)
                                listener: handleNoTypeArguments(;)
                                parseArgumentsOpt(index)
                                  listener: handleNoArguments(;)
                                listener: handleSend(index, index)
                    ensureSemicolon(index)
                    listener: handleExpressionFunctionBody(=>, ;)
                    inGenerator()
                listener: endClassMethod(null, operator, (, null, ;)
              listener: endMember()
            notEofOrType(CLOSE_CURLY_BRACKET, })
            listener: endClassOrMixinOrExtensionBody(DeclarationKind.Class, 1, {, })
          listener: endClassDeclaration(class, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(main)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(main)
      isReservedKeyword(()
      parseTopLevelMethod(}, null, null, }, NoType(), null, main, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleNoType(})
        ensureIdentifierPotentiallyRecovered(}, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, A)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionWithoutCascade(=)
                  parsePrecedenceExpression(=, 1, false, ConstantPatternContext.none)
                    parseUnaryExpression(=, false, ConstantPatternContext.none)
                      parsePrimary(=, expression, ConstantPatternContext.none)
                        parseLiteralNull(=)
                listener: beginMetadataStar(A)
                listener: endMetadataStar(0)
                listener: handleIdentifier(A, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(A, ?)
                listener: beginVariablesDeclaration(a, null, null)
                parseVariablesDeclarationRest(?, true)
                  parseOptionallyInitializedIdentifier(?)
                    ensureIdentifier(?, localVariableDeclaration)
                      listener: handleIdentifier(a, localVariableDeclaration)
                    listener: beginInitializedIdentifier(a)
                    parseVariableInitializerOpt(a)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseLiteralNull(=)
                                listener: handleLiteralNull(null)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(a)
                  ensureSemicolon(null)
                  listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(a, expression)
                                            listener: handleNoTypeArguments(!)
                                            parseArgumentsOpt(a)
                                              listener: handleNoArguments(!)
                                            listener: handleSend(a, a)
                                    listener: handleNonNullAssertExpression(!)
                                ensureCloseParen(!, ()
                                listener: endParenthesizedExpression(()
                        parsePrimary(?., expressionContinuation, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(?., expressionContinuation, ConstantPatternContext.none)
                            parseSend(?., expressionContinuation, ConstantPatternContext.none)
                              ensureIdentifier(?., expressionContinuation)
                                listener: handleIdentifier(toString, expressionContinuation)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(toString)
                                parseArguments(toString)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    listener: endArguments(0, (, ))
                              listener: handleSend(toString, ))
                        listener: handleDotAccess(?., ), true)
                    ensureSemicolon())
                    listener: handleExpressionStatement((, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(a, expression)
                                            listener: handleNoTypeArguments(!)
                                            parseArgumentsOpt(a)
                                              listener: handleNoArguments(!)
                                            listener: handleSend(a, a)
                                    listener: handleNonNullAssertExpression(!)
                                ensureCloseParen(!, ()
                                listener: endParenthesizedExpression(()
                        parsePrimary(?., expressionContinuation, ConstantPatternContext.none)
                          listener: handleNoTypeArguments([)
                          parseLiteralListSuffix(?., null)
                            parseExpression([)
                              parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                parseUnaryExpression([, true, ConstantPatternContext.none)
                                  parsePrimary([, expression, ConstantPatternContext.none)
                                    parseLiteralInt([)
                                      listener: handleLiteralInt(42)
                            listener: handleLiteralList(1, [, null, ])
                        listener: handleDotAccess(?., ], true)
                    ensureSemicolon(])
                    listener: handleExpressionStatement((, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(a, expression)
                                            listener: handleNoTypeArguments(!)
                                            parseArgumentsOpt(a)
                                              listener: handleNoArguments(!)
                                            listener: handleSend(a, a)
                                    listener: handleNonNullAssertExpression(!)
                                ensureCloseParen(!, ()
                                listener: endParenthesizedExpression(()
                        canParseAsConditional(?)
                          parseExpressionWithoutCascade(?)
                            parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                              parseUnaryExpression(?, false, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseLiteralListSuffix(?, null)
                                    parseExpression([)
                                      parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression([, true, ConstantPatternContext.none)
                                          parsePrimary([, expression, ConstantPatternContext.none)
                                            parseLiteralInt([)
                        parseArgumentOrIndexStar(), NoTypeParamOrArg(), true)
                          parseExpression([)
                            parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression([, true, ConstantPatternContext.none)
                                parsePrimary([, expression, ConstantPatternContext.none)
                                  parseLiteralInt([)
                                    listener: handleLiteralInt(42)
                          listener: handleIndexedExpression(?, [, ])
                    ensureSemicolon(])
                    listener: handleExpressionStatement((, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, ()
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclaration(;, null)
                parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                  looksLikeLocalFunction(()
                  parseExpressionStatement(;)
                    parseExpression(;)
                      parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(;, true, ConstantPatternContext.none)
                          parsePrimary(;, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(;, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral(;, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(a, expression)
                                            listener: handleNoTypeArguments(!)
                                            parseArgumentsOpt(a)
                                              listener: handleNoArguments(!)
                                            listener: handleSend(a, a)
                                    listener: handleNonNullAssertExpression(!)
                                ensureCloseParen(!, ()
                                listener: endParenthesizedExpression(()
                        canParseAsConditional(?)
                          parseExpressionWithoutCascade(?)
                            parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                              parseUnaryExpression(?, false, ConstantPatternContext.none)
                                parsePrimary(?, expression, ConstantPatternContext.none)
                                  parseLiteralListSuffix(?, null)
                                    parseExpression([)
                                      parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression([, true, ConstantPatternContext.none)
                                          parsePrimary([, expression, ConstantPatternContext.none)
                                            parseLiteralInt([)
                        parseArgumentOrIndexStar(), NoTypeParamOrArg(), true)
                          parseExpression([)
                            parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression([, true, ConstantPatternContext.none)
                                parsePrimary([, expression, ConstantPatternContext.none)
                                  parseLiteralInt([)
                                    listener: handleLiteralInt(42)
                          listener: handleIndexedExpression(?, [, ])
                    ensureSemicolon(])
                    listener: handleExpressionStatement((, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(5, {, })
        listener: endTopLevelMethod(main, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(class)
  listener: endCompilationUnit(2, )
