parseUnit(f)
  skipErrorTokens(f)
  listener: beginCompilationUnit(f)
  syntheticPreviousToken(f)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(f)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(f)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, var)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers(var, {, null, var, null, null)
                looksLikeLocalFunction(a)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(a, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(a, localVariableDeclaration)
                    listener: beginInitializedIdentifier(a)
                    parseVariableInitializerOpt(a)
                      listener: handleNoVariableInitializer(a)
                    listener: endInitializedIdentifier(a)
                  parseOptionallyInitializedIdentifier(,)
                    ensureIdentifier(,, localVariableDeclaration)
                      listener: handleIdentifier(b, localVariableDeclaration)
                    listener: beginInitializedIdentifier(b)
                    parseVariableInitializerOpt(b)
                      listener: handleNoVariableInitializer(b)
                    listener: endInitializedIdentifier(b)
                  ensureSemicolon(b)
                  listener: endVariablesDeclaration(2, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?.)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?.)
                              listener: handleSend(a, a)
                      parsePrimary(?., expressionContinuation, ConstantPatternContext.none)
                        parseSendOrFunctionLiteral(?., expressionContinuation, ConstantPatternContext.none)
                          parseSend(?., expressionContinuation, ConstantPatternContext.none)
                            ensureIdentifier(?., expressionContinuation)
                              listener: handleIdentifier(call, expressionContinuation)
                            listener: handleNoTypeArguments(()
                            parseArgumentsOpt(call)
                              parseArguments(call)
                                parseArgumentsRest(()
                                  listener: beginArguments(()
                                  allowedToShortcutParseExpression()
                                  listener: handleIdentifier(b, expression)
                                  listener: handleNoTypeArguments())
                                  listener: handleNoArguments())
                                  listener: handleSend(b, b)
                                  listener: endArguments(1, (, ))
                            listener: handleSend(call, ))
                      listener: handleDotAccess(?., ), true)
                  ensureSemicolon())
                  listener: handleExpressionStatement(a, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?)
                              listener: handleSend(a, a)
                      parseConditionalExpressionRest(a)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(?, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(?, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                              parseSend((, expression, ConstantPatternContext.none)
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(b, expression)
                                                listener: handleNoTypeArguments())
                                                parseArgumentsOpt(b)
                                                  listener: handleNoArguments())
                                                listener: handleSend(b, b)
                                    ensureCloseParen(b, ()
                                    listener: endParenthesizedExpression(()
                        ensureColon())
                          rewriteAndRecover(), Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}], :)
                            reportRecoverableError(;, Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}])
                              listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}], ;, ;)
                            rewriter()
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSend(:, expression, ConstantPatternContext.none)
                                  ensureIdentifier(:, expression)
                                    reportRecoverableErrorWithToken(;, Template(ExpectedIdentifier))
                                      listener: handleRecoverableError(Message[Template(ExpectedIdentifier), Expected an identifier, but got ';'., Try inserting an identifier before ';'., {lexeme: ;}], ;, ;)
                                    rewriter()
                                    listener: handleIdentifier(, expression)
                                  listener: handleNoTypeArguments(;)
                                  parseArgumentsOpt()
                                    listener: handleNoArguments(;)
                                  listener: handleSend(, )
                        listener: endConditionalExpression(?, :, )
                  ensureSemicolon()
                  listener: handleExpressionStatement(a, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(3, {, })
        listener: endTopLevelMethod(f, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(f)
  listener: endCompilationUnit(1, )
