parseUnit(main)
  skipErrorTokens(main)
  listener: beginCompilationUnit(main)
  syntheticPreviousToken(main)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(main)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(main)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , NoType(), null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, switch)
          parseStatement({)
            parseStatementX({)
              parseSwitchStatement({)
                listener: beginSwitchStatement(switch)
                ensureParenthesizedCondition(switch, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(a, expression)
                                listener: handleNoTypeArguments())
                                parseArgumentsOpt(a)
                                  listener: handleNoArguments())
                                listener: handleSend(a, a)
                    ensureCloseParen(a, ()
                    listener: handleParenthesizedCondition((, null, null)
                parseSwitchBlock())
                  ensureBlock(), BlockKind(switch statement))
                  listener: beginSwitchBlock({)
                  notEofOrType(CLOSE_CURLY_BRACKET, case)
                  peekPastLabels(case)
                  listener: beginCaseExpression(case)
                  parseExpression(case)
                    parsePrecedenceExpression(case, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(case, true, ConstantPatternContext.none)
                        parsePrimary(case, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(case, expression, ConstantPatternContext.none)
                            parseSend(case, expression, ConstantPatternContext.none)
                              ensureIdentifier(case, expression)
                                listener: handleIdentifier(x, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(x)
                                listener: handleNoArguments(?)
                              listener: handleSend(x, x)
                      canParseAsConditional(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseLiteralInt([)
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseLiteralSetOrMapSuffix(:, null)
                                  parseExpression({)
                                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression({, true, ConstantPatternContext.none)
                                        parsePrimary({, expression, ConstantPatternContext.none)
                                          parseLiteralSetOrMapSuffix({, null)
                                            parseExpression({)
                                              parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression({, true, ConstantPatternContext.none)
                                                  parsePrimary({, expression, ConstantPatternContext.none)
                                                    parseLiteralSetOrMapSuffix({, null)
                                                      parseExpression({)
                                                        parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                                          parseUnaryExpression({, true, ConstantPatternContext.none)
                                                            parsePrimary({, expression, ConstantPatternContext.none)
                                                              parseLiteralInt({)
                      parseConditionalExpressionRest(x)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                listener: handleNoTypeArguments([)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseLiteralInt([)
                                            listener: handleLiteralInt(4)
                                  listener: handleLiteralList(1, [, null, ])
                        ensureColon(])
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                listener: handleNoTypeArguments({)
                                parseLiteralSetOrMapSuffix(:, null)
                                  parseExpression({)
                                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression({, true, ConstantPatternContext.none)
                                        parsePrimary({, expression, ConstantPatternContext.none)
                                          listener: handleNoTypeArguments({)
                                          parseLiteralSetOrMapSuffix({, null)
                                            parseExpression({)
                                              parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                                parseUnaryExpression({, true, ConstantPatternContext.none)
                                                  parsePrimary({, expression, ConstantPatternContext.none)
                                                    listener: handleNoTypeArguments({)
                                                    parseLiteralSetOrMapSuffix({, null)
                                                      parseExpression({)
                                                        parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                                          parseUnaryExpression({, true, ConstantPatternContext.none)
                                                            parsePrimary({, expression, ConstantPatternContext.none)
                                                              parseLiteralInt({)
                                                                listener: handleLiteralInt(2)
                                                      listener: handleLiteralSetOrMap(1, {, null, }, true)
                                            listener: handleLiteralSetOrMap(1, {, null, }, true)
                                  listener: handleLiteralSetOrMap(1, {, null, }, true)
                        listener: endConditionalExpression(?, :, })
                  listener: handleSwitchCaseNoWhenClause(})
                  ensureColon(})
                    rewriteAndRecover(}, Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}], :)
                      reportRecoverableError(;, Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}])
                        listener: handleRecoverableError(Message[Template(ExpectedButGot), Expected ':' before this., null, {string: :}], ;, ;)
                      rewriter()
                  listener: endCaseExpression(case, null, :)
                  peekPastLabels(;)
                  parseStatementsInSwitchCase(:, ;, case, 0, 1, null, null)
                    listener: beginSwitchCase(0, 1, case)
                    parseStatement(:)
                      parseStatementX(:)
                        parseEmptyStatement(:)
                          listener: handleEmptyStatement(;)
                    peekPastLabels(})
                    listener: endSwitchCase(0, 1, null, null, 1, case, ;)
                  notEofOrType(CLOSE_CURLY_BRACKET, })
                  listener: endSwitchBlock(1, {, })
                listener: endSwitchStatement(switch, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(main, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(main)
  listener: endCompilationUnit(1, )
