parseUnit(dynamic)
  skipErrorTokens(dynamic)
  listener: beginCompilationUnit(dynamic)
  syntheticPreviousToken(dynamic)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(, null, null, , SimpleType(), null, g, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(g)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(dynamic, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(g, topLevelFunctionDeclaration)
        parseMethodTypeVar(g)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(g, g, false, MemberKind.TopLevelMethod)
          parseFormalParameters(g, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(num)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(num, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(num, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(num, ?)
                ensureIdentifier(?, formalParameterDeclaration)
                  listener: handleIdentifier(i, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, i, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, Map)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                looksLikeLocalFunction(m)
                listener: beginMetadataStar(Map)
                listener: endMetadataStar(0)
                ensureIdentifier({, typeReference)
                  listener: handleIdentifier(Map, typeReference)
                listener: beginTypeArguments(<)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(?)
                listener: handleType(int, ?)
                listener: handleIdentifier(int, typeReference)
                listener: handleNoTypeArguments(>)
                listener: handleType(int, null)
                listener: endTypeArguments(2, <, >)
                listener: handleType(Map, null)
                listener: beginVariablesDeclaration(m, null, null)
                parseVariablesDeclarationRest(>, true)
                  parseOptionallyInitializedIdentifier(>)
                    ensureIdentifier(>, localVariableDeclaration)
                      listener: handleIdentifier(m, localVariableDeclaration)
                    listener: beginInitializedIdentifier(m)
                    parseVariableInitializerOpt(m)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              listener: handleNoTypeArguments({)
                              parseLiteralSetOrMapSuffix(=, null)
                                parseExpression({)
                                  parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression({, true, ConstantPatternContext.none)
                                      parsePrimary({, expression, ConstantPatternContext.none)
                                        parseLiteralInt({)
                                          listener: handleLiteralInt(0)
                                parseExpression(:)
                                  parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression(:, true, ConstantPatternContext.none)
                                      parsePrimary(:, expression, ConstantPatternContext.none)
                                        parseLiteralInt(:)
                                          listener: handleLiteralInt(1)
                                listener: handleLiteralMapEntry(:, }, null, null)
                                listener: handleLiteralSetOrMap(1, {, null, }, false)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(m)
                  ensureSemicolon(})
                  listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, m)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(m)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(m, expression)
                              listener: handleNoTypeArguments([)
                              parseArgumentsOpt(m)
                                listener: handleNoArguments([)
                              listener: handleSend(m, m)
                      parseArgumentOrIndexStar(m, NoTypeParamOrArg(), false)
                        parseExpression([)
                          parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression([, true, ConstantPatternContext.none)
                              parsePrimary([, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                  parseSend([, expression, ConstantPatternContext.none)
                                    ensureIdentifier([, expression)
                                      listener: handleIdentifier(i, expression)
                                    listener: handleNoTypeArguments(as)
                                    parseArgumentsOpt(i)
                                      listener: handleNoArguments(as)
                                    listener: handleSend(i, i)
                            parseAsOperatorRest(i)
                              listener: beginAsOperatorType(as)
                              computeTypeAfterIsOrAs(as)
                              listener: handleIdentifier(int, typeReference)
                              listener: handleNoTypeArguments(?)
                              listener: handleType(int, ?)
                              listener: endAsOperatorType(as)
                              listener: handleAsOperator(as)
                              skipChainedAsIsOperators(?)
                        listener: handleIndexedExpression(null, [, ])
                  ensureSemicolon(])
                  listener: handleExpressionStatement(m, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(list)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(list, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(list, localVariableDeclaration)
                    listener: beginInitializedIdentifier(list)
                    parseVariableInitializerOpt(list)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              listener: handleNoTypeArguments([)
                              parseLiteralListSuffix(=, null)
                                parseExpression([)
                                  parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression([, true, ConstantPatternContext.none)
                                      parsePrimary([, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                          parseSend([, expression, ConstantPatternContext.none)
                                            ensureIdentifier([, expression)
                                              listener: handleIdentifier(i, expression)
                                            listener: handleNoTypeArguments(as)
                                            parseArgumentsOpt(i)
                                              listener: handleNoArguments(as)
                                            listener: handleSend(i, i)
                                    parseAsOperatorRest(i)
                                      listener: beginAsOperatorType(as)
                                      computeTypeAfterIsOrAs(as)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(?)
                                      listener: handleType(int, ?)
                                      listener: endAsOperatorType(as)
                                      listener: handleAsOperator(as)
                                      skipChainedAsIsOperators(?)
                                parseExpression(,)
                                  parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression(,, true, ConstantPatternContext.none)
                                      parsePrimary(,, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                          parseSend(,, expression, ConstantPatternContext.none)
                                            ensureIdentifier(,, expression)
                                              listener: handleIdentifier(i, expression)
                                            listener: handleNoTypeArguments(as)
                                            parseArgumentsOpt(i)
                                              listener: handleNoArguments(as)
                                            listener: handleSend(i, i)
                                    parseAsOperatorRest(i)
                                      listener: beginAsOperatorType(as)
                                      computeTypeAfterIsOrAs(as)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(?)
                                      listener: handleType(int, ?)
                                      listener: endAsOperatorType(as)
                                      listener: handleAsOperator(as)
                                      skipChainedAsIsOperators(?)
                                parseExpression(,)
                                  parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression(,, true, ConstantPatternContext.none)
                                      parsePrimary(,, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                          parseSend(,, expression, ConstantPatternContext.none)
                                            ensureIdentifier(,, expression)
                                              listener: handleIdentifier(i, expression)
                                            listener: handleNoTypeArguments(as)
                                            parseArgumentsOpt(i)
                                              listener: handleNoArguments(as)
                                            listener: handleSend(i, i)
                                    parseAsOperatorRest(i)
                                      listener: beginAsOperatorType(as)
                                      computeTypeAfterIsOrAs(as)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(?)
                                      listener: handleType(int, ?)
                                      listener: endAsOperatorType(as)
                                      listener: handleAsOperator(as)
                                      skipChainedAsIsOperators(?)
                                listener: handleLiteralList(3, [, null, ])
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(list)
                  ensureSemicolon(])
                  listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(list2)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(list2, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(list2, localVariableDeclaration)
                    listener: beginInitializedIdentifier(list2)
                    parseVariableInitializerOpt(list2)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              listener: handleNoTypeArguments([)
                              parseLiteralListSuffix(=, null)
                                parseExpression([)
                                  parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression([, true, ConstantPatternContext.none)
                                      parsePrimary([, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                          parseSend([, expression, ConstantPatternContext.none)
                                            ensureIdentifier([, expression)
                                              listener: handleIdentifier(i, expression)
                                            listener: handleNoTypeArguments(is)
                                            parseArgumentsOpt(i)
                                              listener: handleNoArguments(is)
                                            listener: handleSend(i, i)
                                    parseIsOperatorRest(i)
                                      listener: beginIsOperatorType(is)
                                      computeTypeAfterIsOrAs(is)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(?)
                                      listener: handleType(int, ?)
                                      listener: endIsOperatorType(is)
                                      listener: handleIsOperator(is, null)
                                      skipChainedAsIsOperators(?)
                                parseExpression(,)
                                  parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression(,, true, ConstantPatternContext.none)
                                      parsePrimary(,, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                          parseSend(,, expression, ConstantPatternContext.none)
                                            ensureIdentifier(,, expression)
                                              listener: handleIdentifier(i, expression)
                                            listener: handleNoTypeArguments(is)
                                            parseArgumentsOpt(i)
                                              listener: handleNoArguments(is)
                                            listener: handleSend(i, i)
                                    parseIsOperatorRest(i)
                                      listener: beginIsOperatorType(is)
                                      computeTypeAfterIsOrAs(is)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(?)
                                      listener: handleType(int, ?)
                                      listener: endIsOperatorType(is)
                                      listener: handleIsOperator(is, null)
                                      skipChainedAsIsOperators(?)
                                parseExpression(,)
                                  parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression(,, true, ConstantPatternContext.none)
                                      parsePrimary(,, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                          parseSend(,, expression, ConstantPatternContext.none)
                                            ensureIdentifier(,, expression)
                                              listener: handleIdentifier(i, expression)
                                            listener: handleNoTypeArguments(is)
                                            parseArgumentsOpt(i)
                                              listener: handleNoArguments(is)
                                            listener: handleSend(i, i)
                                    parseIsOperatorRest(i)
                                      listener: beginIsOperatorType(is)
                                      computeTypeAfterIsOrAs(is)
                                      listener: handleIdentifier(int, typeReference)
                                      listener: handleNoTypeArguments(?)
                                      listener: handleType(int, ?)
                                      listener: endIsOperatorType(is)
                                      listener: handleIsOperator(is, null)
                                      skipChainedAsIsOperators(?)
                                listener: handleLiteralList(3, [, null, ])
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(list2)
                  ensureSemicolon(])
                  listener: endVariablesDeclaration(1, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement(;)
            parseStatementX(;)
              parseReturnStatement(;)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        listener: handleNoTypeArguments([)
                        parseLiteralListSuffix(return, null)
                          parseExpression([)
                            parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression([, true, ConstantPatternContext.none)
                                parsePrimary([, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                    parseSend([, expression, ConstantPatternContext.none)
                                      ensureIdentifier([, expression)
                                        listener: handleIdentifier(list, expression)
                                      listener: handleNoTypeArguments(.)
                                      parseArgumentsOpt(list)
                                        listener: handleNoArguments(.)
                                      listener: handleSend(list, list)
                              parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                  parseSend(., expressionContinuation, ConstantPatternContext.none)
                                    ensureIdentifier(., expressionContinuation)
                                      listener: handleIdentifier(first, expressionContinuation)
                                    listener: handleNoTypeArguments(,)
                                    parseArgumentsOpt(first)
                                      listener: handleNoArguments(,)
                                    listener: handleSend(first, first)
                              listener: handleDotAccess(., first, false)
                          parseExpression(,)
                            parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                              parseUnaryExpression(,, true, ConstantPatternContext.none)
                                parsePrimary(,, expression, ConstantPatternContext.none)
                                  parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                    parseSend(,, expression, ConstantPatternContext.none)
                                      ensureIdentifier(,, expression)
                                        listener: handleIdentifier(list2, expression)
                                      listener: handleNoTypeArguments(.)
                                      parseArgumentsOpt(list2)
                                        listener: handleNoArguments(.)
                                      listener: handleSend(list2, list2)
                              parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                  parseSend(., expressionContinuation, ConstantPatternContext.none)
                                    ensureIdentifier(., expressionContinuation)
                                      listener: handleIdentifier(first, expressionContinuation)
                                    listener: handleNoTypeArguments(])
                                    parseArgumentsOpt(first)
                                      listener: handleNoArguments(])
                                    listener: handleSend(first, first)
                              listener: handleDotAccess(., first, false)
                          listener: handleLiteralList(2, [, null, ])
                ensureSemicolon(])
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(5, {, })
        listener: endTopLevelMethod(dynamic, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(dynamic)
  listener: endCompilationUnit(1, )
