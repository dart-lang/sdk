parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(dynamic)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(dynamic, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(dynamic, typeReference)
                listener: handleNoTypeArguments(sample)
                listener: handleType(dynamic, null)
                ensureIdentifier(dynamic, formalParameterDeclaration)
                  listener: handleIdentifier(sample, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, sample, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseParenthesizedExpressionFunctionLiteralOrRecordLiteral((, ConstantPatternContext.none)
                              parseParenthesizedExpressionOrRecordLiteral((, null, ConstantPatternContext.none)
                                listener: beginParenthesizedExpressionOrRecordLiteral(()
                                parseExpression(()
                                  parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                    parseUnaryExpression((, true, ConstantPatternContext.none)
                                      parsePrimary((, expression, ConstantPatternContext.none)
                                        parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                          parseSend((, expression, ConstantPatternContext.none)
                                            ensureIdentifier((, expression)
                                              listener: handleIdentifier(sample, expression)
                                            listener: handleNoTypeArguments(.)
                                            parseArgumentsOpt(sample)
                                              listener: handleNoArguments(.)
                                            listener: handleSend(sample, sample)
                                    parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                        parseSend(., expressionContinuation, ConstantPatternContext.none)
                                          ensureIdentifier(., expressionContinuation)
                                            listener: handleIdentifier(value, expressionContinuation)
                                          listener: handleNoTypeArguments(!)
                                          parseArgumentsOpt(value)
                                            listener: handleNoArguments(!)
                                          listener: handleSend(value, value)
                                    listener: handleDotAccess(., value, false)
                                    listener: handleNonNullAssertExpression(!)
                                ensureCloseParen(!, ()
                                listener: endParenthesizedExpression(()
                        listener: beginBinaryExpression(<)
                        parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                          parseUnaryExpression(<, true, ConstantPatternContext.none)
                            parsePrimary(<, expression, ConstantPatternContext.none)
                              parseLiteralInt(<)
                                listener: handleLiteralInt(10)
                        listener: endBinaryExpression(<, 10)
                    ensureCloseParen(10, ()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement({)
                parseStatement())
                  parseStatementX())
                    parseBlock(), BlockKind(statement))
                      ensureBlock(), BlockKind(statement))
                      listener: beginBlock({, BlockKind(statement))
                      notEofOrType(CLOSE_CURLY_BRACKET, print)
                      parseStatement({)
                        parseStatementX({)
                          parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                            looksLikeLocalFunction(print)
                            parseExpressionStatement({)
                              parseExpression({)
                                parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                                  parseUnaryExpression({, true, ConstantPatternContext.none)
                                    parsePrimary({, expression, ConstantPatternContext.none)
                                      parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                                        looksLikeFunctionBody(;)
                                        parseSend({, expression, ConstantPatternContext.none)
                                          ensureIdentifier({, expression)
                                            listener: handleIdentifier(print, expression)
                                          listener: handleNoTypeArguments(()
                                          parseArgumentsOpt(print)
                                            parseArguments(print)
                                              parseArgumentsRest(()
                                                listener: beginArguments(()
                                                allowedToShortcutParseExpression()
                                                listener: beginLiteralString('thing!')
                                                listener: endLiteralString(0, ))
                                                listener: endArguments(1, (, ))
                                          listener: handleSend(print, ))
                              ensureSemicolon())
                              listener: handleExpressionStatement(print, ;)
                      notEofOrType(CLOSE_CURLY_BRACKET, })
                      listener: endBlock(1, {, }, BlockKind(statement))
                listener: endThenStatement({, })
                listener: endIfStatement(if, null, })
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
