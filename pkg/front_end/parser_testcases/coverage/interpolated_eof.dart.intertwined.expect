parseUnit(UnmatchedToken(())
  skipErrorTokens(UnmatchedToken(())
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(UnmatchedToken({), DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar(UnmatchedToken({))
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(UnmatchedToken({))
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(UnmatchedToken({), null, null, UnmatchedToken({), VoidType(), null, foo, false)
        listener: beginTopLevelMethod(UnmatchedToken({), null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, print)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                looksLikeLocalFunction(print)
                parseExpressionStatement({)
                  parseExpression({)
                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression({, true, ConstantPatternContext.none)
                        parsePrimary({, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(})
                            parseSend({, expression, ConstantPatternContext.none)
                              ensureIdentifier({, expression)
                                listener: handleIdentifier(print, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(print)
                                parseArguments(print)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    allowedToShortcutParseExpression()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseLiteralString(()
                                              parseSingleLiteralString(()
                                                listener: beginLiteralString(")
                                                parseExpression(${)
                                                  parsePrecedenceExpression(${, 1, true, ConstantPatternContext.none)
                                                    parseUnaryExpression(${, true, ConstantPatternContext.none)
                                                      parsePrimary(${, expression, ConstantPatternContext.none)
                                                        parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(${, ConstantPatternContext.none)
                                                          parseParenthesizedExpressionOrRecordLiteral(${, null, ConstantPatternContext.none)
                                                            listener: beginParenthesizedExpressionOrRecordLiteral(()
                                                            ensureCloseParen((, ()
                                                            listener: endRecordLiteral((, 0, null)
                                                listener: handleInterpolationExpression(${, })
                                                parseStringPart(})
                                                  listener: handleStringPart(")
                                                listener: endLiteralString(1, ))
                                    listener: endArguments(1, (, ))
                              listener: handleSend(print, ))
                  ensureSemicolon())
                    reportRecoverableError(", Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                      listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], , )
                      listener: // WARNING: Reporting at eof for .
                    rewriter()
                  listener: handleExpressionStatement(print, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(UnmatchedToken(())
    listener: handleErrorToken(UnmatchedToken(())
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find ')' to match '('., null, {string: ), lexeme: (}], UnmatchedToken((), UnmatchedToken(())
    listener: handleErrorToken(UnmatchedToken(${))
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find '}' to match '${'., null, {string: }, lexeme: ${}], UnmatchedToken(${), UnmatchedToken(${))
    listener: handleErrorToken(UnterminatedString("))
    listener: handleRecoverableError(Message[Template(UnterminatedString), String starting with " must end with "., null, {string: ", string2: "}], UnterminatedString("), UnterminatedString("))
    listener: handleErrorToken(UnmatchedToken(())
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find ')' to match '('., null, {string: ), lexeme: (}], UnmatchedToken((), UnmatchedToken(())
    listener: handleErrorToken(UnmatchedToken({))
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find '}' to match '{'., null, {string: }, lexeme: {}], UnmatchedToken({), UnmatchedToken({))
  listener: endCompilationUnit(1, )
