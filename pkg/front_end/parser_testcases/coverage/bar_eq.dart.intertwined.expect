parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , VoidType(), null, foo, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(dynamic)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(dynamic, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(dynamic, typeReference)
                listener: handleNoTypeArguments(bar)
                listener: handleType(dynamic, null)
                ensureIdentifier(dynamic, formalParameterDeclaration)
                  listener: handleIdentifier(bar, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, null, bar, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, bar)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                looksLikeLocalFunction(bar)
                parseExpressionStatement({)
                  parseExpression({)
                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression({, true, ConstantPatternContext.none)
                        parsePrimary({, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                            parseSend({, expression, ConstantPatternContext.none)
                              ensureIdentifier({, expression)
                                listener: handleIdentifier(bar, expression)
                              listener: handleNoTypeArguments(|=)
                              parseArgumentsOpt(bar)
                                listener: handleNoArguments(|=)
                              listener: handleSend(bar, bar)
                      parsePrecedenceExpression(|=, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression(|=, true, ConstantPatternContext.none)
                          parsePrimary(|=, expression, ConstantPatternContext.none)
                            parseLiteralInt(|=)
                              listener: handleLiteralInt(2)
                      listener: handleAssignmentExpression(|=, 2)
                  ensureSemicolon(2)
                  listener: handleExpressionStatement(bar, ;)
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
