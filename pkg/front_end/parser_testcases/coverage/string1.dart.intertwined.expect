parseUnit(UnterminatedString("))
  skipErrorTokens(UnterminatedString("))
  listener: beginCompilationUnit(String)
  syntheticPreviousToken(String)
  parseTopLevelDeclarationImpl(UnmatchedToken({), DirectiveContext(DirectiveState.Unknown))
    parseMetadataStar(UnmatchedToken({))
      listener: beginMetadataStar(String)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(UnmatchedToken({))
      listener: beginTopLevelMember(String)
      parseTopLevelMethod(UnmatchedToken({), null, null, UnmatchedToken({), SimpleType(), null, foo, false)
        listener: beginTopLevelMethod(UnmatchedToken({), null, null)
        listener: handleIdentifier(String, typeReference)
        listener: handleNoTypeArguments(foo)
        listener: handleType(String, null)
        ensureIdentifierPotentiallyRecovered(String, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              parseFormalParameter((, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
                parseMetadataStar(()
                  listener: beginMetadataStar(dynamic)
                  listener: endMetadataStar(0)
                listener: beginFormalParameter(dynamic, MemberKind.TopLevelMethod, null, null, null)
                listener: handleIdentifier(dynamic, typeReference)
                listener: handleNoTypeArguments(bar)
                listener: handleType(dynamic, null)
                ensureIdentifier(dynamic, formalParameterDeclaration)
                  listener: handleIdentifier(bar, formalParameterDeclaration)
                listener: handleFormalParameterWithoutValue())
                listener: endFormalParameter(null, null, null, bar, null, null, FormalParameterKind.requiredPositional, MemberKind.TopLevelMethod)
              listener: endFormalParameters(1, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralString(return)
                          parseSingleLiteralString(return)
                            listener: beginLiteralString("æble )
                            parseIdentifierExpression($)
                              parseSend($, expression, ConstantPatternContext.none)
                                ensureIdentifier($, expression)
                                  listener: handleIdentifier(bar, expression)
                                listener: handleNoTypeArguments(")
                                parseArgumentsOpt(bar)
                                  listener: handleNoArguments(")
                                listener: handleSend(bar, bar)
                            listener: handleInterpolationExpression($, null)
                            parseStringPart(bar)
                              listener: handleStringPart(")
                            listener: endLiteralString(1, ;)
                ensureSemicolon(")
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(String, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(String)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(String)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, bar, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(String, typeReference)
        listener: handleNoTypeArguments(bar)
        listener: handleType(String, null)
        ensureIdentifierPotentiallyRecovered(String, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(bar, topLevelFunctionDeclaration)
        parseMethodTypeVar(bar)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(bar, bar, false, MemberKind.TopLevelMethod)
          parseFormalParameters(bar, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralString(return)
                          parseSingleLiteralString(return)
                            listener: beginLiteralString("æble")
                            listener: endLiteralString(0, })
                ensureSemicolon("æble")
                  reportRecoverableError("æble", Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], "æble", "æble")
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(String, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(String)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(String)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, baz, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(String, typeReference)
        listener: handleNoTypeArguments(baz)
        listener: handleType(String, null)
        ensureIdentifierPotentiallyRecovered(String, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(baz, topLevelFunctionDeclaration)
        parseMethodTypeVar(baz)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(baz, baz, false, MemberKind.TopLevelMethod)
          parseFormalParameters(baz, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralString(return)
                          parseSingleLiteralString(return)
                            listener: beginLiteralString(")
                            parseIdentifierExpression($)
                              parseSend($, expression, ConstantPatternContext.none)
                                ensureIdentifier($, expression)
                                  listener: handleIdentifier(, expression)
                                listener: handleNoTypeArguments(1")
                                parseArgumentsOpt()
                                  listener: handleNoArguments(1")
                                listener: handleSend(, )
                            listener: handleInterpolationExpression($, null)
                            parseStringPart()
                              listener: handleStringPart(1")
                            listener: endLiteralString(1, })
                ensureSemicolon(1")
                  reportRecoverableError(1", Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], 1", 1")
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(String, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(String)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(String)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, qux, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(String, typeReference)
        listener: handleNoTypeArguments(qux)
        listener: handleType(String, null)
        ensureIdentifierPotentiallyRecovered(String, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(qux, topLevelFunctionDeclaration)
        parseMethodTypeVar(qux)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(qux, qux, false, MemberKind.TopLevelMethod)
          parseFormalParameters(qux, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralString(return)
                          parseSingleLiteralString(return)
                            listener: beginLiteralString(r"æble$")
                            listener: endLiteralString(0, })
                ensureSemicolon(r"æble$")
                  reportRecoverableError(r"æble$", Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], r"æble$", r"æble$")
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(String, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(String)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(String)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, quux, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(String, typeReference)
        listener: handleNoTypeArguments(quux)
        listener: handleType(String, null)
        ensureIdentifierPotentiallyRecovered(String, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(quux, topLevelFunctionDeclaration)
        parseMethodTypeVar(quux)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(quux, quux, false, MemberKind.TopLevelMethod)
          parseFormalParameters(quux, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralString(return)
                          parseSingleLiteralString(return)
                            listener: beginLiteralString(r"æble$")
                            listener: endLiteralString(0, })
                ensureSemicolon(r"æble$")
                  reportRecoverableError(r"æble$", Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], r"æble$", r"æble$")
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(String, null, })
  listener: endTopLevelDeclaration(})
  parseTopLevelDeclarationImpl(}, DirectiveContext(DirectiveState.Declarations))
    parseMetadataStar(})
      listener: beginMetadataStar(String)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(String)
      parseTopLevelMethod(}, null, null, }, SimpleType(), null, corge, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(String, typeReference)
        listener: handleNoTypeArguments(corge)
        listener: handleType(String, null)
        ensureIdentifierPotentiallyRecovered(String, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(corge, topLevelFunctionDeclaration)
        parseMethodTypeVar(corge)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(corge, corge, false, MemberKind.TopLevelMethod)
          parseFormalParameters(corge, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrType(CLOSE_CURLY_BRACKET, return)
          parseStatement({)
            parseStatementX({)
              parseReturnStatement({)
                listener: beginReturnStatement(return)
                parseExpression(return)
                  parsePrecedenceExpression(return, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(return, true, ConstantPatternContext.none)
                      parsePrimary(return, expression, ConstantPatternContext.none)
                        parseLiteralString(return)
                          parseSingleLiteralString(return)
                            listener: beginLiteralString(r"æble")
                            listener: endLiteralString(0, })
                ensureSemicolon(r"æble")
                  reportRecoverableError(r"æble", Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}])
                    listener: handleRecoverableError(Message[Template(ExpectedAfterButGot), Expected ';' after this., null, {string: ;}], r"æble", r"æble")
                  rewriter()
                listener: endReturnStatement(true, return, ;)
                inGenerator()
          notEofOrType(CLOSE_CURLY_BRACKET, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(String, null, })
  listener: endTopLevelDeclaration(})
  reportAllErrorTokens(UnterminatedString("))
    listener: handleErrorToken(UnterminatedString("))
    listener: handleRecoverableError(Message[Template(UnterminatedString), String starting with " must end with "., null, {string: ", string2: "}], UnterminatedString("), UnterminatedString("))
    listener: handleErrorToken(UnterminatedToken(UnexpectedDollarInString))
    listener: handleRecoverableError(UnexpectedDollarInString, UnterminatedToken(UnexpectedDollarInString), UnterminatedToken(UnexpectedDollarInString))
    listener: handleErrorToken(UnterminatedString(r"))
    listener: handleRecoverableError(Message[Template(UnterminatedString), String starting with r" must end with "., null, {string: r", string2: "}], UnterminatedString(r"), UnterminatedString(r"))
    listener: handleErrorToken(UnterminatedString(r"))
    listener: handleRecoverableError(Message[Template(UnterminatedString), String starting with r" must end with "., null, {string: r", string2: "}], UnterminatedString(r"), UnterminatedString(r"))
    listener: handleErrorToken(UnmatchedToken({))
    listener: handleRecoverableError(Message[Template(UnmatchedToken), Can't find '}' to match '{'., null, {string: }, lexeme: {}], UnmatchedToken({), UnmatchedToken({))
  listener: endCompilationUnit(6, )
