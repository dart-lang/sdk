library;
import self as self;
import "dart:core" as core;

class C<T extends core::Object> extends core::Object {
  field dynamic v = MakeClosure<<T extends core::Object>(dynamic) → dynamic, self::C::T>(self::closure#C#v#function, MakeVector(1));
  final field dynamic y = MakeClosure<() → dynamic>(self::closure#C#y#function, null);
  static final field dynamic z = MakeClosure<() → dynamic>(self::closure#C#z#function, null);
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
static field dynamic x = MakeClosure<() → dynamic>(self::closure#x#function, null);
static method main() → dynamic {
  if(!new self::C::•<core::String>().v(""))
    throw "C<String>.v false on String";
  if(new self::C::•<core::String>().v(0))
    throw "C<String>.v true on int";
  if(new self::C::•<core::String>().v(null))
    throw "C<String>.v true on null";
  if(new self::C::•<core::int>().v(""))
    throw "C<int>.v true on String";
  if(!new self::C::•<core::int>().v(0))
    throw "C<int>.v false on int";
  if(new self::C::•<core::int>().v(null))
    throw "C<int>.v true on null";
  if(!"x".==(self::x.call()))
    throw "x";
  if(!"y".==(new self::C::•<core::String>().y()))
    throw "y";
  if(!"z".==(self::C::z.call()))
    throw "z";
}
static method closure#C#v#function<T extends core::Object>(dynamic #contextParameter, dynamic x) → dynamic {
  return x is self::closure#C#v#function::T;
}
static method closure#C#y#function(dynamic #contextParameter) → dynamic {
  return "y";
}
static method closure#C#z#function(dynamic #contextParameter) → dynamic {
  return "z";
}
static method closure#x#function(dynamic #contextParameter) → dynamic {
  return "x";
}
