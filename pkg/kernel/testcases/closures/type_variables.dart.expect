library;
import self as self;
import "dart:core" as core;

class C<T extends core::Object, S extends core::Object> extends core::Object {
  constructor internal() → void
    : super core::Object::•()
    ;
  method foo(self::C::S s) → dynamic {
    final Vector #context = MakeVector(2);
    #context[1] = this;
    return MakeClosure<(dynamic) → dynamic>(self::closure#C#foo#function, #context);
  }
  method bar() → dynamic {
    self::C<self::C::T, self::C::S> self = this;
  }
  method baz() → dynamic {
    return MakeClosure<() → () → self::C<dynamic, dynamic>>(self::closure#C#baz#function, null);
  }
  static factory •<T extends core::Object, S extends core::Object>() → self::C<self::C::•::T, self::C::•::S> {
    final () → dynamic local = MakeClosure<() → dynamic>(self::closure#C#function#local, null);
    return local.call();
  }
}
static method main(dynamic arguments) → dynamic {
  core::print(self::C::•<core::String, core::String>().foo(null).call(arguments.first));
  dynamic c = self::C::•<core::int, core::int>().baz().call().call();
  if(!(c is self::C<core::int, core::int>))
    throw "${c} fails type test 'is C<int, int>'";
  if(c is self::C<core::String, core::String>) {
    throw "${c{self::C<core::String, core::String>}} passes type test 'is C<String, String>'";
  }
  core::print(c);
}
static method closure#C#foo#function(Vector #contextParameter, dynamic x) → dynamic {
  dynamic y = x;
  core::Object z = y;
  self::C<dynamic, dynamic> self = #contextParameter[1];
  return z as dynamic;
}
static method closure#C#baz#function#function(Vector #contextParameter) → self::C<dynamic, dynamic> {
  return self::C::•<dynamic, dynamic>();
}
static method closure#C#baz#function(Vector #contextParameter) → () → self::C<dynamic, dynamic> {
  return MakeClosure<() → self::C<dynamic, dynamic>>(self::closure#C#baz#function#function, #contextParameter);
}
static method closure#C#function#local(Vector #contextParameter) → dynamic {
  self::C<dynamic, dynamic> self = new self::C::internal<dynamic, dynamic>();
  return self;
}
