library;
import self as self;

static method main(dynamic arguments) → dynamic {
  final dynamic #context = MakeVector(3);
  #context[2] = MakeClosure<() → dynamic>(self::closure#main#f, #context);
  final () → dynamic g = MakeClosure<() → dynamic>(self::closure#main#g, #context);
  g.call();
}
static method closure#main#f(dynamic #contextParameter) → dynamic {
  return null;
}
static method closure#main#g(dynamic #contextParameter) → dynamic {
  return (#contextParameter[2]).call();
}
