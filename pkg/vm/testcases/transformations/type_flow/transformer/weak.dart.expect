library #lib /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class A extends core::Object {
[@vm.inferred-type.metadata=dart.core::_Smi (value: 1)] [@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasNonThisUses:false,hasTearOffUses:false,methodOrSetterSelectorId:1,getterSelectorId:2] [@vm.unboxing-info.metadata=(i)->i]  field core::int x;
[@vm.inferred-type.metadata=dart.core::_Closure] [@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasNonThisUses:false,hasTearOffUses:false,methodOrSetterSelectorId:3,getterSelectorId:4]  field core::Function y = #C1;
  synthetic constructor •() → self::A
    : self::A::x = [@vm.inferred-type.metadata=dart.core::_Smi (value: 1)] self::used1(), super core::Object::•()
    ;
[@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasTearOffUses:false,methodOrSetterSelectorId:5,getterSelectorId:6]  method toString() → core::String
    return "x: ${[@vm.direct-call.metadata=#lib::A.x] this.{self::A::x}{core::int}}, y: ${[@vm.direct-call.metadata=#lib::A.y] this.{self::A::y}{core::Function}}";
}
class B extends core::Object {
  constructor •() → self::B
    : super core::Object::•() {
    core::print([@vm.inferred-type.metadata=dart.core::_OneByteString (value: "B")] self::B::getAccessor());
    self::register(null);
  }
  static method getAccessor() → core::String
    return "B";
}
[@vm.unboxing-info.metadata=()->i]static method used1() → core::int
  return 1;
static method used2() → core::String
  return [@vm.direct-call.metadata=dart.core::_Smi.toString] [@vm.inferred-type.metadata=dart.core::_OneByteString (skip check)] 2.{core::int::toString}(){() → core::String};
static method register([@vm.inferred-type.metadata=dart.core::_Closure?] () →? core::String getAccessor) → void {
  if(!(getAccessor == null)) {
    core::print(getAccessor{() → core::String}(){() → core::String});
  }
}
static method main(core::List<core::String> args) → dynamic {
  core::print(#C2);
  core::print(#C1);
  core::print(null);
  core::print(new self::A::•());
  core::print(new self::B::•());
}
constants  {
  #C1 = static-tearoff self::used2
  #C2 = static-tearoff self::used1
}
