library #lib;
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

class T1 extends core::Object {
  synthetic constructor •() → self::T1
    : super core::Object::•()
    ;
}
class T2 extends core::Object {
  synthetic constructor •() → self::T2
    : super core::Object::•()
    ;
}
class A extends core::Object {
  synthetic constructor •() → self::A
    : dynamic #t1 = new self::T1::•(), dynamic #t2 = new self::T1::•(), super core::Object::•()
    ;
[@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasTearOffUses:false,methodOrSetterSelectorId:1]  set /*isLegacy*/ field2(synthesized dynamic value) → void;
}
class DeepCaller1 extends core::Object {
  synthetic constructor •() → self::DeepCaller1
    : super core::Object::•()
    ;
}
class DeepCaller2 extends core::Object {
  synthetic constructor •() → self::DeepCaller2
    : super core::Object::•()
    ;
}
[@vm.inferred-type.metadata=!]late static field core::Function unknown;
static method getDynamic() → dynamic
  return block {
    [@vm.inferred-type.metadata=!] self::unknown;
  } =>throw "Attempt to execute code removed by Dart AOT compiler (TFA)";
static method setField2([@vm.inferred-arg-type.metadata=#lib::A] self::A aa, [@vm.inferred-arg-type.metadata=#lib::T2] dynamic value) → void {
  [@vm.direct-call.metadata=#lib::A.field2] [@vm.inferred-type.metadata=!? (skip check)] aa.{self::A::field2} = value;
}
static method main(core::List<core::String> args) → dynamic {
  new self::A::•();
  new self::T1::•();
  new self::T2::•();
  block {
    new self::DeepCaller1::•();
    _in::unsafeCast<self::A>([@vm.inferred-type.metadata=!] self::getDynamic());
  } =>throw "Attempt to execute code removed by Dart AOT compiler (TFA)";
  block {
    new self::DeepCaller2::•();
    _in::unsafeCast<self::A>([@vm.inferred-type.metadata=!] self::getDynamic());
  } =>throw "Attempt to execute code removed by Dart AOT compiler (TFA)";
  self::setField2(new self::A::•(), new self::T2::•());
}
