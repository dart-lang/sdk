library #lib;
import self as self;
import "dart:core" as core;
import "dart:_internal" as _in;

class T1 extends core::Object {
}
class T2 extends core::Object {
}
abstract class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B extends self::A {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
}
abstract class C extends core::Object implements self::B /*isMixinDeclaration*/  {
}
abstract class D extends core::Object {
  synthetic constructor •() → self::D
    : super core::Object::•()
    ;
}
abstract class _E&D&C extends self::D implements self::C /*isAnonymousMixin,isEliminatedMixin*/  {
  synthetic constructor •() → self::_E&D&C
    : super self::D::•()
    ;
}
class E extends self::_E&D&C {
  synthetic constructor •() → self::E
    : super self::_E&D&C::•()
    ;
}
class Intermediate extends core::Object {
  synthetic constructor •() → self::Intermediate
    : super core::Object::•()
    ;
}
[@vm.inferred-type.metadata=!]late static field core::Function unknown;
static method getDynamic() → dynamic
  return block {
    [@vm.inferred-type.metadata=!] self::unknown;
  } =>throw "Attempt to execute code removed by Dart AOT compiler (TFA)";
static method allocateB() → dynamic {
  new self::B::•();
}
static method allocateE() → dynamic {
  new self::E::•();
}
static method main(core::List<core::String> args) → dynamic {
  block {
    new self::Intermediate::•();
    _in::unsafeCast<self::A>([@vm.inferred-type.metadata=!] self::getDynamic());
  } =>throw "Attempt to execute code removed by Dart AOT compiler (TFA)";
  self::allocateB();
  block {
    new self::Intermediate::•();
    _in::unsafeCast<self::A>([@vm.inferred-type.metadata=!] self::getDynamic());
  } =>throw "Attempt to execute code removed by Dart AOT compiler (TFA)";
  self::allocateE();
  block {
    new self::Intermediate::•();
    _in::unsafeCast<self::A>([@vm.inferred-type.metadata=!] self::getDynamic());
  } =>throw "Attempt to execute code removed by Dart AOT compiler (TFA)";
}
