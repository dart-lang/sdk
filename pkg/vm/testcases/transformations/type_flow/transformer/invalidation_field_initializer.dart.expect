library #lib;
import self as self;
import "dart:core" as core;

class T1 extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class T2 extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
abstract class A extends core::Object {
  abstract method foo() → core::Object;
}
class B extends core::Object implements self::A {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method foo() → core::Object
    return new self::T1::•();
}
class C extends core::Object implements self::A {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method foo() → core::Object
    return new self::T2::•();
}
class DeepCaller1 extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method barL1() → dynamic
    return [@vm.direct-call.metadata=#lib::DeepCaller1::barL2] this.{self::DeepCaller1::barL2}();
  method barL2() → dynamic
    return [@vm.direct-call.metadata=#lib::DeepCaller1::barL3] this.{self::DeepCaller1::barL3}();
  method barL3() → dynamic
    return [@vm.direct-call.metadata=#lib::DeepCaller1::barL4] this.{self::DeepCaller1::barL4}();
  method barL4() → dynamic
    return self::field1;
}
class D extends core::Object {
[@vm.inferred-type.metadata=!]  field core::Object field2 = [@vm.inferred-type.metadata=!] self::getValue();
  synthetic constructor •() → void
    : super core::Object::•()
    ;
}
class DeepCaller2 extends core::Object {
  synthetic constructor •() → void
    : super core::Object::•()
    ;
  method barL1([@vm.inferred-type.metadata=#lib::D] self::D dd) → dynamic
    return [@vm.direct-call.metadata=#lib::DeepCaller2::barL2] [@vm.inferred-type.metadata=!] this.{self::DeepCaller2::barL2}(dd);
  method barL2([@vm.inferred-type.metadata=#lib::D] self::D dd) → dynamic
    return [@vm.direct-call.metadata=#lib::DeepCaller2::barL3] [@vm.inferred-type.metadata=!] this.{self::DeepCaller2::barL3}(dd);
  method barL3([@vm.inferred-type.metadata=#lib::D] self::D dd) → dynamic
    return [@vm.direct-call.metadata=#lib::DeepCaller2::barL4] [@vm.inferred-type.metadata=!] this.{self::DeepCaller2::barL4}(dd);
  method barL4([@vm.inferred-type.metadata=#lib::D] self::D dd) → dynamic
    return [@vm.direct-call.metadata=#lib::D::field2] [@vm.inferred-type.metadata=!] dd.{self::D::field2};
}
[@vm.inferred-type.metadata=dart.core::Null?]static field core::Function unknown;
static field core::Object field1 = [@vm.inferred-type.metadata=!] self::getValue();
static method getDynamic() → dynamic
  return self::unknown.call();
static method getValue() → core::Object {
  self::A aa = self::getDynamic() as{TypeError} self::A;
  return [@vm.inferred-type.metadata=!] aa.{self::A::foo}();
}
static method use1([@vm.inferred-type.metadata=#lib::DeepCaller1] self::DeepCaller1 x) → dynamic
  return [@vm.direct-call.metadata=#lib::DeepCaller1::barL1] x.{self::DeepCaller1::barL1}();
static method use2([@vm.inferred-type.metadata=#lib::DeepCaller2] self::DeepCaller2 x) → dynamic
  return [@vm.direct-call.metadata=#lib::DeepCaller2::barL1] [@vm.inferred-type.metadata=!] x.{self::DeepCaller2::barL1}(new self::D::•());
static method createC() → dynamic {
  new self::C::•();
}
static method main(core::List<core::String> args) → dynamic {
  new self::B::•();
  self::use1(new self::DeepCaller1::•());
  self::use2(new self::DeepCaller2::•());
  self::createC();
}
