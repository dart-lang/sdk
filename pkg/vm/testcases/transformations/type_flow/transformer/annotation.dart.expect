library #lib;
import self as self;
import "dart:core" as core;

@#C5
typedef SomeType<contravariant T extends core::Object* = dynamic> = (core::List<T*>*) →* void;
abstract class ClassAnnotation2 extends core::Object /*hasConstConstructor*/  {
}
abstract class MethodAnnotation extends core::Object /*hasConstConstructor*/  {
[@vm.unreachable.metadata=] [@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasNonThisUses:false,hasTearOffUses:false,getterSelectorId:1]  final field core::int* x;
}
abstract class TypedefAnnotation extends core::Object /*hasConstConstructor*/  {
[@vm.unreachable.metadata=] [@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasNonThisUses:false,hasTearOffUses:false,getterSelectorId:2]  final field core::List<core::int*>* list;
}
abstract class VarAnnotation extends core::Object /*hasConstConstructor*/  {
}
abstract class ParametrizedAnnotation<T extends core::Object* = dynamic> extends core::Object /*hasConstConstructor*/  {
[@vm.unreachable.metadata=] [@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasNonThisUses:false,hasTearOffUses:false,getterSelectorId:3]  final field self::ParametrizedAnnotation::T* foo;
}
abstract class A extends core::Object {
  static method staticMethod() → void {}
}
@#C6
class B extends core::Object {
  synthetic constructor •() → self::B*
    : super core::Object::•()
    ;
[@vm.procedure-attributes.metadata=methodOrSetterCalledDynamically:false,getterCalledDynamically:false,hasThisUses:false,hasTearOffUses:false,methodOrSetterSelectorId:4,getterSelectorId:5]  @#C8
  method instanceMethod() → void {}
}
[@vm.unboxing-info.metadata=(b)->i]static method foo([@vm.inferred-type.metadata=dart.core::Null? (value: null)] (core::List<core::int*>*) →* void a) → core::int* {
  @#C9 core::int* x = 2;
  return [@vm.direct-call.metadata=dart.core::_IntegerImplementation.+] [@vm.inferred-type.metadata=int (skip check)] x.{core::num::+}(2);
}
@#C11
static method main(core::List<core::String*>* args) → dynamic {
  self::A::staticMethod();
  [@vm.direct-call.metadata=#lib::B.instanceMethod] [@vm.inferred-type.metadata=!? (skip check)] new self::B::•().{self::B::instanceMethod}();
  self::foo(null);
}
