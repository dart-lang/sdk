library #lib;
import self as self;
import "dart:typed_data" as typ;
import "dart:ffi" as ffi;
import "dart:core" as core;

import "dart:ffi";
import "dart:typed_data";


[@vm.inferred-return-type.metadata=dart.core::Null? (value: null)]
static method main() → void {
  final typ::Int8List typedData = [@vm.inferred-type.metadata=dart.typed_data::_Int8List] typ::Int8List::•(20);
  self::myNative#T(typedData);
  self::myNative#C(new ffi::_Compound::_fromTypedDataBase(typedData, [@vm.direct-call.metadata=dart.core::_IntegerImplementation.*] [@vm.inferred-type.metadata=int (skip check)] #C1.{core::num::*}(0){(core::num) → core::num}));
}

[@vm.inferred-return-type.metadata=int]
[@vm.unboxing-info.metadata=(b)->i]
@#C7
@#C9
external static method myNative#T([@vm.inferred-arg-type.metadata=dart.typed_data::_Int8List] typ::TypedData pointer) → core::int;

[@vm.inferred-return-type.metadata=int]
[@vm.unboxing-info.metadata=(b)->i]
@#C7
@#C9
external static method myNative#C([@vm.inferred-arg-type.metadata=dart.ffi::_Compound] ffi::_Compound pointer) → core::int;
constants  {
  #C1 = 1
  #C2 = "cfe:ffi:native-marker"
  #C3 = "myNative"
  #C4 = "#lib"
  #C5 = true
  #C6 = ffi::Native<(ffi::Pointer<ffi::Void>) → ffi::Int8> {symbol:#C3, assetId:#C4, isLeaf:#C5}
  #C7 = core::pragma {name:#C2, options:#C6}
  #C8 = "vm:ffi:native"
  #C9 = core::pragma {name:#C8, options:#C6}
}
