library #lib /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;
import "dart:ffi" as ffi;
import "dart:async" as asy;
import "dart:_internal" as _in;

import "dart:ffi";

class Foo extends core::Object implements ffi::Finalizable {
  synthetic constructor •() → self::Foo
    : super core::Object::•()
    ;
}
static method bar() → asy::Future<self::Foo>
  return asy::Future::value<self::Foo>(new self::Foo::•());
static method main() → void async /* futureValueType= void */ {
  {
    synthesized core::Iterator<self::Foo> :sync-for-iterator = core::_GrowableList::_literal1<self::Foo>(await self::bar()).{core::Iterable::iterator}{core::Iterator<self::Foo>};
    for (; :sync-for-iterator.{core::Iterator::moveNext}(){() → core::bool}; ) {
      final self::Foo element = :sync-for-iterator.{core::Iterator::current}{self::Foo};
      {
        core::print(element);
        _in::reachabilityFence(element);
      }
    }
  }
}
